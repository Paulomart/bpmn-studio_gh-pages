"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lintUtils = require("bpmnlint-utils");
/**
 * Rule that reports if a process contains an undefined Signal Event.
 *
 * Signal Events always need an event definition.
 */
module.exports = () => {
    function check(node, reporter) {
        const nodeIsEvent = lintUtils.is(node, 'bpmn:BoundaryEvent')
            || lintUtils.is(node, 'bpmn:EndEvent')
            || lintUtils.is(node, 'bpmn:StartEvent')
            || lintUtils.is(node, 'bpmn:IntermediateThrowEvent')
            || lintUtils.is(node, 'bpmn:IntermediateCatchEvent');
        if (nodeIsEvent) {
            const eventElement = node;
            const eventContainsNoDefinitions = eventElement.eventDefinitions === undefined;
            if (eventContainsNoDefinitions) {
                return;
            }
            const nodeIsSignalEvent = eventElement.eventDefinitions.some((eventDefinition) => {
                return lintUtils.is(eventDefinition, 'bpmn:SignalEventDefinition');
            });
            if (nodeIsSignalEvent) {
                const signalEventElement = eventElement;
                const signalEventDefinition = signalEventElement.eventDefinitions.find((eventDefinition) => {
                    return lintUtils.is(eventDefinition, 'bpmn:SignalEventDefinition');
                });
                const signalRefIsUndefined = signalEventDefinition.signalRef === undefined
                    || signalEventDefinition.signalRef === null;
                if (signalRefIsUndefined) {
                    reporter.report(node.id, 'This Signal Event is not defined.');
                }
            }
        }
    }
    return {
        check: check,
    };
};
//# sourceMappingURL=no-undefined-signal-event.js.map