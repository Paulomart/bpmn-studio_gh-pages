import { MockAttributeMap } from './attribute';
import { MockClassList } from './class-list';
import { MockEvent } from './event';
import { SerializeElementOptions } from './serialize-node';
export declare class MockNode {
    childNodes: MockNode[];
    nodeName: string;
    nodeType: number;
    nodeValue: string;
    ownerDocument: any;
    parentNode: MockNode;
    constructor(ownerDocument: any);
    appendChild(newNode: MockNode): MockNode;
    cloneNode(deep?: boolean): MockNode;
    readonly firstChild: MockNode;
    insertBefore(newNode: MockNode, referenceNode: MockNode): MockNode;
    readonly lastChild: MockNode;
    readonly nextSibling: MockNode;
    parentElement: any;
    readonly previousSibling: MockNode;
    removeChild(childNode: MockNode): MockNode;
    remove(): void;
    replaceChild(newChild: MockNode, oldChild: MockNode): MockNode;
    textContent: string;
    static ELEMENT_NODE: number;
    static TEXT_NODE: number;
    static PROCESSING_INSTRUCTION_NODE: number;
    static COMMENT_NODE: number;
    static DOCUMENT_NODE: number;
    static DOCUMENT_TYPE_NODE: number;
    static DOCUMENT_FRAGMENT_NODE: number;
}
export declare class MockElement extends MockNode {
    namespaceURI: string;
    constructor(ownerDocument: any, nodeName: string);
    addEventListener(type: string, handler: (ev?: any) => void): void;
    private _attributes;
    attributes: MockAttributeMap;
    readonly children: MockElement[];
    readonly childElementCount: number;
    className: string;
    readonly classList: MockClassList;
    click(): void;
    cloneNode(deep?: boolean): MockElement;
    closest(): void;
    dir: string;
    dispatchEvent(ev: MockEvent): boolean;
    readonly firstElementChild: MockElement;
    getAttribute(name: string): any;
    getAttributeNS(namespaceURI: string, name: string): string;
    getBoundingClientRect(): {
        bottom: number;
        height: number;
        left: number;
        right: number;
        top: number;
        width: number;
        x: number;
        y: number;
    };
    id: string;
    innerHTML: string;
    innerText: string;
    hasAttribute(name: string): boolean;
    hasAttributeNS(namespaceURI: string, name: string): boolean;
    hidden: boolean;
    lang: string;
    readonly lastElementChild: MockElement;
    matches(): void;
    readonly nextElementSibling: any;
    readonly outerHTML: string;
    readonly previousElementSibling: any;
    querySelector(selector: string): MockElement;
    querySelectorAll(selector: string): MockElement[];
    removeAttribute(name: string): void;
    removeAttributeNS(namespaceURI: string, name: string): void;
    removeEventListener(type: string, handler: any): void;
    setAttribute(name: string, value: any): void;
    setAttributeNS(namespaceURI: string, name: string, value: any): void;
    private _style;
    style: any;
    tabIndex: number;
    tagName: string;
    textContent: string;
    title: string;
    onabort(): void;
    onauxclick(): void;
    onbeforecopy(): void;
    onbeforecut(): void;
    onbeforepaste(): void;
    onblur(): void;
    oncancel(): void;
    oncanplay(): void;
    oncanplaythrough(): void;
    onchange(): void;
    onclick(): void;
    onclose(): void;
    oncontextmenu(): void;
    oncopy(): void;
    oncuechange(): void;
    oncut(): void;
    ondblclick(): void;
    ondrag(): void;
    ondragend(): void;
    ondragenter(): void;
    ondragleave(): void;
    ondragover(): void;
    ondragstart(): void;
    ondrop(): void;
    ondurationchange(): void;
    onemptied(): void;
    onended(): void;
    onerror(): void;
    onfocus(): void;
    onformdata(): void;
    onfullscreenchange(): void;
    onfullscreenerror(): void;
    ongotpointercapture(): void;
    oninput(): void;
    oninvalid(): void;
    onkeydown(): void;
    onkeypress(): void;
    onkeyup(): void;
    onload(): void;
    onloadeddata(): void;
    onloadedmetadata(): void;
    onloadstart(): void;
    onlostpointercapture(): void;
    onmousedown(): void;
    onmouseenter(): void;
    onmouseleave(): void;
    onmousemove(): void;
    onmouseout(): void;
    onmouseover(): void;
    onmouseup(): void;
    onmousewheel(): void;
    onpaste(): void;
    onpause(): void;
    onplay(): void;
    onplaying(): void;
    onpointercancel(): void;
    onpointerdown(): void;
    onpointerenter(): void;
    onpointerleave(): void;
    onpointermove(): void;
    onpointerout(): void;
    onpointerover(): void;
    onpointerup(): void;
    onprogress(): void;
    onratechange(): void;
    onreset(): void;
    onresize(): void;
    onscroll(): void;
    onsearch(): void;
    onseeked(): void;
    onseeking(): void;
    onselect(): void;
    onselectstart(): void;
    onstalled(): void;
    onsubmit(): void;
    onsuspend(): void;
    ontimeupdate(): void;
    ontoggle(): void;
    onvolumechange(): void;
    onwaiting(): void;
    onwebkitfullscreenchange(): void;
    onwebkitfullscreenerror(): void;
    onwheel(): void;
    toString(opts?: SerializeElementOptions): string;
}
