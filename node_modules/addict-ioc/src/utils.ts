export function getPropertyDescriptor(type: any, key: string): PropertyDescriptor {

  const propertyDescriptor: PropertyDescriptor = Object.getOwnPropertyDescriptor(type, key);

  if (propertyDescriptor) {
    return propertyDescriptor;
  }

  const prototype: any = Object.getPrototypeOf(type);

  if (!prototype) {
    return undefined;
  }

  return getPropertyDescriptor(prototype, key);
}

export async function executeAsExtensionHookAsync(func: any, thisContext: any, args?: any): Promise<any> {

  const isFunction: boolean = isValidFunction(func);
  if (!isFunction) {
    return;
  }

  return await func.call(thisContext, args);
}

export function executeAsExtensionHook(func: any, thisContext: any, args?: Array<any>): void {

  const isFunction: boolean = isValidFunction(func);
  if (!isFunction) {
    return;
  }

  return func.call(thisContext, args);
}

function isValidFunction(func: any): boolean {
  return func && typeof func === 'function';
}
