'use strict';

const should = require('should');

const Container = require('./../../dist/commonjs').Container;

const container = new Container();

class TestType {}
const testTypeKey = 'configurationTestKey';

describe('Type Registration Configure Test', () => {

  beforeEach(() => {
    container.clear();
  });

  it('should successfully create a configured registration with a valid configuration object', () => {

    const config = {
      test: 'this is a test',
    };

    container
      .register(testTypeKey, TestType)
      .configure(config);

    const registration = container.getRegistration(testTypeKey);

    const configSetting = registration.settings.config;

    should(configSetting).be.eql(config);
  });

  it('should successfully create a configured registration with a valid configuration string', () => {

    const config = 'some:path:to:a:config';

    container
      .register(testTypeKey, TestType)
      .configure(config);

    const registration = container.getRegistration(testTypeKey);

    const configSetting = registration.settings.config;

    should(configSetting).be.eql(config);
  });

  it('should successfully create a configured registration, even when an ususal config is passed', () => {

    const unsupportedConfig = 123456;

    // Note that this should succeed, because validation is performed during the "validateDependencies" check.
    // This is because only the ConfigProvider can know if a config is valid or not.
    // However, a registration does not have access to that provider, because that would require it to be
    // able to access the container itself.
    container
      .register(testTypeKey, TestType)
      .configure(unsupportedConfig);

    const registration = container.getRegistration(testTypeKey);

    const configSetting = registration.settings.config;

    should(configSetting).be.eql(unsupportedConfig);
  });
});
