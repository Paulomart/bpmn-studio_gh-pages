'use strict';

const should = require('should');

const Container = require('./../../dist/commonjs').Container;

const container = new Container();

describe('Type Registration With Factory Test', () => {

  const factoryKey = 'registerFactoryTest';

  const factory = (something) => {
    return {
      logIt: () => {
        console.log(something);
      },
    };
  };

  beforeEach(() => {
    container.clear();
  });

  it('should register a factory function under the given key', () => {

    container.registerFactory(factoryKey, factory);

    const registration = container.getRegistration(factoryKey);

    should(registration).not.be.null();
    should(registration.settings.key).be.equal(factoryKey);
    should(registration.settings.isFactory).be.equal(true);
  });

  it('should throw an error, if the key for the factory is not a string, but a function', () => {

    try {
      container.registerFactory(() => 'should not work', factory); //eslint-disable-line
    } catch (error) {
      should.exist(error);
      const expectedErrorMessage = /key must be a string/i;
      should(error.message).be.match(expectedErrorMessage);
    }
  });

  it('should throw an error, if the key for the factory is not a string, but an object', () => {

    try {
      container.registerFactory({
        bla: 'bla'
      }, factory);
    } catch (error) {
      should.exist(error);
      const expectedErrorMessage = /key must be a string/i;
      should(error.message).be.match(expectedErrorMessage);
    }
  });

  it('should throw an error, if the key for the factory is not a string, but a number', () => {

    try {
      container.registerFactory(666, factory);
    } catch (error) {
      should.exist(error);
      const expectedErrorMessage = /key must be a string/i;
      should(error.message).be.match(expectedErrorMessage);
    }
  });

  it('should throw an error, when trying to register something that is not a function through the "registerFactory" method', () => {

    try {
      const secondTypeKey = 'test';

      const SecondType = 666;

      container.registerFactory(secondTypeKey, SecondType);
      should.fail('result', 'error', 'This should have failed, because a number is not a function!');
    } catch (error) {
      should.exist(error);
      const expectedErrorMessage = /must pass a function to a factory registration/i;
      should(error.message).be.match(expectedErrorMessage);
    }
  });
});