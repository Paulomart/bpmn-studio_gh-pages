'use strict';

const should = require('should');

const Container = require('./../../dist/commonjs').Container;

const container = new Container();

describe('Type Registration with Overwrite Test', () => {

  class PrimaryTestType {}
  class SecondaryTestType {}

  const primaryTestTypeKey = 'primaryOverwriteTestKey';
  const secondaryTestTypeKey = 'secondaryOverwriteTestKey';

  beforeEach(() => {
    container.clear();
  });

  it('should overwrite the registered type, if the key of the dependency is declared as an overwrite key', () => {

    container.register(secondaryTestTypeKey, SecondaryTestType);

    container
      .register(primaryTestTypeKey, PrimaryTestType)
      .dependencies(secondaryTestTypeKey)
      .overwrite(primaryTestTypeKey, secondaryTestTypeKey);

    const registration = container.getRegistration(primaryTestTypeKey);

    const overwriteSetting = registration.settings.overwrittenKeys;

    const expectedSetting = {
      primaryOverwriteTestKey: 'secondaryOverwriteTestKey',
    };

    should(overwriteSetting).be.eql(expectedSetting);
  });

  it('should not throw an error, if no dependency for the overwritten key is declared ', () => {

    // Note that validating this is handled during "validateDependencies".
    container.register(secondaryTestTypeKey, SecondaryTestType);

    container
      .register(primaryTestTypeKey, PrimaryTestType)
      .overwrite(primaryTestTypeKey, secondaryTestTypeKey);

    const registration = container.getRegistration(primaryTestTypeKey);

    const overwriteSetting = registration.settings.overwrittenKeys;

    const expectedSetting = {
      primaryOverwriteTestKey: 'secondaryOverwriteTestKey',
    };

    should(overwriteSetting).be.eql(expectedSetting);
  });
});
