'use strict';

const should = require('should');

const Container = require('./../../dist/commonjs').Container;

const container = new Container();

describe('Type Registration Register Test', () => {

  class TestType {}
  const testTypeKey = 'registerTest';

  beforeEach(() => {
    container.clear();
  });

  it('should register the given type under the given key', () => {

    container.register(testTypeKey, TestType);

    const registration = container.getRegistration(testTypeKey);

    should(registration).not.be.null();
    should(registration.settings.key).be.equal(testTypeKey);
    should(registration.settings.type).be.equal(TestType);
  });

  it('should throw an error, if no key is given', () => {

    try {
      container.register(undefined, TestType);
      should.fail('test', 'error', 'This should have failed, because no key was provided!');
    } catch (error) {
      should.exist(error);
      const expectedErrorMessage = /key must be a string/i;
      should(error.message).be.match(expectedErrorMessage);
    }
  });

  it('should throw an error, if the key for type is not a string, but a function', () => {

    try {
      container.register(() => 'should not work', TestType); //eslint-disable-line
      should.fail('test', 'error', 'This should have failed, because the key is a function!');
    } catch (error) {
      should.exist(error);
      const expectedErrorMessage = /key must be a string/i;
      should(error.message).be.match(expectedErrorMessage);
    }
  });

  it('should throw an error, if the key for type is not a string, but an object', () => {

    try {
      container.register(TestType, TestType);
      should.fail('test', 'error', 'This should have failed, because the key is an object!');
    } catch (error) {
      should.exist(error);
      const expectedErrorMessage = /key must be a string/i;
      should(error.message).be.match(expectedErrorMessage);
    }
  });

  it('should throw an error, if the key for type is not a string, but a number', () => {

    try {
      container.register(123, TestType);
      should.fail('test', 'error', 'This should have failed, because the key is a number!');
    } catch (error) {
      should.exist(error);
      const expectedErrorMessage = /key must be a string/i;
      should(error.message).be.match(expectedErrorMessage);
    }
  });

  it('should throw an error, if the registration type is not set', () => {

    try {
      container.register(testTypeKey, null);
      should.fail('test', 'error', 'This should have failed, because no type was provided!');
    } catch (error) {
      should.exist(error);
      const expectedErrorMessage = /type.*?is undefined/i;
      should(error.message).be.match(expectedErrorMessage);
    }
  });

});