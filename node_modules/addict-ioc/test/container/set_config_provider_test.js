'use strict';

const should = require('should');

const Container = require('./../../dist/commonjs').Container;

const container = new Container();

describe('Dependency Injection Container Set Config Provider Test', () => {

  class PrimaryTestType {

    get config() {
      return this._config;
    }
    set config(value) {
      this._config = value;
    }

  }

  beforeEach(() => {
    container.clear();
  });

  it('should set a valid config provider', () => {
    const testConfig = {
      test: '1',
    };
    const testConfigProvider = () => {
      return testConfig;
    };

    container.settings.resolver = testConfigProvider;

    const returnedConfig = container.settings.resolver();

    should(returnedConfig).be.eql(testConfig);
  });

  it('should throw an error, when an invalid config provider is assigned to the container', () => {

    const testTypeKey = 'key';
    const invalidConfigProvider = {
      something: 'false',
    };

    try {
      container.settings.resolver = invalidConfigProvider;

      container
        .register(testTypeKey, PrimaryTestType)
        .configure(() => 'randomconfigstring'); //eslint-disable-line

      container.resolve(testTypeKey);
    } catch (error) {
      should.exist(error);
      const expectedErrorMessage = /resolver.resolveConfig is not a function/i;
      should(error.message).be.match(expectedErrorMessage);
    }
  });
});
