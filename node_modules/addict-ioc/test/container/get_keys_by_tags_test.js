'use strict';

const should = require('should'); //eslint-disable-line

const Container = require('./../../dist/commonjs').Container;

const container = new Container();

class PrimaryTestType {}
class SecondaryTestType {}

const primaryTestTypeKey = 'first';
const secondaryTestTypeKey = 'second';

describe('Dependency Injection Container Get Keys By Tags Test', () => {

  beforeEach(() => {
    container.clear();
  });

  it('should get the registration keys that have the specified tag', () => {

    const testTag = 'tag';

    container
      .register(primaryTestTypeKey, PrimaryTestType)
      .tags(testTag);

    const foundKeys = container.getKeysByTags(testTag);

    should(foundKeys.length).be.equal(1);
    should(foundKeys[0]).be.equal(primaryTestTypeKey);
  });

  it('should get only the registration keys that have all of the specified tags', () => {

    const testTag = 'tag';
    const testTag2 = 'tag2';

    container
      .register(primaryTestTypeKey, PrimaryTestType)
      .tags(testTag, testTag2);

    container
      .register(secondaryTestTypeKey, SecondaryTestType)
      .tags(testTag);

    const foundKeys = container.getKeysByTags(testTag, testTag2);
    const foundKeysForSingleTag = container.getKeysByTags(testTag);

    should(foundKeys.length).be.equal(1);
    should(foundKeys).be.containEql(primaryTestTypeKey);
    should(foundKeysForSingleTag.length).be.equal(2);
    should(foundKeysForSingleTag).be.containEql(primaryTestTypeKey);
    should(foundKeysForSingleTag).be.containEql(secondaryTestTypeKey);
  });

  it('should not get any registrations that do not have the specified tag', () => {

    const testTag = 'tag';
    const testTag2 = 'tag2';

    container
      .register(primaryTestTypeKey, PrimaryTestType)
      .tags(testTag);

    const foundKeys = container.getKeysByTags(testTag2);

    should(foundKeys.length).be.equal(0);
  });

  it('should get no registrations with at least one missing tag', () => {

    const testTag = 'tag';
    const testTag2 = 'tag2';
    const testTag3 = 'tag3';

    container
      .register(primaryTestTypeKey, PrimaryTestType)
      .tags(testTag);

    container
      .register(secondaryTestTypeKey, PrimaryTestType)
      .tags(testTag3);

    const foundKeys = container.getKeysByTags(testTag, testTag2);

    should(foundKeys.length).be.equal(0);
  });

  it('should get all registrations, whose tags have a specific value (single tag)', () => {

    const testTag = 'tag';
    const testTagValue = 'testValue';

    container
      .register(primaryTestTypeKey, PrimaryTestType)
      .setTag(testTag, testTagValue);

    const tagValueQuery = {
      [testTag]: testTagValue,
    };

    const foundKeys = container.getKeysByTags(tagValueQuery);

    should(foundKeys.length).be.equal(1);
    should(foundKeys).has.containEql(primaryTestTypeKey);
  });

  it('should get all registrations, whose tags have a specific value (multiple tags)', () => {

    const testTag = 'tag';
    const testTag2 = 'tag2';
    const testTagValue = 'testValue';
    const testTag2Value = 'testValue2';

    container
      .register(primaryTestTypeKey, PrimaryTestType)
      .setTag(testTag, testTagValue)
      .setTag(testTag2, testTag2Value);

    const attributeQuery = {
      [testTag]: testTagValue,
      [testTag2]: testTag2Value,
    };

    const foundKeys = container.getKeysByTags(attributeQuery);

    should(foundKeys.length).be.equal(1);
    should(foundKeys).has.containEql(primaryTestTypeKey);
  });

  it('should filter out registrations, whose tags have no values (single tag)', () => {

    const testTag = 'tag';
    const testTagValue = 'testValue';

    container.register(primaryTestTypeKey, PrimaryTestType)
      .setTag(testTag, '');

    const attributeQuery = {
      [testTag]: testTagValue,
    };

    const foundKeys = container.getKeysByTags(attributeQuery);

    should(foundKeys.length).be.equal(0);
  });

  it('should filter out registrations, whose tags have no values (multiple tags)', () => {

    const testTag = 'tag';
    const testTagValue = 'testValue';
    const testTag2 = 'tag2';
    const testTag2Value = 'testValue2';

    container
      .register(primaryTestTypeKey, PrimaryTestType)
      .setTag(testTag, testTagValue)
      .setTag(testTag2, testTag2Value);

    container
      .register(secondaryTestTypeKey, PrimaryTestType)
      .setTag(testTag, testTagValue)
      .setTag(testTag2, '');

    const attributeQuery = {
      [testTag]: testTagValue,
      [testTag2]: testTag2Value,
    };

    const foundKeys = container.getKeysByTags(attributeQuery);

    should(foundKeys.length).be.equal(1);
  });

});
