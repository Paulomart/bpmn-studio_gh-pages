'use strict';

const should = require('should');

const Container = require('./../../../dist/commonjs').Container;

const container = new Container();

describe('Dependency Injection Container Resolve Factory Function Test', () => {

  beforeEach(() => {
    container.clear();
  });

  it('should resolve an instance through the registered factory', () => {

    const factory = () => {
      return {
        test: () => {},
      };
    };
    const factoryKey = 'factory';

    const expectedInstance = factory();

    container.registerFactory(factoryKey, factory);

    const resolvedInstance = container.resolve(factoryKey);

    should(resolvedInstance).be.eql(expectedInstance);
  });

  it('should resolve an instance through the registered factory, with a single given injection argument.', () => {

    const factory = (injectionArgs) => {
      return {
        test: () => { return injectionArgs; },
      };
    };
    const factoryKey = 'factory';

    const expectedInstance = factory();

    container.registerFactory(factoryKey, factory);

    const sampleInjectionArgs = 'hello';

    const resolvedInstance = container.resolve(factoryKey, sampleInjectionArgs);

    should(resolvedInstance).be.eql(expectedInstance);

    const injectedArgs = resolvedInstance.test();

    should(injectedArgs).be.eql(sampleInjectionArgs);
  });

  it('should resolve an instance through the registered factory, with multiple given injection arguments.', () => {

    const factory = (injectedArg1, injectedArg2) => {
      return {
        test: () => { return `${injectedArg1} ${injectedArg2}`; },
      };
    };
    const factoryKey = 'factory';

    const expectedInstance = factory();

    container.registerFactory(factoryKey, factory);

    const sampleInjectionArgs = ['igot', 'younose'];

    const resolvedInstance = container.resolve(factoryKey, sampleInjectionArgs);

    should(resolvedInstance).be.eql(expectedInstance);

    const injectedArgs = resolvedInstance.test();
    const expectedResult = sampleInjectionArgs.join(' ');

    should(injectedArgs).be.eql(expectedResult);
  });

  it('should resolve an instance through the registered factory function, injecting the registered dependencies into the specified property', () => {

    class TestType {

      set config(value) {
        this._config = value;
      }
      get config() {
        return this._config;
      }

    }

    const factory = (injectedDependency) => {
      return {
        test: () => {
          return injectedDependency;
        },
        secondTest: (expectedInjectedDependency) => {
          this.injectedDependency = expectedInjectedDependency;
        },
        thirdTest: () => {
          return this.injectedDependency;
        },
      };
    };

    const testTypeKey = 'testType';
    const factoryKey = 'factory';

    container.register(testTypeKey, TestType);

    container
      .registerFactory(factoryKey, factory)
      .dependencies(testTypeKey)
      .injectInto('secondTest');

    const resolvedInstance = container.resolve(factoryKey);

    const injectedParam = resolvedInstance.test();
    should.not.exist(injectedParam);

    const realInjectedParam = resolvedInstance.thirdTest();
    should.exist(realInjectedParam);
    should(realInjectedParam).be.instanceOf(TestType);
  });
});
