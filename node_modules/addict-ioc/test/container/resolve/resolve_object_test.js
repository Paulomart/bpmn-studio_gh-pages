'use strict';

const should = require('should');

const Container = require('./../../../dist/commonjs').Container;

const container = new Container();

describe('Dependency Injection Container Resolve Object Test', () => {

  beforeEach(() => {
    container.clear();
  });

  it('should resolve a registered object', () => {

    const testObjectKey = 'sampleObject';
    const testValue = {
      property: 'test',
    };

    container.registerObject(testObjectKey, testValue);

    const resolvedObject = container.resolve(testObjectKey);

    should(resolvedObject).be.eql(testValue);
  });

  it('should resolve a registered string', () => {

    const testObjectKey = 'sampleObject';
    const testValue = 'test';

    container.registerObject(testObjectKey, testValue);

    const resolvedObject = container.resolve(testObjectKey);

    should(resolvedObject).be.eql(testValue);
  });

  it('should resolve a registered number', () => {

    const testObjectKey = 'sampleObject';
    const testValue = 666;

    container.registerObject(testObjectKey, testValue);

    const resolvedObject = container.resolve(testObjectKey);

    should(resolvedObject).be.eql(testValue);
  });

  it('should resolve a registered function', () => {

    const testObjectKey = 'sampleObject';
    const testValue = () => { return 'hello'; };

    container.registerObject(testObjectKey, testValue);

    const resolvedObject = container.resolve(testObjectKey);

    should(resolvedObject).be.eql(testValue);
  });

  it('should resolve a registered type', () => {

    const testObjectKey = 'sampleObject';
    class TestType {}

    container.registerObject(testObjectKey, TestType);

    const resolvedObject = container.resolve(testObjectKey);

    should(resolvedObject).be.eql(TestType);
  });

  it('should ignore a "singleton" declaration when resolving a registered object', () => {

    const testObjectKey = 'sampleObject';
    const testValue = {
      property: 'test',
    };

    container
      .registerObject(testObjectKey, testValue)
      .singleton();

    // Note: There is no 100% reliable way to test this.
    // We can only check if the singleton declaration would break the resolving process.
    const firstResolve = container.resolve(testObjectKey);

    should(firstResolve).be.eql(testValue);

    const secondResolve = container.resolve(testObjectKey);

    should(secondResolve).be.eql(firstResolve);
  });

});
