define(["require", "exports", "loggerhythm", "@essential-projects/errors_ts"], function (require, exports, loggerhythm_1, errors_ts_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const logger = loggerhythm_1.Logger.createLogger('processengine:consumer_api:resolve_identity_middleware');
    function createResolveIdentityMiddleware(identityService) {
        return async (request, response, next) => {
            const bearerToken = request.get('authorization');
            if (request.url === '/swagger') {
                return next();
            }
            if (!bearerToken) {
                throw new errors_ts_1.UnauthorizedError('No auth token provided!');
            }
            // Multiple authorization header values are not supported. So throw an error, if this happens.
            // Background: https://github.com/process-engine/process_engine_runtime/issues/396
            const splitHeaderValues = bearerToken.split(',');
            if (splitHeaderValues.length > 1) {
                logger.error('Detected multiple values for the authorization header!', splitHeaderValues);
                throw new errors_ts_1.BadRequestError('Detected multiple values for the authorization header!');
            }
            const authToken = bearerToken.substr('Bearer '.length);
            const resolvedIdentity = await identityService.getIdentity(authToken);
            request.identity = resolvedIdentity;
            return next();
        };
    }
    exports.createResolveIdentityMiddleware = createResolveIdentityMiddleware;
});
//# sourceMappingURL=resolve_identity_middleware.js.map