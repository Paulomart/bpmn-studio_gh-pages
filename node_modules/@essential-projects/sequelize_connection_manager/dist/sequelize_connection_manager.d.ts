import { Sequelize, SequelizeOptions } from 'sequelize-typescript';
/**
 * Creates, manages and destroys connections to Sequelize based databases.
 */
export declare class SequelizeConnectionManager {
    private connections;
    /**
     * Returns a Sequelize connection for the given configuration.
     *
     * @async
     * @param  config          Contains the settings with which to establish a
     *                         database connection.
     *                         Required parameters are host, port, database,
     *                         dialect, username and password.
     * @param  config.host     The name of the host where the database is located.
     * @param  config.port     The port by which to connect to the host.
     * @param  config.dialect  The type of database to which to connect
     *                         (postgres, sqlite, mysql, etc).
     * @param  config.database The name of the database to connect to.
     * @param  config.username The username with which to connect to the database.
     * @param  config.password The password with which to connect to the database.
     * @return                 The connection for the passed configuration.
     */
    getConnection(config: SequelizeOptions): Promise<Sequelize>;
    /**
     *
     * Destroys a Sequelize connection based on the given config.
     *
     * @async
     * @param {Object} config Contains the settings that describe the Sequelize
     *                        connection to destroy.
     */
    destroyConnection(config: SequelizeOptions): Promise<void>;
    /**
     * Generates a hash from config settings marking a unique connection.
     *
     * @param  dialect  The database dialect (sqlite, postgres, etc).
     * @param  database The name of the database to connect to.
     * @param  username The username with which to connect to the database.
     * @param  password The password with which to connect to the database.
     * @return          The generated hash.
     */
    private getHash;
}
