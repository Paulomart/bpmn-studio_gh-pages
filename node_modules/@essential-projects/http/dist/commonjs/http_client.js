"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable no-param-reassign */
const EssentialProjectErrors = require("@essential-projects/errors_ts");
const popsicle = require("popsicle");
class HttpClient {
    constructor() {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.config = undefined;
        this.httpSuccessResponseCode = 200;
        this.httpRedirectResponseCode = 300;
    }
    async get(url, options) {
        const requestOptions = this.buildRequestOptions('GET', url, options);
        const response = await popsicle.request(requestOptions);
        const parsedResponse = this.evaluateResponse(response);
        return parsedResponse;
    }
    async post(url, data, options) {
        const requestOptions = this.buildRequestOptions('POST', url, options);
        requestOptions.body = data;
        const response = await popsicle.request(requestOptions);
        const parsedResponse = this.evaluateResponse(response);
        return parsedResponse;
    }
    async put(url, data, options) {
        const requestOptions = this.buildRequestOptions('PUT', url, options);
        requestOptions.body = data;
        const response = await popsicle.request(requestOptions);
        const parsedResponse = this.evaluateResponse(response);
        return parsedResponse;
    }
    async delete(url, options) {
        const requestOptions = this.buildRequestOptions('DELETE', url, options);
        const response = await popsicle.request(requestOptions);
        const parsedResponse = this.evaluateResponse(response);
        return parsedResponse;
    }
    buildRequestOptions(method, url, options) {
        const baseUrl = this.config && this.config.url ? `${this.config.url}/` : '';
        const requestOptions = {
            method: method,
            url: `${baseUrl}${url}`,
            headers: {
                'Content-Type': 'application/json',
            },
        };
        if (options) {
            Object.assign(requestOptions, options);
        }
        if (requestOptions.query) {
            this.deleteEmptyOptions(requestOptions.query);
        }
        return requestOptions;
    }
    deleteEmptyOptions(options) {
        const propertyKeys = Object.keys(options);
        propertyKeys.forEach((attributeKey) => {
            const value = options[attributeKey];
            if (!value) {
                delete options[attributeKey];
            }
            if (Array.isArray(value) && value.length === 0) {
                delete options[attributeKey];
            }
        });
    }
    evaluateResponse(response) {
        if (this.responseIsAnError(response)) {
            this.createAndThrowEssentialProjectsError(response);
        }
        const parsedResponse = {
            result: this.parseResponseBody(response.body),
            status: response.status,
        };
        return parsedResponse;
    }
    responseIsAnError(response) {
        return response.status < this.httpSuccessResponseCode || response.status >= this.httpRedirectResponseCode;
    }
    createAndThrowEssentialProjectsError(response) {
        const responseStatusCode = response.status;
        const errorName = EssentialProjectErrors.ErrorCodes[responseStatusCode];
        if (!this.isEssentialProjectsError(errorName)) {
            throw new Error(response.body);
        }
        throw new EssentialProjectErrors[errorName](response.body);
    }
    isEssentialProjectsError(errorName) {
        return errorName in EssentialProjectErrors;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    parseResponseBody(result) {
        // NOTE: For whatever reason, every response.body received by popsicle is a string,
        // even in a response header "Content-Type application/json" is set, or if the response body does not exist.
        // To get around this, we have to cast the result manually.
        try {
            return JSON.parse(result);
        }
        catch (error) {
            return result;
        }
    }
}
exports.HttpClient = HttpClient;
//# sourceMappingURL=http_client.js.map