import { Container, IInstanceWrapper } from 'addict-ioc';
export interface IExtension {
    name?: string;
    start(): Promise<void>;
    stop(): Promise<void>;
}
export declare class ExtensionBootstrapper {
    readonly extensionDiscoveryTag: string;
    readonly extensionInstances: Array<IExtension>;
    protected container: Container<IInstanceWrapper<any>>;
    constructor(container: Container<IInstanceWrapper<any>>, customExtensionDiscoveryTag: string);
    protected registerInstanceToIocContainer(instance: IExtension): void;
    start(): Promise<void>;
    stop(): Promise<void>;
    protected startExtensions(): Promise<Array<void>>;
    protected startExtension(instance: IExtension): Promise<void>;
    protected stopExtensions(): Promise<void>;
    protected stopExtension(instance: IExtension): Promise<void>;
    protected disposeByTags(): Promise<void>;
    protected discoverExtensions(): Promise<Array<IExtension>>;
    private invokeAsPromiseIfPossible;
}
