"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const package_version_1 = require("./package_version");
const git_helpers_1 = require("./git_helpers");
const git_1 = require("../git/git");
const increment_version_1 = require("./increment_version");
function getPartiallySuccessfulBuildVersion() {
    return getSuspectedPartiallySuccessfulBuildVersion();
}
exports.getPartiallySuccessfulBuildVersion = getPartiallySuccessfulBuildVersion;
function isRetryRunForPartiallySuccessfulBuild() {
    const latestVersion = getSuspectedPartiallySuccessfulBuildVersion();
    const latestVersionTag = git_helpers_1.getVersionTag(latestVersion);
    const latestVersionTagAlreadyExists = git_1.isExistingTag(latestVersionTag);
    return latestVersionTagAlreadyExists && currentCommitIsCommitBeforeTag(latestVersionTag);
}
exports.isRetryRunForPartiallySuccessfulBuild = isRetryRunForPartiallySuccessfulBuild;
function isRedundantRunTriggeredBySystemUserPush() {
    const currentVersionTag = package_version_1.getPackageVersionTag();
    const nextVersion = git_helpers_1.getNextVersion();
    const nextVersionTag = git_helpers_1.getVersionTag(nextVersion);
    const currentVersionReleaseChannel = getReleaseChannelFromTagOrVersion(currentVersionTag);
    const nextVersionReleaseChannel = getReleaseChannelFromTagOrVersion(nextVersionTag);
    const isSameReleaseChannel = currentVersionReleaseChannel === nextVersionReleaseChannel;
    const result = isSameReleaseChannel && currentCommitIsTag(currentVersionTag);
    return result;
}
exports.isRedundantRunTriggeredBySystemUserPush = isRedundantRunTriggeredBySystemUserPush;
function getSuspectedPartiallySuccessfulBuildVersion() {
    const packageVersion = package_version_1.getPackageVersion();
    const branchName = git_1.getGitBranch();
    const gitTagList = git_1.getGitTagList();
    const latestVersion = increment_version_1.getExpectedLatestVersion(packageVersion, branchName, gitTagList);
    return latestVersion;
}
function currentCommitIsCommitBeforeTag(tag) {
    return currentCommitIsTag(`${tag}^`);
}
function currentCommitIsTag(tag) {
    const isParentCommit = git_1.getGitCommitSha1('HEAD') === git_1.getGitCommitSha1(tag);
    return isParentCommit;
}
function getReleaseChannelFromTagOrVersion(tagNameOrVersion) {
    const matched = tagNameOrVersion.match(/^v?\d+\.\d+\.\d+-([^.]+)/);
    return matched == null ? null : matched[0];
}
//# sourceMappingURL=retry_run.js.map