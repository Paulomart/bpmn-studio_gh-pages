"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const git_1 = require("../git/git");
const package_version_1 = require("./package_version");
const increment_version_1 = require("./increment_version");
const previous_stable_version_1 = require("./previous_stable_version");
function getNextVersion() {
    const packageVersion = package_version_1.getPackageVersion();
    const branchName = git_1.getGitBranch();
    const gitTagList = git_1.getGitTagList();
    const incrementedVersion = increment_version_1.incrementVersion(packageVersion, branchName, gitTagList);
    return incrementedVersion || getPreVersionForGitCommit(packageVersion, branchName, git_1.getGitCommitSha1());
}
exports.getNextVersion = getNextVersion;
function getPreVersionForGitCommit(packageVersion, branchName, ref) {
    const baseVersion = packageVersion.split('-')[0];
    const branchPrefix = branchName.split('/')[0];
    const refShort = ref.slice(0, 6);
    const suffix = getRandomSuffix();
    return `${baseVersion}-${branchPrefix}-${refShort}-${suffix}`;
}
exports.getPreVersionForGitCommit = getPreVersionForGitCommit;
/**
 * Returns the version tag fora given `version`.
 */
function getVersionTag(version) {
    return `v${version}`;
}
exports.getVersionTag = getVersionTag;
/**
 * Returns the "prev" version according to the rules described in `run`.
 */
function getPrevVersion() {
    const packageVersion = package_version_1.getPackageVersion();
    const gitTagList = git_1.getGitTagList();
    return previous_stable_version_1.previousStableVersion(packageVersion, gitTagList);
}
exports.getPrevVersion = getPrevVersion;
/**
 * Returns the "previous" version tag according to the rules described in `run`.
 */
function getPrevVersionTag() {
    return `v${getPrevVersion()}`;
}
exports.getPrevVersionTag = getPrevVersionTag;
function getRandomSuffix() {
    return Date.now().toString(36);
}
//# sourceMappingURL=git_helpers.js.map