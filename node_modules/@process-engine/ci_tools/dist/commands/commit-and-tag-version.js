"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const yargsParser = require("yargs-parser");
const chalk_1 = require("chalk");
const create_changelog_1 = require("./internal/create-changelog");
const git_1 = require("../git/git");
const package_version_1 = require("../versions/package_version");
const git_helpers_1 = require("../versions/git_helpers");
const setup_git_and_npm_connections_1 = require("./internal/setup-git-and-npm-connections");
const shell_1 = require("../cli/shell");
const retry_run_1 = require("../versions/retry_run");
const printMultiLineString_1 = require("../cli/printMultiLineString");
const COMMAND_NAME = 'commit-and-tag-version';
const BADGE = `[${COMMAND_NAME}]\t`;
const DOC = `
Commits, tags and pushes the current version (when on one of the applicable branches).
`;
// DOC: see above
async function run(...args) {
    const argv = yargsParser(args, { alias: { help: ['h'] } });
    const isDryRun = argv.dry === true;
    const isForced = process.env.CI_TOOLS_FORCE_PUBLISH === 'true' || argv.force === true;
    setup_git_and_npm_connections_1.setupGit();
    printInfo(isDryRun, isForced);
    if (retry_run_1.isRedundantRunTriggeredBySystemUserPush()) {
        const currentVersionTag = package_version_1.getPackageVersionTag();
        console.error(chalk_1.default.yellow(`${BADGE}Current commit is tagged with "${currentVersionTag}".`));
        console.error(chalk_1.default.yellowBright(`${BADGE}Nothing to do here, since this is the current package version!`));
        process.exit(0);
    }
    if (retry_run_1.isRetryRunForPartiallySuccessfulBuild()) {
        console.error(chalk_1.default.yellow(`${BADGE}This seems to be a retry run for a partially successful build.`));
        console.error(chalk_1.default.yellowBright(`${BADGE}Nothing to do here!`));
        process.exit(0);
    }
    annotatedSh('git config user.name');
    annotatedSh('git config user.email');
    const packageVersion = package_version_1.getPackageVersion();
    const changelogText = await create_changelog_1.getChangelogText(git_helpers_1.getPrevVersionTag());
    const commitSuccessful = pushCommitAndTagCurrentVersion(packageVersion, changelogText);
    if (commitSuccessful) {
        console.log(chalk_1.default.greenBright(`${BADGE}Commited package.json with version ${packageVersion} and tagged that commit as "v${packageVersion}"`));
    }
    return true;
}
exports.run = run;
function getShortDoc() {
    return DOC.trim().split('\n')[0];
}
exports.getShortDoc = getShortDoc;
function printHelp() {
    console.log(`Usage: ci_tools ${COMMAND_NAME} <package-pattern> [<package-pattern>...] [--dry] [--force]`);
    console.log('');
    console.log(DOC.trim());
}
exports.printHelp = printHelp;
function annotatedSh(cmd) {
    console.log(`${BADGE}|>>> ${cmd}`);
    const output = shell_1.sh(cmd);
    printMultiLineString_1.printMultiLineString(output, `${BADGE}| `);
    return output;
}
function printInfo(isDryRun, isForced) {
    const packageVersion = package_version_1.getPackageVersion();
    const packageVersionTag = package_version_1.getPackageVersionTag();
    const branchName = git_1.getGitBranch();
    console.log(`${BADGE}isDryRun:`, isDryRun);
    console.log(`${BADGE}isForced:`, isForced);
    console.log('');
    console.log(`${BADGE}packageVersion:`, packageVersion);
    console.log(`${BADGE}packageVersionTag:`, packageVersionTag);
    console.log(`${BADGE}branchName:`, branchName);
    console.log('');
}
function pushCommitAndTagCurrentVersion(currentVersion, changelogText) {
    const branchName = git_1.getGitBranch();
    const currentVersionTag = `v${currentVersion}`;
    shell_1.sh(`git checkout ${branchName}`);
    git_1.gitAdd('package.json');
    git_1.gitAdd('package-lock.json');
    shell_1.sh('git status');
    git_1.gitCommit(`Release ${currentVersionTag}\n\n${changelogText}\n\n[skip ci]`);
    git_1.gitTag(currentVersionTag);
    git_1.gitPush('origin', branchName);
    git_1.gitPushTags();
    // TODO: we should check if these were successful!
    return true;
}
//# sourceMappingURL=commit-and-tag-version.js.map