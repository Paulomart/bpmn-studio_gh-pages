"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const node_fetch_1 = require("node-fetch");
const moment = require("moment");
const fs_1 = require("fs");
const pull_requests_1 = require("../../github/pull_requests");
const git_1 = require("../../git/git");
const git_helpers_1 = require("../../versions/git_helpers");
const package_version_1 = require("../../versions/package_version");
const COMMIT_API_URI = git_1.getCurrentApiBaseUrlWithAuth('/commits/:commit_sha');
const BADGE = '[create-changelog-announcement]\t';
const MERGED_PULL_REQUEST_LENGTH_THRESHOLD = 100;
// two weeks for feature-freeze period plus one week buffer for late releases
const CONSIDER_PULL_REQUESTS_WEEKS_BACK = 3;
/**
 * Creates an announcement based on data available in Git and GitHub:
 *
 * - Git: latest commits and tags
 * - GitHub: PRs
 */
async function getReleaseAnnouncement() {
    const startRef = git_helpers_1.getPrevVersionTag();
    const apiResponse = await getCommitFromApi(startRef);
    if (apiResponse.commit === undefined) {
        console.error(chalk_1.default.red(`${BADGE}${apiResponse.message}`));
        process.exit(3);
    }
    const startCommitDate = apiResponse.commit.committer.date;
    const startDate = moment(startCommitDate)
        .subtract(CONSIDER_PULL_REQUESTS_WEEKS_BACK, 'weeks')
        .toISOString();
    const endRef = 'HEAD';
    const nextVersion = package_version_1.getPackageVersion();
    if (nextVersion == null) {
        console.error(chalk_1.default.red(`${BADGE}Could not determine nextVersion!`));
        process.exit(3);
    }
    const nextVersionTag = git_helpers_1.getVersionTag(nextVersion);
    printInfo(startRef, startDate, endRef, nextVersion, nextVersionTag);
    const mergedPullRequestsSince = await pull_requests_1.getMergedPullRequests(startDate);
    const mergedPullRequests = filterPullRequestsForBranch(mergedPullRequestsSince, '', startRef, startDate);
    if (mergedPullRequests.length >= MERGED_PULL_REQUEST_LENGTH_THRESHOLD) {
        console.error(chalk_1.default.red(`${BADGE}Sanity check failed!`));
        console.error(chalk_1.default.red(`${BADGE}Found an unexpectedly high number of merged pull requests:`));
        console.error(chalk_1.default.red(`${BADGE}${mergedPullRequests.length} (threshold is ${MERGED_PULL_REQUEST_LENGTH_THRESHOLD})`));
        process.exit(2);
    }
    const mergedPullRequestsText = mergedPullRequests
        .map((pr) => {
        const title = ensureSpaceAfterLeadingEmoji(pr.title);
        return `- ${title}`;
    })
        .join('\n');
    const productName = getPackageName();
    const changelogText = `
*${productName} ${nextVersionTag} was released!*

The new version includes the following changes:

${mergedPullRequestsText}

*For a more detailed changelog have a look at:* http://github.com/${git_1.getCurrentRepoNameWithOwner()}/releases/tag/${nextVersionTag}
  `
        .replace('`', "'")
        .trim();
    return changelogText;
}
exports.getReleaseAnnouncement = getReleaseAnnouncement;
async function getCommitFromApi(ref) {
    const url = COMMIT_API_URI.replace(':commit_sha', ref);
    const response = await node_fetch_1.default(url);
    return response.json();
}
function getPackageName() {
    const content = fs_1.readFileSync('package.json').toString();
    const json = JSON.parse(content);
    return json.name;
}
function printInfo(startRef, startDate, endRef, nextVersion, nextVersionTag) {
    console.log(`${BADGE}startRef:`, startRef);
    console.log(`${BADGE}startDate:`, startDate);
    console.log(`${BADGE}endRef:`, endRef);
    console.log(`${BADGE}nextVersion:`, nextVersion);
    console.log(`${BADGE}nextVersionTag:`, nextVersionTag);
    console.log('');
}
function ensureSpaceAfterLeadingEmoji(text) {
    const emojiWithoutTrailingSpaceRegex = /([\u{1f300}-\u{1f5ff}\u{1f900}-\u{1f9ff}\u{1f600}-\u{1f64f}\u{1f680}-\u{1f6ff}\u{2600}-\u{26ff}\u{2700}-\u{27bf}\u{1f1e6}-\u{1f1ff}\u{1f191}-\u{1f251}\u{1f004}\u{1f0cf}\u{1f170}-\u{1f171}\u{1f17e}-\u{1f17f}\u{1f18e}\u{3030}\u{2b50}\u{2b55}\u{2934}-\u{2935}\u{2b05}-\u{2b07}\u{2b1b}-\u{2b1c}\u{3297}\u{3299}\u{303d}\u{00a9}\u{00ae}\u{2122}\u{23f3}\u{24c2}\u{23e9}-\u{23ef}\u{25b6}\u{23f8}-\u{23fa}])(\S)/gu;
    return text.replace(emojiWithoutTrailingSpaceRegex, (substring, emojiMatch, characterAfterEmojiMatch) => {
        return `${emojiMatch} ${characterAfterEmojiMatch}`;
    });
}
function filterPullRequestsForBranch(prs, branchName, startRef, since) {
    const allShaInCurrentBranch = git_1.getGitCommitListSince(branchName, since).split('\n');
    const allShaInStartRef = git_1.getGitCommitListSince(startRef, since).split('\n');
    const newShaInCurrentBranch = allShaInCurrentBranch.filter((currentSha) => allShaInStartRef.indexOf(currentSha) === -1);
    const filteredPrs = prs.filter((pr) => newShaInCurrentBranch.indexOf(pr.headSha) !== -1 || newShaInCurrentBranch.indexOf(pr.mergeCommitSha) !== -1);
    return filteredPrs;
}
//# sourceMappingURL=create-release-announcement.js.map