"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const node_fetch_1 = require("node-fetch");
const moment = require("moment");
const pull_requests_1 = require("../../github/pull_requests");
const git_1 = require("../../git/git");
const git_helpers_1 = require("../../versions/git_helpers");
const GITHUB_REPO = git_1.getCurrentRepoNameWithOwner();
const COMMIT_API_URI = git_1.getCurrentApiBaseUrlWithAuth('/commits/:commit_sha');
const ISSUES_API_URI = git_1.getCurrentApiBaseUrlWithAuth('/issues?state=closed&since=:since&page=:page');
const BADGE = '[create-changelog]\t';
const MERGED_PULL_REQUEST_LENGTH_THRESHOLD = 100;
const CLOSED_ISSUE_LENGTH_THRESHOLD = 100;
// two weeks for feature-freeze period plus one week buffer for late releases
const CONSIDER_PULL_REQUESTS_WEEKS_BACK = 3;
/**
 * Creates a changelog based on data available in Git and GitHub:
 *
 * - Git: latest commits and tags
 * - GitHub: PRs and Issues
 */
async function run(...args) {
    let startRef = args[0];
    if (!startRef) {
        startRef = git_helpers_1.getPrevVersionTag();
        console.log(`${BADGE}No start ref given, using: "${startRef}"`);
    }
    const changelogText = await getChangelogText(startRef);
    console.log(changelogText);
    return true;
}
exports.run = run;
async function getChangelogText(startRef) {
    const apiResponse = await getCommitFromApi(startRef);
    if (apiResponse.commit === undefined) {
        console.error(chalk_1.default.red(`${BADGE}${apiResponse.message}`));
        process.exit(3);
    }
    const startCommitDate = apiResponse.commit.committer.date;
    const startDate = moment(startCommitDate)
        .subtract(CONSIDER_PULL_REQUESTS_WEEKS_BACK, 'weeks')
        .toISOString();
    const endRef = 'HEAD';
    const nextVersion = git_helpers_1.getNextVersion();
    if (nextVersion == null) {
        console.error(chalk_1.default.red(`${BADGE}Could not determine nextVersion!`));
        process.exit(3);
    }
    const nextVersionTag = git_helpers_1.getVersionTag(nextVersion);
    printInfo(startRef, startDate, endRef, nextVersion, nextVersionTag);
    const mergedPullRequestsSince = await pull_requests_1.getMergedPullRequests(startDate);
    const mergedPullRequests = filterPullRequestsForBranch(mergedPullRequestsSince, '', startRef, startDate);
    if (mergedPullRequests.length >= MERGED_PULL_REQUEST_LENGTH_THRESHOLD) {
        console.error(chalk_1.default.red(`${BADGE}Sanity check failed!`));
        console.error(chalk_1.default.red(`${BADGE}Found an unexpectedly high number of merged pull requests:`));
        console.error(chalk_1.default.red(`${BADGE}  ${mergedPullRequests.length} (threshold is ${MERGED_PULL_REQUEST_LENGTH_THRESHOLD})`));
        process.exit(2);
    }
    const closedIssuesSince = await getClosedIssuesFromApi(startDate);
    const issuesClosedByPullRequest = closedIssuesSince.filter((issue) => {
        const pullRequestClosingThisIssue = mergedPullRequests.find((pr) => pr.closedIssueNumbers.indexOf(issue.number) !== -1);
        return pullRequestClosingThisIssue != null;
    });
    if (issuesClosedByPullRequest.length >= CLOSED_ISSUE_LENGTH_THRESHOLD) {
        console.error(chalk_1.default.red(`${BADGE}Sanity check failed!`));
        console.error(chalk_1.default.red(`${BADGE}Found an unexpectedly high number of closed issues:`));
        console.error(chalk_1.default.red(`${BADGE}  ${issuesClosedByPullRequest.length} (threshold is ${CLOSED_ISSUE_LENGTH_THRESHOLD})`));
        process.exit(2);
    }
    const mergedPullRequestsText = mergedPullRequests
        .map((pr) => {
        const mergedAt = moment(pr.mergedAt).format('YYYY-MM-DD');
        const title = ensureSpaceAfterLeadingEmoji(pr.title);
        return `- #${pr.number} ${title} (merged ${mergedAt})`;
    })
        .join('\n');
    const issuesClosedByPullRequestText = issuesClosedByPullRequest
        .map((issue) => {
        const title = ensureSpaceAfterLeadingEmoji(issue.title);
        return `- #${issue.number} ${title}`;
    })
        .join('\n');
    const now = moment();
    const changelogText = `
# Changelog ${nextVersionTag} (${now.format('YYYY-MM-DD')})

This changelog covers the changes between [${startRef} and ${nextVersionTag}](https://github.com/${GITHUB_REPO}/compare/${startRef}...${nextVersionTag}).

For further reference, please refer to the changelog of the previous version, [${startRef}](https://github.com/${GITHUB_REPO}/releases/tag/${startRef}).

## Merged Pull Requests

${mergedPullRequestsText || '- none'}

## Corresponding Issues

${issuesClosedByPullRequestText || '- none'}

  `.trim();
    return changelogText;
}
exports.getChangelogText = getChangelogText;
async function getCommitFromApi(ref) {
    const url = COMMIT_API_URI.replace(':commit_sha', ref);
    const response = await node_fetch_1.default(url);
    return response.json();
}
async function getClosedIssuesFromApi(since, page = 1) {
    const url = ISSUES_API_URI.replace(':since', since).replace(':page', page.toString());
    const response = await node_fetch_1.default(url);
    const issues = await response.json();
    const relevantIssues = issues.filter((issue) => !issue.pull_request);
    if (relevantIssues.length > 0) {
        const nextPageIssues = await getClosedIssuesFromApi(since, page + 1);
        return [...relevantIssues].concat(nextPageIssues);
    }
    return relevantIssues;
}
function printInfo(startRef, startDate, endRef, nextVersion, nextVersionTag) {
    console.log(`${BADGE}startRef:`, startRef);
    console.log(`${BADGE}startDate:`, startDate);
    console.log(`${BADGE}endRef:`, endRef);
    console.log(`${BADGE}nextVersion:`, nextVersion);
    console.log(`${BADGE}nextVersionTag:`, nextVersionTag);
    console.log('');
}
function ensureSpaceAfterLeadingEmoji(text) {
    const emojiWithoutTrailingSpaceRegex = /([\u{1f300}-\u{1f5ff}\u{1f900}-\u{1f9ff}\u{1f600}-\u{1f64f}\u{1f680}-\u{1f6ff}\u{2600}-\u{26ff}\u{2700}-\u{27bf}\u{1f1e6}-\u{1f1ff}\u{1f191}-\u{1f251}\u{1f004}\u{1f0cf}\u{1f170}-\u{1f171}\u{1f17e}-\u{1f17f}\u{1f18e}\u{3030}\u{2b50}\u{2b55}\u{2934}-\u{2935}\u{2b05}-\u{2b07}\u{2b1b}-\u{2b1c}\u{3297}\u{3299}\u{303d}\u{00a9}\u{00ae}\u{2122}\u{23f3}\u{24c2}\u{23e9}-\u{23ef}\u{25b6}\u{23f8}-\u{23fa}])(\S)/gu;
    return text.replace(emojiWithoutTrailingSpaceRegex, (substring, emojiMatch, characterAfterEmojiMatch) => {
        return `${emojiMatch} ${characterAfterEmojiMatch}`;
    });
}
function filterPullRequestsForBranch(prs, branchName, startRef, since) {
    const allShaInCurrentBranch = git_1.getGitCommitListSince(branchName, since).split('\n');
    const allShaInStartRef = git_1.getGitCommitListSince(startRef, since).split('\n');
    const newShaInCurrentBranch = allShaInCurrentBranch.filter((currentSha) => allShaInStartRef.indexOf(currentSha) === -1);
    const filteredPrs = prs.filter((pr) => newShaInCurrentBranch.indexOf(pr.headSha) !== -1 || newShaInCurrentBranch.indexOf(pr.mergeCommitSha) !== -1);
    return filteredPrs;
}
//# sourceMappingURL=create-changelog.js.map