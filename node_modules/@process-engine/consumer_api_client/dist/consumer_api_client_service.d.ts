import { Subscription } from '@essential-projects/event_aggregator_contracts';
import { IIdentity } from '@essential-projects/iam_contracts';
import { DataModels, IConsumerApi, IConsumerApiAccessor, Messages } from '@process-engine/consumer_api_contracts';
export declare class ConsumerApiClientService implements IConsumerApi {
    private consumerApiAccessor;
    constructor(consumerApiAccessor: IConsumerApiAccessor);
    onEmptyActivityWaiting(identity: IIdentity, callback: Messages.CallbackTypes.OnEmptyActivityWaitingCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onEmptyActivityFinished(identity: IIdentity, callback: Messages.CallbackTypes.OnEmptyActivityFinishedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onEmptyActivityForIdentityWaiting(identity: IIdentity, callback: Messages.CallbackTypes.OnEmptyActivityWaitingCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onEmptyActivityForIdentityFinished(identity: IIdentity, callback: Messages.CallbackTypes.OnEmptyActivityFinishedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onUserTaskWaiting(identity: IIdentity, callback: Messages.CallbackTypes.OnUserTaskWaitingCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onUserTaskFinished(identity: IIdentity, callback: Messages.CallbackTypes.OnUserTaskFinishedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onUserTaskForIdentityWaiting(identity: IIdentity, callback: Messages.CallbackTypes.OnUserTaskWaitingCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onUserTaskForIdentityFinished(identity: IIdentity, callback: Messages.CallbackTypes.OnUserTaskFinishedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onBoundaryEventTriggered(identity: IIdentity, callback: Messages.CallbackTypes.OnBoundaryEventTriggeredCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onIntermediateThrowEventTriggered(identity: IIdentity, callback: Messages.CallbackTypes.OnIntermediateThrowEventTriggeredCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onIntermediateCatchEventReached(identity: IIdentity, callback: Messages.CallbackTypes.OnIntermediateCatchEventReachedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onIntermediateCatchEventFinished(identity: IIdentity, callback: Messages.CallbackTypes.OnIntermediateCatchEventFinishedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onCallActivityWaiting(identity: IIdentity, callback: Messages.CallbackTypes.OnCallActivityWaitingCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onCallActivityFinished(identity: IIdentity, callback: Messages.CallbackTypes.OnCallActivityFinishedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onProcessTerminated(identity: IIdentity, callback: Messages.CallbackTypes.OnProcessTerminatedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onProcessStarted(identity: IIdentity, callback: Messages.CallbackTypes.OnProcessStartedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onProcessWithProcessModelIdStarted(identity: IIdentity, callback: Messages.CallbackTypes.OnProcessStartedCallback, processModelId: string, subscribeOnce?: boolean): Promise<Subscription>;
    onManualTaskWaiting(identity: IIdentity, callback: Messages.CallbackTypes.OnManualTaskWaitingCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onManualTaskFinished(identity: IIdentity, callback: Messages.CallbackTypes.OnManualTaskFinishedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onManualTaskForIdentityWaiting(identity: IIdentity, callback: Messages.CallbackTypes.OnManualTaskWaitingCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onManualTaskForIdentityFinished(identity: IIdentity, callback: Messages.CallbackTypes.OnManualTaskFinishedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onProcessEnded(identity: IIdentity, callback: Messages.CallbackTypes.OnProcessEndedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    removeSubscription(identity: IIdentity, subscription: Subscription): Promise<void>;
    getProcessModels(identity: IIdentity): Promise<DataModels.ProcessModels.ProcessModelList>;
    getProcessModelById(identity: IIdentity, processModelId: string): Promise<DataModels.ProcessModels.ProcessModel>;
    getProcessModelByProcessInstanceId(identity: IIdentity, processInstanceId: string): Promise<DataModels.ProcessModels.ProcessModel>;
    startProcessInstance(identity: IIdentity, processModelId: string, payload: DataModels.ProcessModels.ProcessStartRequestPayload, startCallbackType?: DataModels.ProcessModels.StartCallbackType, startEventId?: string, endEventId?: string): Promise<DataModels.ProcessModels.ProcessStartResponsePayload>;
    getProcessResultForCorrelation(identity: IIdentity, correlationId: string, processModelId: string): Promise<Array<DataModels.CorrelationResult>>;
    getProcessInstancesByIdentity(identity: IIdentity): Promise<Array<DataModels.ProcessInstance>>;
    getEventsForProcessModel(identity: IIdentity, processModelId: string): Promise<DataModels.Events.EventList>;
    getEventsForCorrelation(identity: IIdentity, correlationId: string): Promise<DataModels.Events.EventList>;
    getEventsForProcessModelInCorrelation(identity: IIdentity, processModelId: string, correlationId: string): Promise<DataModels.Events.EventList>;
    triggerMessageEvent(identity: IIdentity, messageName: string, payload?: DataModels.Events.EventTriggerPayload): Promise<void>;
    triggerSignalEvent(identity: IIdentity, signalName: string, payload?: DataModels.Events.EventTriggerPayload): Promise<void>;
    getEmptyActivitiesForProcessModel(identity: IIdentity, processModelId: string): Promise<DataModels.EmptyActivities.EmptyActivityList>;
    getEmptyActivitiesForProcessInstance(identity: IIdentity, processInstanceId: string): Promise<DataModels.EmptyActivities.EmptyActivityList>;
    getEmptyActivitiesForCorrelation(identity: IIdentity, correlationId: string): Promise<DataModels.EmptyActivities.EmptyActivityList>;
    getEmptyActivitiesForProcessModelInCorrelation(identity: IIdentity, processModelId: string, correlationId: string): Promise<DataModels.EmptyActivities.EmptyActivityList>;
    getWaitingEmptyActivitiesByIdentity(identity: IIdentity): Promise<DataModels.EmptyActivities.EmptyActivityList>;
    finishEmptyActivity(identity: IIdentity, processInstanceId: string, correlationId: string, emptyActivityInstanceId: string): Promise<void>;
    getUserTasksForProcessModel(identity: IIdentity, processModelId: string): Promise<DataModels.UserTasks.UserTaskList>;
    getUserTasksForProcessInstance(identity: IIdentity, processInstanceId: string): Promise<DataModels.UserTasks.UserTaskList>;
    getUserTasksForCorrelation(identity: IIdentity, correlationId: string): Promise<DataModels.UserTasks.UserTaskList>;
    getUserTasksForProcessModelInCorrelation(identity: IIdentity, processModelId: string, correlationId: string): Promise<DataModels.UserTasks.UserTaskList>;
    getWaitingUserTasksByIdentity(identity: IIdentity): Promise<DataModels.UserTasks.UserTaskList>;
    finishUserTask(identity: IIdentity, processInstanceId: string, correlationId: string, userTaskInstanceId: string, userTaskResult: DataModels.UserTasks.UserTaskResult): Promise<void>;
    getManualTasksForProcessModel(identity: IIdentity, processModelId: string): Promise<DataModels.ManualTasks.ManualTaskList>;
    getManualTasksForProcessInstance(identity: IIdentity, processInstanceId: string): Promise<DataModels.ManualTasks.ManualTaskList>;
    getManualTasksForCorrelation(identity: IIdentity, correlationId: string): Promise<DataModels.ManualTasks.ManualTaskList>;
    getManualTasksForProcessModelInCorrelation(identity: IIdentity, processModelId: string, correlationId: string): Promise<DataModels.ManualTasks.ManualTaskList>;
    getWaitingManualTasksByIdentity(identity: IIdentity): Promise<DataModels.ManualTasks.ManualTaskList>;
    finishManualTask(identity: IIdentity, processInstanceId: string, correlationId: string, manualTaskInstanceId: string): Promise<void>;
    private ensureIsAuthorized;
}
