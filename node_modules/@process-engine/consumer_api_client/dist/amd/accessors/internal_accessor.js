define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class InternalAccessor {
        constructor(consumerApiService) {
            this.consumerApiService = undefined;
            this.consumerApiService = consumerApiService;
        }
        // Notifications
        async onEmptyActivityWaiting(identity, callback, subscribeOnce = false) {
            return this.consumerApiService.onEmptyActivityWaiting(identity, callback, subscribeOnce);
        }
        async onEmptyActivityFinished(identity, callback, subscribeOnce = false) {
            return this.consumerApiService.onEmptyActivityFinished(identity, callback, subscribeOnce);
        }
        async onEmptyActivityForIdentityWaiting(identity, callback, subscribeOnce = false) {
            return this.consumerApiService.onEmptyActivityForIdentityWaiting(identity, callback, subscribeOnce);
        }
        async onEmptyActivityForIdentityFinished(identity, callback, subscribeOnce = false) {
            return this.consumerApiService.onEmptyActivityForIdentityFinished(identity, callback, subscribeOnce);
        }
        async onUserTaskWaiting(identity, callback, subscribeOnce = false) {
            return this.consumerApiService.onUserTaskWaiting(identity, callback, subscribeOnce);
        }
        async onUserTaskFinished(identity, callback, subscribeOnce = false) {
            return this.consumerApiService.onUserTaskFinished(identity, callback, subscribeOnce);
        }
        async onUserTaskForIdentityWaiting(identity, callback, subscribeOnce = false) {
            return this.consumerApiService.onUserTaskForIdentityWaiting(identity, callback, subscribeOnce);
        }
        async onUserTaskForIdentityFinished(identity, callback, subscribeOnce = false) {
            return this.consumerApiService.onUserTaskForIdentityFinished(identity, callback, subscribeOnce);
        }
        async onBoundaryEventTriggered(identity, callback, subscribeOnce = false) {
            return this.consumerApiService.onBoundaryEventTriggered(identity, callback, subscribeOnce);
        }
        async onIntermediateThrowEventTriggered(identity, callback, subscribeOnce = false) {
            return this.consumerApiService.onIntermediateThrowEventTriggered(identity, callback, subscribeOnce);
        }
        async onIntermediateCatchEventReached(identity, callback, subscribeOnce = false) {
            return this.consumerApiService.onIntermediateCatchEventReached(identity, callback, subscribeOnce);
        }
        async onIntermediateCatchEventFinished(identity, callback, subscribeOnce = false) {
            return this.consumerApiService.onIntermediateCatchEventFinished(identity, callback, subscribeOnce);
        }
        async onCallActivityWaiting(identity, callback, subscribeOnce = false) {
            return this.consumerApiService.onCallActivityWaiting(identity, callback, subscribeOnce);
        }
        async onCallActivityFinished(identity, callback, subscribeOnce = false) {
            return this.consumerApiService.onCallActivityFinished(identity, callback, subscribeOnce);
        }
        async onManualTaskWaiting(identity, callback, subscribeOnce = false) {
            return this.consumerApiService.onManualTaskWaiting(identity, callback, subscribeOnce);
        }
        async onManualTaskFinished(identity, callback, subscribeOnce = false) {
            return this.consumerApiService.onManualTaskFinished(identity, callback, subscribeOnce);
        }
        async onManualTaskForIdentityWaiting(identity, callback, subscribeOnce = false) {
            return this.consumerApiService.onManualTaskForIdentityWaiting(identity, callback, subscribeOnce);
        }
        async onManualTaskForIdentityFinished(identity, callback, subscribeOnce = false) {
            return this.consumerApiService.onManualTaskForIdentityFinished(identity, callback, subscribeOnce);
        }
        async onProcessStarted(identity, callback, subscribeOnce = false) {
            return this.consumerApiService.onProcessStarted(identity, callback, subscribeOnce);
        }
        async onProcessWithProcessModelIdStarted(identity, callback, processModelId, subscribeOnce = false) {
            return this.consumerApiService.onProcessWithProcessModelIdStarted(identity, callback, processModelId, subscribeOnce);
        }
        async onProcessTerminated(identity, callback, subscribeOnce = false) {
            return this.consumerApiService.onProcessTerminated(identity, callback, subscribeOnce);
        }
        async onProcessEnded(identity, callback, subscribeOnce = false) {
            return this.consumerApiService.onProcessEnded(identity, callback, subscribeOnce);
        }
        async removeSubscription(identity, subscription) {
            return this.consumerApiService.removeSubscription(identity, subscription);
        }
        // Process models and instances
        async getProcessModels(identity) {
            return this.consumerApiService.getProcessModels(identity);
        }
        async getProcessModelById(identity, processModelId) {
            return this.consumerApiService.getProcessModelById(identity, processModelId);
        }
        async getProcessModelByProcessInstanceId(identity, processInstanceId) {
            return this.consumerApiService.getProcessModelByProcessInstanceId(identity, processInstanceId);
        }
        async startProcessInstance(identity, processModelId, payload, startCallbackType, startEventId, endEventId) {
            return this.consumerApiService.startProcessInstance(identity, processModelId, payload, startCallbackType, startEventId, endEventId);
        }
        async getProcessResultForCorrelation(identity, correlationId, processModelId) {
            return this.consumerApiService.getProcessResultForCorrelation(identity, correlationId, processModelId);
        }
        async getProcessInstancesByIdentity(identity) {
            return this.consumerApiService.getProcessInstancesByIdentity(identity);
        }
        // Events
        async getEventsForProcessModel(identity, processModelId) {
            return this.consumerApiService.getEventsForProcessModel(identity, processModelId);
        }
        async getEventsForCorrelation(identity, correlationId) {
            return this.consumerApiService.getEventsForCorrelation(identity, correlationId);
        }
        async getEventsForProcessModelInCorrelation(identity, processModelId, correlationId) {
            return this.consumerApiService.getEventsForProcessModelInCorrelation(identity, processModelId, correlationId);
        }
        async triggerMessageEvent(identity, messageName, payload) {
            return this.consumerApiService.triggerMessageEvent(identity, messageName, payload);
        }
        async triggerSignalEvent(identity, signalName, payload) {
            return this.consumerApiService.triggerSignalEvent(identity, signalName, payload);
        }
        // Empty Activities
        async getEmptyActivitiesForProcessModel(identity, processModelId) {
            return this.consumerApiService.getEmptyActivitiesForProcessModel(identity, processModelId);
        }
        async getEmptyActivitiesForProcessInstance(identity, processInstanceId) {
            return this.consumerApiService.getEmptyActivitiesForProcessInstance(identity, processInstanceId);
        }
        async getEmptyActivitiesForCorrelation(identity, correlationId) {
            return this.consumerApiService.getEmptyActivitiesForCorrelation(identity, correlationId);
        }
        async getEmptyActivitiesForProcessModelInCorrelation(identity, processModelId, correlationId) {
            return this.consumerApiService.getEmptyActivitiesForProcessModelInCorrelation(identity, processModelId, correlationId);
        }
        async getWaitingEmptyActivitiesByIdentity(identity) {
            return this.consumerApiService.getWaitingEmptyActivitiesByIdentity(identity);
        }
        async finishEmptyActivity(identity, processInstanceId, correlationId, emptyActivityInstanceId) {
            return this.consumerApiService.finishEmptyActivity(identity, processInstanceId, correlationId, emptyActivityInstanceId);
        }
        // UserTasks
        async getUserTasksForProcessModel(identity, processModelId) {
            return this.consumerApiService.getUserTasksForProcessModel(identity, processModelId);
        }
        async getUserTasksForProcessInstance(identity, processInstanceId) {
            return this.consumerApiService.getUserTasksForProcessInstance(identity, processInstanceId);
        }
        async getUserTasksForCorrelation(identity, correlationId) {
            return this.consumerApiService.getUserTasksForCorrelation(identity, correlationId);
        }
        async getUserTasksForProcessModelInCorrelation(identity, processModelId, correlationId) {
            return this.consumerApiService.getUserTasksForProcessModelInCorrelation(identity, processModelId, correlationId);
        }
        async getWaitingUserTasksByIdentity(identity) {
            return this.consumerApiService.getWaitingUserTasksByIdentity(identity);
        }
        async finishUserTask(identity, processInstanceId, correlationId, userTaskInstanceId, userTaskResult) {
            return this.consumerApiService.finishUserTask(identity, processInstanceId, correlationId, userTaskInstanceId, userTaskResult);
        }
        // ManualTasks
        async getManualTasksForProcessModel(identity, processModelId) {
            return this.consumerApiService.getManualTasksForProcessModel(identity, processModelId);
        }
        async getManualTasksForProcessInstance(identity, processInstanceId) {
            return this.consumerApiService.getManualTasksForProcessInstance(identity, processInstanceId);
        }
        async getManualTasksForCorrelation(identity, correlationId) {
            return this.consumerApiService.getManualTasksForCorrelation(identity, correlationId);
        }
        async getManualTasksForProcessModelInCorrelation(identity, processModelId, correlationId) {
            return this.consumerApiService.getManualTasksForProcessModelInCorrelation(identity, processModelId, correlationId);
        }
        async getWaitingManualTasksByIdentity(identity) {
            return this.consumerApiService.getWaitingManualTasksByIdentity(identity);
        }
        async finishManualTask(identity, processInstanceId, correlationId, manualTaskInstanceId) {
            return this.consumerApiService.finishManualTask(identity, processInstanceId, correlationId, manualTaskInstanceId);
        }
    }
    exports.InternalAccessor = InternalAccessor;
});
//# sourceMappingURL=internal_accessor.js.map