import { IEventAggregator, Subscription } from '@essential-projects/event_aggregator_contracts';
import { IIAMService, IIdentity } from '@essential-projects/iam_contracts';
import { APIs, DataModels, Messages } from '@process-engine/management_api_contracts';
import { ICorrelationService, IProcessModelUseCases } from '@process-engine/persistence_api.contracts';
import { ICronjobService, IExecuteProcessService, IProcessModelFacadeFactory } from '@process-engine/process_engine_contracts';
import { NotificationAdapter } from './adapters/index';
export declare class ProcessModelService implements APIs.IProcessModelManagementApi {
    private readonly correlationService;
    private readonly cronjobService;
    private readonly eventAggregator;
    private readonly executeProcessService;
    private readonly iamService;
    private readonly processModelFacadeFactory;
    private readonly processModelUseCase;
    private readonly notificationAdapter;
    private readonly canSubscribeToEventsClaim;
    constructor(correlationService: ICorrelationService, cronjobService: ICronjobService, eventAggregator: IEventAggregator, executeProcessService: IExecuteProcessService, iamService: IIAMService, notificationAdapter: NotificationAdapter, processModelFacadeFactory: IProcessModelFacadeFactory, processModelUseCase: IProcessModelUseCases);
    getProcessModels(identity: IIdentity, offset?: number, limit?: number): Promise<DataModels.ProcessModels.ProcessModelList>;
    getProcessModelById(identity: IIdentity, processModelId: string): Promise<DataModels.ProcessModels.ProcessModel>;
    getProcessModelByProcessInstanceId(identity: IIdentity, processInstanceId: string): Promise<DataModels.ProcessModels.ProcessModel>;
    getStartEventsForProcessModel(identity: IIdentity, processModelId: string): Promise<DataModels.Events.EventList>;
    startProcessInstance(identity: IIdentity, processModelId: string, payload?: DataModels.ProcessModels.ProcessStartRequestPayload, startCallbackType?: DataModels.ProcessModels.StartCallbackType, startEventId?: string, endEventId?: string): Promise<DataModels.ProcessModels.ProcessStartResponsePayload>;
    updateProcessDefinitionsByName(identity: IIdentity, name: string, payload: DataModels.ProcessModels.UpdateProcessDefinitionsRequestPayload): Promise<void>;
    deleteProcessDefinitionsByProcessModelId(identity: IIdentity, processModelId: string): Promise<void>;
    terminateProcessInstance(identity: IIdentity, processInstanceId: string): Promise<void>;
    onProcessStarted(identity: IIdentity, callback: Messages.CallbackTypes.OnProcessStartedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onProcessWithProcessModelIdStarted(identity: IIdentity, callback: Messages.CallbackTypes.OnProcessStartedCallback, processModelId: string, subscribeOnce?: boolean): Promise<Subscription>;
    onProcessEnded(identity: IIdentity, callback: Messages.CallbackTypes.OnProcessEndedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onProcessTerminated(identity: IIdentity, callback: Messages.CallbackTypes.OnProcessTerminatedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onProcessError(identity: IIdentity, callback: Messages.CallbackTypes.OnProcessErrorCallback, subscribeOnce?: boolean): Promise<Subscription>;
    private convertProcessModelToPublicType;
    private getRawXmlForProcessModelById;
    private convertToPublicEvent;
    private executeProcessInstance;
    private ensureUserHasClaim;
    private checkIfUserIsSuperAdmin;
}
