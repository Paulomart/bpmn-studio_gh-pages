import { IEventAggregator, Subscription } from '@essential-projects/event_aggregator_contracts';
import { IIAMService, IIdentity, IIdentityService } from '@essential-projects/iam_contracts';
import { APIs, DataModels, Messages } from '@process-engine/management_api_contracts';
import { FlowNodeInstance, ICorrelationService, IFlowNodeInstanceService, IProcessModelUseCases } from '@process-engine/persistence_api.contracts';
import { IProcessModelFacadeFactory, IProcessTokenFacadeFactory } from '@process-engine/process_engine_contracts';
import { NotificationAdapter } from './adapters/index';
export declare class UserTaskService implements APIs.IUserTaskManagementApi {
    private readonly correlationService;
    private readonly eventAggregator;
    private readonly flowNodeInstanceService;
    private readonly identityService;
    private readonly iamService;
    private readonly notificationAdapter;
    private readonly processModelFacadeFactory;
    private readonly processModelUseCase;
    private readonly processTokenFacadeFactory;
    private internalIdentity;
    constructor(correlationService: ICorrelationService, eventAggregator: IEventAggregator, flowNodeInstanceService: IFlowNodeInstanceService, identityService: IIdentityService, iamService: IIAMService, notificationAdapter: NotificationAdapter, processModelFacadeFactory: IProcessModelFacadeFactory, processModelUse: IProcessModelUseCases, processTokenFacadeFactory: IProcessTokenFacadeFactory);
    initialize(): Promise<void>;
    onUserTaskWaiting(identity: IIdentity, callback: Messages.CallbackTypes.OnUserTaskWaitingCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onUserTaskFinished(identity: IIdentity, callback: Messages.CallbackTypes.OnUserTaskFinishedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onUserTaskForIdentityWaiting(identity: IIdentity, callback: Messages.CallbackTypes.OnUserTaskWaitingCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onUserTaskForIdentityFinished(identity: IIdentity, callback: Messages.CallbackTypes.OnUserTaskFinishedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    removeSubscription(identity: IIdentity, subscription: Subscription): Promise<void>;
    getUserTasksForProcessModel(identity: IIdentity, processModelId: string, offset?: number, limit?: number): Promise<DataModels.UserTasks.UserTaskList>;
    getUserTasksForProcessInstance(identity: IIdentity, processInstanceId: string, offset?: number, limit?: number): Promise<DataModels.UserTasks.UserTaskList>;
    getUserTasksForCorrelation(identity: IIdentity, correlationId: string, offset?: number, limit?: number): Promise<DataModels.UserTasks.UserTaskList>;
    getUserTasksForProcessModelInCorrelation(identity: IIdentity, processModelId: string, correlationId: string, offset?: number, limit?: number): Promise<DataModels.UserTasks.UserTaskList>;
    getWaitingUserTasksByIdentity(identity: IIdentity, offset?: number, limit?: number): Promise<DataModels.UserTasks.UserTaskList>;
    finishUserTask(identity: IIdentity, processInstanceId: string, correlationId: string, userTaskInstanceId: string, userTaskResult?: DataModels.UserTasks.UserTaskResult): Promise<void>;
    filterAndConvertUserTaskList(identity: IIdentity, suspendedFlowNodes: Array<FlowNodeInstance>, offset?: number, limit?: number): Promise<DataModels.UserTasks.UserTaskList>;
    private convertFlowNodeInstancesToUserTasks;
    private checkIfIsFlowNodeIsUserTask;
    private checkIfIdentityUserIDsMatch;
    private filterInacessibleFlowNodeInstances;
    private checkIfUserCanAccessFlowNodeInstance;
    private ensureHasClaim;
    private checkIfUserIsSuperAdmin;
    private convertToManagementApiUserTask;
    private getProcessModelForFlowNodeInstance;
    private getProcessModelHashForProcessInstance;
    private convertToManagementApiFormField;
    private evaluateExpressionWithOldToken;
    private getUserTaskTokenInOldFormat;
    private getFlowNodeInstanceForCorrelationInProcessInstance;
    private createUserTaskResultForProcessEngine;
    private publishFinishUserTaskEvent;
}
