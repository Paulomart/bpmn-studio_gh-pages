import { IIAMService, IIdentity } from '@essential-projects/iam_contracts';
import { APIs, DataModels, Messages } from '@process-engine/management_api_contracts';
import { ICronjobService } from '@process-engine/process_engine_contracts';
import { Subscription } from '@essential-projects/event_aggregator_contracts';
import { ICronjobHistoryService } from '@process-engine/persistence_api.contracts';
import { NotificationAdapter } from './adapters/index';
export declare class CronjobService implements APIs.ICronjobManagementApi {
    private readonly iamService;
    private readonly notificationAdapter;
    private readonly cronjobService;
    private readonly cronjobHistoryService;
    private readonly canSubscribeToEventsClaim;
    constructor(cronjobService: ICronjobService, cronjobHistoryService: ICronjobHistoryService, iamService: IIAMService, notificationAdapter: NotificationAdapter);
    getAllActiveCronjobs(identity: IIdentity, offset?: number, limit?: number): Promise<DataModels.Cronjobs.CronjobList>;
    getCronjobExecutionHistoryForProcessModel(identity: IIdentity, processModelId: string, startEventId?: string, offset?: number, limit?: number): Promise<DataModels.Cronjobs.CronjobHistoryList>;
    getCronjobExecutionHistoryForCrontab(identity: IIdentity, crontab: string, offset?: number, limit?: number): Promise<DataModels.Cronjobs.CronjobHistoryList>;
    onCronjobCreated(identity: IIdentity, callback: Messages.CallbackTypes.OnCronjobCreatedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onCronjobExecuted(identity: IIdentity, callback: Messages.CallbackTypes.OnCronjobExecutedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onCronjobStopped(identity: IIdentity, callback: Messages.CallbackTypes.OnCronjobStoppedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onCronjobUpdated(identity: IIdentity, callback: Messages.CallbackTypes.OnCronjobUpdatedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onCronjobRemoved(identity: IIdentity, callback: Messages.CallbackTypes.OnCronjobRemovedCallback, subscribeOnce?: boolean): Promise<Subscription>;
}
