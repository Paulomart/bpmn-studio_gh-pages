"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const management_api_contracts_1 = require("@process-engine/management_api_contracts");
const paginator_1 = require("./paginator");
class CorrelationService {
    constructor(correlationService) {
        this.correlationService = correlationService;
    }
    async getAllCorrelations(identity, offset = 0, limit = 0) {
        const correlations = await this.correlationService.getAll(identity);
        const managementApiCorrelations = correlations.map(this.mapToPublicCorrelation.bind(this));
        const paginizedCorrelations = paginator_1.applyPagination(managementApiCorrelations, offset, limit);
        return { correlations: paginizedCorrelations, totalCount: managementApiCorrelations.length };
    }
    async getActiveCorrelations(identity, offset = 0, limit = 0) {
        const activeCorrelations = await this.correlationService.getActive(identity);
        const managementApiCorrelations = activeCorrelations.map(this.mapToPublicCorrelation.bind(this));
        const paginizedCorrelations = paginator_1.applyPagination(managementApiCorrelations, offset, limit);
        return { correlations: paginizedCorrelations, totalCount: managementApiCorrelations.length };
    }
    async getCorrelationById(identity, correlationId) {
        const correlationFromProcessEngine = await this.correlationService.getByCorrelationId(identity, correlationId);
        const managementApiCorrelation = this.mapToPublicCorrelation(correlationFromProcessEngine);
        return managementApiCorrelation;
    }
    async getCorrelationsByProcessModelId(identity, processModelId, offset = 0, limit = 0) {
        const correlations = await this.correlationService.getByProcessModelId(identity, processModelId);
        const managementApiCorrelations = correlations.map(this.mapToPublicCorrelation.bind(this));
        const paginizedCorrelations = paginator_1.applyPagination(managementApiCorrelations, offset, limit);
        return { correlations: paginizedCorrelations, totalCount: managementApiCorrelations.length };
    }
    async getProcessInstanceById(identity, processInstanceId) {
        const processInstance = await this.correlationService.getByProcessInstanceId(identity, processInstanceId);
        const managementApiProcessInstance = this.mapToPublicProcessInstance(processInstance);
        return managementApiProcessInstance;
    }
    async getProcessInstancesForCorrelation(identity, correlationId, offset, limit) {
        const processInstances = await this.correlationService.getProcessInstancesForCorrelation(identity, correlationId);
        const managementApiProcessInstances = processInstances.map(this.mapToPublicProcessInstance);
        const paginizedProcessInstances = paginator_1.applyPagination(managementApiProcessInstances, offset, limit);
        return { processInstances: paginizedProcessInstances, totalCount: managementApiProcessInstances.length };
    }
    async getProcessInstancesForProcessModel(identity, processModelId, offset, limit) {
        const processInstances = await this.correlationService.getProcessInstancesForProcessModel(identity, processModelId);
        const managementApiProcessInstances = processInstances.map(this.mapToPublicProcessInstance);
        const paginizedProcessInstances = paginator_1.applyPagination(managementApiProcessInstances, offset, limit);
        return { processInstances: paginizedProcessInstances, totalCount: managementApiProcessInstances.length };
    }
    async getProcessInstancesByState(identity, state, offset, limit) {
        const processInstances = await this.correlationService.getProcessInstancesByState(identity, state);
        const managementApiProcessInstances = processInstances.map(this.mapToPublicProcessInstance);
        const paginizedProcessInstances = paginator_1.applyPagination(managementApiProcessInstances, offset, limit);
        return { processInstances: paginizedProcessInstances, totalCount: managementApiProcessInstances.length };
    }
    mapToPublicCorrelation(runtimeCorrelation) {
        const managementApiCorrelation = new management_api_contracts_1.DataModels.Correlations.Correlation();
        managementApiCorrelation.id = runtimeCorrelation.id;
        managementApiCorrelation.state = management_api_contracts_1.DataModels.Correlations.CorrelationState[runtimeCorrelation.state];
        managementApiCorrelation.error = runtimeCorrelation.error;
        managementApiCorrelation.createdAt = runtimeCorrelation.createdAt;
        managementApiCorrelation.processInstances = runtimeCorrelation
            .processInstances
            .map(this.mapToPublicProcessInstance);
        return managementApiCorrelation;
    }
    mapToPublicProcessInstance(runtimeProcessInstance) {
        const managementApiProcessInstance = new management_api_contracts_1.DataModels.Correlations.ProcessInstance();
        managementApiProcessInstance.correlationId = runtimeProcessInstance.correlationId;
        managementApiProcessInstance.processDefinitionName = runtimeProcessInstance.processDefinitionName;
        managementApiProcessInstance.hash = runtimeProcessInstance.hash;
        managementApiProcessInstance.xml = runtimeProcessInstance.xml;
        managementApiProcessInstance.processModelId = runtimeProcessInstance.processModelId;
        managementApiProcessInstance.processInstanceId = runtimeProcessInstance.processInstanceId;
        managementApiProcessInstance.parentProcessInstanceId = runtimeProcessInstance.parentProcessInstanceId;
        managementApiProcessInstance.state = management_api_contracts_1.DataModels.Correlations.CorrelationState[runtimeProcessInstance.state];
        managementApiProcessInstance.error = runtimeProcessInstance.error;
        managementApiProcessInstance.identity = runtimeProcessInstance.identity;
        managementApiProcessInstance.createdAt = runtimeProcessInstance.createdAt;
        managementApiProcessInstance.terminatedBy = runtimeProcessInstance.terminatedBy;
        managementApiProcessInstance.finishedAt = runtimeProcessInstance.finishedAt;
        return managementApiProcessInstance;
    }
}
exports.CorrelationService = CorrelationService;
//# sourceMappingURL=correlation_service.js.map