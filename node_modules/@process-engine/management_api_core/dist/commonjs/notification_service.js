"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const superAdminClaim = 'can_manage_process_instances';
const canSubscribeToEventsClaim = 'can_subscribe_to_events';
class NotificationService {
    constructor(iamService, notificationAdapter) {
        this.iamService = iamService;
        this.notificationAdapter = notificationAdapter;
    }
    // Notifications
    async onActivityReached(identity, callback, subscribeOnce) {
        await this.ensureHasClaim(identity, canSubscribeToEventsClaim);
        return this.notificationAdapter.onActivityReached(identity, callback, subscribeOnce);
    }
    async onActivityFinished(identity, callback, subscribeOnce) {
        await this.ensureHasClaim(identity, canSubscribeToEventsClaim);
        return this.notificationAdapter.onActivityFinished(identity, callback, subscribeOnce);
    }
    async onEmptyActivityWaiting(identity, callback, subscribeOnce) {
        await this.ensureHasClaim(identity, canSubscribeToEventsClaim);
        return this.notificationAdapter.onEmptyActivityWaiting(identity, callback, subscribeOnce);
    }
    async onEmptyActivityFinished(identity, callback, subscribeOnce) {
        await this.ensureHasClaim(identity, canSubscribeToEventsClaim);
        return this.notificationAdapter.onEmptyActivityFinished(identity, callback, subscribeOnce);
    }
    async onEmptyActivityForIdentityWaiting(identity, callback, subscribeOnce) {
        await this.ensureHasClaim(identity, canSubscribeToEventsClaim);
        return this.notificationAdapter.onEmptyActivityForIdentityWaiting(identity, callback, subscribeOnce);
    }
    async onEmptyActivityForIdentityFinished(identity, callback, subscribeOnce) {
        await this.ensureHasClaim(identity, canSubscribeToEventsClaim);
        return this.notificationAdapter.onEmptyActivityForIdentityFinished(identity, callback, subscribeOnce);
    }
    async onUserTaskWaiting(identity, callback, subscribeOnce) {
        await this.ensureHasClaim(identity, canSubscribeToEventsClaim);
        return this.notificationAdapter.onUserTaskWaiting(identity, callback, subscribeOnce);
    }
    async onUserTaskFinished(identity, callback, subscribeOnce) {
        await this.ensureHasClaim(identity, canSubscribeToEventsClaim);
        return this.notificationAdapter.onUserTaskFinished(identity, callback, subscribeOnce);
    }
    async onUserTaskForIdentityWaiting(identity, callback, subscribeOnce) {
        await this.ensureHasClaim(identity, canSubscribeToEventsClaim);
        return this.notificationAdapter.onUserTaskForIdentityWaiting(identity, callback, subscribeOnce);
    }
    async onUserTaskForIdentityFinished(identity, callback, subscribeOnce) {
        await this.ensureHasClaim(identity, canSubscribeToEventsClaim);
        return this.notificationAdapter.onUserTaskForIdentityFinished(identity, callback, subscribeOnce);
    }
    async onBoundaryEventTriggered(identity, callback, subscribeOnce) {
        await this.ensureHasClaim(identity, canSubscribeToEventsClaim);
        return this.notificationAdapter.onBoundaryEventTriggered(identity, callback, subscribeOnce);
    }
    async onIntermediateThrowEventTriggered(identity, callback, subscribeOnce) {
        await this.ensureHasClaim(identity, canSubscribeToEventsClaim);
        return this.notificationAdapter.onIntermediateThrowEventTriggered(identity, callback, subscribeOnce);
    }
    async onIntermediateCatchEventReached(identity, callback, subscribeOnce) {
        await this.ensureHasClaim(identity, canSubscribeToEventsClaim);
        return this.notificationAdapter.onIntermediateCatchEventReached(identity, callback, subscribeOnce);
    }
    async onIntermediateCatchEventFinished(identity, callback, subscribeOnce) {
        await this.ensureHasClaim(identity, canSubscribeToEventsClaim);
        return this.notificationAdapter.onIntermediateCatchEventFinished(identity, callback, subscribeOnce);
    }
    async onManualTaskWaiting(identity, callback, subscribeOnce) {
        await this.ensureHasClaim(identity, canSubscribeToEventsClaim);
        return this.notificationAdapter.onManualTaskWaiting(identity, callback, subscribeOnce);
    }
    async onManualTaskFinished(identity, callback, subscribeOnce) {
        await this.ensureHasClaim(identity, canSubscribeToEventsClaim);
        return this.notificationAdapter.onManualTaskFinished(identity, callback, subscribeOnce);
    }
    async onManualTaskForIdentityWaiting(identity, callback, subscribeOnce) {
        await this.ensureHasClaim(identity, canSubscribeToEventsClaim);
        return this.notificationAdapter.onManualTaskForIdentityWaiting(identity, callback, subscribeOnce);
    }
    async onManualTaskForIdentityFinished(identity, callback, subscribeOnce) {
        await this.ensureHasClaim(identity, canSubscribeToEventsClaim);
        return this.notificationAdapter.onManualTaskForIdentityFinished(identity, callback, subscribeOnce);
    }
    async onProcessStarted(identity, callback, subscribeOnce) {
        await this.ensureHasClaim(identity, canSubscribeToEventsClaim);
        return this.notificationAdapter.onProcessStarted(identity, callback, subscribeOnce);
    }
    async onProcessWithProcessModelIdStarted(identity, callback, processModelId, subscribeOnce) {
        await this.ensureHasClaim(identity, canSubscribeToEventsClaim);
        return this.notificationAdapter.onProcessWithProcessModelIdStarted(identity, callback, processModelId, subscribeOnce);
    }
    async onProcessTerminated(identity, callback, subscribeOnce) {
        await this.ensureHasClaim(identity, canSubscribeToEventsClaim);
        return this.notificationAdapter.onProcessTerminated(identity, callback, subscribeOnce);
    }
    async onProcessError(identity, callback, subscribeOnce) {
        await this.ensureHasClaim(identity, canSubscribeToEventsClaim);
        return this.notificationAdapter.onProcessError(identity, callback, subscribeOnce);
    }
    async onProcessEnded(identity, callback, subscribeOnce) {
        await this.ensureHasClaim(identity, canSubscribeToEventsClaim);
        return this.notificationAdapter.onProcessEnded(identity, callback, subscribeOnce);
    }
    async onCronjobCreated(identity, callback, subscribeOnce) {
        await this.ensureHasClaim(identity, canSubscribeToEventsClaim);
        return this.notificationAdapter.onCronjobCreated(identity, callback, subscribeOnce);
    }
    async onCronjobExecuted(identity, callback, subscribeOnce) {
        await this.ensureHasClaim(identity, canSubscribeToEventsClaim);
        return this.notificationAdapter.onCronjobExecuted(identity, callback, subscribeOnce);
    }
    async onCronjobStopped(identity, callback, subscribeOnce) {
        await this.ensureHasClaim(identity, canSubscribeToEventsClaim);
        return this.notificationAdapter.onCronjobStopped(identity, callback, subscribeOnce);
    }
    async onCronjobUpdated(identity, callback, subscribeOnce) {
        await this.ensureHasClaim(identity, canSubscribeToEventsClaim);
        return this.notificationAdapter.onCronjobUpdated(identity, callback, subscribeOnce);
    }
    async onCronjobRemoved(identity, callback, subscribeOnce) {
        await this.ensureHasClaim(identity, canSubscribeToEventsClaim);
        return this.notificationAdapter.onCronjobRemoved(identity, callback, subscribeOnce);
    }
    async removeSubscription(identity, subscription) {
        return this.notificationAdapter.removeSubscription(subscription);
    }
    async ensureHasClaim(identity, claimName) {
        const isSuperAdmin = await this.checkIfUserIsSuperAdmin(identity);
        if (isSuperAdmin) {
            return;
        }
        await this.iamService.ensureHasClaim(identity, claimName);
    }
    async checkIfUserIsSuperAdmin(identity) {
        try {
            await this.iamService.ensureHasClaim(identity, superAdminClaim);
            return true;
        }
        catch (error) {
            return false;
        }
    }
}
exports.NotificationService = NotificationService;
//# sourceMappingURL=notification_service.js.map