"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const http_node_1 = require("@essential-projects/http_node");
const management_api_contracts_1 = require("@process-engine/management_api_contracts");
const async_middleware_1 = require("async-middleware");
const resolve_identity_1 = require("../../middlewares/resolve_identity");
class TokenHistoryRouter extends http_node_1.BaseRouter {
    constructor(tokenHistoryController, identityService) {
        super();
        this.tokenHistoryController = tokenHistoryController;
        this.identityService = identityService;
    }
    get baseRoute() {
        return 'api/management/v1';
    }
    async initializeRouter() {
        this.registerMiddlewares();
        this.registerRoutes();
    }
    registerMiddlewares() {
        const resolveIdentity = resolve_identity_1.createResolveIdentityMiddleware(this.identityService);
        this.router.use(async_middleware_1.wrap(resolveIdentity));
    }
    registerRoutes() {
        const controller = this.tokenHistoryController;
        this.router.get(management_api_contracts_1.restSettings.paths.getTokensForFlowNode, async_middleware_1.wrap(controller.getTokensForFlowNode.bind(controller)));
        this.router.get(management_api_contracts_1.restSettings.paths.getTokensForFlowNodeByProcessInstanceId, async_middleware_1.wrap(controller.getTokensForFlowNodeByProcessInstanceId.bind(controller)));
        this.router.get(management_api_contracts_1.restSettings.paths.getTokensForProcessInstance, async_middleware_1.wrap(controller.getTokensForProcessInstance.bind(controller)));
        this.router.get(management_api_contracts_1.restSettings.paths.getTokensForCorrelationAndProcessModel, async_middleware_1.wrap(controller.getTokensForCorrelationAndProcessModel.bind(controller)));
    }
}
exports.TokenHistoryRouter = TokenHistoryRouter;
//# sourceMappingURL=token_history_router.js.map