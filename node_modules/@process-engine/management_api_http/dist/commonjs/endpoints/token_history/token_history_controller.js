"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class TokenHistoryController {
    constructor(tokenHistoryService) {
        this.httpCodeSuccessfulResponse = 200;
        this.tokenHistoryService = tokenHistoryService;
    }
    async getTokensForFlowNode(request, response) {
        const identity = request.identity;
        const correlationId = request.params.correlation_id;
        const processModelId = request.params.process_model_id;
        const flowNodeId = request.params.flow_node_id;
        const offset = request.query.offset || 0;
        const limit = request.query.limit || 0;
        const result = await this.tokenHistoryService.getTokensForFlowNode(identity, correlationId, processModelId, flowNodeId, offset, limit);
        response.status(this.httpCodeSuccessfulResponse).json(result);
    }
    async getTokensForFlowNodeByProcessInstanceId(request, response) {
        const identity = request.identity;
        const processInstanceId = request.params.process_instance_id;
        const flowNodeId = request.params.flow_node_id;
        const result = await this.tokenHistoryService.getTokensForFlowNodeByProcessInstanceId(identity, processInstanceId, flowNodeId);
        response.status(this.httpCodeSuccessfulResponse).json(result);
    }
    async getTokensForCorrelationAndProcessModel(request, response) {
        const identity = request.identity;
        const correlationId = request.params.correlation_id;
        const processModelId = request.params.process_model_id;
        const result = await this.tokenHistoryService.getTokensForCorrelationAndProcessModel(identity, correlationId, processModelId);
        response.status(this.httpCodeSuccessfulResponse).json(result);
    }
    async getTokensForProcessInstance(request, response) {
        const identity = request.identity;
        const processInstanceId = request.params.process_instance_id;
        const result = await this.tokenHistoryService.getTokensForProcessInstance(identity, processInstanceId);
        response.status(this.httpCodeSuccessfulResponse).json(result);
    }
}
exports.TokenHistoryController = TokenHistoryController;
//# sourceMappingURL=token_history_controller.js.map