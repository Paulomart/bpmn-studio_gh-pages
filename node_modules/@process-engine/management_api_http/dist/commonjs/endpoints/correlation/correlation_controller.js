"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const management_api_contracts_1 = require("@process-engine/management_api_contracts");
class CorrelationController {
    constructor(correlationService) {
        this.httpCodeSuccessfulResponse = 200;
        this.correlationService = correlationService;
    }
    async getAllCorrelations(request, response) {
        const identity = request.identity;
        const offset = request.query.offset || 0;
        const limit = request.query.limit || 0;
        const result = await this.correlationService.getAllCorrelations(identity, offset, limit);
        response.status(this.httpCodeSuccessfulResponse).json(result);
    }
    async getActiveCorrelations(request, response) {
        const identity = request.identity;
        const offset = request.query.offset || 0;
        const limit = request.query.limit || 0;
        const result = await this.correlationService.getActiveCorrelations(identity, offset, limit);
        response.status(this.httpCodeSuccessfulResponse).json(result);
    }
    async getCorrelationById(request, response) {
        const identity = request.identity;
        const correlationId = request.params.correlation_id;
        const result = await this.correlationService.getCorrelationById(identity, correlationId);
        response.status(this.httpCodeSuccessfulResponse).json(result);
    }
    async getCorrelationsByProcessModelId(request, response) {
        const processModelId = request.params.process_model_id;
        const identity = request.identity;
        const offset = request.query.offset || 0;
        const limit = request.query.limit || 0;
        const result = await this.correlationService.getCorrelationsByProcessModelId(identity, processModelId, offset, limit);
        response.status(this.httpCodeSuccessfulResponse).json(result);
    }
    async getProcessInstanceById(request, response) {
        const processInstanceId = request.params.process_instance_id;
        const identity = request.identity;
        const result = await this.correlationService.getProcessInstanceById(identity, processInstanceId);
        response.status(this.httpCodeSuccessfulResponse).json(result);
    }
    async getProcessInstancesForCorrelation(request, response) {
        const correlationId = request.params.correlation_id;
        const identity = request.identity;
        const offset = request.query.offset || 0;
        const limit = request.query.limit || 0;
        const result = await this.correlationService.getProcessInstancesForCorrelation(identity, correlationId, offset, limit);
        response.status(this.httpCodeSuccessfulResponse).json(result);
    }
    async getProcessInstancesForProcessModel(request, response) {
        const processModelId = request.params.process_model_id;
        const identity = request.identity;
        const offset = request.query.offset || 0;
        const limit = request.query.limit || 0;
        const result = await this.correlationService.getProcessInstancesForProcessModel(identity, processModelId, offset, limit);
        response.status(this.httpCodeSuccessfulResponse).json(result);
    }
    async getProcessInstancesByState(request, response) {
        const state = management_api_contracts_1.DataModels.Correlations.CorrelationState[request.params.process_instance_state];
        const identity = request.identity;
        const offset = request.query.offset || 0;
        const limit = request.query.limit || 0;
        const result = await this.correlationService.getProcessInstancesByState(identity, state, offset, limit);
        response.status(this.httpCodeSuccessfulResponse).json(result);
    }
}
exports.CorrelationController = CorrelationController;
//# sourceMappingURL=correlation_controller.js.map