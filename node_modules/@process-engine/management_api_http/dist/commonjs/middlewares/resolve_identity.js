"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const loggerhythm_1 = require("loggerhythm");
const errors_ts_1 = require("@essential-projects/errors_ts");
const logger = loggerhythm_1.Logger.createLogger('processengine:management_api:resolve_identity_middleware');
function createResolveIdentityMiddleware(identityService) {
    return async (request, response, next) => {
        const bearerToken = request.get('authorization');
        if (request.url === '/swagger') {
            next();
            return;
        }
        if (!bearerToken) {
            throw new errors_ts_1.UnauthorizedError('No auth token provided!');
        }
        // Multiple authorization header values are not supported. So throw an error, if this happens.
        // Background: https://github.com/process-engine/process_engine_runtime/issues/396
        const splitHeaderValues = bearerToken.split(',');
        if (splitHeaderValues.length > 1) {
            logger.error('Detected multiple values for the authorization header!', splitHeaderValues);
            throw new errors_ts_1.BadRequestError('Detected multiple values for the authorization header!');
        }
        const authToken = bearerToken.substr('Bearer '.length);
        const resolvedIdentity = await identityService.getIdentity(authToken);
        request.identity = resolvedIdentity;
        next();
    };
}
exports.createResolveIdentityMiddleware = createResolveIdentityMiddleware;
//# sourceMappingURL=resolve_identity.js.map