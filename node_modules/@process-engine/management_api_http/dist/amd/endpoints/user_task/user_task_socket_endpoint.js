define(["require", "exports", "loggerhythm", "@essential-projects/errors_ts", "@essential-projects/http_node", "@process-engine/management_api_contracts"], function (require, exports, loggerhythm_1, errors_ts_1, http_node_1, management_api_contracts_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const logger = loggerhythm_1.Logger.createLogger('management_api:socket.io_endpoint:user_tasks');
    class UserTaskSocketEndpoint extends http_node_1.BaseSocketEndpoint {
        constructor(eventAggregator, identityService, managementApiNotificationService) {
            super();
            this.connections = new Map();
            this.endpointSubscriptions = [];
            this.userSubscriptions = {};
            this.eventAggregator = eventAggregator;
            this.identityService = identityService;
            this.managementApiNotificationService = managementApiNotificationService;
        }
        get namespace() {
            return management_api_contracts_1.socketSettings.namespace;
        }
        async initializeEndpoint(socketIo) {
            socketIo.on('connect', async (socket) => {
                const token = socket.handshake.headers.authorization;
                const identityNotSet = token === undefined;
                if (identityNotSet) {
                    logger.error('A Socket.IO client attempted to connect without providing an Auth-Token!');
                    socket.disconnect();
                    throw new errors_ts_1.UnauthorizedError('No auth token provided!');
                }
                const identity = await this.identityService.getIdentity(token);
                this.connections.set(socket.id, identity);
                logger.info(`Client with socket id "${socket.id} connected."`);
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                socket.on('disconnect', async (reason) => {
                    this.connections.delete(socket.id);
                    await this.clearUserScopeNotifications(identity);
                    logger.info(`Client with socket id "${socket.id} disconnected."`);
                });
                await this.createUserScopeNotifications(socket, identity);
            });
            await this.createSocketScopeNotifications(socketIo);
        }
        async dispose() {
            logger.info('Disposing Socket IO subscriptions...');
            // Clear out Socket-scope Subscriptions.
            for (const subscription of this.endpointSubscriptions) {
                this.eventAggregator.unsubscribe(subscription);
            }
            // Clear out all User-Subscriptions.
            // eslint-disable-next-line
            for (const userId in this.userSubscriptions) {
                const userSubscriptions = this.userSubscriptions[userId];
                for (const subscription of userSubscriptions) {
                    this.eventAggregator.unsubscribe(subscription);
                }
                delete this.userSubscriptions[userId];
            }
        }
        /**
         * Creates a number of Subscriptions for globally published events.
         * These events will be published for every user connected to the socketIO
         * instance.
         *
         * @async
         * @param socketIoInstance The socketIO instance for which to create the
         *                         subscriptions.
         */
        async createSocketScopeNotifications(socketIoInstance) {
            const userTaskReachedSubscription = this.eventAggregator.subscribe(management_api_contracts_1.Messages.EventAggregatorSettings.messagePaths.userTaskReached, (userTaskWaitingMessage) => {
                socketIoInstance.emit(management_api_contracts_1.socketSettings.paths.userTaskWaiting, userTaskWaitingMessage);
            });
            const userTaskFinishedSubscription = this.eventAggregator.subscribe(management_api_contracts_1.Messages.EventAggregatorSettings.messagePaths.userTaskFinished, (userTaskFinishedMessage) => {
                socketIoInstance.emit(management_api_contracts_1.socketSettings.paths.userTaskFinished, userTaskFinishedMessage);
            });
            this.endpointSubscriptions.push(userTaskReachedSubscription);
            this.endpointSubscriptions.push(userTaskFinishedSubscription);
        }
        /**
         * Creates a number of Subscriptions for events that are only published for
         * certain identities.
         * An example would be "UserTask started by User with ID 123456".
         *
         * @async
         * @param socket   The socketIO client on which to create the subscriptions.
         * @param identity The identity for which to create the subscriptions
         */
        async createUserScopeNotifications(socket, identity) {
            const userSubscriptions = [];
            const onUserTaskForIdentityWaitingSubscription = await this.managementApiNotificationService.onUserTaskForIdentityWaiting(identity, (message) => {
                const eventToPublish = management_api_contracts_1.socketSettings.paths.userTaskForIdentityWaiting
                    .replace(management_api_contracts_1.socketSettings.pathParams.userId, identity.userId);
                socket.emit(eventToPublish, message);
            });
            const onUserTaskForIdentityFinishedSubscription = await this.managementApiNotificationService.onUserTaskForIdentityFinished(identity, (message) => {
                const eventToPublish = management_api_contracts_1.socketSettings.paths.userTaskForIdentityFinished
                    .replace(management_api_contracts_1.socketSettings.pathParams.userId, identity.userId);
                socket.emit(eventToPublish, message);
            });
            userSubscriptions.push(onUserTaskForIdentityWaitingSubscription);
            userSubscriptions.push(onUserTaskForIdentityFinishedSubscription);
            this.userSubscriptions[identity.userId] = userSubscriptions;
        }
        /**
         * Clears out all Subscriptions for the given identity.
         * Should only be used when a client disconnects.
         *
         * @async
         * @param identity The identity for which to remove the Subscriptions.
         */
        async clearUserScopeNotifications(identity) {
            logger.verbose(`Clearing subscriptions for user with ID ${identity.userId}`);
            const userSubscriptions = this.userSubscriptions[identity.userId];
            const noSubscriptionsFound = !userSubscriptions;
            if (noSubscriptionsFound) {
                logger.verbose(`No subscriptions for user with ID ${identity.userId} found.`);
                return;
            }
            for (const subscription of userSubscriptions) {
                await this.managementApiNotificationService.removeSubscription(identity, subscription);
            }
            delete this.userSubscriptions[identity.userId];
        }
    }
    exports.UserTaskSocketEndpoint = UserTaskSocketEndpoint;
});
//# sourceMappingURL=user_task_socket_endpoint.js.map