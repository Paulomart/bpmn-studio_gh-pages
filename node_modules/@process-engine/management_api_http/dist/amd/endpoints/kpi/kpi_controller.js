define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class KpiController {
        constructor(kpiService) {
            this.httpCodeSuccessfulResponse = 200;
            this.kpiService = kpiService;
        }
        async getRuntimeInformationForProcessModel(request, response) {
            const identity = request.identity;
            const processModelId = request.params.process_model_id;
            const offset = request.query.offset || 0;
            const limit = request.query.limit || 0;
            const result = await this.kpiService.getRuntimeInformationForProcessModel(identity, processModelId, offset, limit);
            response.status(this.httpCodeSuccessfulResponse).json(result);
        }
        async getRuntimeInformationForFlowNode(request, response) {
            const identity = request.identity;
            const processModelId = request.params.process_model_id;
            const flowNodeId = request.params.flow_node_id;
            const result = await this.kpiService.getRuntimeInformationForFlowNode(identity, processModelId, flowNodeId);
            response.status(this.httpCodeSuccessfulResponse).json(result);
        }
        async getActiveTokensForProcessModel(request, response) {
            const identity = request.identity;
            const processModelId = request.params.process_model_id;
            const offset = request.query.offset || 0;
            const limit = request.query.limit || 0;
            const result = await this.kpiService.getActiveTokensForProcessModel(identity, processModelId, offset, limit);
            response.status(this.httpCodeSuccessfulResponse).json(result);
        }
        async getActiveTokensForProcessInstance(request, response) {
            const identity = request.identity;
            const processInstanceId = request.params.process_instance_id;
            const offset = request.query.offset || 0;
            const limit = request.query.limit || 0;
            const result = await this.kpiService.getActiveTokensForProcessInstance(identity, processInstanceId, offset, limit);
            response.status(this.httpCodeSuccessfulResponse).json(result);
        }
        async getActiveTokensForCorrelationAndProcessModel(request, response) {
            const identity = request.identity;
            const correlationId = request.params.correlation_id;
            const processModelId = request.params.process_model_id;
            const offset = request.query.offset || 0;
            const limit = request.query.limit || 0;
            const result = await this
                .kpiService
                .getActiveTokensForCorrelationAndProcessModel(identity, correlationId, processModelId, offset, limit);
            response.status(this.httpCodeSuccessfulResponse).json(result);
        }
        async getActiveTokensForFlowNode(request, response) {
            const identity = request.identity;
            const flowNodeId = request.params.flow_node_id;
            const offset = request.query.offset || 0;
            const limit = request.query.limit || 0;
            const result = await this.kpiService.getActiveTokensForFlowNode(identity, flowNodeId, offset, limit);
            response.status(this.httpCodeSuccessfulResponse).json(result);
        }
    }
    exports.KpiController = KpiController;
});
//# sourceMappingURL=kpi_controller.js.map