"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class UserTaskController {
    constructor(userTaskService) {
        this.httpCodeSuccessfulResponse = 200;
        this.httpCodeSuccessfulNoContentResponse = 204;
        this.userTaskService = userTaskService;
    }
    async getUserTasksForProcessModel(request, response) {
        const processModelId = request.params.process_model_id;
        const identity = request.identity;
        const offset = request.query.offset || 0;
        const limit = request.query.limit || 0;
        const result = await this.userTaskService.getUserTasksForProcessModel(identity, processModelId, offset, limit);
        response.status(this.httpCodeSuccessfulResponse).json(result);
    }
    async getUserTasksForProcessInstance(request, response) {
        const processInstanceId = request.params.process_instance_id;
        const identity = request.identity;
        const offset = request.query.offset || 0;
        const limit = request.query.limit || 0;
        const result = await this.userTaskService.getUserTasksForProcessInstance(identity, processInstanceId, offset, limit);
        response.status(this.httpCodeSuccessfulResponse).json(result);
    }
    async getUserTasksForCorrelation(request, response) {
        const correlationId = request.params.correlation_id;
        const identity = request.identity;
        const offset = request.query.offset || 0;
        const limit = request.query.limit || 0;
        const result = await this.userTaskService.getUserTasksForCorrelation(identity, correlationId, offset, limit);
        response.status(this.httpCodeSuccessfulResponse).json(result);
    }
    async getUserTasksForProcessModelInCorrelation(request, response) {
        const processModelId = request.params.process_model_id;
        const correlationId = request.params.correlation_id;
        const identity = request.identity;
        const offset = request.query.offset || 0;
        const limit = request.query.limit || 0;
        const result = await this.userTaskService.getUserTasksForProcessModelInCorrelation(identity, processModelId, correlationId, offset, limit);
        response.status(this.httpCodeSuccessfulResponse).json(result);
    }
    async getWaitingUserTasksByIdentity(request, response) {
        const identity = request.identity;
        const offset = request.query.offset || 0;
        const limit = request.query.limit || 0;
        const result = await this.userTaskService.getWaitingUserTasksByIdentity(identity, offset, limit);
        response.status(this.httpCodeSuccessfulResponse).json(result);
    }
    async finishUserTask(request, response) {
        const identity = request.identity;
        const processInstanceId = request.params.process_instance_id;
        const correlationId = request.params.correlation_id;
        const userTaskInstanceId = request.params.user_task_instance_id;
        const userTaskResult = request.body;
        await this.userTaskService.finishUserTask(identity, processInstanceId, correlationId, userTaskInstanceId, userTaskResult);
        response.status(this.httpCodeSuccessfulNoContentResponse).send();
    }
}
exports.UserTaskController = UserTaskController;
//# sourceMappingURL=user_task_controller.js.map