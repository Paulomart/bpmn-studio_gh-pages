"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class ManualTaskController {
    constructor(manualTaskService) {
        this.httpCodeSuccessfulResponse = 200;
        this.httpCodeSuccessfulNoContentResponse = 204;
        this.manualTaskService = manualTaskService;
    }
    async getManualTasksForProcessModel(request, response) {
        const processModelId = request.params.process_model_id;
        const identity = request.identity;
        const offset = request.query.offset || 0;
        const limit = request.query.limit || 0;
        const result = await this.manualTaskService.getManualTasksForProcessModel(identity, processModelId, offset, limit);
        response.status(this.httpCodeSuccessfulResponse).json(result);
    }
    async getManualTasksForProcessInstance(request, response) {
        const processInstanceId = request.params.process_instance_id;
        const identity = request.identity;
        const offset = request.query.offset || 0;
        const limit = request.query.limit || 0;
        const result = await this.manualTaskService.getManualTasksForProcessInstance(identity, processInstanceId, offset, limit);
        response.status(this.httpCodeSuccessfulResponse).json(result);
    }
    async getManualTasksForCorrelation(request, response) {
        const correlationId = request.params.correlation_id;
        const identity = request.identity;
        const offset = request.query.offset || 0;
        const limit = request.query.limit || 0;
        const result = await this.manualTaskService.getManualTasksForCorrelation(identity, correlationId, offset, limit);
        response.status(this.httpCodeSuccessfulResponse).json(result);
    }
    async getManualTasksForProcessModelInCorrelation(request, response) {
        const processModelId = request.params.process_model_id;
        const correlationId = request.params.correlation_id;
        const identity = request.identity;
        const offset = request.query.offset || 0;
        const limit = request.query.limit || 0;
        const result = await this.manualTaskService.getManualTasksForProcessModelInCorrelation(identity, processModelId, correlationId, offset, limit);
        response.status(this.httpCodeSuccessfulResponse).json(result);
    }
    async getWaitingManualTasksByIdentity(request, response) {
        const identity = request.identity;
        const offset = request.query.offset || 0;
        const limit = request.query.limit || 0;
        const result = await this.manualTaskService.getWaitingManualTasksByIdentity(identity, offset, limit);
        response.status(this.httpCodeSuccessfulResponse).json(result);
    }
    async finishManualTask(request, response) {
        const correlationId = request.params.correlation_id;
        const identity = request.identity;
        const processInstanceId = request.params.process_instance_id;
        const manualTaskInstanceId = request.params.manual_task_instance_id;
        await this.manualTaskService.finishManualTask(identity, processInstanceId, correlationId, manualTaskInstanceId);
        response.status(this.httpCodeSuccessfulNoContentResponse).send();
    }
}
exports.ManualTaskController = ManualTaskController;
//# sourceMappingURL=manual_task_controller.js.map