"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class EmptyActivityController {
    constructor(emptyActivityService) {
        this.httpCodeSuccessfulResponse = 200;
        this.httpCodeSuccessfulNoContentResponse = 204;
        this.emptyActivityService = emptyActivityService;
    }
    async getEmptyActivitiesForProcessModel(request, response) {
        const processModelId = request.params.process_model_id;
        const identity = request.identity;
        const offset = request.query.offset || 0;
        const limit = request.query.limit || 0;
        const result = await this.emptyActivityService.getEmptyActivitiesForProcessModel(identity, processModelId, offset, limit);
        response.status(this.httpCodeSuccessfulResponse).json(result);
    }
    async getEmptyActivitiesForProcessInstance(request, response) {
        const processInstanceId = request.params.process_instance_id;
        const identity = request.identity;
        const offset = request.query.offset || 0;
        const limit = request.query.limit || 0;
        const result = await this.emptyActivityService.getEmptyActivitiesForProcessInstance(identity, processInstanceId, offset, limit);
        response.status(this.httpCodeSuccessfulResponse).json(result);
    }
    async getEmptyActivitiesForCorrelation(request, response) {
        const correlationId = request.params.correlation_id;
        const identity = request.identity;
        const offset = request.query.offset || 0;
        const limit = request.query.limit || 0;
        const result = await this.emptyActivityService.getEmptyActivitiesForCorrelation(identity, correlationId, offset, limit);
        response.status(this.httpCodeSuccessfulResponse).json(result);
    }
    async getEmptyActivitiesForProcessModelInCorrelation(request, response) {
        const processModelId = request.params.process_model_id;
        const correlationId = request.params.correlation_id;
        const identity = request.identity;
        const offset = request.query.offset || 0;
        const limit = request.query.limit || 0;
        const result = await this.emptyActivityService.getEmptyActivitiesForProcessModelInCorrelation(identity, processModelId, correlationId, offset, limit);
        response.status(this.httpCodeSuccessfulResponse).json(result);
    }
    async getWaitingEmptyActivitiesByIdentity(request, response) {
        const identity = request.identity;
        const offset = request.query.offset || 0;
        const limit = request.query.limit || 0;
        const result = await this.emptyActivityService.getWaitingEmptyActivitiesByIdentity(identity, offset, limit);
        response.status(this.httpCodeSuccessfulResponse).json(result);
    }
    async finishEmptyActivity(request, response) {
        const identity = request.identity;
        const processInstanceId = request.params.process_instance_id;
        const correlationId = request.params.correlation_id;
        const emptyActivityInstanceId = request.params.empty_activity_instance_id;
        await this.emptyActivityService.finishEmptyActivity(identity, processInstanceId, correlationId, emptyActivityInstanceId);
        response.status(this.httpCodeSuccessfulNoContentResponse).send();
    }
}
exports.EmptyActivityController = EmptyActivityController;
//# sourceMappingURL=empty_activity_controller.js.map