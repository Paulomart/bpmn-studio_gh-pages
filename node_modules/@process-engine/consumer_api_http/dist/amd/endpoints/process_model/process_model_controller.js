define(["require", "exports", "@process-engine/consumer_api_contracts"], function (require, exports, consumer_api_contracts_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class ProcessModelController {
        constructor(processModelService) {
            this.httpCodeSuccessfulResponse = 200;
            this.processModelService = processModelService;
        }
        async getProcessModels(request, response) {
            const identity = request.identity;
            const offset = request.query.offset || 0;
            const limit = request.query.limit || 0;
            const result = await this.processModelService.getProcessModels(identity, offset, limit);
            response.status(this.httpCodeSuccessfulResponse).json(result);
        }
        async getProcessModelById(request, response) {
            const processModelId = request.params.process_model_id;
            const identity = request.identity;
            const result = await this.processModelService.getProcessModelById(identity, processModelId);
            response.status(this.httpCodeSuccessfulResponse).json(result);
        }
        async getProcessModelByProcessInstanceId(request, response) {
            const processInstanceId = request.params.process_instance_id;
            const identity = request.identity;
            const result = await this.processModelService.getProcessModelByProcessInstanceId(identity, processInstanceId);
            response.status(this.httpCodeSuccessfulResponse).json(result);
        }
        async startProcessInstance(request, response) {
            const processModelId = request.params.process_model_id;
            const startEventId = request.query.start_event_id;
            const endEventId = request.query.end_event_id;
            const payload = request.body;
            let startCallbackType = Number.parseInt(request.query.start_callback_type);
            if (!startCallbackType) {
                startCallbackType = consumer_api_contracts_1.DataModels.ProcessModels.StartCallbackType.CallbackOnProcessInstanceCreated;
            }
            const identity = request.identity;
            const result = await this
                .processModelService
                .startProcessInstance(identity, processModelId, payload, startCallbackType, startEventId, endEventId);
            response.status(this.httpCodeSuccessfulResponse).json(result);
        }
        async getProcessResultForCorrelation(request, response) {
            const correlationId = request.params.correlation_id;
            const processModelId = request.params.process_model_id;
            const identity = request.identity;
            const result = await this.processModelService.getProcessResultForCorrelation(identity, correlationId, processModelId);
            response.status(this.httpCodeSuccessfulResponse).json(result);
        }
        async getProcessInstancesByIdentity(request, response) {
            const identity = request.identity;
            const offset = request.query.offset || 0;
            const limit = request.query.limit || 0;
            const result = await this.processModelService.getProcessInstancesByIdentity(identity, offset, limit);
            response.status(this.httpCodeSuccessfulResponse).json(result);
        }
    }
    exports.ProcessModelController = ProcessModelController;
});
//# sourceMappingURL=process_model_controller.js.map