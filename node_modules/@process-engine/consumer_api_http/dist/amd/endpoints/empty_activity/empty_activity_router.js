define(["require", "exports", "async-middleware", "@essential-projects/http_node", "@process-engine/consumer_api_contracts", "../../middlewares/resolve_identity"], function (require, exports, async_middleware_1, http_node_1, consumer_api_contracts_1, resolve_identity_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class EmptyActivityRouter extends http_node_1.BaseRouter {
        constructor(emptyActivityController, identityService) {
            super();
            this.emptyActivityController = emptyActivityController;
            this.identityService = identityService;
        }
        get baseRoute() {
            return 'api/consumer/v1';
        }
        async initializeRouter() {
            this.registerMiddlewares();
            this.registerRoutes();
        }
        registerMiddlewares() {
            const resolveIdentity = resolve_identity_1.createResolveIdentityMiddleware(this.identityService);
            this.router.use(async_middleware_1.wrap(resolveIdentity));
        }
        registerRoutes() {
            const controller = this.emptyActivityController;
            this.router.get(consumer_api_contracts_1.restSettings.paths.processModelEmptyActivities, async_middleware_1.wrap(controller.getEmptyActivitiesForProcessModel.bind(controller)));
            this.router.get(consumer_api_contracts_1.restSettings.paths.processInstanceEmptyActivities, async_middleware_1.wrap(controller.getEmptyActivitiesForProcessInstance.bind(controller)));
            this.router.get(consumer_api_contracts_1.restSettings.paths.correlationEmptyActivities, async_middleware_1.wrap(controller.getEmptyActivitiesForCorrelation.bind(controller)));
            this.router.get(consumer_api_contracts_1.restSettings.paths.processModelCorrelationEmptyActivities, async_middleware_1.wrap(controller.getEmptyActivitiesForProcessModelInCorrelation.bind(controller)));
            this.router.get(consumer_api_contracts_1.restSettings.paths.getOwnEmptyActivities, async_middleware_1.wrap(controller.getWaitingEmptyActivitiesByIdentity.bind(controller)));
            this.router.post(consumer_api_contracts_1.restSettings.paths.finishEmptyActivity, async_middleware_1.wrap(controller.finishEmptyActivity.bind(controller)));
        }
    }
    exports.EmptyActivityRouter = EmptyActivityRouter;
});
//# sourceMappingURL=empty_activity_router.js.map