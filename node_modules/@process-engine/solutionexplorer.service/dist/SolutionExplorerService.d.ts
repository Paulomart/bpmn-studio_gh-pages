import { IFileChangedCallback, ISolutionExplorerService } from '@process-engine/solutionexplorer.service.contracts';
import { IDiagram, ISolution } from '@process-engine/solutionexplorer.contracts';
import { ISolutionExplorerRepository } from '@process-engine/solutionexplorer.repository.contracts';
import { IIdentity } from '@essential-projects/iam_contracts';
export declare class SolutionExplorerService implements ISolutionExplorerService {
    private readonly repository;
    private pathspec;
    constructor(repository: ISolutionExplorerRepository);
    watchFile(filepath: string, callback: IFileChangedCallback): void;
    unwatchFile(filepath: string): void;
    watchSolution(callback: Function): string;
    unwatchSolution(id: string): void;
    openSolution(pathspec: string, identity: IIdentity): Promise<void>;
    loadSolution(): Promise<ISolution>;
    saveSolution(solution: ISolution, path?: string): Promise<void>;
    loadDiagram(diagramName: string, pathspec?: string): Promise<IDiagram>;
    saveDiagram(diagram: IDiagram, pathspec?: string): Promise<void>;
    renameDiagram(diagram: IDiagram, newName: string): Promise<IDiagram>;
    deleteDiagram(diagram: IDiagram): Promise<void>;
}
