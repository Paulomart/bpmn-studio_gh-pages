"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const Umzug = require("umzug");
const sequelize_connection_manager_1 = require("@essential-projects/sequelize_connection_manager");
const sequelizeConnectionManager = new sequelize_connection_manager_1.SequelizeConnectionManager();
// Based on: https://github.com/abelnation/sequelize-migration-hello/blob/master/migrate.js
async function migrate(repositoryName) {
    const env = process.env.NODE_ENV || 'test-postgres';
    const sequelizeInstanceConfig = getConfig(env, repositoryName);
    const sequelizeInstance = await sequelizeConnectionManager.getConnection(sequelizeInstanceConfig);
    const umzugInstance = await createUmzugInstance(sequelizeInstance, repositoryName, sequelizeInstanceConfig.dialect);
    await umzugInstance.up();
    await sequelizeConnectionManager.destroyConnection(sequelizeInstanceConfig);
}
exports.migrate = migrate;
function getConfig(env, repositoryName) {
    const config = readConfigFile(env, `${repositoryName}_repository.json`);
    if (config.dialect === 'sqlite') {
        // Jenkins stores its sqlite databases in a separate workspace folder.
        // We must account for this here.
        const sqlitePath = process.env.jenkinsDbStoragePath
            ? path.resolve(`${process.env.jenkinsDbStoragePath}, ${config.storage}`)
            : config.storage;
        config.storage = sqlitePath;
    }
    // Jenkins uses customized host names for mysql and postgres. We need to account for that fact here,
    // or the migrations will fail.
    const customHostName = process.env[`process_engine__${repositoryName}_repository__host`];
    if (customHostName !== undefined) {
        config.host = customHostName;
    }
    return config;
}
async function createUmzugInstance(sequelize, database, dbDialect) {
    let dirNameNormalized = path.normalize(process.cwd());
    const appAsarPathPart = path.normalize(path.join('.', 'app.asar'));
    if (dirNameNormalized.indexOf('app.asar') > -1) {
        dirNameNormalized = dirNameNormalized.replace(appAsarPathPart, '');
    }
    const migrationsPath = path.join(dirNameNormalized, 'sequelize', 'migrations', database);
    const umzug = new Umzug({
        storage: 'sequelize',
        storageOptions: {
            sequelize: sequelize,
        },
        // see: https://github.com/sequelize/umzug/issues/17
        migrations: {
            params: [
                sequelize.getQueryInterface(),
                sequelize.constructor,
                dbDialect,
            ],
            path: migrationsPath,
            pattern: /\.js$/,
        },
        logging: (args) => {
            console.log(args);
        },
    });
    return umzug;
}
function readConfigFile(env, repositoryConfigFileName) {
    const configFilePath = path.resolve(process.env.CONFIG_PATH, env, 'process_engine', repositoryConfigFileName);
    const fileContent = fs.readFileSync(configFilePath, 'utf-8');
    const parsedFileContent = JSON.parse(fileContent);
    return parsedFileContent;
}
//# sourceMappingURL=test_migrator.js.map