"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-explicit-any */
const jsonwebtoken = require("jsonwebtoken");
const loggerhythm_1 = require("loggerhythm");
const consumer_api_contracts_1 = require("@process-engine/consumer_api_contracts");
const consumer_api_client_1 = require("@process-engine/consumer_api_client");
const logger = loggerhythm_1.Logger.createLogger('processengine:external_task:sample_worker');
/**
 * Wraps an ExternalTaskWorker with a sample config and identity for easy use with the integrationtests.
 */
class ExternalTaskSampleWorker {
    constructor(identityService) {
        this.identityService = identityService;
    }
    async initialize() {
        const tokenBody = {
            sub: this.config.workerId || 'dummy_token',
            name: 'sample_worker',
        };
        const signOptions = {
            expiresIn: 60,
        };
        const encodedToken = jsonwebtoken.sign(tokenBody, 'randomkey', signOptions);
        this.sampleIdentity = await this.identityService.getIdentity(encodedToken);
        this.externalTaskWorker = new consumer_api_client_1.ExternalTaskWorker(this.config.processEngineUrl, this.sampleIdentity, this.config.topicName, this.config.maxTasks, this.config.longPollingTimeout, this.processExternalTask);
    }
    start() {
        this.externalTaskWorker.start();
    }
    stop() {
        this.externalTaskWorker.stop();
    }
    async processExternalTask(externalTask) {
        logger.info(`Processing ExternalTask ${externalTask.id}.`);
        const sampleResult = {
            testResults: externalTask.payload,
        };
        logger.info(`Finished processing ExternalTask with ID ${externalTask.id}.`);
        return new consumer_api_contracts_1.DataModels.ExternalTask.ExternalTaskSuccessResult(externalTask.id, sampleResult);
    }
}
exports.ExternalTaskSampleWorker = ExternalTaskSampleWorker;
//# sourceMappingURL=external_task_sample_worker.js.map