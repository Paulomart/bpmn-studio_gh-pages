"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const Umzug = require("umzug");
const sequelize_connection_manager_1 = require("@essential-projects/sequelize_connection_manager");
const environment = require("./environment");
const sequelizeConnectionManager = new sequelize_connection_manager_1.SequelizeConnectionManager();
// Based on: https://github.com/abelnation/sequelize-migration-hello/blob/master/migrate.js
async function migrate(repositoryName, sqlitePath) {
    const env = process.env.NODE_ENV || 'sqlite';
    const sequelizeInstanceConfig = getConfig(env, repositoryName, sqlitePath);
    const sequelizeInstance = await sequelizeConnectionManager.getConnection(sequelizeInstanceConfig);
    const umzugInstance = await createUmzugInstance(sequelizeInstance, repositoryName, sequelizeInstanceConfig.dialect);
    await umzugInstance.up();
    await sequelizeConnectionManager.destroyConnection(sequelizeInstanceConfig);
}
exports.migrate = migrate;
function getConfig(env, repositoryName, sqlitePath) {
    const repositoryConfigFileName = `${repositoryName}_repository.json`;
    const config = environment.readConfigFile(env, 'process_engine', repositoryConfigFileName);
    if (config.dialect === 'sqlite') {
        const fullSqlitePath = environment.getSqliteStoragePath(sqlitePath);
        config.storage = path.resolve(fullSqlitePath, config.storage);
    }
    return config;
}
async function createUmzugInstance(sequelize, database, dbDialect) {
    // Must go two folders back to get out of /dist/commonjs.
    const rootDirName = path.join(__dirname, '..', '..', '..');
    let dirNameNormalized = path.normalize(rootDirName);
    const appAsarPathPart = path.normalize(path.join('.', 'app.asar'));
    if (dirNameNormalized.includes('app.asar')) {
        dirNameNormalized = dirNameNormalized.replace(appAsarPathPart, '');
    }
    const migrationsPath = path.join(dirNameNormalized, 'sequelize', 'migrations', database);
    const umzug = new Umzug({
        storage: 'sequelize',
        storageOptions: {
            sequelize: sequelize,
        },
        // see: https://github.com/sequelize/umzug/issues/17
        migrations: {
            params: [
                sequelize.getQueryInterface(),
                sequelize.constructor,
                dbDialect,
            ],
            path: migrationsPath,
            pattern: /\.js$/,
        },
        logging: (args) => {
            console.log(args);
        },
    });
    return umzug;
}
//# sourceMappingURL=migrator.js.map