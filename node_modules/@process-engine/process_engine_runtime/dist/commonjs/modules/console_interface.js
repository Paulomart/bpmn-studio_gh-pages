"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
const readline = require("readline");
const environment = require("./environment");
let container;
const commands = ['exit', 'help', 'httpconfig', 'version'];
const commandDelegates = {
    exit: () => exitApplication(),
    help: () => printHelp(),
    httpconfig: () => printHttpInfo(),
    version: () => printVersion(),
};
let httpIsEnabled;
function initialize(iocContainer, httpEnabled) {
    container = iocContainer;
    httpIsEnabled = httpEnabled;
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout,
    });
    rl.on('line', processCommand);
    console.log('');
    console.log(chalk.yellowBright('Type \'help\' to get a list of available console commands.'));
    console.log('');
}
exports.initialize = initialize;
function processCommand(command) {
    const commandIsEmpty = command.trim().length === 0;
    if (commandIsEmpty) {
        return;
    }
    const isValidCommand = commands.some((cmd) => cmd === command);
    if (isValidCommand) {
        commandDelegates[command]();
    }
    else {
        console.log(chalk.redBright('Unknown command: '), command);
        printHelp();
    }
}
function exitApplication() {
    console.log('');
    console.log(chalk.blueBright('Sending shutdown signal...'));
    console.log('');
    process.exit(0);
}
function printHelp() {
    const help = `${chalk.yellow('Available Commands')}:

  ${chalk.blueBright('exit')}:       Shuts the ProcessEngineRuntime down
  ${chalk.blueBright('version')}:    Prints the version of the ProcessEngineRuntime
  ${chalk.blueBright('httpconfig')}: Prints the ProcessEngineRuntime's http settings (port, address and IP protocol)
  ${chalk.blueBright('help')}:       Prints this dialog
  `;
    console.log(help);
}
function printHttpInfo() {
    if (httpIsEnabled === false) {
        console.log('');
        console.log(chalk.blueBright('Http is disabled.'));
        console.log('');
    }
    else {
        const httpExtension = container.resolve('HttpExtension');
        const httpInfo = httpExtension.httpServer.address();
        const addressHasHttpPrefix = httpInfo.address.startsWith('http://') || httpInfo.address.startsWith('https://');
        const showcaseHttpAddress = addressHasHttpPrefix
            ? httpInfo.address
            : `http://${httpInfo.address}`;
        console.log('');
        console.log(chalk.blueBright('Http address: '), showcaseHttpAddress);
        console.log(chalk.blueBright('Http port: '), httpInfo.port);
        console.log(chalk.blueBright('IP protocol: '), httpInfo.family);
        console.log('');
    }
}
function printVersion() {
    const packageJson = environment.readPackageJson();
    console.log('');
    console.log(`${chalk.blueBright('ProcessEngineRuntime version')}: `, packageJson.version);
    console.log('');
}
//# sourceMappingURL=console_interface.js.map