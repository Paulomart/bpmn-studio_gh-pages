define(["require", "exports", "@essential-projects/errors_ts"], function (require, exports, errors_ts_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class IamServiceMock {
        constructor() {
            this.claimConfigs = {
                // Can access everything
                defaultUser: [
                    'can_read_process_model',
                    'can_delete_process_model',
                    'can_write_process_model',
                    'can_access_external_tasks',
                    'can_subscribe_to_events',
                    'can_terminate_process',
                    'can_trigger_messages',
                    'can_trigger_signals',
                    'can_read_cronjob_history',
                    'Default_Test_Lane',
                    'LaneA',
                    'LaneB',
                    'LaneC',
                ],
                secondDefaultUser: [
                    'can_read_process_model',
                    'can_delete_process_model',
                    'can_write_process_model',
                    'can_access_external_tasks',
                    'can_subscribe_to_events',
                    'can_trigger_messages',
                    'can_trigger_signals',
                    'can_read_cronjob_history',
                    'Default_Test_Lane',
                    'LaneA',
                    'LaneB',
                    'LaneC',
                ],
                // Used for testing the process model filter
                restrictedUser: [
                    'can_read_process_model',
                ],
                // Sublane Testuser
                userWithAccessToSubLaneC: [
                    'can_read_process_model',
                    'LaneA',
                    'LaneC',
                ],
                // Sublane Testuser
                userWithAccessToLaneA: [
                    'can_read_process_model',
                    'LaneA',
                ],
                // Sublane Testuser
                userWithNoAccessToLaneA: [
                    'can_read_process_model',
                    'LaneB',
                    'LaneC',
                ],
                // Super Admin - Can see all ProcessModels, Tasks and Correlations
                superAdmin: [
                    'can_manage_process_instances',
                ],
            };
        }
        async ensureHasClaim(identity, claimName) {
            const isDummyToken = identity.userId === 'dummy_token';
            const isSuperAdmin = identity.userId === 'superAdmin';
            const isInternalUser = identity.userId === 'ProcessEngineInternalUser';
            if (isDummyToken || isSuperAdmin || isInternalUser) {
                return Promise.resolve();
            }
            if (identity.userId === 'forbiddenUser') {
                throw new errors_ts_1.ForbiddenError('access denied');
            }
            const matchingUserConfig = this.claimConfigs[identity.userId];
            if (!matchingUserConfig) {
                throw new errors_ts_1.ForbiddenError('access denied');
            }
            const userHasClaim = matchingUserConfig.some((claim) => {
                return claim === claimName;
            });
            if (!userHasClaim) {
                throw new errors_ts_1.ForbiddenError('access denied');
            }
            return Promise.resolve();
        }
    }
    exports.IamServiceMock = IamServiceMock;
});
//# sourceMappingURL=iam_service_mock.js.map