define(["require", "exports", "loggerhythm"], function (require, exports, loggerhythm_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const logger = loggerhythm_1.Logger.createLogger('parallel_gateway:parallel_gateway_test_service');
    class ParallelGatewayTestService {
        async currentTokenTestPart1() {
            const currentTokenValue = 'current token test value';
            logger.info(`Setting the expected token.current value to: ${currentTokenValue}`);
            return currentTokenValue;
        }
        async currentTokenTestPart2(currentTokenValue) {
            logger.info(`currentTokenTestPart2 has received current token: ${currentTokenValue}`);
            return currentTokenValue;
        }
        async longRunningFunction() {
            const timeout = 1000;
            await this.wait(timeout);
            logger.info('longRunningFunction has finished');
            return 'longRunningFunction has finished';
        }
        async veryLongRunningFunction() {
            const timeout = 3000;
            await this.wait(timeout);
            logger.info('veryLongRunningFunction has finished');
            return 'veryLongRunningFunction has finished';
        }
        async secondVeryLongRunningFunction() {
            const timeout = 3000;
            await this.wait(timeout);
            logger.info('secondVeryLongRunningFunction has finished');
            return 'secondVeryLongRunningFunction has finished';
        }
        async sequenceTestPart2UpdateToken(currentToken) {
            const timeout = 500;
            await this.wait(timeout);
            logger.info(`sequenceTestPart2UpdateToken has received current token: ${currentToken}`);
            const updatedToken = `UPDATED ${currentToken}`;
            logger.info(`updated token: ${updatedToken}`);
            return updatedToken;
        }
        async sequenceTestPart3Delay(currentToken) {
            const timeout = 1700;
            await this.wait(timeout);
            logger.info('sequenceTestPart3Delay has finished');
            return currentToken;
        }
        wait(milliseconds) {
            return new Promise((resolve) => {
                setTimeout(() => {
                    resolve();
                }, milliseconds);
            });
        }
    }
    exports.ParallelGatewayTestService = ParallelGatewayTestService;
});
//# sourceMappingURL=parallel_gateway_test_service.js.map