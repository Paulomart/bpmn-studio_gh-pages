define(["require", "exports", "@process-engine/consumer_api_client", "@process-engine/external_task_api_client", "@process-engine/management_api_client", "../mocks/index", "../test_services/index"], function (require, exports, consumer_api_client_1, external_task_api_client_1, management_api_client_1, index_1, index_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function registerInContainer(container) {
        const accessApisInternally = process.env.API_ACCESS_TYPE === 'internal';
        if (accessApisInternally) {
            registerApisWithInternalAccessors(container);
        }
        else {
            registerWithExternalAccessors(container);
        }
        container.register('ExternalTaskSampleWorker', index_2.ExternalTaskSampleWorker)
            .dependencies('IdentityService')
            .configure('external_task:sample_worker')
            .singleton();
        container.register('ParallelGatewayTestService', index_2.ParallelGatewayTestService);
        container.register('ServiceTaskTestService', index_2.ServiceTaskTestService);
        // This removes the necessity for having a running IdentityServer during testing.
        container.register('IamService', index_1.IamServiceMock);
    }
    exports.registerInContainer = registerInContainer;
    function registerApisWithInternalAccessors(container) {
        container.register('ConsumerApiInternalAccessor', consumer_api_client_1.InternalAccessor)
            .dependencies('ConsumerApiApplicationInfoService', 'ConsumerApiEmptyActivityService', 'ConsumerApiEventService', 'ConsumerApiExternalTaskService', 'ConsumerApiManualTaskService', 'ConsumerApiNotificationService', 'ConsumerApiProcessModelService', 'ConsumerApiUserTaskService', 'ConsumerApiFlowNodeInstanceService');
        container.register('ConsumerApiClient', consumer_api_client_1.ConsumerApiClient)
            .dependencies('ConsumerApiInternalAccessor');
        container.register('ExternalTaskApiInternalAccessor', external_task_api_client_1.ExternalTaskApiInternalAccessor)
            .dependencies('ConsumerApiExternalTaskService');
        container.register('ExternalTaskApiClient', external_task_api_client_1.ExternalTaskApiClientService)
            .dependencies('ExternalTaskApiInternalAccessor');
        container.register('ManagementApiInternalAccessor', management_api_client_1.InternalAccessor)
            .dependencies('ManagementApiCorrelationService', 'ManagementApiCronjobService', 'ManagementApiEmptyActivityService', 'ManagementApiEventService', 'ManagementApiFlowNodeInstanceService', 'ManagementApiKpiService', 'ManagementApiLoggingService', 'ManagementApiManualTaskService', 'ManagementApiNotificationService', 'ManagementApiProcessModelService', 'ManagementApiTokenHistoryService', 'ManagementApiUserTaskService');
        container.register('ManagementApiClient', management_api_client_1.ManagementApiClient)
            .dependencies('ManagementApiInternalAccessor');
    }
    function registerWithExternalAccessors(container) {
        container.register('ConsumerApiExternalAccessor', consumer_api_client_1.ExternalAccessor)
            .dependencies('HttpClient')
            .configure('consumer_api:external_accessor');
        container.register('ConsumerApiClient', consumer_api_client_1.ConsumerApiClient)
            .dependencies('ConsumerApiExternalAccessor');
        container.register('ExternalTaskApiExternalAccessor', external_task_api_client_1.ExternalTaskApiExternalAccessor)
            .dependencies('HttpClient');
        container.register('ExternalTaskApiClient', external_task_api_client_1.ExternalTaskApiClientService)
            .dependencies('ExternalTaskApiExternalAccessor');
        container.register('ManagementApiExternalAccessor', management_api_client_1.ExternalAccessor)
            .dependencies('HttpClient')
            .configure('management_api:external_accessor');
        container.register('ManagementApiClient', management_api_client_1.ManagementApiClient)
            .dependencies('ManagementApiExternalAccessor');
    }
});
//# sourceMappingURL=ioc_module.js.map