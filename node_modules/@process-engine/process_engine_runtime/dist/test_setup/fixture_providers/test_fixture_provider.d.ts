import { IIdentity } from '@essential-projects/iam_contracts';
import { APIs, IConsumerApiClient } from '@process-engine/consumer_api_contracts';
import { IManagementApiClient } from '@process-engine/management_api_contracts';
import { IExecuteProcessService } from '@process-engine/process_engine_contracts';
import { IProcessModelUseCases } from '@process-engine/persistence_api.contracts';
export declare type IdentityCollection = {
    [userName: string]: IIdentity;
};
export declare class TestFixtureProvider {
    private bootstrapper;
    private container;
    private _consumerApiClient;
    private _executeProcessService;
    private _externalTaskApiClient;
    private _sampleExternalTaskWorker;
    private _managementApiClient;
    private _processModelUseCases;
    private _identities;
    private enableHttp;
    get identities(): IdentityCollection;
    get consumerApiClient(): IConsumerApiClient;
    get externalTaskApiClient(): APIs.IExternalTaskConsumerApi;
    get managementApiClient(): IManagementApiClient;
    get executeProcessService(): IExecuteProcessService;
    get processModelUseCases(): IProcessModelUseCases;
    initializeAndStart(enableHttp?: boolean, useHttpRootRoutes?: boolean): Promise<void>;
    tearDown(): Promise<void>;
    resolve<TModule>(moduleName: string, args?: any): TModule;
    resolveAsync<TModule>(moduleName: string, args?: any): Promise<TModule>;
    importProcessFiles(processFileNames: Array<string>): Promise<void>;
    readProcessModelFile(processFileName: string): string;
    getBpmnDirectoryPath(): string;
    executeProcess(processModelId: string, startEventId: string, correlationId: string, initialToken?: any): Promise<any>;
    clearDatabases(): Promise<void>;
    clearLogsAndMetrics(): Promise<void>;
    private runMigrations;
    private runPostMigrations;
    private initializeBootstrapper;
    private createMockIdentities;
    private createIdentity;
    private registerProcess;
    private readProcessModelFromFile;
    private execAsync;
}
