import { IHttpClient, IRequestOptions, IResponse } from '@essential-projects/http_contracts';
import * as popsicle from 'popsicle';
export declare class HttpClient implements IHttpClient {
    config: {
        [propertyName: string]: string;
    };
    private httpSuccessResponseCode;
    private httpRedirectResponseCode;
    get<TResponse>(url: string, options?: IRequestOptions): Promise<IResponse<TResponse>>;
    post<TPayload, TResult>(url: string, data: TPayload, options?: IRequestOptions): Promise<IResponse<TResult>>;
    put<TResult>(url: string, data: TResult, options?: IRequestOptions): Promise<IResponse<TResult>>;
    delete<TResult>(url: string, options?: IRequestOptions): Promise<IResponse<TResult>>;
    protected buildRequestOptions(method: string, url: string, options?: IRequestOptions): popsicle.RequestOptions;
    private deleteEmptyOptions;
    private evaluateResponse;
    private responseIsAnError;
    private createAndThrowError;
    private tryParseStringtoJson;
    private throwErrorFromString;
    private throwErrorFromObject;
    private throwEssentialProjectsError;
    private throwNonEssentialProjectsError;
    private isEssentialProjectsError;
}
