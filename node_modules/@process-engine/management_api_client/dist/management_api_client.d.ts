import { Subscription } from '@essential-projects/event_aggregator_contracts';
import { IIdentity } from '@essential-projects/iam_contracts';
import { DataModels, IManagementApiAccessor, IManagementApiClient, Messages } from '@process-engine/management_api_contracts';
export declare class ManagementApiClient implements IManagementApiClient {
    private managementApiAccessor;
    constructor(managementApiAccessor: IManagementApiAccessor);
    onActivityReached(identity: IIdentity, callback: Messages.CallbackTypes.OnActivityReachedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onActivityFinished(identity: IIdentity, callback: Messages.CallbackTypes.OnActivityFinishedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onEmptyActivityWaiting(identity: IIdentity, callback: Messages.CallbackTypes.OnEmptyActivityWaitingCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onEmptyActivityFinished(identity: IIdentity, callback: Messages.CallbackTypes.OnEmptyActivityFinishedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onEmptyActivityForIdentityWaiting(identity: IIdentity, callback: Messages.CallbackTypes.OnEmptyActivityWaitingCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onEmptyActivityForIdentityFinished(identity: IIdentity, callback: Messages.CallbackTypes.OnEmptyActivityFinishedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onUserTaskWaiting(identity: IIdentity, callback: Messages.CallbackTypes.OnUserTaskWaitingCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onUserTaskFinished(identity: IIdentity, callback: Messages.CallbackTypes.OnUserTaskFinishedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onUserTaskForIdentityWaiting(identity: IIdentity, callback: Messages.CallbackTypes.OnUserTaskWaitingCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onUserTaskForIdentityFinished(identity: IIdentity, callback: Messages.CallbackTypes.OnUserTaskFinishedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onBoundaryEventTriggered(identity: IIdentity, callback: Messages.CallbackTypes.OnBoundaryEventTriggeredCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onIntermediateThrowEventTriggered(identity: IIdentity, callback: Messages.CallbackTypes.OnIntermediateThrowEventTriggeredCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onIntermediateCatchEventReached(identity: IIdentity, callback: Messages.CallbackTypes.OnIntermediateCatchEventReachedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onIntermediateCatchEventFinished(identity: IIdentity, callback: Messages.CallbackTypes.OnIntermediateCatchEventFinishedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onManualTaskWaiting(identity: IIdentity, callback: Messages.CallbackTypes.OnManualTaskWaitingCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onManualTaskFinished(identity: IIdentity, callback: Messages.CallbackTypes.OnManualTaskFinishedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onManualTaskForIdentityWaiting(identity: IIdentity, callback: Messages.CallbackTypes.OnManualTaskWaitingCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onManualTaskForIdentityFinished(identity: IIdentity, callback: Messages.CallbackTypes.OnManualTaskFinishedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onProcessStarted(identity: IIdentity, callback: Messages.CallbackTypes.OnProcessStartedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onProcessWithProcessModelIdStarted(identity: IIdentity, callback: Messages.CallbackTypes.OnProcessStartedCallback, processModelId: string, subscribeOnce?: boolean): Promise<Subscription>;
    onProcessTerminated(identity: IIdentity, callback: Messages.CallbackTypes.OnProcessTerminatedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onProcessError(identity: IIdentity, callback: Messages.CallbackTypes.OnProcessErrorCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onProcessEnded(identity: IIdentity, callback: Messages.CallbackTypes.OnProcessEndedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onCronjobExecuted(identity: IIdentity, callback: Messages.CallbackTypes.OnCronjobExecutedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onCronjobCreated(identity: IIdentity, callback: Messages.CallbackTypes.OnCronjobCreatedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onCronjobUpdated(identity: IIdentity, callback: Messages.CallbackTypes.OnCronjobUpdatedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onCronjobStopped(identity: IIdentity, callback: Messages.CallbackTypes.OnCronjobStoppedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onCronjobRemoved(identity: IIdentity, callback: Messages.CallbackTypes.OnCronjobRemovedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    removeSubscription(identity: IIdentity, subscription: Subscription): Promise<void>;
    getAllCorrelations(identity: IIdentity, offset?: number, limit?: number): Promise<DataModels.Correlations.CorrelationList>;
    getActiveCorrelations(identity: IIdentity, offset?: number, limit?: number): Promise<DataModels.Correlations.CorrelationList>;
    getCorrelationById(identity: IIdentity, correlationId: string): Promise<DataModels.Correlations.Correlation>;
    getProcessInstanceById(identity: IIdentity, processInstanceId: string): Promise<DataModels.Correlations.ProcessInstance>;
    getCorrelationsByProcessModelId(identity: IIdentity, processModelId: string, offset?: number, limit?: number): Promise<DataModels.Correlations.CorrelationList>;
    getProcessInstancesForCorrelation(identity: IIdentity, correlationId: string, offset?: number, limit?: number): Promise<DataModels.Correlations.ProcessInstanceList>;
    getProcessInstancesForProcessModel(identity: IIdentity, processModelId: string, offset?: number, limit?: number): Promise<DataModels.Correlations.ProcessInstanceList>;
    getProcessInstancesByState(identity: IIdentity, state: DataModels.Correlations.CorrelationState, offset?: number, limit?: number): Promise<DataModels.Correlations.ProcessInstanceList>;
    getAllActiveCronjobs(identity: IIdentity, offset?: number, limit?: number): Promise<DataModels.Cronjobs.CronjobList>;
    getCronjobExecutionHistoryForProcessModel(identity: IIdentity, processModelId: string, startEventId?: string, offset?: number, limit?: number): Promise<DataModels.Cronjobs.CronjobHistoryList>;
    getCronjobExecutionHistoryForCrontab(identity: IIdentity, crontab: string, offset?: number, limit?: number): Promise<DataModels.Cronjobs.CronjobHistoryList>;
    getProcessModels(identity: IIdentity, offset?: number, limit?: number): Promise<DataModels.ProcessModels.ProcessModelList>;
    getProcessModelById(identity: IIdentity, processModelId: string): Promise<DataModels.ProcessModels.ProcessModel>;
    getProcessModelByProcessInstanceId(identity: IIdentity, processInstanceId: string): Promise<DataModels.ProcessModels.ProcessModel>;
    startProcessInstance(identity: IIdentity, processModelId: string, payload?: DataModels.ProcessModels.ProcessStartRequestPayload, startCallbackType?: DataModels.ProcessModels.StartCallbackType, startEventId?: string, endEventId?: string): Promise<DataModels.ProcessModels.ProcessStartResponsePayload>;
    getStartEventsForProcessModel(identity: IIdentity, processModelId: string): Promise<DataModels.Events.EventList>;
    updateProcessDefinitionsByName(identity: IIdentity, name: string, payload: DataModels.ProcessModels.UpdateProcessDefinitionsRequestPayload): Promise<void>;
    deleteProcessDefinitionsByProcessModelId(identity: IIdentity, processModelId: string): Promise<void>;
    terminateProcessInstance(identity: IIdentity, processInstanceId: string): Promise<void>;
    getEmptyActivitiesForProcessModel(identity: IIdentity, processModelId: string, offset?: number, limit?: number): Promise<DataModels.EmptyActivities.EmptyActivityList>;
    getEmptyActivitiesForProcessInstance(identity: IIdentity, processInstanceId: string, offset?: number, limit?: number): Promise<DataModels.EmptyActivities.EmptyActivityList>;
    getEmptyActivitiesForCorrelation(identity: IIdentity, correlationId: string, offset?: number, limit?: number): Promise<DataModels.EmptyActivities.EmptyActivityList>;
    getEmptyActivitiesForProcessModelInCorrelation(identity: IIdentity, processModelId: string, correlationId: string, offset?: number, limit?: number): Promise<DataModels.EmptyActivities.EmptyActivityList>;
    finishEmptyActivity(identity: IIdentity, processInstanceId: string, correlationId: string, emptyActivityInstanceId: string): Promise<void>;
    getWaitingEventsForProcessModel(identity: IIdentity, processModelId: string, offset?: number, limit?: number): Promise<DataModels.Events.EventList>;
    getWaitingEventsForCorrelation(identity: IIdentity, correlationId: string, offset?: number, limit?: number): Promise<DataModels.Events.EventList>;
    getWaitingEventsForProcessModelInCorrelation(identity: IIdentity, processModelId: string, correlationId: string, offset?: number, limit?: number): Promise<DataModels.Events.EventList>;
    triggerMessageEvent(identity: IIdentity, messageName: string, payload?: DataModels.Events.EventTriggerPayload): Promise<void>;
    triggerSignalEvent(identity: IIdentity, signalName: string, payload?: DataModels.Events.EventTriggerPayload): Promise<void>;
    getFlowNodeInstancesForProcessInstance(identity: IIdentity, processInstanceId: string, offset?: number, limit?: number): Promise<DataModels.FlowNodeInstances.FlowNodeInstanceList>;
    getManualTasksForProcessModel(identity: IIdentity, processModelId: string, offset?: number, limit?: number): Promise<DataModels.ManualTasks.ManualTaskList>;
    getManualTasksForProcessInstance(identity: IIdentity, processInstanceId: string, offset?: number, limit?: number): Promise<DataModels.ManualTasks.ManualTaskList>;
    getManualTasksForCorrelation(identity: IIdentity, correlationId: string, offset?: number, limit?: number): Promise<DataModels.ManualTasks.ManualTaskList>;
    getManualTasksForProcessModelInCorrelation(identity: IIdentity, processModelId: string, correlationId: string, offset?: number, limit?: number): Promise<DataModels.ManualTasks.ManualTaskList>;
    finishManualTask(identity: IIdentity, processInstanceId: string, correlationId: string, manualTaskInstanceId: string): Promise<void>;
    getUserTasksForProcessModel(identity: IIdentity, processModelId: string, offset?: number, limit?: number): Promise<DataModels.UserTasks.UserTaskList>;
    getUserTasksForProcessInstance(identity: IIdentity, processInstanceId: string, offset?: number, limit?: number): Promise<DataModels.UserTasks.UserTaskList>;
    getUserTasksForCorrelation(identity: IIdentity, correlationId: string, offset?: number, limit?: number): Promise<DataModels.UserTasks.UserTaskList>;
    getUserTasksForProcessModelInCorrelation(identity: IIdentity, processModelId: string, correlationId: string, offset?: number, limit?: number): Promise<DataModels.UserTasks.UserTaskList>;
    finishUserTask(identity: IIdentity, processInstanceId: string, correlationId: string, userTaskInstanceId: string, userTaskResult: DataModels.UserTasks.UserTaskResult): Promise<void>;
    getAllSuspendedTasks(identity: IIdentity, offset?: number, limit?: number): Promise<DataModels.FlowNodeInstances.TaskList>;
    getSuspendedTasksForProcessModel(identity: IIdentity, processModelId: string, offset?: number, limit?: number): Promise<DataModels.FlowNodeInstances.TaskList>;
    getSuspendedTasksForProcessInstance(identity: IIdentity, processInstanceId: string, offset?: number, limit?: number): Promise<DataModels.FlowNodeInstances.TaskList>;
    getSuspendedTasksForCorrelation(identity: IIdentity, correlationId: string, offset?: number, limit?: number): Promise<DataModels.FlowNodeInstances.TaskList>;
    getSuspendedTasksForProcessModelInCorrelation(identity: IIdentity, processModelId: string, correlationId: string, offset?: number, limit?: number): Promise<DataModels.FlowNodeInstances.TaskList>;
    getRuntimeInformationForProcessModel(identity: IIdentity, processModelId: string, offset?: number, limit?: number): Promise<DataModels.Kpi.FlowNodeRuntimeInformationList>;
    getRuntimeInformationForFlowNode(identity: IIdentity, processModelId: string, flowNodeId: string): Promise<DataModels.Kpi.FlowNodeRuntimeInformation>;
    getActiveTokensForProcessModel(identity: IIdentity, processModelId: string, offset?: number, limit?: number): Promise<DataModels.Kpi.ActiveTokenList>;
    getActiveTokensForCorrelationAndProcessModel(identity: IIdentity, correlationId: string, processModelId: string, offset?: number, limit?: number): Promise<DataModels.Kpi.ActiveTokenList>;
    getActiveTokensForProcessInstance(identity: IIdentity, processInstanceId: string, offset?: number, limit?: number): Promise<DataModels.Kpi.ActiveTokenList>;
    getActiveTokensForFlowNode(identity: IIdentity, flowNodeId: string, offset?: number, limit?: number): Promise<DataModels.Kpi.ActiveTokenList>;
    getProcessModelLog(identity: IIdentity, processModelId: string, correlationId?: string, offset?: number, limit?: number): Promise<DataModels.Logging.LogEntryList>;
    getProcessInstanceLog(identity: IIdentity, processModelId: string, processInstanceId: string, offset?: number, limit?: number): Promise<DataModels.Logging.LogEntryList>;
    getTokensForFlowNode(identity: IIdentity, correlationId: string, processModelId: string, flowNodeId: string, offset?: number, limit?: number): Promise<DataModels.TokenHistory.TokenHistoryEntryList>;
    getTokensForFlowNodeByProcessInstanceId(identity: IIdentity, processInstanceId: string, flowNodeId: string): Promise<DataModels.TokenHistory.TokenHistoryGroup>;
    getTokensForCorrelationAndProcessModel(identity: IIdentity, correlationId: string, processModelId: string): Promise<DataModels.TokenHistory.TokenHistoryGroup>;
    getTokensForProcessInstance(identity: IIdentity, processInstanceId: string): Promise<DataModels.TokenHistory.TokenHistoryGroup>;
    private ensureIsAuthorized;
}
