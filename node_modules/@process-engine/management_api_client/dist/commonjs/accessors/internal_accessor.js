"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const management_api_contracts_1 = require("@process-engine/management_api_contracts");
class InternalAccessor {
    constructor(correlationService, cronjobService, emptyActivityService, eventService, flowNodeInstanceService, kpiService, loggingService, manualTaskService, notificationService, processModelService, tokenHistoryService, userTaskService) {
        this.correlationService = correlationService;
        this.cronjobService = cronjobService;
        this.emptyActivityService = emptyActivityService;
        this.eventService = eventService;
        this.flowNodeInstanceService = flowNodeInstanceService;
        this.kpiService = kpiService;
        this.loggingService = loggingService;
        this.manualTaskService = manualTaskService;
        this.notificationService = notificationService;
        this.processModelService = processModelService;
        this.tokenHistoryService = tokenHistoryService;
        this.userTaskService = userTaskService;
    }
    // Notifications
    async onActivityReached(identity, callback, subscribeOnce = false) {
        return this.notificationService.onActivityReached(identity, callback, subscribeOnce);
    }
    async onActivityFinished(identity, callback, subscribeOnce = false) {
        return this.notificationService.onActivityFinished(identity, callback, subscribeOnce);
    }
    async onEmptyActivityWaiting(identity, callback, subscribeOnce = false) {
        return this.notificationService.onEmptyActivityWaiting(identity, callback, subscribeOnce);
    }
    async onEmptyActivityFinished(identity, callback, subscribeOnce = false) {
        return this.notificationService.onEmptyActivityFinished(identity, callback, subscribeOnce);
    }
    async onEmptyActivityForIdentityWaiting(identity, callback, subscribeOnce = false) {
        return this.notificationService.onEmptyActivityForIdentityWaiting(identity, callback, subscribeOnce);
    }
    async onEmptyActivityForIdentityFinished(identity, callback, subscribeOnce = false) {
        return this.notificationService.onEmptyActivityForIdentityFinished(identity, callback, subscribeOnce);
    }
    async onUserTaskWaiting(identity, callback, subscribeOnce = false) {
        return this.notificationService.onUserTaskWaiting(identity, callback, subscribeOnce);
    }
    async onUserTaskFinished(identity, callback, subscribeOnce = false) {
        return this.notificationService.onUserTaskFinished(identity, callback, subscribeOnce);
    }
    async onUserTaskForIdentityWaiting(identity, callback, subscribeOnce = false) {
        return this.notificationService.onUserTaskForIdentityWaiting(identity, callback, subscribeOnce);
    }
    async onUserTaskForIdentityFinished(identity, callback, subscribeOnce = false) {
        return this.notificationService.onUserTaskForIdentityFinished(identity, callback, subscribeOnce);
    }
    async onBoundaryEventTriggered(identity, callback, subscribeOnce = false) {
        return this.notificationService.onBoundaryEventTriggered(identity, callback, subscribeOnce);
    }
    async onIntermediateThrowEventTriggered(identity, callback, subscribeOnce = false) {
        return this.notificationService.onIntermediateThrowEventTriggered(identity, callback, subscribeOnce);
    }
    async onIntermediateCatchEventReached(identity, callback, subscribeOnce = false) {
        return this.notificationService.onIntermediateCatchEventReached(identity, callback, subscribeOnce);
    }
    async onIntermediateCatchEventFinished(identity, callback, subscribeOnce = false) {
        return this.notificationService.onIntermediateCatchEventFinished(identity, callback, subscribeOnce);
    }
    async onManualTaskWaiting(identity, callback, subscribeOnce = false) {
        return this.notificationService.onManualTaskWaiting(identity, callback, subscribeOnce);
    }
    async onManualTaskFinished(identity, callback, subscribeOnce = false) {
        return this.notificationService.onManualTaskFinished(identity, callback, subscribeOnce);
    }
    async onManualTaskForIdentityWaiting(identity, callback, subscribeOnce = false) {
        return this.notificationService.onManualTaskForIdentityWaiting(identity, callback, subscribeOnce);
    }
    async onManualTaskForIdentityFinished(identity, callback, subscribeOnce = false) {
        return this.notificationService.onManualTaskForIdentityFinished(identity, callback, subscribeOnce);
    }
    async onProcessStarted(identity, callback, subscribeOnce = false) {
        return this.notificationService.onProcessStarted(identity, callback, subscribeOnce);
    }
    async onProcessWithProcessModelIdStarted(identity, callback, processModelId, subscribeOnce = false) {
        return this.notificationService.onProcessWithProcessModelIdStarted(identity, callback, processModelId, subscribeOnce);
    }
    async onProcessTerminated(identity, callback, subscribeOnce = false) {
        return this.notificationService.onProcessTerminated(identity, callback, subscribeOnce);
    }
    async onProcessError(identity, callback, subscribeOnce = false) {
        return this.notificationService.onProcessError(identity, callback, subscribeOnce);
    }
    async onProcessEnded(identity, callback, subscribeOnce = false) {
        return this.notificationService.onProcessEnded(identity, callback, subscribeOnce);
    }
    async onCronjobCreated(identity, callback, subscribeOnce = false) {
        return this.notificationService.onCronjobCreated(identity, callback, subscribeOnce);
    }
    async onCronjobExecuted(identity, callback, subscribeOnce = false) {
        return this.notificationService.onCronjobExecuted(identity, callback, subscribeOnce);
    }
    async onCronjobStopped(identity, callback, subscribeOnce = false) {
        return this.notificationService.onCronjobStopped(identity, callback, subscribeOnce);
    }
    async onCronjobUpdated(identity, callback, subscribeOnce = false) {
        return this.notificationService.onCronjobUpdated(identity, callback, subscribeOnce);
    }
    async onCronjobRemoved(identity, callback, subscribeOnce = false) {
        return this.notificationService.onCronjobRemoved(identity, callback, subscribeOnce);
    }
    async removeSubscription(identity, subscription) {
        return this.notificationService.removeSubscription(identity, subscription);
    }
    // Correlations
    async getAllCorrelations(identity, offset = 0, limit = 0) {
        return this.correlationService.getAllCorrelations(identity, offset, limit);
    }
    async getActiveCorrelations(identity, offset = 0, limit = 0) {
        return this.correlationService.getActiveCorrelations(identity, offset, limit);
    }
    async getCorrelationById(identity, correlationId) {
        return this.correlationService.getCorrelationById(identity, correlationId);
    }
    async getCorrelationsByProcessModelId(identity, processModelId, offset = 0, limit = 0) {
        return this.correlationService.getCorrelationsByProcessModelId(identity, processModelId, offset, limit);
    }
    async getProcessInstanceById(identity, processInstanceId) {
        return this.correlationService.getProcessInstanceById(identity, processInstanceId);
    }
    async getProcessInstancesForCorrelation(identity, correlationId, offset, limit) {
        return this.correlationService.getProcessInstancesForCorrelation(identity, correlationId, offset, limit);
    }
    async getProcessInstancesForProcessModel(identity, processModelId, offset, limit) {
        return this.correlationService.getProcessInstancesForProcessModel(identity, processModelId, offset, limit);
    }
    async getProcessInstancesByState(identity, state, offset, limit) {
        return this.correlationService.getProcessInstancesByState(identity, state, offset, limit);
    }
    // Cronjobs
    async getAllActiveCronjobs(identity, offset = 0, limit = 0) {
        return this.cronjobService.getAllActiveCronjobs(identity, offset, limit);
    }
    async getCronjobExecutionHistoryForProcessModel(identity, processModelId, startEventId, offset = 0, limit = 0) {
        return this.cronjobService.getCronjobExecutionHistoryForProcessModel(identity, processModelId, startEventId, offset, limit);
    }
    async getCronjobExecutionHistoryForCrontab(identity, crontab, offset = 0, limit = 0) {
        return this.cronjobService.getCronjobExecutionHistoryForCrontab(identity, crontab, offset, limit);
    }
    // ProcessModels
    async getProcessModels(identity, offset = 0, limit = 0) {
        return this.processModelService.getProcessModels(identity, offset, limit);
    }
    async getProcessModelById(identity, processModelId) {
        return this.processModelService.getProcessModelById(identity, processModelId);
    }
    async getProcessModelByProcessInstanceId(identity, processInstanceId) {
        return this.processModelService.getProcessModelByProcessInstanceId(identity, processInstanceId);
    }
    async startProcessInstance(identity, processModelId, payload, startCallbackType = management_api_contracts_1.DataModels.ProcessModels.StartCallbackType.CallbackOnProcessInstanceCreated, startEventId, endEventId) {
        return this.processModelService.startProcessInstance(identity, processModelId, payload, startCallbackType, startEventId, endEventId);
    }
    async getStartEventsForProcessModel(identity, processModelId) {
        return this.processModelService.getStartEventsForProcessModel(identity, processModelId);
    }
    async updateProcessDefinitionsByName(identity, name, payload) {
        return this.processModelService.updateProcessDefinitionsByName(identity, name, payload);
    }
    async deleteProcessDefinitionsByProcessModelId(identity, processModelId) {
        return this.processModelService.deleteProcessDefinitionsByProcessModelId(identity, processModelId);
    }
    async terminateProcessInstance(identity, processInstanceId) {
        return this.processModelService.terminateProcessInstance(identity, processInstanceId);
    }
    // Empty Activities
    async getEmptyActivitiesForProcessModel(identity, processModelId, offset = 0, limit = 0) {
        return this.emptyActivityService.getEmptyActivitiesForProcessModel(identity, processModelId, offset, limit);
    }
    async getEmptyActivitiesForProcessInstance(identity, processInstanceId, offset = 0, limit = 0) {
        return this.emptyActivityService.getEmptyActivitiesForProcessInstance(identity, processInstanceId, offset, limit);
    }
    async getEmptyActivitiesForCorrelation(identity, correlationId, offset = 0, limit = 0) {
        return this.emptyActivityService.getEmptyActivitiesForCorrelation(identity, correlationId, offset, limit);
    }
    async getEmptyActivitiesForProcessModelInCorrelation(identity, processModelId, correlationId, offset = 0, limit = 0) {
        return this.emptyActivityService.getEmptyActivitiesForProcessModelInCorrelation(identity, processModelId, correlationId, offset, limit);
    }
    async finishEmptyActivity(identity, processInstanceId, correlationId, emptyActivityInstanceId) {
        return this.emptyActivityService.finishEmptyActivity(identity, processInstanceId, correlationId, emptyActivityInstanceId);
    }
    // Events
    async getWaitingEventsForProcessModel(identity, processModelId, offset = 0, limit = 0) {
        return this.eventService.getWaitingEventsForProcessModel(identity, processModelId, offset, limit);
    }
    async getWaitingEventsForCorrelation(identity, correlationId, offset = 0, limit = 0) {
        return this.eventService.getWaitingEventsForCorrelation(identity, correlationId, offset, limit);
    }
    async getWaitingEventsForProcessModelInCorrelation(identity, processModelId, correlationId, offset = 0, limit = 0) {
        return this.eventService.getWaitingEventsForProcessModelInCorrelation(identity, processModelId, correlationId, offset, limit);
    }
    async triggerMessageEvent(identity, messageName, payload) {
        return this.eventService.triggerMessageEvent(identity, messageName, payload);
    }
    async triggerSignalEvent(identity, signalName, payload) {
        return this.eventService.triggerSignalEvent(identity, signalName, payload);
    }
    // FlowNodeInstances
    async getFlowNodeInstancesForProcessInstance(identity, processInstanceId, offset = 0, limit = 0) {
        return this.flowNodeInstanceService.getFlowNodeInstancesForProcessInstance(identity, processInstanceId, offset, limit);
    }
    // Tasks
    async getAllSuspendedTasks(identity, offset = 0, limit = 0) {
        return this.flowNodeInstanceService.getAllSuspendedTasks(identity, offset, limit);
    }
    async getSuspendedTasksForProcessModel(identity, processModelId, offset = 0, limit = 0) {
        return this.flowNodeInstanceService.getSuspendedTasksForProcessModel(identity, processModelId, offset, limit);
    }
    async getSuspendedTasksForProcessInstance(identity, processInstanceId, offset = 0, limit = 0) {
        return this.flowNodeInstanceService.getSuspendedTasksForProcessInstance(identity, processInstanceId, offset, limit);
    }
    async getSuspendedTasksForCorrelation(identity, correlationId, offset = 0, limit = 0) {
        return this.flowNodeInstanceService.getSuspendedTasksForCorrelation(identity, correlationId, offset, limit);
    }
    async getSuspendedTasksForProcessModelInCorrelation(identity, processModelId, correlationId, offset = 0, limit = 0) {
        return this.flowNodeInstanceService.getSuspendedTasksForProcessModelInCorrelation(identity, processModelId, correlationId, offset, limit);
    }
    // ManualTasks
    async getManualTasksForProcessModel(identity, processModelId, offset = 0, limit = 0) {
        return this.manualTaskService.getManualTasksForProcessModel(identity, processModelId, offset, limit);
    }
    async getManualTasksForProcessInstance(identity, processInstanceId, offset = 0, limit = 0) {
        return this.manualTaskService.getManualTasksForProcessInstance(identity, processInstanceId, offset, limit);
    }
    async getManualTasksForCorrelation(identity, correlationId, offset = 0, limit = 0) {
        return this.manualTaskService.getManualTasksForCorrelation(identity, correlationId, offset, limit);
    }
    async getManualTasksForProcessModelInCorrelation(identity, processModelId, correlationId, offset = 0, limit = 0) {
        return this.manualTaskService.getManualTasksForProcessModelInCorrelation(identity, processModelId, correlationId, offset, limit);
    }
    async finishManualTask(identity, processInstanceId, correlationId, manualTaskInstanceId) {
        return this.manualTaskService.finishManualTask(identity, processInstanceId, correlationId, manualTaskInstanceId);
    }
    // UserTasks
    async getUserTasksForProcessModel(identity, processModelId, offset = 0, limit = 0) {
        return this.userTaskService.getUserTasksForProcessModel(identity, processModelId, offset, limit);
    }
    async getUserTasksForProcessInstance(identity, processInstanceId, offset = 0, limit = 0) {
        return this.userTaskService.getUserTasksForProcessInstance(identity, processInstanceId, offset, limit);
    }
    async getUserTasksForCorrelation(identity, correlationId, offset = 0, limit = 0) {
        return this.userTaskService.getUserTasksForCorrelation(identity, correlationId, offset, limit);
    }
    async getUserTasksForProcessModelInCorrelation(identity, processModelId, correlationId, offset = 0, limit = 0) {
        return this.userTaskService.getUserTasksForProcessModelInCorrelation(identity, processModelId, correlationId, offset, limit);
    }
    async finishUserTask(identity, processInstanceId, correlationId, userTaskInstanceId, userTaskResult) {
        return this.userTaskService.finishUserTask(identity, processInstanceId, correlationId, userTaskInstanceId, userTaskResult);
    }
    // Heatmap related features
    async getRuntimeInformationForProcessModel(identity, processModelId, offset = 0, limit = 0) {
        return this.kpiService.getRuntimeInformationForProcessModel(identity, processModelId, offset, limit);
    }
    async getRuntimeInformationForFlowNode(identity, processModelId, flowNodeId) {
        return this.kpiService.getRuntimeInformationForFlowNode(identity, processModelId, flowNodeId);
    }
    async getActiveTokensForProcessModel(identity, processModelId, offset = 0, limit = 0) {
        return this.kpiService.getActiveTokensForProcessModel(identity, processModelId, offset, limit);
    }
    async getActiveTokensForCorrelationAndProcessModel(identity, correlationId, processModelId, offset = 0, limit = 0) {
        return this.kpiService.getActiveTokensForCorrelationAndProcessModel(identity, correlationId, processModelId, offset, limit);
    }
    async getActiveTokensForProcessInstance(identity, processInstanceId, offset = 0, limit = 0) {
        return this.kpiService.getActiveTokensForProcessInstance(identity, processInstanceId, offset, limit);
    }
    async getActiveTokensForFlowNode(identity, flowNodeId, offset = 0, limit = 0) {
        return this.kpiService.getActiveTokensForFlowNode(identity, flowNodeId, offset, limit);
    }
    async getProcessModelLog(identity, processModelId, correlationId, offset = 0, limit = 0) {
        return this.loggingService.getProcessModelLog(identity, processModelId, correlationId, offset, limit);
    }
    async getProcessInstanceLog(identity, processModelId, processInstanceId, offset = 0, limit = 0) {
        return this.loggingService.getProcessInstanceLog(identity, processModelId, processInstanceId, offset, limit);
    }
    async getTokensForFlowNode(identity, correlationId, processModelId, flowNodeId, offset = 0, limit = 0) {
        return this.tokenHistoryService.getTokensForFlowNode(identity, correlationId, processModelId, flowNodeId, offset, limit);
    }
    async getTokensForFlowNodeByProcessInstanceId(identity, processInstanceId, flowNodeId) {
        return this.tokenHistoryService.getTokensForFlowNodeByProcessInstanceId(identity, processInstanceId, flowNodeId);
    }
    async getTokensForCorrelationAndProcessModel(identity, correlationId, processModelId) {
        return this.tokenHistoryService.getTokensForCorrelationAndProcessModel(identity, correlationId, processModelId);
    }
    async getTokensForProcessInstance(identity, processInstanceId) {
        return this.tokenHistoryService.getTokensForProcessInstance(identity, processInstanceId);
    }
}
exports.InternalAccessor = InternalAccessor;
//# sourceMappingURL=internal_accessor.js.map