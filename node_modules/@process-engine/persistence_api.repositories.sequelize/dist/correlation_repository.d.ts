import { SequelizeOptions } from 'sequelize-typescript';
import { IDisposable } from '@essential-projects/bootstrapper_contracts';
import { IIdentity } from '@essential-projects/iam_contracts';
import { SequelizeConnectionManager } from '@essential-projects/sequelize_connection_manager';
import { CorrelationState, ICorrelationRepository, ProcessInstanceFromRepository } from '@process-engine/persistence_api.contracts';
export declare class CorrelationRepository implements ICorrelationRepository, IDisposable {
    config: SequelizeOptions;
    private sequelizeInstance;
    private connectionManager;
    constructor(connectionManager: SequelizeConnectionManager);
    initialize(): Promise<void>;
    dispose(): Promise<void>;
    createEntry(identity: IIdentity, correlationId: string, processInstanceId: string, processModelId: string, processModelHash: string, parentProcessInstanceId?: string): Promise<void>;
    getAll(offset?: number, limit?: number): Promise<Array<ProcessInstanceFromRepository>>;
    getByCorrelationId(correlationId: string, offset?: number, limit?: number): Promise<Array<ProcessInstanceFromRepository>>;
    getByProcessModelId(processModelId: string, offset?: number, limit?: number): Promise<Array<ProcessInstanceFromRepository>>;
    getByProcessInstanceId(processInstanceId: string): Promise<ProcessInstanceFromRepository>;
    getSubprocessesForProcessInstance(processInstanceId: string, offset?: number, limit?: number): Promise<Array<ProcessInstanceFromRepository>>;
    getCorrelationsByState(state: CorrelationState, offset?: number, limit?: number): Promise<Array<ProcessInstanceFromRepository>>;
    deleteCorrelationByProcessModelId(processModelId: string): Promise<void>;
    finishProcessInstanceInCorrelation(correlationId: string, processInstanceId: string): Promise<void>;
    finishProcessInstanceInCorrelationWithError(correlationId: string, processInstanceId: string, error: Error, terminatedBy?: IIdentity): Promise<void>;
    /**
     * Takes a Correlation object as it was retrieved from the database
     * and convertes it into a Runtime object usable by the ProcessEngine.
     *
     * @param   dataModel The correlation data retrieved from the database.
     * @returns           The ProcessEngine runtime object describing a
     *                    correlation.
     */
    private convertToRuntimeObject;
    private tryParse;
    private buildPagination;
}
