import { SequelizeOptions } from 'sequelize-typescript';
import { IDisposable } from '@essential-projects/bootstrapper_contracts';
import { SequelizeConnectionManager } from '@essential-projects/sequelize_connection_manager';
import { FlowNodeInstance, FlowNodeInstanceState, IFlowNodeInstanceRepository, Model, ProcessToken } from '@process-engine/persistence_api.contracts';
export declare class FlowNodeInstanceRepository implements IFlowNodeInstanceRepository, IDisposable {
    config: SequelizeOptions;
    private sequelizeInstance;
    private connectionManager;
    constructor(connectionManager: SequelizeConnectionManager);
    initialize(): Promise<void>;
    dispose(): Promise<void>;
    querySpecificFlowNode(correlationId: string, processModelId: string, flowNodeId: string): Promise<FlowNodeInstance>;
    queryByInstanceId(flowNodeInstanceId: string): Promise<FlowNodeInstance>;
    queryFlowNodeInstancesByProcessInstanceId(processInstanceId: string, flowNodeId: string, offset?: number, limit?: number): Promise<Array<FlowNodeInstance>>;
    queryByFlowNodeId(flowNodeId: string, offset?: number, limit?: number): Promise<Array<FlowNodeInstance>>;
    queryActive(offset?: number, limit?: number): Promise<Array<FlowNodeInstance>>;
    queryActiveByProcessInstance(processInstanceId: string, offset?: number, limit?: number): Promise<Array<FlowNodeInstance>>;
    queryActiveByCorrelationAndProcessModel(correlationId: string, processModelId: string, offset?: number, limit?: number): Promise<Array<FlowNodeInstance>>;
    queryByState(state: FlowNodeInstanceState, offset?: number, limit?: number): Promise<Array<FlowNodeInstance>>;
    queryByCorrelation(correlationId: string, offset?: number, limit?: number): Promise<Array<FlowNodeInstance>>;
    queryByProcessModel(processModelId: string, offset?: number, limit?: number): Promise<Array<FlowNodeInstance>>;
    queryByCorrelationAndProcessModel(correlationId: string, processModelId: string, offset?: number, limit?: number): Promise<Array<FlowNodeInstance>>;
    querySuspendedByCorrelation(correlationId: string, offset?: number, limit?: number): Promise<Array<FlowNodeInstance>>;
    querySuspendedByProcessModel(processModelId: string, offset?: number, limit?: number): Promise<Array<FlowNodeInstance>>;
    querySuspendedByProcessInstance(processInstanceId: string, offset?: number, limit?: number): Promise<Array<FlowNodeInstance>>;
    queryProcessTokensByProcessInstanceId(processInstanceId: string, offset?: number, limit?: number): Promise<Array<ProcessToken>>;
    queryByProcessInstance(processInstanceId: string, offset?: number, limit?: number): Promise<Array<FlowNodeInstance>>;
    deleteByProcessModelId(processModelId: string): Promise<void>;
    persistOnEnter(flowNode: Model.Base.FlowNode, flowNodeInstanceId: string, processToken: ProcessToken, previousFlowNodeInstanceId: string): Promise<FlowNodeInstance>;
    persistOnExit(flowNode: Model.Base.FlowNode, flowNodeInstanceId: string, processToken: ProcessToken): Promise<FlowNodeInstance>;
    persistOnError(flowNode: Model.Base.FlowNode, flowNodeInstanceId: string, processToken: ProcessToken, error: Error): Promise<FlowNodeInstance>;
    persistOnTerminate(flowNode: Model.Base.FlowNode, flowNodeInstanceId: string, processToken: ProcessToken): Promise<FlowNodeInstance>;
    suspend(flowNodeId: string, flowNodeInstanceId: string, processToken: ProcessToken): Promise<FlowNodeInstance>;
    resume(flowNodeId: string, flowNodeInstanceId: string, processToken: ProcessToken): Promise<FlowNodeInstance>;
    private persistOnStateChange;
    private createProcessTokenForFlowNodeInstance;
    private convertFlowNodeInstanceToRuntimeObject;
    private convertProcessTokenToRuntimeObject;
    private tryParse;
    private buildPagination;
}
