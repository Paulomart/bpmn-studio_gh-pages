import { SequelizeOptions } from 'sequelize-typescript';
import { IDisposable } from '@essential-projects/bootstrapper_contracts';
import { SequelizeConnectionManager } from '@essential-projects/sequelize_connection_manager';
import { IIdentity } from '@essential-projects/iam_contracts';
import { IProcessDefinitionRepository, ProcessDefinitionFromRepository } from '@process-engine/persistence_api.contracts';
export declare class ProcessDefinitionRepository implements IProcessDefinitionRepository, IDisposable {
    config: SequelizeOptions;
    private sequelizeInstance;
    private connectionManager;
    constructor(connectionManager: SequelizeConnectionManager);
    initialize(): Promise<void>;
    dispose(): Promise<void>;
    persistProcessDefinitions(name: string, xml: string, overwriteExisting?: boolean, identity?: IIdentity): Promise<void>;
    getProcessDefinitions(): Promise<Array<ProcessDefinitionFromRepository>>;
    getProcessDefinitionByName(name: string): Promise<ProcessDefinitionFromRepository>;
    getHistoryByName(name: string): Promise<Array<ProcessDefinitionFromRepository>>;
    getByHash(hash: string): Promise<ProcessDefinitionFromRepository>;
    deleteProcessDefinitionById(processModelId: string): Promise<void>;
    private createHashForProcessDefinition;
    private convertToProcessDefinitionRuntimeObject;
}
