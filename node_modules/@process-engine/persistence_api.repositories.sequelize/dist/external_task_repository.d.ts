import { SequelizeOptions } from 'sequelize-typescript';
import { IDisposable } from '@essential-projects/bootstrapper_contracts';
import { IIdentity } from '@essential-projects/iam_contracts';
import { SequelizeConnectionManager } from '@essential-projects/sequelize_connection_manager';
import { ExternalTask, IExternalTaskRepository } from '@process-engine/persistence_api.contracts';
export declare class ExternalTaskRepository implements IExternalTaskRepository, IDisposable {
    config: SequelizeOptions;
    private sequelizeInstance;
    private connectionManager;
    constructor(connectionManager: SequelizeConnectionManager);
    initialize(): Promise<void>;
    dispose(): Promise<void>;
    create<TPayload>(topic: string, correlationId: string, processModelId: string, processInstanceId: string, flowNodeInstanceId: string, identity: IIdentity, payload: TPayload): Promise<void>;
    getById<TPayload>(externalTaskId: string): Promise<ExternalTask<TPayload>>;
    getByInstanceIds<TPayload>(correlationId: string, processInstanceId: string, flowNodeInstanceId: string): Promise<ExternalTask<TPayload>>;
    fetchAvailableForProcessing<TPayload>(topicName: string, maxTasks: number): Promise<Array<ExternalTask<TPayload>>>;
    lockForWorker(workerId: string, externalTaskId: string, exprationTime: Date): Promise<void>;
    deleteExternalTasksByProcessModelId(processModelId: string): Promise<void>;
    finishWithError(externalTaskId: string, error: Error): Promise<void>;
    finishWithSuccess(externalTaskId: string, result: any): Promise<void>;
    /**
     * Mapper function.
     * Creates an ExternalTask object that is usable by the ProcessEngine.
     *
     * @async
     * @param   dataModel The ExternalTaskModel to convert.
     * @returns           An ExternalTask object usable by the ProcessEngine.
     */
    private convertToRuntimeObject;
    private sanitizeDataModel;
    private tryParse;
}
