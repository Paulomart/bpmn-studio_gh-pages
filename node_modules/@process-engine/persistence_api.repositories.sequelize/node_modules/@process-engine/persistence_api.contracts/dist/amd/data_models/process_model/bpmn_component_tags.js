define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Contains all BPMN tags which are commonly used with all processes.
     * These tags are usually found at the root level of the process.
     */
    var CommonElement;
    (function (CommonElement) {
        CommonElement["Collaboration"] = "bpmn:collaboration";
        CommonElement["Definitions"] = "bpmn:definitions";
        CommonElement["Diagram"] = "bpmndi:BPMNDiagram";
        CommonElement["Participant"] = "bpmn:participant";
        CommonElement["Process"] = "bpmn:process";
        CommonElement["Error"] = "bpmn:error";
        CommonElement["Signal"] = "bpmn:signal";
        CommonElement["Message"] = "bpmn:message";
    })(CommonElement = exports.CommonElement || (exports.CommonElement = {}));
    /**
     * Contains all XML tags contained within the "xmlns" header tag.
     */
    var XmlnsProperty;
    (function (XmlnsProperty) {
        XmlnsProperty["bpmn"] = "xmlns:bpmn";
        XmlnsProperty["bpmndi"] = "xmlns:bpmndi";
        XmlnsProperty["di"] = "xmlns:di";
        XmlnsProperty["dc"] = "xmlns:dc";
        XmlnsProperty["camunda"] = "xmlns:camunda";
        XmlnsProperty["xsi"] = "xmlns:xsi";
    })(XmlnsProperty = exports.XmlnsProperty || (exports.XmlnsProperty = {}));
    /**
     * Contains all tags associated with lanes and lane sets.
     */
    var Lane;
    (function (Lane) {
        // eslint-disable-next-line no-shadow
        Lane["Lane"] = "bpmn:lane";
        Lane["LaneSet"] = "bpmn:laneSet";
    })(Lane = exports.Lane || (exports.Lane = {}));
    /**
     * Contains all tags that a lane can have.
     */
    var LaneProperty;
    (function (LaneProperty) {
        LaneProperty["ChildLaneSet"] = "bpmn:childLaneSet";
        LaneProperty["FlowNodeRef"] = "bpmn:flowNodeRef";
    })(LaneProperty = exports.LaneProperty || (exports.LaneProperty = {}));
    /**
     * Contains the tags for all known gateway types.
     */
    var GatewayElement;
    (function (GatewayElement) {
        GatewayElement["ComplexGateway"] = "bpmn:complexGateway";
        GatewayElement["EventBasedGateway"] = "bpmn:eventBasedGateway";
        GatewayElement["ExclusiveGateway"] = "bpmn:exclusiveGateway";
        GatewayElement["InclusiveGateway"] = "bpmn:inclusiveGateway";
        GatewayElement["ParallelGateway"] = "bpmn:parallelGateway";
    })(GatewayElement = exports.GatewayElement || (exports.GatewayElement = {}));
    /**
     * Contains the tags for all known event types.
     */
    var EventElement;
    (function (EventElement) {
        EventElement["StartEvent"] = "bpmn:startEvent";
        EventElement["EndEvent"] = "bpmn:endEvent";
        EventElement["Boundary"] = "bpmn:boundaryEvent";
        EventElement["IntermediateCatchEvent"] = "bpmn:intermediateCatchEvent";
        EventElement["IntermediateThrowEvent"] = "bpmn:intermediateThrowEvent";
    })(EventElement = exports.EventElement || (exports.EventElement = {}));
    /**
     * Contains the tags for all known task types.
     */
    var TaskElement;
    (function (TaskElement) {
        TaskElement["EmptyActivity"] = "bpmn:task";
        TaskElement["CallActivity"] = "bpmn:callActivity";
        TaskElement["SubProcess"] = "bpmn:subProcess";
        TaskElement["ManualTask"] = "bpmn:manualTask";
        TaskElement["ScriptTask"] = "bpmn:scriptTask";
        TaskElement["ServiceTask"] = "bpmn:serviceTask";
        TaskElement["UserTask"] = "bpmn:userTask";
        TaskElement["SendTask"] = "bpmn:sendTask";
        TaskElement["ReceiveTask"] = "bpmn:receiveTask";
        TaskElement["MethodInvocation"] = "bpmn:methodInvocation";
        TaskElement["WebServiceInvocation"] = "bpmn:webServiceInvocation";
    })(TaskElement = exports.TaskElement || (exports.TaskElement = {}));
    /**
     * Contains all BPMN tags that a BPMN element can have.
     */
    var FlowElementProperty;
    (function (FlowElementProperty) {
        FlowElementProperty["ErrorEventDefinition"] = "bpmn:errorEventDefinition";
        FlowElementProperty["LinkEventDefinition"] = "bpmn:linkEventDefinition";
        FlowElementProperty["MessageEventDefinition"] = "bpmn:messageEventDefinition";
        FlowElementProperty["SignalEventDefinition"] = "bpmn:signalEventDefinition";
        FlowElementProperty["TerminateEventDefinition"] = "bpmn:terminateEventDefinition";
        FlowElementProperty["TimerEventDefinition"] = "bpmn:timerEventDefinition";
        FlowElementProperty["BpmnScript"] = "bpmn:script";
        FlowElementProperty["ConditionExpression"] = "bpmn:conditionExpression";
        FlowElementProperty["Documentation"] = "bpmn:documentation";
        FlowElementProperty["ExtensionElements"] = "bpmn:extensionElements";
        FlowElementProperty["SequenceFlowIncoming"] = "bpmn:incoming";
        FlowElementProperty["SequenceFlowOutgoing"] = "bpmn:outgoing";
        FlowElementProperty["XsiType"] = "xsi:type";
    })(FlowElementProperty = exports.FlowElementProperty || (exports.FlowElementProperty = {}));
    /**
     * Contains all Camunda tags that a BPMN element can have.
     */
    var CamundaProperty;
    (function (CamundaProperty) {
        CamundaProperty["CalledElementBinding"] = "camunda:calledElementBinding";
        CamundaProperty["CalledElementVersion"] = "camunda:calledElementVersion";
        CamundaProperty["CalledElementTenantId"] = "camunda:calledElementTenantId";
        CamundaProperty["Assignee"] = "camunda:assignee";
        CamundaProperty["CandidateUsers"] = "camunda:candidateUsers";
        CamundaProperty["CandidateGroups"] = "camunda:candidateGroups";
        CamundaProperty["DueDate"] = "camunda:dueDate";
        CamundaProperty["ExecutionListener"] = "camunda:executionListener";
        CamundaProperty["Expression"] = "camunda:expression";
        CamundaProperty["FormData"] = "camunda:formData";
        CamundaProperty["FormField"] = "camunda:formField";
        CamundaProperty["FollowupDate"] = "camunda:followUpDate";
        CamundaProperty["Properties"] = "camunda:properties";
        CamundaProperty["Property"] = "camunda:property";
        CamundaProperty["ResultVariable"] = "camunda:resultVariable";
        CamundaProperty["Topic"] = "camunda:topic";
        CamundaProperty["Type"] = "camunda:type";
        CamundaProperty["Value"] = "camunda:value";
        CamundaProperty["VariableMappingClass"] = "camunda:variableMappingClass";
        CamundaProperty["VariableMappingDelegateExpression"] = "camunda:variableMappingDelegateExpression";
    })(CamundaProperty = exports.CamundaProperty || (exports.CamundaProperty = {}));
    /**
     * Contains miscellaneous tags that do not fit anywhere else.
     */
    var OtherElements;
    (function (OtherElements) {
        OtherElements["Association"] = "bpmn:association";
        OtherElements["SequenceFlow"] = "bpmn:sequenceFlow";
        OtherElements["TextAnnotation"] = "bpmn:textAnnotation";
    })(OtherElements = exports.OtherElements || (exports.OtherElements = {}));
});
//# sourceMappingURL=bpmn_component_tags.js.map