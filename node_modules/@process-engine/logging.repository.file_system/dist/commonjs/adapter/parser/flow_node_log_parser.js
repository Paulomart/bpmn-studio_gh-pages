"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const moment = require("moment");
const logging_api_contracts_1 = require("@process-engine/logging_api_contracts");
const Serializer = require("../serializer");
function parseFlowNodeInstanceLog(logData) {
    const isV1 = logData[0] === 'FlowNodeInstance';
    const isV2 = logData[0] === 'FlowNodeInstance_V2';
    if (isV1) {
        return parseAsV1(logData);
    }
    if (isV2) {
        return parseAsV2(logData);
    }
    return undefined;
}
exports.parseFlowNodeInstanceLog = parseFlowNodeInstanceLog;
function parseAsV1(logData) {
    const logEntry = new logging_api_contracts_1.LogEntry();
    logEntry.timeStamp = moment(logData[1]).toDate();
    logEntry.correlationId = logData[2];
    logEntry.processModelId = logData[3];
    logEntry.processInstanceId = logData[4];
    logEntry.flowNodeInstanceId = logData[5];
    logEntry.flowNodeId = logData[6];
    logEntry.logLevel = logging_api_contracts_1.LogLevel[logData[7]];
    logEntry.message = logData[8];
    return logEntry;
}
function parseAsV2(logData) {
    var _a, _b, _c;
    const logEntry = new logging_api_contracts_1.LogEntry();
    logEntry.timeStamp = moment(logData[1]).toDate();
    logEntry.correlationId = logData[2];
    logEntry.processModelId = logData[3];
    logEntry.processInstanceId = logData[4];
    logEntry.flowNodeInstanceId = logData[5];
    logEntry.flowNodeId = logData[6];
    logEntry.logLevel = logging_api_contracts_1.LogLevel[logData[7]];
    logEntry.message = logData[8];
    logEntry.measuredAt = logData[9];
    const serializedTokenPayload = (_a = logData[10]) === null || _a === void 0 ? void 0 : _a.trim();
    const serializedError = (_b = logData[11]) === null || _b === void 0 ? void 0 : _b.trim();
    const deserializedError = ((_c = serializedError) === null || _c === void 0 ? void 0 : _c.length) > 1
        ? Serializer.deserialize(serializedError)
        : undefined;
    logEntry.tokenPayload = Serializer.tryParse(serializedTokenPayload);
    logEntry.error = deserializedError;
    return logEntry;
}
//# sourceMappingURL=flow_node_log_parser.js.map