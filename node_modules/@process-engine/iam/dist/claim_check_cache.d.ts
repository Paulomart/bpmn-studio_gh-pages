export declare type CacheValue = {
    userHasClaim: boolean;
    lastCheckedAt: string;
};
export declare type ClaimCacheConfig = {
    enabled: boolean;
    cacheLifetimeInSeconds: number;
    cleanupIntervalInSeconds: number;
};
export declare class ClaimCheckCache {
    private config;
    private readonly cache;
    private cleanupTimer;
    private isEnabled;
    private readonly defaultConfig;
    constructor(config: ClaimCacheConfig);
    /**
     * Returns the current enabled-status of the cache.
     */
    get enabled(): boolean;
    /**
     * Enables the cache and initializes periodic cleanup.
     */
    enable(): void;
    /**
     * Disables the cache and stops periodic cleanup.
     */
    disable(): void;
    /**
     * Caches the given claim check result for the given token and claim name.
     *
     * @param token     The token for which to cache a claim check result.
     * @param claimName The name of the claim for which to cache a result.
     * @param hasClaim  The result of the claim check to cache.
     */
    add(token: string, claimName: string, hasClaim: boolean): void;
    /**
     * Retrieves the cached check result for the given token and claim name.
     *
     * @param   token     The token for which to get the claim check.
     * @param   claimName The name of the claim for which to get the cached
     *                    check result.
     * @returns           The cached claim check result, or "undefind",
     *                    if no matching cache entry exists.
     */
    get(token: string, claimName: string): CacheValue;
    /**
     * Checks if the cache contains a result for the given token and claim name.
     *
     * @param   token     The tken for which to get the claim check.
     * @param   claimName The name of the claim for which to check if a cached
     *                    result exists.
     * @returns           "True", if the cache has a matching entry;
     *                    otherwise "false".
     */
    hasMatchingEntry(token: string, claimName: string): boolean;
    removeOutdatedEntries(): void;
    clearEntireCache(): void;
}
