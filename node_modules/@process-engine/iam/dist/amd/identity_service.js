define(["require", "exports", "loggerhythm", "jsonwebtoken", "@essential-projects/errors_ts", "./identity"], function (require, exports, loggerhythm_1, jsonwebtoken, errors_ts_1, identity_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const logger = loggerhythm_1.Logger.createLogger('processengine:iam:identity_service');
    class IdentityService {
        getIdentity(token) {
            if (!token) {
                logger.error('No auth token provided!');
                throw new errors_ts_1.BadRequestError('Must provide a token by which to create an identity!');
            }
            const isInternalToken = this.isInternalToken(token);
            if (isInternalToken) {
                return Promise.resolve(new identity_1.Identity(token, 'ProcessEngineInternalUser'));
            }
            const isDummyToken = this.isDummyToken(token);
            if (isDummyToken) {
                return Promise.resolve(new identity_1.Identity(token, 'dummy_token'));
            }
            const decodedToken = jsonwebtoken.decode(token);
            if (!decodedToken) {
                const errorMsg = 'The given token could not be parsed!';
                logger.error(errorMsg, token);
                const error = new errors_ts_1.BadRequestError(errorMsg);
                error.additionalInformation = {
                    token: token,
                    result: decodedToken,
                }; //eslint-disable-line
                throw error;
            }
            const identity = new identity_1.Identity(token, decodedToken.sub);
            return Promise.resolve(identity);
        }
        isInternalToken(token) {
            try {
                const isInternalToken = Buffer.from(token, 'base64').toString() === 'ProcessEngineInternalUser';
                return isInternalToken;
            }
            catch (_a) {
                return false;
            }
        }
        isDummyToken(token) {
            try {
                const isDummyToken = Buffer.from(token, 'base64').toString() === 'dummy_token';
                return isDummyToken;
            }
            catch (_a) {
                return false;
            }
        }
    }
    exports.IdentityService = IdentityService;
});
//# sourceMappingURL=identity_service.js.map