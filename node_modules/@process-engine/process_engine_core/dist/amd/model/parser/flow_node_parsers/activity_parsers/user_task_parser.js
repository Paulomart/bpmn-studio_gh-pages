define(["require", "exports", "moment", "@process-engine/persistence_api.contracts", "../../../type_factory", "./activity_factory", "./extension_property_parser"], function (require, exports, moment, persistence_api_contracts_1, type_factory_1, activity_factory_1, extension_property_parser_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function parseUserTasks(processData) {
        const userTasksRaw = type_factory_1.getModelPropertyAsArray(processData, persistence_api_contracts_1.BpmnTags.TaskElement.UserTask);
        const noUserTasksFound = !((userTasksRaw === null || userTasksRaw === void 0 ? void 0 : userTasksRaw.length) > 0);
        if (noUserTasksFound) {
            return [];
        }
        const userTasks = userTasksRaw.map(parseUserTask);
        return userTasks;
    }
    exports.parseUserTasks = parseUserTasks;
    function parseUserTask(userTaskRaw) {
        const userTask = activity_factory_1.createActivityInstance(userTaskRaw, persistence_api_contracts_1.Model.Activities.UserTask);
        userTask.assignee = userTaskRaw[persistence_api_contracts_1.BpmnTags.CamundaProperty.Assignee];
        userTask.candidateUsers = userTaskRaw[persistence_api_contracts_1.BpmnTags.CamundaProperty.CandidateUsers];
        userTask.candidateGroups = userTaskRaw[persistence_api_contracts_1.BpmnTags.CamundaProperty.CandidateGroups];
        userTask.formFields = parseFormFields(userTaskRaw);
        userTask.dueDate = parseDate(userTaskRaw[persistence_api_contracts_1.BpmnTags.CamundaProperty.DueDate]);
        userTask.followUpDate = parseDate(userTaskRaw[persistence_api_contracts_1.BpmnTags.CamundaProperty.FollowupDate]);
        setPreferredControlForUserTask(userTask);
        setDescriptionForUserTask(userTask);
        setFinishedMessageForUserTask(userTask);
        return userTask;
    }
    function parseFormFields(userTaskRaw) {
        const extensionElements = userTaskRaw[persistence_api_contracts_1.BpmnTags.FlowElementProperty.ExtensionElements];
        if (!extensionElements) {
            return [];
        }
        const formDataRaw = extensionElements[persistence_api_contracts_1.BpmnTags.CamundaProperty.FormData];
        if (!formDataRaw) {
            return [];
        }
        const formFieldsRaw = type_factory_1.getModelPropertyAsArray(formDataRaw, persistence_api_contracts_1.BpmnTags.CamundaProperty.FormField);
        if (!formFieldsRaw) {
            return [];
        }
        return formFieldsRaw.map(parseFormField);
    }
    function parseFormField(formFieldRaw) {
        const formField = new persistence_api_contracts_1.Model.Activities.Types.UserTaskFormField();
        formField.id = formFieldRaw.id;
        formField.label = formFieldRaw.label;
        formField.type = formFieldRaw.type;
        formField.defaultValue = formFieldRaw.defaultValue;
        formField.preferredControl = formFieldRaw.preferredControl;
        if (formField.type === 'enum') {
            const rawValues = type_factory_1.getModelPropertyAsArray(formFieldRaw, persistence_api_contracts_1.BpmnTags.CamundaProperty.Value);
            const valueMapper = (enumValueRaw) => {
                const enumValue = new persistence_api_contracts_1.Model.Activities.Types.FormFieldEnumValue();
                enumValue.id = enumValueRaw.id;
                enumValue.name = enumValueRaw.name;
                return enumValue;
            };
            formField.enumValues = rawValues ? rawValues.map(valueMapper) : [];
        }
        return formField;
    }
    function parseDate(value) {
        const notAValidDate = !((value === null || value === void 0 ? void 0 : value.length) > 0) || !moment(value, 'YYYY-MM-DDTHH:mm:ss', true).isValid();
        if (notAValidDate) {
            return undefined;
        }
        return moment(value).toDate();
    }
    function setPreferredControlForUserTask(userTask) {
        var _a;
        userTask.preferredControl = (_a = extension_property_parser_1.findExtensionPropertyByName('preferredControl', userTask.extensionElements.camundaExtensionProperties)) === null || _a === void 0 ? void 0 : _a.value;
    }
    function setDescriptionForUserTask(userTask) {
        var _a;
        userTask.description = (_a = extension_property_parser_1.findExtensionPropertyByName('description', userTask.extensionElements.camundaExtensionProperties)) === null || _a === void 0 ? void 0 : _a.value;
    }
    function setFinishedMessageForUserTask(userTask) {
        var _a;
        userTask.finishedMessage = (_a = extension_property_parser_1.findExtensionPropertyByName('finishedMessage', userTask.extensionElements.camundaExtensionProperties)) === null || _a === void 0 ? void 0 : _a.value;
    }
});
//# sourceMappingURL=user_task_parser.js.map