define(["require", "exports", "@process-engine/persistence_api.contracts", "../../type_factory"], function (require, exports, persistence_api_contracts_1, type_factory_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function parseGatewaysFromProcessData(processData) {
        const exclusiveGateways = parseGatewaysByType(processData, persistence_api_contracts_1.BpmnTags.GatewayElement.ExclusiveGateway, persistence_api_contracts_1.Model.Gateways.ExclusiveGateway);
        const parallelGateways = parseGatewaysByType(processData, persistence_api_contracts_1.BpmnTags.GatewayElement.ParallelGateway, persistence_api_contracts_1.Model.Gateways.ParallelGateway);
        const inclusiveGateways = parseGatewaysByType(processData, persistence_api_contracts_1.BpmnTags.GatewayElement.InclusiveGateway, persistence_api_contracts_1.Model.Gateways.InclusiveGateway);
        const complexGateways = parseGatewaysByType(processData, persistence_api_contracts_1.BpmnTags.GatewayElement.ComplexGateway, persistence_api_contracts_1.Model.Gateways.ComplexGateway);
        return Array.prototype.concat(parallelGateways, exclusiveGateways, inclusiveGateways, complexGateways);
    }
    exports.parseGatewaysFromProcessData = parseGatewaysFromProcessData;
    function parseGatewaysByType(processData, gatewayType, type) {
        const gateways = [];
        const gatewaysRaw = type_factory_1.getModelPropertyAsArray(processData, gatewayType);
        const noGatewaysFound = !((gatewaysRaw === null || gatewaysRaw === void 0 ? void 0 : gatewaysRaw.length) > 0);
        if (noGatewaysFound) {
            return [];
        }
        for (const gatewayRaw of gatewaysRaw) {
            // eslint-disable-next-line 6river/new-cap
            let gateway = new type();
            gateway = type_factory_1.setCommonObjectPropertiesFromData(gatewayRaw, gateway);
            gateway.name = gatewayRaw.name;
            gateway.defaultOutgoingSequenceFlowId = gatewayRaw.default;
            gateway.incoming = type_factory_1.getModelPropertyAsArray(gatewayRaw, persistence_api_contracts_1.BpmnTags.FlowElementProperty.SequenceFlowIncoming);
            gateway.outgoing = type_factory_1.getModelPropertyAsArray(gatewayRaw, persistence_api_contracts_1.BpmnTags.FlowElementProperty.SequenceFlowOutgoing);
            gateways.push(gateway);
        }
        return gateways;
    }
});
//# sourceMappingURL=gateway_parser.js.map