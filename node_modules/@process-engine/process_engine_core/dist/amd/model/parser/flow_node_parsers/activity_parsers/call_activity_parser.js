define(["require", "exports", "@process-engine/persistence_api.contracts", "../../../type_factory", "./activity_factory", "./extension_property_parser"], function (require, exports, persistence_api_contracts_1, type_factory_1, activity_factory_1, extension_property_parser_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function parseCallActivities(processData) {
        const callActivitiesRaw = type_factory_1.getModelPropertyAsArray(processData, persistence_api_contracts_1.BpmnTags.TaskElement.CallActivity);
        const noCallActivitiesFound = !((callActivitiesRaw === null || callActivitiesRaw === void 0 ? void 0 : callActivitiesRaw.length) > 0);
        if (noCallActivitiesFound) {
            return [];
        }
        const callActivities = [];
        for (const callActivityRaw of callActivitiesRaw) {
            let callActivity = activity_factory_1.createActivityInstance(callActivityRaw, persistence_api_contracts_1.Model.Activities.CallActivity);
            if (callActivityRaw.calledElement) {
                setStartEventId(callActivity);
                setPayload(callActivity);
                callActivity.calledReference = callActivityRaw.calledElement;
                // NOTE: There is also a CMMN type, which is not supported yet.
                callActivity.type = persistence_api_contracts_1.Model.Activities.CallActivityType.BPMN;
                callActivity.bindingType = callActivityRaw[persistence_api_contracts_1.BpmnTags.CamundaProperty.CalledElementBinding];
                if (callActivity.bindingType === persistence_api_contracts_1.Model.Activities.CallActivityBindingType.version) {
                    callActivity.calledElementVersion = callActivityRaw[persistence_api_contracts_1.BpmnTags.CamundaProperty.CalledElementVersion];
                }
                callActivity.calledElementTenantId = callActivityRaw[persistence_api_contracts_1.BpmnTags.CamundaProperty.CalledElementTenantId];
                callActivity = determineCallActivityMappingType(callActivity, callActivityRaw);
            }
            callActivities.push(callActivity);
        }
        return callActivities;
    }
    exports.parseCallActivities = parseCallActivities;
    function setStartEventId(callActivity) {
        var _a;
        callActivity.startEventId = (_a = extension_property_parser_1.findExtensionPropertyByName('startEventId', callActivity.extensionElements.camundaExtensionProperties)) === null || _a === void 0 ? void 0 : _a.value;
    }
    function setPayload(callActivity) {
        var _a;
        callActivity.payload = (_a = extension_property_parser_1.findExtensionPropertyByName('payload', callActivity.extensionElements.camundaExtensionProperties)) === null || _a === void 0 ? void 0 : _a.value;
    }
    function determineCallActivityMappingType(callActivity, data) {
        if (data[persistence_api_contracts_1.BpmnTags.CamundaProperty.VariableMappingClass]) {
            callActivity.delegateVariableMapping = persistence_api_contracts_1.Model.Activities.CallActivityDelegateVariableMapping.variableMappingClass;
            callActivity.variableMappingValue = data[persistence_api_contracts_1.BpmnTags.CamundaProperty.VariableMappingClass];
        }
        else if (data[persistence_api_contracts_1.BpmnTags.CamundaProperty.VariableMappingDelegateExpression]) {
            callActivity.delegateVariableMapping = persistence_api_contracts_1.Model.Activities.CallActivityDelegateVariableMapping.variableMappingDelegateExpression;
            callActivity.variableMappingValue = data[persistence_api_contracts_1.BpmnTags.CamundaProperty.VariableMappingDelegateExpression];
        }
        else {
            callActivity.delegateVariableMapping = persistence_api_contracts_1.Model.Activities.CallActivityDelegateVariableMapping.Unspecified;
        }
        return callActivity;
    }
});
//# sourceMappingURL=call_activity_parser.js.map