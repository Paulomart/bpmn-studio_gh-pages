define(["require", "exports", "@process-engine/persistence_api.contracts", "../../../type_factory", "./activity_factory", "../../flow_node_parser", "../../process_lane_set_parser", "../../sequence_flow_parser"], function (require, exports, persistence_api_contracts_1, type_factory_1, activity_factory_1, flow_node_parser_1, process_lane_set_parser_1, sequence_flow_parser_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function parseSubProcesses(processData, errors, eventDefinitions) {
        const subProcessesRaw = type_factory_1.getModelPropertyAsArray(processData, persistence_api_contracts_1.BpmnTags.TaskElement.SubProcess);
        const noSubProcessesFound = !((subProcessesRaw === null || subProcessesRaw === void 0 ? void 0 : subProcessesRaw.length) > 0);
        if (noSubProcessesFound) {
            return [];
        }
        const subProcesses = subProcessesRaw.map((subprocessRaw) => {
            const subProcess = activity_factory_1.createActivityInstance(subprocessRaw, persistence_api_contracts_1.Model.Activities.SubProcess);
            subProcess.laneSet = process_lane_set_parser_1.parseProcessLaneSet(subprocessRaw);
            subProcess.flowNodes = flow_node_parser_1.parseProcessFlowNodes(subprocessRaw, errors, eventDefinitions);
            subProcess.sequenceFlows = sequence_flow_parser_1.parseProcessSequenceFlows(subprocessRaw);
            return subProcess;
        });
        return subProcesses;
    }
    exports.parseSubProcesses = parseSubProcesses;
});
//# sourceMappingURL=subprocess_parser.js.map