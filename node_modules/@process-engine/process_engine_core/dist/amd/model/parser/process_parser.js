define(["require", "exports", "@process-engine/persistence_api.contracts", "../type_factory", "./index"], function (require, exports, persistence_api_contracts_1, type_factory_1, index_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function parseProcesses(rawProcessDefinition) {
        const rawProcesses = type_factory_1.getModelPropertyAsArray(rawProcessDefinition, persistence_api_contracts_1.BpmnTags.CommonElement.Process);
        if (!rawProcesses) {
            return [];
        }
        const processes = [];
        for (const rawProcess of rawProcesses) {
            const process = type_factory_1.createObjectWithCommonProperties(rawProcess, persistence_api_contracts_1.Model.Process);
            process.name = rawProcess.name;
            process.isExecutable = rawProcess.isExecutable === 'true';
            const bpmnErrors = parseProcessModelErrors(rawProcessDefinition);
            const eventDefinitions = parseEventDefinitionsFromObjectModel(rawProcessDefinition);
            process.laneSet = index_1.parseProcessLaneSet(rawProcess);
            process.sequenceFlows = index_1.parseProcessSequenceFlows(rawProcess);
            process.flowNodes = index_1.parseProcessFlowNodes(rawProcess, bpmnErrors, eventDefinitions);
            processes.push(process);
        }
        return processes;
    }
    exports.parseProcesses = parseProcesses;
    function parseProcessModelErrors(rawProcessDefinition) {
        const processHasNoErrors = !rawProcessDefinition[persistence_api_contracts_1.BpmnTags.CommonElement.Error];
        if (processHasNoErrors) {
            return [];
        }
        const rawErrors = type_factory_1.getModelPropertyAsArray(rawProcessDefinition, persistence_api_contracts_1.BpmnTags.CommonElement.Error);
        const errors = [];
        for (const rawError of rawErrors) {
            const newError = type_factory_1.createObjectWithCommonProperties(rawError, persistence_api_contracts_1.Model.GlobalElements.Error);
            newError.id = rawError.id;
            newError.code = rawError.errorCode;
            newError.name = rawError.name;
            newError.message = rawError.message;
            errors.push(newError);
        }
        return errors;
    }
    function parseEventDefinitionsFromObjectModel(rawProcessDefinition) {
        const messageDefinitions = parseEventDefinitionTypeFromObjectModel(rawProcessDefinition, persistence_api_contracts_1.BpmnTags.CommonElement.Message, persistence_api_contracts_1.Model.Events.Definitions.MessageEventDefinition);
        const signalDefinitions = parseEventDefinitionTypeFromObjectModel(rawProcessDefinition, persistence_api_contracts_1.BpmnTags.CommonElement.Signal, persistence_api_contracts_1.Model.Events.Definitions.SignalEventDefinition);
        return Array.prototype.concat(messageDefinitions, signalDefinitions);
    }
    function parseEventDefinitionTypeFromObjectModel(rawProcessDefinition, tagName, typeFactory) {
        const rawDefinitions = type_factory_1.getModelPropertyAsArray(rawProcessDefinition, tagName);
        const collaborationHasNoMatchingDefinitions = !((rawDefinitions === null || rawDefinitions === void 0 ? void 0 : rawDefinitions.length) > 0);
        if (collaborationHasNoMatchingDefinitions) {
            return [];
        }
        const eventDefinitions = [];
        for (const rawDefinition of rawDefinitions) {
            // eslint-disable-next-line 6river/new-cap
            const newDefinition = new typeFactory();
            newDefinition.id = rawDefinition.id;
            newDefinition.name = rawDefinition.name;
            eventDefinitions.push(newDefinition);
        }
        return eventDefinitions;
    }
});
//# sourceMappingURL=process_parser.js.map