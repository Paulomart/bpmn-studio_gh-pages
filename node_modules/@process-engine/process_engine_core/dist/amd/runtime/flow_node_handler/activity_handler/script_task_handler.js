define(["require", "exports", "loggerhythm", "./activity_handler"], function (require, exports, loggerhythm_1, activity_handler_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class ScriptTaskHandler extends activity_handler_1.ActivityHandler {
        constructor(eventAggregator, flowNodeHandlerFactory, flowNodePersistenceFacade, scriptTaskModel) {
            super(eventAggregator, flowNodeHandlerFactory, flowNodePersistenceFacade, scriptTaskModel);
            this.logger = new loggerhythm_1.Logger(`processengine:script_task_handler:${scriptTaskModel.id}`);
        }
        get scriptTask() {
            return this.flowNode;
        }
        async startExecution(token, processTokenFacade, processModelFacade, identity) {
            this.logger.verbose(`Executing ScriptTask instance ${this.flowNodeInstanceId}`);
            await this.persistOnEnter(token);
            return this.executeHandler(token, processTokenFacade, processModelFacade, identity);
        }
        async executeHandler(token, processTokenFacade, processModelFacade, identity) {
            const handlerPromise = new Promise(async (resolve, reject) => {
                try {
                    let result = {};
                    const executionPromise = this.executeScriptTask(processTokenFacade, identity);
                    this.publishActivityReachedNotification(identity, token);
                    this.onInterruptedCallback = (interruptionToken) => {
                        processTokenFacade.addResultForFlowNode(this.scriptTask.id, this.flowNodeInstanceId, interruptionToken.payload);
                        handlerPromise.cancel();
                    };
                    result = await executionPromise;
                    processTokenFacade.addResultForFlowNode(this.scriptTask.id, this.flowNodeInstanceId, result);
                    token.payload = result;
                    await this.persistOnExit(token);
                    this.publishActivityFinishedNotification(identity, token);
                    const nextFlowNodeInfo = processModelFacade.getNextFlowNodesFor(this.scriptTask);
                    return resolve(nextFlowNodeInfo);
                }
                catch (error) {
                    await this.persistOnError(token, error);
                    this.publishActivityFinishedNotification(identity, token);
                    return reject(error);
                }
            });
            return handlerPromise;
        }
        executeScriptTask(processTokenFacade, identity) {
            return new Promise(async (resolve, reject) => {
                try {
                    const script = this.scriptTask.script;
                    if (!script) {
                        return undefined;
                    }
                    const scriptFunction = new Function('token', 'identity', script);
                    const tokenData = processTokenFacade.getOldTokenFormat();
                    let result = await scriptFunction.call(this, tokenData, identity);
                    result = result == undefined ? {} : result;
                    return resolve(result);
                }
                catch (error) {
                    this.logger.error('Failed to run script!', error);
                    return reject(error);
                }
            });
        }
    }
    exports.ScriptTaskHandler = ScriptTaskHandler;
});
//# sourceMappingURL=script_task_handler.js.map