define(["require", "exports", "loggerhythm", "./index"], function (require, exports, loggerhythm_1, index_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class IntermediateEmptyEventHandler extends index_1.EventHandler {
        constructor(eventAggregator, flowNodeHandlerFactory, flowNodePersistenceFacade, emptyEventModel) {
            super(eventAggregator, flowNodeHandlerFactory, flowNodePersistenceFacade, emptyEventModel);
            this.logger = loggerhythm_1.Logger.createLogger(`processengine:empty_event_handler:${emptyEventModel.id}`);
        }
        get emptyEventModel() {
            return this.flowNode;
        }
        async startExecution(token, processTokenFacade, processModelFacade, identity) {
            this.logger.verbose(`Executing EmptyEvent instance ${this.flowNodeInstanceId}.`);
            await this.persistOnEnter(token);
            return this.executeHandler(token, processTokenFacade, processModelFacade);
        }
        async executeHandler(token, processTokenFacade, processModelFacade) {
            processTokenFacade.addResultForFlowNode(this.emptyEventModel.id, this.flowNodeInstanceId, token.payload);
            await this.persistOnExit(token);
            this.sendIntermediateThrowEventTriggeredNotification(token);
            return processModelFacade.getNextFlowNodesFor(this.emptyEventModel);
        }
    }
    exports.IntermediateEmptyEventHandler = IntermediateEmptyEventHandler;
});
//# sourceMappingURL=intermediate_empty_event_handler.js.map