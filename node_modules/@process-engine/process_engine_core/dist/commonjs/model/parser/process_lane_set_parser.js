"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const persistence_api_contracts_1 = require("@process-engine/persistence_api.contracts");
const type_factory_1 = require("../type_factory");
function parseProcessLaneSet(data) {
    var _a;
    const laneSetData = (_a = data[persistence_api_contracts_1.BpmnTags.Lane.LaneSet]) !== null && _a !== void 0 ? _a : data[persistence_api_contracts_1.BpmnTags.LaneProperty.ChildLaneSet];
    if (!laneSetData) {
        return undefined;
    }
    const lanesRaw = type_factory_1.getModelPropertyAsArray(laneSetData, persistence_api_contracts_1.BpmnTags.Lane.Lane);
    const laneSet = new persistence_api_contracts_1.Model.ProcessElements.LaneSet();
    laneSet.lanes = [];
    if (!lanesRaw) {
        return laneSet;
    }
    for (const laneRaw of lanesRaw) {
        const lane = type_factory_1.createObjectWithCommonProperties(laneRaw, persistence_api_contracts_1.Model.ProcessElements.Lane);
        lane.name = laneRaw.name;
        const flowNodeReferences = type_factory_1.getModelPropertyAsArray(laneRaw, persistence_api_contracts_1.BpmnTags.LaneProperty.FlowNodeRef);
        const laneHasNoFlowNodes = !((flowNodeReferences === null || flowNodeReferences === void 0 ? void 0 : flowNodeReferences.length) > 0);
        if (laneHasNoFlowNodes) {
            return laneSet;
        }
        lane.flowNodeReferences = flowNodeReferences.map((reference) => reference.trim());
        if (laneRaw[persistence_api_contracts_1.BpmnTags.LaneProperty.ChildLaneSet]) {
            lane.childLaneSet = parseProcessLaneSet(laneRaw);
        }
        laneSet.lanes.push(lane);
    }
    return laneSet;
}
exports.parseProcessLaneSet = parseProcessLaneSet;
//# sourceMappingURL=process_lane_set_parser.js.map