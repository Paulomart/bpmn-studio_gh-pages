"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const persistence_api_contracts_1 = require("@process-engine/persistence_api.contracts");
const type_factory_1 = require("../../../type_factory");
const activity_factory_1 = require("./activity_factory");
const extension_property_parser_1 = require("./extension_property_parser");
function parseServiceTasks(processData) {
    const serviceTasksRaw = type_factory_1.getModelPropertyAsArray(processData, persistence_api_contracts_1.BpmnTags.TaskElement.ServiceTask);
    const noServiceTasksFound = !((serviceTasksRaw === null || serviceTasksRaw === void 0 ? void 0 : serviceTasksRaw.length) > 0);
    if (noServiceTasksFound) {
        return [];
    }
    const serviceTasks = serviceTasksRaw.map((serviceTaskRaw) => {
        return serviceTaskRaw[persistence_api_contracts_1.BpmnTags.CamundaProperty.Type] === 'external'
            ? parseExternalServiceTask(serviceTaskRaw)
            : parseInternalServiceTask(serviceTaskRaw);
    });
    return serviceTasks;
}
exports.parseServiceTasks = parseServiceTasks;
function parseExternalServiceTask(serviceTaskRaw) {
    var _a, _b, _c;
    const serviceTask = activity_factory_1.createActivityInstance(serviceTaskRaw, persistence_api_contracts_1.Model.Activities.ServiceTask);
    serviceTask.type = persistence_api_contracts_1.Model.Activities.ServiceTaskType.external;
    serviceTask.topic = serviceTaskRaw[persistence_api_contracts_1.BpmnTags.CamundaProperty.Topic];
    const extensionProperties = (_b = (_a = serviceTask.extensionElements) === null || _a === void 0 ? void 0 : _a.camundaExtensionProperties) !== null && _b !== void 0 ? _b : [];
    serviceTask.payload = (_c = extension_property_parser_1.findExtensionPropertyByName('payload', extensionProperties)) === null || _c === void 0 ? void 0 : _c.value;
    return serviceTask;
}
function parseInternalServiceTask(serviceTaskRaw) {
    const serviceTask = activity_factory_1.createActivityInstance(serviceTaskRaw, persistence_api_contracts_1.Model.Activities.ServiceTask);
    serviceTask.type = persistence_api_contracts_1.Model.Activities.ServiceTaskType.internal;
    serviceTask.invocation = getMethodInvocationforInternalServiceTask(serviceTask);
    return serviceTask;
}
function getMethodInvocationforInternalServiceTask(serviceTask) {
    var _a, _b, _c;
    const extensionProperties = (_b = (_a = serviceTask.extensionElements) === null || _a === void 0 ? void 0 : _a.camundaExtensionProperties) !== null && _b !== void 0 ? _b : [];
    const moduleProperty = extension_property_parser_1.findExtensionPropertyByName('module', extensionProperties);
    const methodProperty = extension_property_parser_1.findExtensionPropertyByName('method', extensionProperties);
    const paramsProperty = extension_property_parser_1.findExtensionPropertyByName('params', extensionProperties);
    // 'params' is optional.
    const notAValidMethodInvocation = !moduleProperty || !methodProperty;
    if (notAValidMethodInvocation) {
        return undefined;
    }
    const methodInvocation = new persistence_api_contracts_1.Model.Activities.Invocations.MethodInvocation();
    methodInvocation.module = moduleProperty.value;
    methodInvocation.method = methodProperty.value;
    methodInvocation.params = (_c = paramsProperty === null || paramsProperty === void 0 ? void 0 : paramsProperty.value) !== null && _c !== void 0 ? _c : '[]';
    return methodInvocation;
}
//# sourceMappingURL=service_task_parser.js.map