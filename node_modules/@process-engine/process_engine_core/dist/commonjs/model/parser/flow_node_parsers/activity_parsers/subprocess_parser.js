"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const persistence_api_contracts_1 = require("@process-engine/persistence_api.contracts");
const type_factory_1 = require("../../../type_factory");
const activity_factory_1 = require("./activity_factory");
const flow_node_parser_1 = require("../../flow_node_parser");
const process_lane_set_parser_1 = require("../../process_lane_set_parser");
const sequence_flow_parser_1 = require("../../sequence_flow_parser");
function parseSubProcesses(processData, errors, eventDefinitions) {
    const subProcessesRaw = type_factory_1.getModelPropertyAsArray(processData, persistence_api_contracts_1.BpmnTags.TaskElement.SubProcess);
    const noSubProcessesFound = !((subProcessesRaw === null || subProcessesRaw === void 0 ? void 0 : subProcessesRaw.length) > 0);
    if (noSubProcessesFound) {
        return [];
    }
    const subProcesses = subProcessesRaw.map((subprocessRaw) => {
        const subProcess = activity_factory_1.createActivityInstance(subprocessRaw, persistence_api_contracts_1.Model.Activities.SubProcess);
        subProcess.laneSet = process_lane_set_parser_1.parseProcessLaneSet(subprocessRaw);
        subProcess.flowNodes = flow_node_parser_1.parseProcessFlowNodes(subprocessRaw, errors, eventDefinitions);
        subProcess.sequenceFlows = sequence_flow_parser_1.parseProcessSequenceFlows(subprocessRaw);
        return subProcess;
    });
    return subProcesses;
}
exports.parseSubProcesses = parseSubProcesses;
//# sourceMappingURL=subprocess_parser.js.map