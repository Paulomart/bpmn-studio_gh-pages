import { IContainer } from 'addict-ioc';
import { Model, ProcessToken } from '@process-engine/persistence_api.contracts';
import { IBoundaryEventHandler, IBoundaryEventHandlerFactory, IFlowNodeHandler, IFlowNodeHandlerFactory } from '@process-engine/process_engine_contracts';
export declare class FlowNodeHandlerFactory implements IFlowNodeHandlerFactory {
    private container;
    private boundaryEventHandlerFactory;
    private intermediateCatchEventHandlerFactory;
    private intermediateThrowEventHandlerFactory;
    private parallelGatewayHandlerFactory;
    private serviceTaskHandlerFactory;
    constructor(container: IContainer, boundaryEventHandlerFactory: IBoundaryEventHandlerFactory, intermediateCatchEventHandlerFactory: IFlowNodeHandlerFactory, intermediateThrowEventHandlerFactory: IFlowNodeHandlerFactory, parallelGatewayHandlerFactory: IFlowNodeHandlerFactory, serviceTaskHandlerFactory: IFlowNodeHandlerFactory);
    create<TFlowNode extends Model.Base.FlowNode>(flowNode: TFlowNode, processToken: ProcessToken): Promise<IFlowNodeHandler<TFlowNode>>;
    createForBoundaryEvent(flowNode: Model.Events.BoundaryEvent): Promise<IBoundaryEventHandler>;
    private resolveHandlerInstance;
}
