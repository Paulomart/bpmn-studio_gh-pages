import { IIdentity } from '@essential-projects/iam_contracts';
import { FlowNodeInstance, Model, ProcessToken } from '@process-engine/persistence_api.contracts';
import { IProcessModelFacade, IProcessTokenFacade } from '@process-engine/process_engine_contracts';
import { FlowNodeHandler } from '../flow_node_handler';
/**
 * This is the base handler for events.
 */
export declare abstract class EventHandler<TFlowNode extends Model.Base.FlowNode> extends FlowNodeHandler<TFlowNode> {
    protected beforeExecute(token: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity: IIdentity, rejectFunction?: Function): Promise<void>;
    execute(token: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity: IIdentity, previousFlowNodeInstanceId?: string): Promise<void>;
    resume(flowNodeInstanceForHandler: FlowNodeInstance, allFlowNodeInstances: Array<FlowNodeInstance>, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity: IIdentity): Promise<void>;
    protected resumeFromState(flowNodeInstance: FlowNodeInstance, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity: IIdentity, processFlowNodeInstances?: Array<FlowNodeInstance>): Promise<Array<Model.Base.FlowNode>>;
    protected continueAfterSuspend(flowNodeInstance: FlowNodeInstance, onSuspendToken: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity?: IIdentity): Promise<Array<Model.Base.FlowNode>>;
    protected continueAfterResume(resumeToken: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity?: IIdentity): Promise<Array<Model.Base.FlowNode>>;
    /**
     * Publishes a notification on the EventAggregator, informing about a
     * triggered IntermediateThrowEvent.
     *
     * @param token    Contains all the information required for the Notification message.
     */
    protected sendIntermediateThrowEventTriggeredNotification(token: ProcessToken): void;
    /**
     * Publishes a notification on the EventAggregator, informing about a new
     * reached IntermediateCatchEvent.
     *
     * @param token    Contains all the information required for the Notification message.
     */
    protected sendIntermediateCatchEventReachedNotification(token: ProcessToken): void;
    /**
     * Publishes notifications on the EventAggregator, informing that a IntermediateCatchEvent
     * has finished execution.
     *
     * Two notifications will be send:
     * - A global notification that everybody can receive
     * - A notification specifically for this IntermediateCatchEvent.
     *
     * @param token    Contains all information required for the notification message.
     */
    protected sendIntermediateCatchEventFinishedNotification(token: ProcessToken): void;
    protected getIntermediateCatchEventFinishedEventName(correlationId: string, processInstanceId: string): string;
}
