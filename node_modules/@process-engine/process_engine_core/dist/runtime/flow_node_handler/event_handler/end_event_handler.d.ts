import { IEventAggregator } from '@essential-projects/event_aggregator_contracts';
import { IIAMService, IIdentity } from '@essential-projects/iam_contracts';
import { Model, ProcessToken } from '@process-engine/persistence_api.contracts';
import { IFlowNodeHandlerFactory, IFlowNodePersistenceFacade, IProcessModelFacade, IProcessTokenFacade } from '@process-engine/process_engine_contracts';
import { EventHandler } from './index';
export declare class EndEventHandler extends EventHandler<Model.Events.EndEvent> {
    private readonly iamService;
    constructor(eventAggregator: IEventAggregator, flowNodeHandlerFactory: IFlowNodeHandlerFactory, flowNodePersistenceFacade: IFlowNodePersistenceFacade, iamService: IIAMService, endEventModel: Model.Events.EndEvent);
    private get endEvent();
    protected beforeExecute(token: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity: IIdentity): Promise<void>;
    protected startExecution(token: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity: IIdentity): Promise<Array<Model.Base.FlowNode>>;
    protected executeHandler(token: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity: IIdentity): Promise<Array<Model.Base.FlowNode>>;
    private ensureHasClaim;
    /**
     * Retrives the payload to use with the event.
     *
     * This will either be expression contained in the `inputValues` property
     * of the FlowNode, if it exists, or the current token.
     *
     * @param   token              The current ProcessToken.
     * @param   processTokenFacade The facade for handling all ProcessTokens.
     * @param   identity           The requesting users identity.
     * @returns                    The retrieved payload for the event.
     */
    private getFinalTokenPayloadFromInputValues;
    /**
     * When a MessageEndEvent is used, an event with the corresponding message is
     * published to the EventAggregator.
     * Afterwards, the process finishes regularly.
     *
     * @param identity The identity that owns the EndEvent instance.
     * @param token    The current ProcessToken.
     */
    private sendMessage;
    /**
     * When a SignalEndEvent is used, an event with the corresponding signal is
     * published to the EventAggregator.
     * Afterwards, the process finishes regularly.
     *
     * @param identity The identity that owns the EndEvent instance.
     * @param token    The current ProcessToken.
     */
    private sendSignal;
    /**
     * When a TerminateEndEvent is used, an event with the corresponding
     * termination notification is published to the EventAggregator.
     *
     * @param identity The identity that owns the EndEvent instance.
     * @param token    The current ProcessToken.
     */
    private notifyAboutTermination;
    /**
     * Sends a generic notification that a ProcessInstance has finished regularly.
     * Also publishes a notification about the EndEvent that has been reached.
     *
     * @param identity The identity that owns the EndEvent instance.
     * @param token    The current ProcessToken.
     */
    private notifyAboutRegularEnd;
}
