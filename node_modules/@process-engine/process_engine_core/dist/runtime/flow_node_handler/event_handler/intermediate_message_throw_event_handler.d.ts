import { IEventAggregator } from '@essential-projects/event_aggregator_contracts';
import { IIAMService, IIdentity } from '@essential-projects/iam_contracts';
import { Model, ProcessToken } from '@process-engine/persistence_api.contracts';
import { IFlowNodeHandlerFactory, IFlowNodePersistenceFacade, IProcessModelFacade, IProcessTokenFacade } from '@process-engine/process_engine_contracts';
import { EventHandler } from './index';
export declare class IntermediateMessageThrowEventHandler extends EventHandler<Model.Events.IntermediateThrowEvent> {
    private readonly iamService;
    constructor(eventAggregator: IEventAggregator, flowNodeHandlerFactory: IFlowNodeHandlerFactory, flowNodePersistenceFacade: IFlowNodePersistenceFacade, iamService: IIAMService, messageThrowEventModel: Model.Events.IntermediateThrowEvent);
    private get messageThrowEvent();
    protected startExecution(token: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity: IIdentity): Promise<Array<Model.Base.FlowNode>>;
    protected executeHandler(token: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity: IIdentity): Promise<Array<Model.Base.FlowNode>>;
    private ensureHasClaim;
    /**
     * Retrives the payload to use with the event.
     *
     * This will either be expression contained in the `inputValues` property
     * of the FlowNode, if it exists, or the current token.
     *
     * @param   token              The current ProcessToken.
     * @param   processTokenFacade The facade for handling all ProcessTokens.
     * @param   identity           The requesting users identity.
     * @returns                    The retrieved payload for the event.
     */
    private getTokenPayloadFromInputValues;
}
