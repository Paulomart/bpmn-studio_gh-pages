import { IEventAggregator } from '@essential-projects/event_aggregator_contracts';
import { IIdentity } from '@essential-projects/iam_contracts';
import { FlowNodeInstance, Model, ProcessToken } from '@process-engine/persistence_api.contracts';
import { IFlowNodeHandlerFactory, IFlowNodePersistenceFacade, IProcessModelFacade, IProcessTokenFacade, ITimerFacade } from '@process-engine/process_engine_contracts';
import { EventHandler } from './index';
export declare class IntermediateTimerCatchEventHandler extends EventHandler<Model.Events.IntermediateCatchEvent> {
    private timerFacade;
    private timerSubscription;
    constructor(eventAggregator: IEventAggregator, flowNodeHandlerFactory: IFlowNodeHandlerFactory, flowNodePersistenceFacade: IFlowNodePersistenceFacade, timerFacade: ITimerFacade, timerCatchEventModel: Model.Events.IntermediateCatchEvent);
    private get timerCatchEvent();
    protected startExecution(token: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity: IIdentity): Promise<Array<Model.Base.FlowNode>>;
    protected executeHandler(token: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade): Promise<Array<Model.Base.FlowNode>>;
    protected continueAfterSuspend(flowNodeInstance: FlowNodeInstance, onSuspendToken: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade): Promise<Array<Model.Base.FlowNode>>;
    private suspendAndExecuteTimer;
    private executeTimer;
}
