import { IContainer } from 'addict-ioc';
import { IEventAggregator, Subscription } from '@essential-projects/event_aggregator_contracts';
import { IIdentity } from '@essential-projects/iam_contracts';
import { Model, ProcessToken } from '@process-engine/persistence_api.contracts';
import { IFlowNodeHandlerFactory, IFlowNodePersistenceFacade, IProcessModelFacade, IProcessTokenFacade } from '@process-engine/process_engine_contracts';
import { GatewayHandler } from './index';
export declare class ParallelJoinGatewayHandler extends GatewayHandler<Model.Gateways.ParallelGateway> {
    private readonly container;
    private incomingFlowNodeInstanceIds;
    private receivedResults;
    private isInterrupted;
    constructor(container: IContainer, eventAggregator: IEventAggregator, flowNodeHandlerFactory: IFlowNodeHandlerFactory, flowNodePersistenceFacade: IFlowNodePersistenceFacade, parallelGatewayModel: Model.Gateways.ParallelGateway);
    private get parallelGateway();
    protected beforeExecute(token: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity: IIdentity): Promise<void>;
    protected afterExecute(token: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity: IIdentity): Promise<void>;
    protected startExecution(token: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity: IIdentity): Promise<Array<Model.Base.FlowNode>>;
    protected executeHandler(token: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity: IIdentity): Promise<Array<Model.Base.FlowNode>>;
    private getLatestFlowNodeResultFromFacade;
    private aggregateResults;
    protected subscribeToProcessTermination(token: ProcessToken): Subscription;
    protected subscribeToProcessError(token: ProcessToken): Subscription;
    private cleanupSubscriptions;
    private removeInstanceFromIocContainer;
}
