import { IIdentity } from '@essential-projects/iam_contracts';
import { FlowNodeInstance, Model, ProcessToken } from '@process-engine/persistence_api.contracts';
import { IProcessModelFacade, IProcessTokenFacade } from '@process-engine/process_engine_contracts';
import { FlowNodeHandler } from '../flow_node_handler';
export declare abstract class GatewayHandler<TFlowNode extends Model.Gateways.Gateway> extends FlowNodeHandler<TFlowNode> {
    protected beforeExecute(token: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity: IIdentity, rejectFunction?: Function): Promise<void>;
    execute(token: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity: IIdentity, previousFlowNodeInstanceId?: string): Promise<void>;
    resume(flowNodeInstanceForHandler: FlowNodeInstance, allFlowNodeInstances: Array<FlowNodeInstance>, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity: IIdentity): Promise<void>;
    protected resumeFromState(flowNodeInstance: FlowNodeInstance, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity: IIdentity): Promise<Array<Model.Base.FlowNode>>;
}
