import { IEventAggregator } from '@essential-projects/event_aggregator_contracts';
import { IIdentity } from '@essential-projects/iam_contracts';
import { Model, ProcessToken } from '@process-engine/persistence_api.contracts';
import { IFlowNodeHandlerFactory, IFlowNodePersistenceFacade, IProcessTokenFacade } from '@process-engine/process_engine_contracts';
import { ProcessModelFacade } from '../../facades/process_model_facade';
import { GatewayHandler } from './index';
export declare class ParallelSplitGatewayHandler extends GatewayHandler<Model.Gateways.ParallelGateway> {
    constructor(eventAggregator: IEventAggregator, flowNodeHandlerFactory: IFlowNodeHandlerFactory, flowNodePersistenceFacade: IFlowNodePersistenceFacade, parallelGatewayModel: Model.Gateways.ParallelGateway);
    private get parallelGateway();
    protected startExecution(token: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: ProcessModelFacade, identity: IIdentity): Promise<Array<Model.Base.FlowNode>>;
    protected executeHandler(token: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: ProcessModelFacade, identity: IIdentity): Promise<Array<Model.Base.FlowNode>>;
}
