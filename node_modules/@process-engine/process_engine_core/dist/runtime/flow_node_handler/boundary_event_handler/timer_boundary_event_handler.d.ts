import { IEventAggregator } from '@essential-projects/event_aggregator_contracts';
import { FlowNodeInstance, Model, ProcessToken } from '@process-engine/persistence_api.contracts';
import { IFlowNodePersistenceFacade, IProcessModelFacade, IProcessTokenFacade, ITimerFacade, OnBoundaryEventTriggeredCallback } from '@process-engine/process_engine_contracts';
import { BoundaryEventHandler } from './boundary_event_handler';
export declare class TimerBoundaryEventHandler extends BoundaryEventHandler {
    private readonly logger;
    private readonly timerFacade;
    private timerSubscription;
    constructor(eventAggregator: IEventAggregator, flowNodePersistenceFacade: IFlowNodePersistenceFacade, timerFacade: ITimerFacade, boundaryEventModel: Model.Events.BoundaryEvent);
    waitForTriggeringEvent(onTriggeredCallback: OnBoundaryEventTriggeredCallback, token: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, attachedFlowNodeInstanceId: string): Promise<void>;
    resumeWait(boundaryEventInstance: FlowNodeInstance, onTriggeredCallback: OnBoundaryEventTriggeredCallback, token: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, attachedFlowNodeInstanceId: string): Promise<void>;
    cancel(token: ProcessToken, processModelFacade: IProcessModelFacade): Promise<void>;
    private initializeTimer;
}
