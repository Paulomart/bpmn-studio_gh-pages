import { FlowNodeInstance, Model, ProcessToken } from '@process-engine/persistence_api.contracts';
import { IBoundaryEventHandler, IFlowNodePersistenceFacade, IProcessModelFacade, IProcessTokenFacade, OnBoundaryEventTriggeredCallback } from '@process-engine/process_engine_contracts';
import { IEventAggregator } from '@essential-projects/event_aggregator_contracts';
/**
 * The base implementation for a BoundaryEventHandler.
 */
export declare abstract class BoundaryEventHandler implements IBoundaryEventHandler {
    protected attachedFlowNodeInstanceId: string;
    protected readonly eventAggregator: IEventAggregator;
    protected readonly boundaryEventModel: Model.Events.BoundaryEvent;
    protected readonly flowNodePersistenceFacade: IFlowNodePersistenceFacade;
    protected boundaryEventInstanceId: string;
    private flowNodeInstance?;
    constructor(eventAggregator: IEventAggregator, flowNodePersistenceFacade: IFlowNodePersistenceFacade, boundaryEventModel: Model.Events.BoundaryEvent);
    protected set boundaryEventInstance(flowNodeInstance: FlowNodeInstance);
    getInstanceId(): string;
    abstract waitForTriggeringEvent(onTriggeredCallback: OnBoundaryEventTriggeredCallback, token: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, attachedFlowNodeInstanceId: string): Promise<void>;
    abstract resumeWait(boundaryEventInstance: FlowNodeInstance, onTriggeredCallback: OnBoundaryEventTriggeredCallback, token: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, attachedFlowNodeInstanceId: string): Promise<void>;
    cancel(processToken: ProcessToken, processModelFacade: IProcessModelFacade): Promise<void>;
    getNextFlowNode(processModelFacade: IProcessModelFacade): Model.Base.FlowNode;
    protected persistOnEnter(processToken: ProcessToken): Promise<void>;
    protected persistOnExit(processToken: ProcessToken): Promise<void>;
    protected persistOnTerminate(processToken: ProcessToken): Promise<void>;
    protected persistOnError(processToken: ProcessToken, error: Error): Promise<void>;
    /**
     * Publishes a notification on the EventAggregator, informing about a new
     * triggered Boundary Event.
     *
     * @param token    Contains all the information required for the notification message.
     */
    protected sendBoundaryEventTriggeredNotification(token: ProcessToken): void;
}
