import { IEventAggregator } from '@essential-projects/event_aggregator_contracts';
import { IIdentity } from '@essential-projects/iam_contracts';
import { FlowNodeInstance, Model, ProcessToken } from '@process-engine/persistence_api.contracts';
import { IFlowNodeHandlerFactory, IFlowNodePersistenceFacade, IProcessModelFacade, IProcessTokenFacade } from '@process-engine/process_engine_contracts';
import { ActivityHandler } from './activity_handler';
export declare class EmptyActivityHandler extends ActivityHandler<Model.Activities.EmptyActivity> {
    private emptyActivitySubscription;
    constructor(eventAggregator: IEventAggregator, flowNodeHandlerFactory: IFlowNodeHandlerFactory, flowNodePersistenceFacade: IFlowNodePersistenceFacade, emptyActivityModel: Model.Activities.EmptyActivity);
    private get emptyActivity();
    protected startExecution(token: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity: IIdentity): Promise<Array<Model.Base.FlowNode>>;
    protected executeHandler(token: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity: IIdentity): Promise<Array<Model.Base.FlowNode>>;
    protected continueAfterSuspend(flowNodeInstance: FlowNodeInstance, onSuspendToken: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity: IIdentity): Promise<Array<Model.Base.FlowNode>>;
    /**
     * Suspends the handler and waits for a FinishEmptyActivityMessage.
     * Upon receiving the messsage, the handler will be resumed.
     *
     * @async
     * @param identity The identity that owns the EmptyActivity instance.
     * @param token    Contains all relevant info the EventAggregator will need for
     *                 creating the EventSubscription.
     */
    private suspendAndWaitForFinishEvent;
    /**
     * Waits for a FinishEmptyActivityMessage.
     * Upon receiving the messsage, the handler will be resumed.
     *
     * @async
     * @param identity The identity that owns the EmptyActivity instance.
     * @param token    Contains all relevant info the EventAggregator will need for
     *                 creating the EventSubscription.
     */
    private waitForFinishEvent;
    private publishEmptyActivityReachedNotification;
    private publishEmptyActivityFinishedNotification;
    private getFinishEmptyActivityEventName;
    private getEmptyActivityFinishedEventName;
}
