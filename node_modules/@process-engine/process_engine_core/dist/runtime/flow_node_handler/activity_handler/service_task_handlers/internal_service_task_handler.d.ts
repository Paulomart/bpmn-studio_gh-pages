import { IContainer } from 'addict-ioc';
import { IEventAggregator } from '@essential-projects/event_aggregator_contracts';
import { IIdentity } from '@essential-projects/iam_contracts';
import { Model, ProcessToken } from '@process-engine/persistence_api.contracts';
import { IFlowNodeHandlerFactory, IFlowNodePersistenceFacade, IProcessModelFacade, IProcessTokenFacade } from '@process-engine/process_engine_contracts';
import { ActivityHandler } from '../activity_handler';
export declare class InternalServiceTaskHandler extends ActivityHandler<Model.Activities.ServiceTask> {
    private container;
    constructor(container: IContainer, eventAggregator: IEventAggregator, flowNodeHandlerFactory: IFlowNodeHandlerFactory, flowNodePersistenceFacade: IFlowNodePersistenceFacade, serviceTaskModel: Model.Activities.ServiceTask);
    private get serviceTask();
    protected startExecution(token: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity: IIdentity): Promise<Array<Model.Base.FlowNode>>;
    protected executeHandler(token: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity: IIdentity): Promise<Array<Model.Base.FlowNode>>;
    /**
     * Executes the given ServiceTask internally.
     * The ServiceTaskHandler handles all execution.
     *
     * @async
     * @param   token              The current ProcessToken.
     * @param   processTokenFacade The Facade for accessing all ProcessTokens of the
     *                             currently running ProcessInstance.
     * @param   identity           The identity that started the ProcessInstance.
     * @returns                    The ServiceTask's result.
     */
    private executeInternalServiceTask;
    private validateInvocation;
    private ensureServiceHasInvocationMethod;
    private getArgumentsFromInvocation;
}
