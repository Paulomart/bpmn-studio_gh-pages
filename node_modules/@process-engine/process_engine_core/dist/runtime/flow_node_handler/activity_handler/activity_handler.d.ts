import { IIdentity } from '@essential-projects/iam_contracts';
import { FlowNodeInstance, Model, ProcessToken } from '@process-engine/persistence_api.contracts';
import { IProcessModelFacade, IProcessTokenFacade } from '@process-engine/process_engine_contracts';
import { FlowNodeHandler } from '../flow_node_handler';
/**
 * This is the base handler for all Activities and Tasks.
 */
export declare abstract class ActivityHandler<TFlowNode extends Model.Base.FlowNode> extends FlowNodeHandler<TFlowNode> {
    private attachedBoundaryEventHandlers;
    execute(token: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity: IIdentity, previousFlowNodeInstanceId?: string): Promise<void>;
    resume(flowNodeInstanceForHandler: FlowNodeInstance, allFlowNodeInstances: Array<FlowNodeInstance>, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity: IIdentity): Promise<void>;
    protected resumeFromState(flowNodeInstance: FlowNodeInstance, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity: IIdentity, processFlowNodeInstances?: Array<FlowNodeInstance>): Promise<Array<Model.Base.FlowNode>>;
    protected afterExecute(token?: ProcessToken, processTokenFacade?: IProcessTokenFacade, processModelFacade?: IProcessModelFacade, identity?: IIdentity): Promise<void>;
    protected continueAfterSuspend(flowNodeInstance: FlowNodeInstance, onSuspendToken: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity?: IIdentity): Promise<Array<Model.Base.FlowNode>>;
    protected continueAfterResume(resumeToken: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity?: IIdentity): Promise<Array<Model.Base.FlowNode>>;
    private handleActivityError;
    private resumeWithBoundaryEvents;
    /**
     * Required for resuming BoundaryEvent paths.
     * Checks if any of the given FlowNodeInstances are from a FlowNode that
     * followed one of the BoundaryEvents attached to this handler.
     *
     * This must be done for all resumptions, to account for non-interrupting BoundaryEvents.
     *
     * @param flowNodeInstances The list of FlowNodeInstances to check.
     */
    private getFlowNodeInstancesAfterBoundaryEvents;
    /**
     * Creates handlers for all BoundaryEvents attached this handler's FlowNode.
     *
     * @async
     * @param processToken        The current Processtoken.
     * @param processTokenFacade  The Facade for managing the ProcessInstance's
     *                            ProcessTokens.
     * @param processModelFacade  The ProcessModelFacade containing the ProcessModel.
     * @param identity            The ProcessInstance owner.
     * @param handlerResolve      The function that will cleanup the main handler
     *                            Promise, if an interrupting BoundaryEvent was
     *                            triggered.
     */
    private attachBoundaryEvents;
    private detachBoundaryEvents;
    private findErrorBoundaryEventHandlersForError;
    private createBoundaryEventHandler;
    /**
     * Callback function for handling triggered BoundaryEvents.
     *
     * This will start a new execution flow that travels down the path attached
     * to the BoundaryEvent.
     * If the triggered BoundaryEvent is interrupting, this function will also cancel
     * this handler as well as all attached BoundaryEvents.
     *
     * @async
     * @param eventData          The data sent with the triggered BoundaryEvent.
     * @param verbose            The current Processtoken.
     * @param processTokenFacade The Facade for managing the ProcessInstance's ProcessTokens.
     * @param processModelFacade The ProcessModelFacade containing the ProcessModel.
     * @param identity           The ProcessInstance owner.
     */
    private handleBoundaryEvent;
    /**
     * Starts a new execution flow that begins at the given BoundaryEvent instance.
     *
     * @async
     * @param boundaryInstanceId  The instance Id of the triggered BoundaryEvent.
     * @param nextFlowNode        The first FlowNode to run in this flow.
     * @param currentProcessToken The current Processtoken.
     * @param processTokenFacade  The Facade for managing the ProcessInstance's
     *                            ProcessTokens.
     * @param processModelFacade  The ProcessModelFacade containing the ProcessModel.
     * @param identity            The ProcessInstance owner.
     */
    private continueAfterBoundaryEvent;
    protected publishActivityReachedNotification(identity: IIdentity, token: ProcessToken): void;
    protected publishActivityFinishedNotification(identity: IIdentity, token: ProcessToken): void;
}
