import { IEventAggregator } from '@essential-projects/event_aggregator_contracts';
import { IIdentity } from '@essential-projects/iam_contracts';
import { FlowNodeInstance, Model, ProcessToken } from '@process-engine/persistence_api.contracts';
import { IFlowNodeHandlerFactory, IFlowNodePersistenceFacade, IProcessModelFacade, IProcessTokenFacade } from '@process-engine/process_engine_contracts';
import { ActivityHandler } from './activity_handler';
export declare class SendTaskHandler extends ActivityHandler<Model.Activities.SendTask> {
    private responseSubscription;
    constructor(eventAggregator: IEventAggregator, flowNodeHandlerFactory: IFlowNodeHandlerFactory, flowNodePersistenceFacade: IFlowNodePersistenceFacade, sendTaskModel: Model.Activities.SendTask);
    private get sendTask();
    protected startExecution(token: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity: IIdentity): Promise<Array<Model.Base.FlowNode>>;
    protected continueAfterSuspend(flowNodeInstance: FlowNodeInstance, onSuspendToken: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity: IIdentity): Promise<Array<Model.Base.FlowNode>>;
    protected executeHandler(token: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity: IIdentity): Promise<Array<Model.Base.FlowNode>>;
    /**
     * Waits for an incoming message from a ReceiveTask, acknowledging the receit of the message.
     *
     * @param callback The function to call upon receiving the message.
     */
    private waitForResponseFromReceiveTask;
    /**
     * Publishes the message stored in this SendTask on the EventAggregator.
     *
     * @param identity The identity that owns the SendTask instance.
     * @param token    The current process token.
     */
    private sendMessage;
}
