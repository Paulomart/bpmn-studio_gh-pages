import { IEventAggregator } from '@essential-projects/event_aggregator_contracts';
import { IIdentity } from '@essential-projects/iam_contracts';
import { FlowNodeInstance, ICorrelationService, IProcessModelUseCases, Model, ProcessToken } from '@process-engine/persistence_api.contracts';
import { IExecuteProcessService, IFlowNodeHandlerFactory, IFlowNodePersistenceFacade, IProcessModelFacade, IProcessTokenFacade, IResumeProcessService } from '@process-engine/process_engine_contracts';
import { ActivityHandler } from './activity_handler';
export declare class CallActivityHandler extends ActivityHandler<Model.Activities.CallActivity> {
    private correlationService;
    private executeProcessService;
    private processModelUseCases;
    private resumeProcessService;
    constructor(correlationService: ICorrelationService, eventAggregator: IEventAggregator, executeProcessService: IExecuteProcessService, flowNodeHandlerFactory: IFlowNodeHandlerFactory, flowNodePersistenceFacade: IFlowNodePersistenceFacade, processModelUseCases: IProcessModelUseCases, resumeProcessService: IResumeProcessService, callActivityModel: Model.Activities.CallActivity);
    private get callActivity();
    protected startExecution(token: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity: IIdentity): Promise<Array<Model.Base.FlowNode>>;
    protected continueAfterSuspend(flowNodeInstance: FlowNodeInstance, onSuspendToken: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity: IIdentity): Promise<Array<Model.Base.FlowNode>>;
    protected executeHandler(token: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity: IIdentity): Promise<Array<Model.Base.FlowNode>>;
    /**
     * Executes the Subprocess.
     *
     * @async
     * @param   identity           The users identity.
     * @param   startEventId       The StartEvent by which to start the Subprocess.
     * @param   processTokenFacade The Facade for accessing the current process' tokens.
     * @param   token              The current ProcessToken.
     * @returns                    The CallActivities result.
     */
    private executeSubprocess;
    /**
     * Retrieves the first accessible StartEvent for the ProcessModel with the
     * given ID.
     *
     * @async
     * @param   identity The users identity.
     * @returns          The retrieved StartEvent.
     */
    private getAccessibleCallActivityStartEvent;
    private getInitialPayload;
    private createResultTokenPayloadFromCallActivityResult;
    private terminateProcessInstance;
}
