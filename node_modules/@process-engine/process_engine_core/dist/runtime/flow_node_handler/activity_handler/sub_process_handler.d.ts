import { IEventAggregator } from '@essential-projects/event_aggregator_contracts';
import { IIdentity } from '@essential-projects/iam_contracts';
import { FlowNodeInstance, IFlowNodeInstanceService, Model, ProcessToken } from '@process-engine/persistence_api.contracts';
import { IFlowNodeHandlerFactory, IFlowNodePersistenceFacade, IProcessModelFacade, IProcessTokenFacade } from '@process-engine/process_engine_contracts';
import { ActivityHandler } from './activity_handler';
export declare class SubProcessHandler extends ActivityHandler<Model.Activities.SubProcess> {
    private readonly flowNodeInstanceService;
    private subProcessFinishedSubscription;
    private subProcessTerminatedSubscription;
    constructor(eventAggregator: IEventAggregator, flowNodeHandlerFactory: IFlowNodeHandlerFactory, flowNodeInstanceService: IFlowNodeInstanceService, flowNodePersistenceFacade: IFlowNodePersistenceFacade, subProcessModel: Model.Activities.SubProcess);
    private get subProcess();
    protected startExecution(token: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity: IIdentity): Promise<Array<Model.Base.FlowNode>>;
    protected continueAfterSuspend(flowNodeInstance: FlowNodeInstance, onSuspendToken: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity: IIdentity): Promise<Array<Model.Base.FlowNode>>;
    protected executeHandler(token: ProcessToken, processTokenFacade: IProcessTokenFacade, processModelFacade: IProcessModelFacade, identity: IIdentity): Promise<Array<Model.Base.FlowNode>>;
    private resumeSubProcess;
    private createProcessInstanceConfig;
    private waitForSubProcessExecution;
    private waitForSubProcessResumption;
    private sendTerminationSignalToSubProcess;
    private subscribeToSubProcessEndEvent;
    private subscribeToSubProcessTermination;
    private terminateProcessInstance;
    private cancelEventAggregatorSubscriptions;
}
