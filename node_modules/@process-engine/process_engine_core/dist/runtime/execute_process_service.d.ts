import { IEventAggregator } from '@essential-projects/event_aggregator_contracts';
import { IIdentity, IIdentityService } from '@essential-projects/iam_contracts';
import { IProcessModelUseCases } from '@process-engine/persistence_api.contracts';
import { EndEventReachedMessage, IExecuteProcessService, IFlowNodeHandlerFactory, ProcessStartedMessage } from '@process-engine/process_engine_contracts';
import { ProcessInstanceStateHandlingFacade } from './facades/process_instance_state_handling_facade';
export declare class ExecuteProcessService implements IExecuteProcessService {
    private readonly eventAggregator;
    private readonly flowNodeHandlerFactory;
    private readonly identityService;
    private readonly processInstanceStateHandlingFacade;
    private readonly processModelUseCases;
    private internalIdentity;
    constructor(eventAggregator: IEventAggregator, flowNodeHandlerFactory: IFlowNodeHandlerFactory, identityService: IIdentityService, processInstanceStateHandlingFacade: ProcessInstanceStateHandlingFacade, processModelUseCases: IProcessModelUseCases);
    initialize(): Promise<void>;
    start(identity: IIdentity, processModelId: string, correlationId: string, startEventId?: string, initialPayload?: any, caller?: string): Promise<ProcessStartedMessage>;
    startAndAwaitEndEvent(identity: IIdentity, processModelId: string, correlationId: string, startEventId?: string, initialPayload?: any, caller?: string): Promise<EndEventReachedMessage>;
    startAndAwaitSpecificEndEvent(identity: IIdentity, processModelId: string, correlationId: string, endEventId: string, startEventId?: string, initialPayload?: any, caller?: string): Promise<EndEventReachedMessage>;
    private executeProcessInstanceAndWaitForEndEvent;
    private validateStartRequest;
    private validateSingleStartEvent;
    /**
     * Creates a Set of configurations for a new ProcessInstance.
     * Contains infos such as the CorrelationId and the ProcessInstanceId.
     *
     * @async
     * @param identity       The identity of the requesting user.
     * @param processModelId The ID of the ProcessModel for which a new
     *                       ProcessInstance is to be created.
     * @param correlationId  The CorrelationId in which the ProcessInstance
     *                       should run.
     *                       Will be generated, if not provided.
     * @param startEventId   The ID of the StartEvent by which to start the
     *                       ProcessInstance.
     * @param payload        The payload to pass to the ProcessInstance.
     * @param caller         If the ProcessInstance is a Subprocess or
     *                       CallActivity, this contains the ID of the calling
     *                       ProcessInstance.
     * @returns              A set of configurations for the new ProcessInstance.
     */
    private createProcessInstanceConfig;
    /**
     * Handles the execution of a ProcessInstance and returns the End result.
     *
     * @async
     * @param   identity              The identity of the requesting user.
     * @param   processInstanceConfig The configs for the ProcessInstance.
     */
    private executeProcess;
    private awaitEndEvent;
}
