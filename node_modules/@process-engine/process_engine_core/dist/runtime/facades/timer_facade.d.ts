import { IEventAggregator, Subscription } from '@essential-projects/event_aggregator_contracts';
import { ITimerService } from '@essential-projects/timing_contracts';
import { Model } from '@process-engine/persistence_api.contracts';
import { IProcessTokenFacade, ITimerFacade } from '@process-engine/process_engine_contracts';
export declare class TimerFacade implements ITimerFacade {
    private eventAggregator;
    private timerService;
    private timerStorage;
    constructor(eventAggregator: IEventAggregator, timerService: ITimerService);
    initializeTimer(flowNode: Model.Base.FlowNode, timerEventDefinition: Model.Events.Definitions.TimerEventDefinition, processTokenFacade: IProcessTokenFacade, timerCallback: Function): Subscription;
    cancelTimerSubscription(subscription: Subscription): void;
    startCycleTimer(timerValue: string, flowNode: Model.Base.FlowNode, timerCallback: Function, timerExpiredEventName: string): Subscription;
    startDateTimer(timerValue: string, timerCallback: Function, timerExpiredEventName: string): Subscription;
    startDurationTimer(timerValue: string, timerCallback: Function, timerExpiredEventName: string): Subscription;
    executeTimerExpressionIfNeeded(timerExpression: string, processTokenFacade: IProcessTokenFacade): string;
    validateTimer(timerDefinition: Model.Events.Definitions.TimerEventDefinition, flowNode: Model.Base.FlowNode): void;
    private validateDateTimer;
    private validateDurationTimer;
    private validateCyclicTimer;
}
