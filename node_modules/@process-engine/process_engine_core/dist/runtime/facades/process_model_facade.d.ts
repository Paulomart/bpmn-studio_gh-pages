import { Model } from '@process-engine/persistence_api.contracts';
import { IProcessModelFacade } from '@process-engine/process_engine_contracts';
export declare class ProcessModelFacade implements IProcessModelFacade {
    protected processModel: Model.Process;
    constructor(processModel: Model.Process);
    getIsExecutable(): boolean;
    getSubProcessModelFacade(subProcessNode: Model.Activities.SubProcess): IProcessModelFacade;
    getStartEvents(): Array<Model.Events.StartEvent>;
    getSingleStartEvent(): Model.Events.StartEvent;
    getStartEventById(startEventId: string): Model.Events.StartEvent;
    getEndEvents(): Array<Model.Events.EndEvent>;
    getUserTasks(): Array<Model.Activities.UserTask>;
    getFlowNodeById(flowNodeId: string): Model.Base.FlowNode;
    getProcessModelHasLanes(): boolean;
    getLaneForFlowNode(flowNodeId: string): Model.ProcessElements.Lane;
    getIncomingSequenceFlowsFor(flowNodeId: string): Array<Model.ProcessElements.SequenceFlow>;
    getOutgoingSequenceFlowsFor(flowNodeId: string): Array<Model.ProcessElements.SequenceFlow>;
    getSequenceFlowBetween(sourceNode: Model.Base.FlowNode, targetNode: Model.Base.FlowNode): Model.ProcessElements.SequenceFlow;
    getBoundaryEventsFor(flowNode: Model.Base.FlowNode): Array<Model.Events.BoundaryEvent>;
    getPreviousFlowNodesFor(flowNode: Model.Base.FlowNode): Array<Model.Base.FlowNode>;
    getNextFlowNodesFor(flowNode: Model.Base.FlowNode): Array<Model.Base.FlowNode>;
    getLinkCatchEventsByLinkName(linkName: string): Array<Model.Events.IntermediateCatchEvent>;
    /**
     * Takes a Split Gateway of any type and determines which Join Gateway is its counterpart.
     *
     * Note:
     * This should not be used for Exclusive Gateways, because these are not required to have a Join Gateway.
     *
     * @param   splitGateway         The Split Gateway for which to search the corresponding Joing Gateway.
     * @param   parentSplitGateway   When dealing with a nested Split Gateway, this will contain the parent.
     * @returns                      The discovered Join Gateway. Will return undefined, if no Gateway was found.
     * @throws {InternalServerError} If the branches lead to multiple Join Gateways. This inidcates an invalid or broken BPMN.
     */
    findJoinGatewayAfterSplitGateway(splitGateway: Model.Gateways.Gateway, parentSplitGateway?: Model.Gateways.Gateway): Model.Gateways.Gateway;
    protected filterFlowNodesByType<TFlowNode extends Model.Base.FlowNode>(type: Model.Base.IConstructor<TFlowNode>): Array<TFlowNode>;
    /**
     * Iterates over the lanes of the given laneSet and determines if one of
     * the lanes contains a FlowNode with the given ID.
     *
     * If the lane has a childLaneSet, the FlowNodeID will be searched within
     * that child lane set.
     *
     * @param   flowNodeId The FlowNodeId to find.
     * @param   laneSet    The LaneSet in which to search for the FlowNodeId.
     * @returns            Either the lane containing the FlowNodeId,
     *                     or undefined, if not matching lane was found.
     */
    protected findLaneForFlowNodeIdFromLaneSet(flowNodeId: string, laneSet: Model.ProcessElements.LaneSet): Model.ProcessElements.Lane;
    private travelToJoinGateway;
}
