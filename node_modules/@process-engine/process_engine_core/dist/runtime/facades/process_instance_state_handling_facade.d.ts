import { BaseError } from '@essential-projects/errors_ts';
import { IEventAggregator } from '@essential-projects/event_aggregator_contracts';
import { IIdentity } from '@essential-projects/iam_contracts';
import { ILoggingApi } from '@process-engine/logging_api_contracts';
import { ICorrelationService, IProcessModelUseCases } from '@process-engine/persistence_api.contracts';
import { IFlowNodeInstanceResult } from '@process-engine/process_engine_contracts';
import { IProcessInstanceConfig } from './iprocess_instance_config';
export declare class ProcessInstanceStateHandlingFacade {
    private readonly correlationService;
    private readonly eventAggregator;
    private readonly loggingApiService;
    private readonly processModelUseCases;
    constructor(correlationService: ICorrelationService, eventAggregator: IEventAggregator, loggingApiService: ILoggingApi, processModelUseCases: IProcessModelUseCases);
    /**
     * Creates a new entry in the database that links a ProcessInstance with a
     * Correlation.
     *
     * @async
     * @param   identity              The identity of the requesting user.
     * @param   processInstanceConfig The configs for the ProcessInstance.
     */
    saveProcessInstance(identity: IIdentity, processInstanceConfig: IProcessInstanceConfig): Promise<void>;
    /**
     * Finishes the given ProcessInstance in the given correlation, using the given result.
     *
     * @async
     * @param   identity              The identity of the requesting user.
     * @param   processInstanceConfig The configs for the ProcessInstance.
     * @param   resultToken           The result with which to finish the ProcessInstance.
     */
    finishProcessInstance(identity: IIdentity, processInstanceConfig: IProcessInstanceConfig, resultToken: IFlowNodeInstanceResult): Promise<void>;
    /**
     * Finishes the given ProcessInstance in the given correlation, using the given error.
     *
     * @async
     * @param   identity              The identity of the requesting user.
     * @param   processInstanceConfig The configs for the ProcessInstance.
     * @param   error                 The error that occured.
     */
    finishProcessInstanceWithError(identity: IIdentity, processInstanceConfig: IProcessInstanceConfig, error: BaseError): Promise<void>;
    sendProcessInstanceFinishedNotification(identity: IIdentity, processInstanceConfig: IProcessInstanceConfig, resultToken: IFlowNodeInstanceResult): void;
    sendProcessInstanceErrorNotification(identity: IIdentity, processInstanceConfig: IProcessInstanceConfig, error: Error): void;
    sendProcessInstanceTerminationNotification(identity: IIdentity, processInstanceConfig: IProcessInstanceConfig, error: Error): void;
    terminateSubprocesses(identity: IIdentity, processInstanceId: string): Promise<void>;
    /**
     * Writes logs and metrics at the beginning of a ProcessInstance's execution.
     *
     * @param correlationId     The ProcessInstance's CorrelationId.
     * @param processModelId    The ProcessInstance's ProcessModelId.
     * @param processInstanceId The ID of the ProcessInstance.
     */
    logProcessStarted(correlationId: string, processModelId: string, processInstanceId: string): void;
    /**
     * Writes logs and metrics at the beginning of a ProcessInstance's resumption.
     *
     * @param correlationId     The ProcessInstance's CorrelationId.
     * @param processModelId    The ProcessInstance's ProcessModelId.
     * @param processInstanceId The ID of the ProcessInstance.
     */
    logProcessResumed(correlationId: string, processModelId: string, processInstanceId: string): void;
    /**
     * Writes logs and metrics after a ProcessInstance finishes execution.
     *
     * @param correlationId     The ProcessInstance's CorrelationId.
     * @param processModelId    The ProcessInstance's ProcessModelId.
     * @param processInstanceId The ID of the ProcessInstance.
     */
    logProcessFinished(correlationId: string, processModelId: string, processInstanceId: string): void;
    /**
     * Writes logs and metrics when a ProcessInstances was interrupted by an error.
     *
     * @param correlationId     The ProcessInstance's CorrelationId.
     * @param processModelId    The ProcessInstance's ProcessModelId.
     * @param processInstanceId The ID of the ProcessInstance.
     */
    logProcessError(correlationId: string, processModelId: string, processInstanceId: string, error: Error): void;
}
