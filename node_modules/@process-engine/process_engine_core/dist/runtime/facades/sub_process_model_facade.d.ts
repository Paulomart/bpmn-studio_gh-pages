import { Model } from '@process-engine/persistence_api.contracts';
import { ProcessModelFacade } from './process_model_facade';
export declare class SubProcessModelFacade extends ProcessModelFacade {
    private subProcessDefinition;
    constructor(processDefinition: Model.Process, subProcessDefinition: Model.Activities.SubProcess);
    getStartEvents(): Array<Model.Events.StartEvent>;
    getSingleStartEvent(): Model.Events.StartEvent;
    getStartEventById(startEventId: string): Model.Events.StartEvent;
    getEndEvents(): Array<Model.Events.EndEvent>;
    getUserTasks(): Array<Model.Activities.UserTask>;
    getFlowNodeById(flowNodeId: string): Model.Base.FlowNode;
    getProcessModelHasLanes(): boolean;
    getIncomingSequenceFlowsFor(flowNodeId: string): Array<Model.ProcessElements.SequenceFlow>;
    getOutgoingSequenceFlowsFor(flowNodeId: string): Array<Model.ProcessElements.SequenceFlow>;
    getSequenceFlowBetween(sourceNode: Model.Base.FlowNode, targetNode: Model.Base.FlowNode): Model.ProcessElements.SequenceFlow;
    getBoundaryEventsFor(flowNode: Model.Base.FlowNode): Array<Model.Events.BoundaryEvent>;
    getPreviousFlowNodesFor(flowNode: Model.Base.FlowNode): Array<Model.Base.FlowNode>;
    getNextFlowNodesFor(flowNode: Model.Base.FlowNode): Array<Model.Base.FlowNode>;
    getLaneForFlowNode(flowNodeId: string): Model.ProcessElements.Lane;
    getLinkCatchEventsByLinkName(linkName: string): Array<Model.Events.IntermediateCatchEvent>;
    protected filterFlowNodesByType<TFlowNode extends Model.Base.FlowNode>(type: Model.Base.IConstructor<TFlowNode>): Array<TFlowNode>;
}
