import { IEventAggregator } from '@essential-projects/event_aggregator_contracts';
import { IIdentity } from '@essential-projects/iam_contracts';
import { ICorrelationService, IFlowNodeInstanceService } from '@process-engine/persistence_api.contracts';
import { EndEventReachedMessage, IFlowNodeHandlerFactory, IModelParser, IResumeProcessService } from '@process-engine/process_engine_contracts';
import { ProcessInstanceStateHandlingFacade } from './facades/process_instance_state_handling_facade';
/**
 * This service is designed to find and resume ProcessInstances that were
 * interrupted during a previous lifecycle of the ProcessEngine.
 *
 * It is strongly encouraged to only run this service ONCE when starting up
 * the ProcessEngine!
 *
 * Trying to resume ProcessInstances during normal operation will have
 * unpredictable consequences!
 */
export declare class ResumeProcessService implements IResumeProcessService {
    private readonly bpmnModelParser;
    private readonly correlationService;
    private readonly eventAggregator;
    private readonly flowNodeHandlerFactory;
    private readonly flowNodeInstanceService;
    private readonly processInstanceStateHandlingFacade;
    constructor(bpmnModelParser: IModelParser, correlationService: ICorrelationService, eventAggregator: IEventAggregator, flowNodeHandlerFactory: IFlowNodeHandlerFactory, flowNodeInstanceService: IFlowNodeInstanceService, processInstanceStateHandlingFacade: ProcessInstanceStateHandlingFacade);
    findAndResumeInterruptedProcessInstances(identity: IIdentity): Promise<void>;
    resumeProcessInstanceById(identity: IIdentity, processModelId: string, processInstanceId: string): Promise<EndEventReachedMessage | void>;
    private createProcessInstanceConfig;
    private resumeProcessInstance;
    private finishOrphanedProcessInstance;
    private getFinalFlowNodeForOrphanedProcessInstance;
}
