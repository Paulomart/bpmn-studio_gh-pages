import { IEventAggregator } from '@essential-projects/event_aggregator_contracts';
import { IProcessModelUseCases } from '@process-engine/persistence_api.contracts';
import { IAutoStartService, IExecuteProcessService } from '@process-engine/process_engine_contracts';
export declare class AutoStartService implements IAutoStartService {
    private readonly eventAggregator;
    private readonly executeProcessService;
    private readonly processModelUseCases;
    private eventSubscriptions;
    constructor(eventAggregator: IEventAggregator, executeProcessService: IExecuteProcessService, processModelService: IProcessModelUseCases);
    start(): Promise<void>;
    stop(): Promise<void>;
    private createSubscriptionForEvent;
    private onMessageReceived;
    private onSignalReceived;
    private findAndStartProcessModels;
    private getProcessModelsWithMatchingStartEvents;
    /**
     * Takes a list of ProcessModels and starts new ProcessInstances for each of them,
     * using the given identity, correlationid and payload as parameters.
     *
     * Note that the execution of the ProcessInstances is NOT awaited.
     *
     * @async
     * @param processModels               The ProcessModels to start.
     * @param identityToUse               The Identity with which to start the
     *                                    new instances.
     * @param eventDefinitionPropertyName The name of the property containing the
     *                                    matching event definition.
     * @param eventName                   The name of the event that matching
     *                                    StartEvents must have.
     * @param correlationId               The ID of the correlation in which to
     *                                    run the new instances.
     * @param payload                     The payload to use as initial token value.
     */
    private startProcessInstances;
}
