import { IEventAggregator } from '@essential-projects/event_aggregator_contracts';
import { IIdentityService } from '@essential-projects/iam_contracts';
import { ICronjobHistoryService, IProcessModelUseCases, Model } from '@process-engine/persistence_api.contracts';
import { CronjobConfiguration, ICronjobService, IExecuteProcessService, ITimerFacade } from '@process-engine/process_engine_contracts';
export declare class CronjobService implements ICronjobService {
    private readonly cronjobHistoryService;
    private readonly eventAggregator;
    private readonly executeProcessService;
    private readonly identityService;
    private readonly processModelUseCases;
    private readonly timerFacade;
    private cronjobDictionary;
    private internalIdentity;
    private _isRunning;
    constructor(cronjobHistoryService: ICronjobHistoryService, eventAggregator: IEventAggregator, executeProcessService: IExecuteProcessService, identityService: IIdentityService, processModelUseCases: IProcessModelUseCases, timerFacade: ITimerFacade);
    get isRunning(): boolean;
    initialize(): Promise<void>;
    start(): Promise<void>;
    stop(): Promise<void>;
    getActive(): Array<CronjobConfiguration>;
    addOrUpdate(processModel: Model.Process): void;
    remove(processModelId: string): void;
    private getProcessModelsWithCronjobs;
    private createCronjobForProcessModel;
    private getActiveCyclicTimerStartEventsForProcessModel;
    private isValidCrontab;
    private executeProcessModelWithCronjob;
    private stopCronjobsForProcessModel;
    private getEventMessage;
}
