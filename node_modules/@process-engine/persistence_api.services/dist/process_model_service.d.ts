import { IModelParser, IProcessDefinitionRepository, IProcessModelService, Model, ProcessDefinitionFromRepository } from '@process-engine/persistence_api.contracts';
import { IIAMService, IIdentity } from '@essential-projects/iam_contracts';
export declare class ProcessModelService implements IProcessModelService {
    private readonly processDefinitionRepository;
    private readonly iamService;
    private readonly bpmnModelParser;
    constructor(bpmnModelParser: IModelParser, iamService: IIAMService, processDefinitionRepository: IProcessDefinitionRepository);
    persistProcessDefinitions(identity: IIdentity, name: string, xml: string, overwriteExisting?: boolean): Promise<void>;
    getProcessModels(identity: IIdentity, offset?: number, limit?: number): Promise<Array<Model.Process>>;
    getProcessModelById(identity: IIdentity, processModelId: string): Promise<Model.Process>;
    getByHash(identity: IIdentity, processModelId: string, hash: string): Promise<Model.Process>;
    getProcessDefinitionAsXmlByName(identity: IIdentity, name: string): Promise<ProcessDefinitionFromRepository>;
    deleteProcessDefinitionById(processModelId: string): Promise<void>;
    private validateDefinition;
    private retrieveProcessModel;
    private getProcessModelList;
    private getDefinitionList;
    private filterInaccessibleProcessModelElements;
    private filterOutInaccessibleLanes;
    private ensureUserHasClaim;
    private checkIfUserIsSuperAdmin;
    private getFlowNodesForLaneSet;
    private checkIfProcessModelHasAccessibleStartEvents;
    private applyPagination;
}
