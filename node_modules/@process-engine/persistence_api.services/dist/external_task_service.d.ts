import { IIAMService, IIdentity } from '@essential-projects/iam_contracts';
import { ExternalTask, IExternalTaskRepository, IExternalTaskService } from '@process-engine/persistence_api.contracts';
export declare class ExternalTaskService implements IExternalTaskService {
    private readonly externalTaskRepository;
    private readonly iamService;
    constructor(externalTaskRepository: IExternalTaskRepository, iamService: IIAMService);
    create<TPayload>(topic: string, correlationId: string, processModelId: string, processInstanceId: string, flowNodeInstanceId: string, identity: IIdentity, payload: TPayload): Promise<void>;
    getById<TPayload>(identity: IIdentity, externalTaskId: string): Promise<ExternalTask<TPayload>>;
    getByInstanceIds<TPayload>(identity: IIdentity, correlationId: string, processInstanceId: string, flowNodeInstanceId: string): Promise<ExternalTask<TPayload>>;
    fetchAvailableForProcessing<TPayload>(identity: IIdentity, topicName: string, maxTasks: number): Promise<Array<ExternalTask<TPayload>>>;
    lockForWorker(identity: IIdentity, workerId: string, externalTaskId: string, lockExpirationTime: Date): Promise<void>;
    finishWithError(identity: IIdentity, externalTaskId: string, error: Error): Promise<void>;
    finishWithSuccess<TResultType>(identity: IIdentity, externalTaskId: string, result: TResultType): Promise<void>;
    deleteExternalTasksByProcessModelId(identity: IIdentity, processModelId: string): Promise<void>;
    private ensureUserHasClaim;
    private checkIfUserIsSuperAdmin;
}
