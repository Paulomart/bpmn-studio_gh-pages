import { FlowNodeInstance, FlowNodeInstanceState, IFlowNodeInstanceRepository, IFlowNodeInstanceService, Model, ProcessToken } from '@process-engine/persistence_api.contracts';
import { IIAMService } from '@essential-projects/iam_contracts';
export declare class FlowNodeInstanceService implements IFlowNodeInstanceService {
    private readonly flowNodeInstanceRepository;
    private readonly iamService;
    constructor(flowNodeInstanceRepository: IFlowNodeInstanceRepository, iamService: IIAMService);
    querySpecificFlowNode(correlationId: string, processModelId: string, flowNodeId: string): Promise<FlowNodeInstance>;
    queryByInstanceId(instanceId: string): Promise<FlowNodeInstance>;
    queryFlowNodeInstancesByProcessInstanceId(processInstanceId: string, flowNodeId: string, offset?: number, limit?: number): Promise<Array<FlowNodeInstance>>;
    queryByFlowNodeId(flowNodeId: string, offset?: number, limit?: number): Promise<Array<FlowNodeInstance>>;
    queryByCorrelation(correlationId: string, offset?: number, limit?: number): Promise<Array<FlowNodeInstance>>;
    queryByProcessModel(processModelId: string, offset?: number, limit?: number): Promise<Array<FlowNodeInstance>>;
    queryByCorrelationAndProcessModel(correlationId: string, processModelId: string, offset?: number, limit?: number): Promise<Array<FlowNodeInstance>>;
    queryByProcessInstance(processInstanceId: string, offset?: number, limit?: number): Promise<Array<FlowNodeInstance>>;
    queryByState(state: FlowNodeInstanceState, offset?: number, limit?: number): Promise<Array<FlowNodeInstance>>;
    queryActive(offset?: number, limit?: number): Promise<Array<FlowNodeInstance>>;
    queryActiveByProcessInstance(processInstanceId: string, offset?: number, limit?: number): Promise<Array<FlowNodeInstance>>;
    queryActiveByCorrelationAndProcessModel(correlationId: string, processModelId: string, offset?: number, limit?: number): Promise<Array<FlowNodeInstance>>;
    querySuspendedByCorrelation(correlationId: string, offset?: number, limit?: number): Promise<Array<FlowNodeInstance>>;
    querySuspendedByProcessModel(processModelId: string, offset?: number, limit?: number): Promise<Array<FlowNodeInstance>>;
    querySuspendedByProcessInstance(processInstanceId: string, offset?: number, limit?: number): Promise<Array<FlowNodeInstance>>;
    queryProcessTokensByProcessInstanceId(processInstanceId: string, offset?: number, limit?: number): Promise<Array<ProcessToken>>;
    persistOnEnter(flowNode: Model.Base.FlowNode, flowNodeInstanceId: string, token: ProcessToken, previousFlowNodeInstanceId: string): Promise<FlowNodeInstance>;
    persistOnExit(flowNode: Model.Base.FlowNode, flowNodeInstanceId: string, token: ProcessToken): Promise<FlowNodeInstance>;
    persistOnError(flowNode: Model.Base.FlowNode, flowNodeInstanceId: string, token: ProcessToken, error: Error): Promise<FlowNodeInstance>;
    persistOnTerminate(flowNode: Model.Base.FlowNode, flowNodeInstanceId: string, token: ProcessToken): Promise<FlowNodeInstance>;
    suspend(flowNodeId: string, flowNodeInstanceId: string, token: ProcessToken): Promise<FlowNodeInstance>;
    resume(flowNodeId: string, flowNodeInstanceId: string, token: ProcessToken): Promise<FlowNodeInstance>;
    deleteByProcessModelId(processModelId: string): Promise<void>;
}
