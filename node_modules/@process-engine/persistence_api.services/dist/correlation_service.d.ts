import { IIAMService, IIdentity } from '@essential-projects/iam_contracts';
import { Correlation, CorrelationState, ICorrelationRepository, ICorrelationService, IProcessDefinitionRepository, ProcessInstance } from '@process-engine/persistence_api.contracts';
export declare class CorrelationService implements ICorrelationService {
    private readonly correlationRepository;
    private readonly iamService;
    private readonly processDefinitionRepository;
    constructor(correlationRepository: ICorrelationRepository, iamService: IIAMService, processDefinitionRepository: IProcessDefinitionRepository);
    createEntry(identity: IIdentity, correlationId: string, processInstanceId: string, processModelId: string, processModelHash: string, parentProcessInstanceId?: string): Promise<void>;
    getAll(identity: IIdentity, offset?: number, limit?: number): Promise<Array<Correlation>>;
    getActive(identity: IIdentity, offset?: number, limit?: number): Promise<Array<Correlation>>;
    getByProcessModelId(identity: IIdentity, processModelId: string, offset?: number, limit?: number): Promise<Array<Correlation>>;
    getByCorrelationId(identity: IIdentity, correlationId: string): Promise<Correlation>;
    getByProcessInstanceId(identity: IIdentity, processInstanceId: string): Promise<ProcessInstance>;
    getSubprocessesForProcessInstance(identity: IIdentity, processInstanceId: string): Promise<Array<ProcessInstance>>;
    getProcessInstancesForCorrelation(identity: IIdentity, correlationId: string, offset?: number, limit?: number): Promise<Array<ProcessInstance>>;
    getProcessInstancesForProcessModel(identity: IIdentity, processModelId: string, offset?: number, limit?: number): Promise<Array<ProcessInstance>>;
    getProcessInstancesByState(identity: IIdentity, state: CorrelationState, offset?: number, limit?: number): Promise<Array<ProcessInstance>>;
    deleteCorrelationByProcessModelId(identity: IIdentity, processModelId: string): Promise<void>;
    finishProcessInstanceInCorrelation(identity: IIdentity, correlationId: string, processInstanceId: string): Promise<void>;
    finishProcessInstanceInCorrelationWithError(identity: IIdentity, correlationId: string, processInstanceId: string, error: Error): Promise<void>;
    private filterProcessInstancesFromRepoByIdentity;
    private mapCorrelationList;
    private groupCorrelations;
    private mapCorrelation;
    private mapProcessInstance;
    private applyPagination;
    private ensureUserHasClaim;
    private checkIfUserIsSuperAdmin;
}
