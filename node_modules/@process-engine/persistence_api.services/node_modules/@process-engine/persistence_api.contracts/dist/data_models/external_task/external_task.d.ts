import { IIdentity } from '@essential-projects/iam_contracts';
import { ExternalTaskState } from './external_task_state';
/**
 * Describes an ExternalTask that the ProcessEngine has delegated to an
 * ExternalTask worker for processing.
 */
export declare class ExternalTask<TPayload> {
    id: string;
    /**
     * The ID of the worker that has most recently locked the ExternalTask
     * for processing.
     */
    workerId: string;
    topic: string;
    flowNodeInstanceId: string;
    correlationId: string;
    processModelId: string;
    processInstanceId: string;
    identity: IIdentity;
    /**
     * The payload containing all relevant data the worker needs to execute the
     * ExternalTask.
     */
    payload: TPayload;
    /**
     * The lock expiration time. On expiration, the task is released to
     * be processed by other workers.
     * If not set, the ExternalTask is not locked.
     */
    lockExpirationTime: Date;
    state: ExternalTaskState;
    finishedAt?: Date;
    result?: any;
    error?: any;
    createdAt?: Date;
    /**
     * Determines whether the ExternalTask is currently locked or not.
     * A finished ExternalTask is always locked.
     */
    get isLocked(): boolean;
}
