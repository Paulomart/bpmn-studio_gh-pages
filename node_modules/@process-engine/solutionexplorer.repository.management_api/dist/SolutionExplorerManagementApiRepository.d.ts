import { IHttpClient } from '@essential-projects/http_contracts';
import { IIdentity } from '@essential-projects/iam_contracts';
import { IDiagram, ISolution } from '@process-engine/solutionexplorer.contracts';
import { IFileChangedCallback, ISolutionExplorerRepository } from '@process-engine/solutionexplorer.repository.contracts';
export declare class SolutionExplorerManagementApiRepository implements ISolutionExplorerRepository {
    private readonly httpClient;
    private managementApi;
    private identity;
    private externalAccessorBaseRoute;
    private isPolling;
    private pollingTimeout;
    private eventListeners;
    constructor(httpClient: IHttpClient);
    watchFile(filepath: string, callback: IFileChangedCallback): void;
    unwatchFile(filepath: string): void;
    watchSolution(callback: Function): string;
    unwatchSolution(eventListenerId: string): void;
    openPath(pathspec: string, identity: IIdentity): Promise<void>;
    getDiagrams(): Promise<Array<IDiagram>>;
    getDiagramByName(diagramName: string): Promise<IDiagram>;
    saveSolution(solution: ISolution, pathspec?: string): Promise<void>;
    saveDiagram(diagramToSave: IDiagram, pathspec?: string): Promise<void>;
    renameDiagram(diagram: IDiagram, newName: string): Promise<IDiagram>;
    deleteDiagram(diagram: IDiagram): Promise<void>;
    private startPollingForDiagramChange;
    private pollForDiagramChange;
    private diagramListsAreEqual;
    private createManagementClient;
    private getBaseRoute;
    private parseDiagramUri;
    private mapProcessModelToDiagram;
}
