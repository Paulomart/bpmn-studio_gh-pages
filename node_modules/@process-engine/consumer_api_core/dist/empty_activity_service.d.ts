import { IEventAggregator, Subscription } from '@essential-projects/event_aggregator_contracts';
import { IIAMService, IIdentity } from '@essential-projects/iam_contracts';
import { APIs, DataModels, Messages } from '@process-engine/consumer_api_contracts';
import { FlowNodeInstance, IFlowNodeInstanceService } from '@process-engine/persistence_api.contracts';
import { NotificationAdapter } from './adapters/index';
export declare class EmptyActivityService implements APIs.IEmptyActivityConsumerApi {
    private readonly eventAggregator;
    private readonly flowNodeInstanceService;
    private readonly iamService;
    private readonly notificationAdapter;
    constructor(eventAggregator: IEventAggregator, flowNodeInstanceService: IFlowNodeInstanceService, iamService: IIAMService, notificationAdapter: NotificationAdapter);
    onEmptyActivityWaiting(identity: IIdentity, callback: Messages.CallbackTypes.OnEmptyActivityWaitingCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onEmptyActivityFinished(identity: IIdentity, callback: Messages.CallbackTypes.OnEmptyActivityFinishedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onEmptyActivityForIdentityWaiting(identity: IIdentity, callback: Messages.CallbackTypes.OnEmptyActivityWaitingCallback, subscribeOnce?: boolean): Promise<Subscription>;
    onEmptyActivityForIdentityFinished(identity: IIdentity, callback: Messages.CallbackTypes.OnEmptyActivityFinishedCallback, subscribeOnce?: boolean): Promise<Subscription>;
    getEmptyActivitiesForProcessModel(identity: IIdentity, processModelId: string, offset?: number, limit?: number): Promise<DataModels.EmptyActivities.EmptyActivityList>;
    getEmptyActivitiesForProcessInstance(identity: IIdentity, processInstanceId: string, offset?: number, limit?: number): Promise<DataModels.EmptyActivities.EmptyActivityList>;
    getEmptyActivitiesForCorrelation(identity: IIdentity, correlationId: string, offset?: number, limit?: number): Promise<DataModels.EmptyActivities.EmptyActivityList>;
    getEmptyActivitiesForProcessModelInCorrelation(identity: IIdentity, processModelId: string, correlationId: string, offset?: number, limit?: number): Promise<DataModels.EmptyActivities.EmptyActivityList>;
    getWaitingEmptyActivitiesByIdentity(identity: IIdentity, offset?: number, limit?: number): Promise<DataModels.EmptyActivities.EmptyActivityList>;
    finishEmptyActivity(identity: IIdentity, processInstanceId: string, correlationId: string, emptyActivityInstanceId: string): Promise<void>;
    filterAndConvertEmptyActivityList(identity: IIdentity, suspendedFlowNodes: Array<FlowNodeInstance>, offset?: number, limit?: number): Promise<DataModels.EmptyActivities.EmptyActivityList>;
    private convertFlowNodeInstancesToEmptyActivities;
    private checkIfIsFlowNodeIsEmptyActivity;
    private checkIfIdentityUserIDsMatch;
    private filterInacessibleFlowNodeInstances;
    private checkIfUserCanAccessFlowNodeInstance;
    private ensureHasClaim;
    private checkIfUserIsSuperAdmin;
    private convertSuspendedFlowNodeToEmptyActivity;
    private getFlowNodeInstanceForCorrelationInProcessInstance;
    private publishFinishEmptyActivityEvent;
}
