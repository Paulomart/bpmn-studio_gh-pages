import { APIs, DataModels } from '@process-engine/consumer_api_contracts';
import { IFlowNodeInstanceService } from '@process-engine/persistence_api.contracts';
import { IIdentity } from '@essential-projects/iam_contracts';
import { EmptyActivityService, ManualTaskService, UserTaskService } from './index';
export declare class FlowNodeInstanceService implements APIs.IFlowNodeInstanceConsumerApi {
    private readonly flowNodeInstanceService;
    private readonly emptyActivityService;
    private readonly manualTaskService;
    private readonly userTaskService;
    constructor(flowNodeInstanceService: IFlowNodeInstanceService, emptyActivityService: EmptyActivityService, manualTaskService: ManualTaskService, userTaskService: UserTaskService);
    getAllSuspendedTasks(identity: IIdentity, offset?: number, limit?: number): Promise<DataModels.FlowNodeInstances.TaskList>;
    getSuspendedTasksForProcessModel(identity: IIdentity, processModelId: string, offset?: number, limit?: number): Promise<DataModels.FlowNodeInstances.TaskList>;
    getSuspendedTasksForProcessInstance(identity: IIdentity, processInstanceId: string, offset?: number, limit?: number): Promise<DataModels.FlowNodeInstances.TaskList>;
    getSuspendedTasksForCorrelation(identity: IIdentity, correlationId: string, offset?: number, limit?: number): Promise<DataModels.FlowNodeInstances.TaskList>;
    getSuspendedTasksForProcessModelInCorrelation(identity: IIdentity, processModelId: string, correlationId: string, offset?: number, limit?: number): Promise<DataModels.FlowNodeInstances.TaskList>;
    private convertFlowNodeInstancesToTaskList;
}
