"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const appRootPath = require("app-root-path");
const fs = require("fs");
const path = require("path");
class ApplicationInfoService {
    async getApplicationInfo() {
        if (!this.applicationInfo) {
            this.readApplicationPackageJson();
        }
        return this.applicationInfo;
    }
    readApplicationPackageJson() {
        const isEmbeddedIntoRuntime = __dirname.indexOf('process_engine_runtime') > 0;
        const pathToPackageJson = isEmbeddedIntoRuntime
            ? this.getPackageJsonLocationForProcessEngineRuntime()
            : this.getPackageJsonLocationForHostApplication();
        const packageJson = this.getPackageJsonContent(pathToPackageJson);
        this.applicationInfo = {
            name: packageJson.name,
            version: packageJson.version,
        };
    }
    getPackageJsonLocationForProcessEngineRuntime() {
        // Note that if the Runtime is embedded into another application, the runtime's package.json will not be the main package.json,
        // It will instead be located in `someapplication/node_modules/@process-engine/process_engine-runtime`.
        // Therefore, we cannot use app-root-path here.
        const applicationFolderIndex = __dirname.lastIndexOf('process_engine_runtime');
        const pathToRuntime = __dirname.substring(0, applicationFolderIndex);
        const pathToPackageJson = path.resolve(pathToRuntime, 'process_engine_runtime', 'package.json');
        return pathToPackageJson;
    }
    getPackageJsonLocationForHostApplication() {
        // When running this from inside other applications than the runtime (like consumer_api_meta),
        // we'll get the package info for the host application.
        const rootPath = appRootPath.toString();
        const pathToPackageJson = path.resolve(rootPath, 'package.json');
        return pathToPackageJson;
    }
    getPackageJsonContent(pathToPackageJson) {
        const packageJsonAsString = fs.readFileSync(pathToPackageJson, 'utf-8');
        const packageJson = JSON.parse(packageJsonAsString);
        return packageJson;
    }
}
exports.ApplicationInfoService = ApplicationInfoService;
//# sourceMappingURL=application_info_service.js.map