import { IEventAggregator } from '@essential-projects/event_aggregator_contracts';
import { IIdentity } from '@essential-projects/iam_contracts';
import { APIs, DataModels } from '@process-engine/consumer_api_contracts';
import { IExternalTaskService } from '@process-engine/persistence_api.contracts';
export declare class ExternalTaskService implements APIs.IExternalTaskConsumerApi {
    private readonly eventAggregator;
    private readonly externalTaskService;
    constructor(eventAggregator: IEventAggregator, externalTaskService: IExternalTaskService);
    fetchAndLockExternalTasks<TPayload>(identity: IIdentity, workerId: string, topicName: string, maxTasks: number, longPollingTimeout: number, lockDuration: number): Promise<Array<DataModels.ExternalTask.ExternalTask<TPayload>>>;
    extendLock(identity: IIdentity, workerId: string, externalTaskId: string, additionalDuration: number): Promise<void>;
    handleBpmnError(identity: IIdentity, workerId: string, externalTaskId: string, errorCode: string, errorMessage?: string): Promise<void>;
    handleServiceError(identity: IIdentity, workerId: string, externalTaskId: string, errorMessage: string, errorDetails: string, errorCode?: string): Promise<void>;
    finishExternalTask<TResultType>(identity: IIdentity, workerId: string, externalTaskId: string, payload: TResultType): Promise<void>;
    private fetchOrWaitForExternalTasks;
    /**
     * Locks the given external task for the given Worker until the given
     * expiration time.
     *
     * @async
     * @param workerId           The ID of the worker for which to lock the
     *                           ExternalTask.
     * @param externalTaskId     The ID of the ExternalTask to lock.
     * @param lockExpirationTime The time at which to lock will be released.
     * @returns                  The clocked ExternalTask.
     */
    private lockExternalTask;
    /**
     * Ensures that the given worker is authorized to access the given ExternalTask.
     *
     * @param externalTask   The ExternalTask for which to validate access rights.
     * @param externalTaskId The ExternalTaskID the worker attempted to query.
     * @param workerId       The ID of the worker attempting to manipulate the
     *                       ExternalTask.
     */
    private ensureExternalTaskCanBeAccessedByWorker;
    /**
     * Takes the given duration in ms and adds it to the current datetime.
     * The result is returned as a date which can be used as an unlock date.
     *
     * @param   duration The duration in ms to use for the new unlock date.
     * @returns          The calculated lockout date.
     */
    private getLockExpirationDate;
    /**
     * Publishes a message to the EventAggregator, which notifies about a finished
     * ExternalTask.
     *
     * @param externalTask The ExternalTask for which to publish a notification.
     * @param result       The result of the ExternalTask's execution.
     */
    private publishExternalTaskFinishedMessage;
}
