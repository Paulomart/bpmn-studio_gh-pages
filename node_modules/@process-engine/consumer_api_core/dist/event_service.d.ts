import { IEventAggregator } from '@essential-projects/event_aggregator_contracts';
import { IIAMService, IIdentity, IIdentityService } from '@essential-projects/iam_contracts';
import { APIs, DataModels } from '@process-engine/consumer_api_contracts';
import { FlowNodeInstance, ICorrelationService, IFlowNodeInstanceService, IProcessModelUseCases } from '@process-engine/persistence_api.contracts';
import { IProcessModelFacadeFactory } from '@process-engine/process_engine_contracts';
export declare class EventService implements APIs.IEventConsumerApi {
    private readonly correlationService;
    private readonly eventAggregator;
    private readonly flowNodeInstanceService;
    private readonly identityService;
    private readonly iamService;
    private readonly processModelUseCase;
    private readonly processModelFacadeFactory;
    private internalIdentity;
    constructor(correlationService: ICorrelationService, eventAggregator: IEventAggregator, flowNodeInstanceService: IFlowNodeInstanceService, identityService: IIdentityService, iamService: IIAMService, processModelFacadeFactory: IProcessModelFacadeFactory, processModelUseCase: IProcessModelUseCases);
    initialize(): Promise<void>;
    getEventsForProcessModel(identity: IIdentity, processModelId: string, offset?: number, limit?: number): Promise<DataModels.Events.EventList>;
    getEventsForCorrelation(identity: IIdentity, correlationId: string, offset?: number, limit?: number): Promise<DataModels.Events.EventList>;
    getEventsForProcessModelInCorrelation(identity: IIdentity, processModelId: string, correlationId: string, offset?: number, limit?: number): Promise<DataModels.Events.EventList>;
    triggerMessageEvent(identity: IIdentity, messageName: string, payload?: DataModels.Events.EventTriggerPayload): Promise<void>;
    triggerSignalEvent(identity: IIdentity, signalName: string, payload?: DataModels.Events.EventTriggerPayload): Promise<void>;
    filterAndConvertEventList(identity: IIdentity, suspendedFlowNodes: Array<FlowNodeInstance>, offset?: number, limit?: number): Promise<DataModels.Events.EventList>;
    private checkIfFlowNodeIsAnEvent;
    private filterInacessibleFlowNodeInstances;
    private checkIfUserCanAccessFlowNodeInstance;
    private checkIfUserIsSuperAdmin;
    private convertFlowNodeInstancesToEvents;
    private convertToConsumerApiEvent;
    private getProcessModelForFlowNodeInstance;
    private getProcessModelHashForProcessInstance;
    private getEventDefinitionFromFlowNodeModel;
}
