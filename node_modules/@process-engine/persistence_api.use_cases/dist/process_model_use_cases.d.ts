import { IIAMService, IIdentity } from '@essential-projects/iam_contracts';
import { ILoggingApi } from '@process-engine/logging_api_contracts';
import { ICorrelationService, IExternalTaskService, IFlowNodeInstanceService, IProcessModelService, IProcessModelUseCases, Model, ProcessDefinitionFromRepository } from '@process-engine/persistence_api.contracts';
export declare class ProcessModelUseCases implements IProcessModelUseCases {
    private readonly correlationService;
    private readonly externalTaskService;
    private readonly flowNodeInstanceService;
    private readonly iamService;
    private readonly loggingService;
    private readonly processModelService;
    constructor(correlationService: ICorrelationService, externalTaskService: IExternalTaskService, flowNodeInstanceService: IFlowNodeInstanceService, iamService: IIAMService, loggingService: ILoggingApi, processModelService: IProcessModelService);
    getProcessModels(identity: IIdentity, offset?: number, limit?: number): Promise<Array<Model.Process>>;
    getProcessModelByProcessInstanceId(identity: IIdentity, processInstanceId: string): Promise<Model.Process>;
    deleteProcessModel(identity: IIdentity, processModelId: string): Promise<void>;
    persistProcessDefinitions(identity: IIdentity, name: string, xml: string, overwriteExisting?: boolean): Promise<void>;
    getProcessModelById(identity: IIdentity, processModelId: string): Promise<Model.Process>;
    getProcessDefinitionAsXmlByName(identity: IIdentity, name: string): Promise<ProcessDefinitionFromRepository>;
    getByHash(identity: IIdentity, processModelId: string, hash: string): Promise<Model.Process>;
    private ensureUserHasClaim;
    private checkIfUserIsSuperAdmin;
}
