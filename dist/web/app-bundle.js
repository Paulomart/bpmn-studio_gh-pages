var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('app',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "aurelia-open-id-connect", "bluebird", "./contracts/index", "./environment", "./services/notification-service/notification.service", "./open-id-connect-web-configuration", "./services/is-running-in-electron-module/is-running-in-electron.module", "bootstrap"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, aurelia_open_id_connect_1, Bluebird, index_1, environment_1, notification_service_1, open_id_connect_web_configuration_1, is_running_in_electron_module_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    Bluebird = __importStar(Bluebird);
    environment_1 = __importDefault(environment_1);
    Bluebird.Promise.config({ cancellation: true });
    var App = (function () {
        function App(openIdConnect, notificationService, eventAggregator) {
            var _this = this;
            this.showSolutionExplorer = false;
            this.isRunningInElectron = is_running_in_electron_module_1.isRunningInElectron();
            this.ipcRenderer = null;
            this.openPreferences = function (_) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.router.navigateToRoute('preferences');
                    return [2];
                });
            }); };
            this.openIdConnect = openIdConnect;
            this.notificationService = notificationService;
            this.eventAggregator = eventAggregator;
            if (is_running_in_electron_module_1.isRunningInElectron()) {
                this.ipcRenderer = window.nodeRequire('electron').ipcRenderer;
                this.ipcRenderer.on('database-export-error', function (event, errorMessage) {
                    _this.notificationService.showNotification(index_1.NotificationType.ERROR, errorMessage);
                });
            }
        }
        App.prototype.activate = function () {
            var _this = this;
            this.migrateOpenDiagramStatesInLocalStorage();
            this.preventDefaultBehaviour = function (event) {
                event.preventDefault();
                if (!is_running_in_electron_module_1.isRunningInElectron()) {
                    _this.notificationService.showNotification(index_1.NotificationType.INFO, 'Drag-and-Drop is currently only available for the Electron application.');
                }
                return false;
            };
            this.showSolutionExplorer =
                window.localStorage.getItem('SolutionExplorerVisibility') === 'true' ||
                    window.localStorage.getItem('SolutionExplorerVisibility') === null;
            var showSolutionExplorer = this.showSolutionExplorer ? 'true' : 'false';
            window.localStorage.setItem('SolutionExplorerVisibility', showSolutionExplorer);
            this.subscriptions = [
                this.eventAggregator.subscribe(environment_1.default.events.solutionExplorerPanel.toggleSolutionExplorer, function (show) {
                    _this.showSolutionExplorer = show;
                    if (_this.showSolutionExplorer) {
                        window.localStorage.setItem('SolutionExplorerVisibility', 'true');
                    }
                    else {
                        window.localStorage.setItem('SolutionExplorerVisibility', 'false');
                    }
                }),
            ];
            document.addEventListener('dragover', this.preventDefaultBehaviour);
            document.addEventListener('drop', this.preventDefaultBehaviour);
            var openIdConnectRoute = window.localStorage.getItem('openIdRoute');
            var openIdConnectRouteIsCustom = openIdConnectRoute !== null && openIdConnectRoute !== undefined && openIdConnectRoute !== '';
            if (openIdConnectRouteIsCustom) {
                environment_1.default.openIdConnect.authority = openIdConnectRoute;
                this.openIdConnect.configuration.userManagerSettings.authority = openIdConnectRoute;
                this.openIdConnect.userManager._settings._authority = openIdConnectRoute;
                open_id_connect_web_configuration_1.oidcConfig.userManagerSettings.authority = openIdConnectRoute;
            }
            if (is_running_in_electron_module_1.isRunningInElectron()) {
                this.ipcRenderer.on('menubar__open_preferences', this.openPreferences);
            }
        };
        App.prototype.deactivate = function () {
            document.removeEventListener('dragover', this.preventDefaultBehaviour);
            document.removeEventListener('drop', this.preventDefaultBehaviour);
            this.disposeAllSubscriptions();
        };
        App.prototype.disposeAllSubscriptions = function () {
            this.subscriptions.forEach(function (subscription) {
                subscription.dispose();
            });
        };
        App.prototype.configureRouter = function (config, router) {
            if (!is_running_in_electron_module_1.isRunningInElectron()) {
                config.options.pushState = true;
                config.options.baseRoute = '/';
            }
            config.title = 'BPMN Studio';
            config.map([
                {
                    route: [''],
                    title: 'Start Page',
                    name: 'start-page',
                    moduleId: 'modules/start-page/start-page',
                },
                {
                    route: ['dashboard'],
                    title: 'Dashboard',
                    name: 'dashboard',
                    moduleId: 'modules/inspect/dashboard/dashboard',
                    nav: false,
                },
                {
                    route: ['task', 'processdef/:diagramName/task'],
                    title: 'Task List',
                    name: 'task-list-processmodel',
                    moduleId: 'modules/task-list-container/task-list-container',
                    nav: false,
                },
                {
                    route: ['correlation/:correlationId/task'],
                    title: 'Task List',
                    name: 'task-list-correlation',
                    moduleId: 'modules/task-list-container/task-list-container',
                    nav: false,
                },
                {
                    route: ['instance/:processInstanceId/task'],
                    title: 'Task List',
                    name: 'task-list-processinstance',
                    moduleId: 'modules/task-list-container/task-list-container',
                    nav: false,
                },
                {
                    route: ['process'],
                    title: 'Process Instance List',
                    name: 'process-list',
                    moduleId: 'modules/inspect/process-list/process-list',
                    nav: false,
                },
                {
                    route: ['correlation/:correlationId/diagram/:diagramName/instance/:processInstanceId/task/:taskId/dynamic-ui'],
                    title: 'Task Dynamic UI',
                    name: 'task-dynamic-ui',
                    moduleId: 'modules/task-dynamic-ui/task-dynamic-ui',
                },
                {
                    route: ['diagram/detail/:diagramName?'],
                    title: 'Diagram Detail',
                    name: 'diagram-detail',
                    moduleId: 'modules/design/diagram-detail/diagram-detail',
                },
                {
                    route: ['/correlation/:correlationId/diagram/:diagramName/instance/:processInstanceId/live-execution-tracker'],
                    title: 'Live Execution Tracker',
                    name: 'live-execution-tracker',
                    moduleId: 'modules/live-execution-tracker/live-execution-tracker',
                },
                {
                    route: 'settings',
                    title: 'Settings',
                    name: 'settings',
                    moduleId: 'modules/config-panel/config-panel',
                },
                {
                    route: ['think/:view?/diagram/:diagramName?'],
                    title: 'Think',
                    name: 'think',
                    moduleId: 'modules/think/think',
                    nav: 0,
                    href: '',
                },
                {
                    route: ['design/:view?/diagram/:diagramName?'],
                    title: 'Design',
                    name: 'design',
                    moduleId: 'modules/design/design',
                    nav: 1,
                    href: '',
                },
                {
                    route: ['inspect/:view?/diagram/:diagramName?'],
                    title: 'Inspect',
                    name: 'inspect',
                    moduleId: 'modules/inspect/inspect',
                    nav: 2,
                    href: '',
                },
                {
                    route: 'preferences',
                    title: 'Preferences',
                    name: 'preferences',
                    moduleId: 'modules/user-preferences/user-preferences',
                },
                {
                    route: 'signin-popup-redirect',
                    title: 'Signin Popup Redirect',
                    name: 'signin-popup-redirect',
                    moduleId: 'modules/signin-popup-redirect/signin-popup-redirect',
                },
                {
                    route: 'signout-popup-redirect',
                    title: 'Signout Popup Redirect',
                    name: 'signout-popup-redirect',
                    moduleId: 'modules/signout-popup-redirect/signout-popup-redirect',
                },
            ]);
            this.openIdConnect.configure(config);
            this.router = router;
        };
        App.prototype.migrateOpenDiagramStatesInLocalStorage = function () {
            Object.keys(localStorage)
                .filter(function (localStorageKey) {
                return localStorageKey.startsWith('Open Diagram:');
            })
                .forEach(function (localStorageKey) {
                var diagramState = JSON.parse(localStorage.getItem(localStorageKey));
                var diagramStateHasOldMetadata = diagramState.metaData !== undefined;
                if (diagramStateHasOldMetadata) {
                    diagramState.metadata = diagramState.metaData;
                    delete diagramState.metaData;
                }
                localStorage.setItem(localStorageKey, JSON.stringify(diagramState));
            });
        };
        App = __decorate([
            aurelia_framework_1.inject(aurelia_open_id_connect_1.OpenIdConnect, 'NotificationService', aurelia_event_aggregator_1.EventAggregator),
            __metadata("design:paramtypes", [aurelia_open_id_connect_1.OpenIdConnect,
                notification_service_1.NotificationService,
                aurelia_event_aggregator_1.EventAggregator])
        ], App);
        return App;
    }());
    exports.App = App;
});


;
define('text!app.css',[],function(){return "html,\nbody {\n  height: 100%;\n  overflow: hidden;\n  font-size: 14px;\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif; }\n\na:focus,\nbutton:focus,\ninput:focus {\n  outline: none !important; }\n\n.form-control:focus {\n  border-color: #ced4da;\n  box-shadow: none; }\n\n.dropdown-toggle::after {\n  display: none; }\n\n.bpmn-studio-layout {\n  display: flex;\n  height: 100%;\n  flex-direction: column;\n  align-items: stretch; }\n\n.bpmn-studio-layout__content {\n  display: flex;\n  max-height: calc(100% - 42px);\n  flex: 1;\n  padding-bottom: 20px;\n  align-items: stretch; }\n\nrouter-view {\n  display: flex;\n  flex-direction: column;\n  flex: 1; }\n\n.toast-bottom-left {\n  bottom: 20px; }\n\n.button {\n  color: #333;\n  opacity: 0.5; }\n\n.button:hover {\n  opacity: 1; }\n\n.button--active {\n  opacity: 1; }\n\n.button--disabled {\n  opacity: 0.1; }\n\n.button--disabled:hover {\n  opacity: 0.1; }\n\n.btn-default {\n  background-color: #fff;\n  border-color: #ccc;\n  color: #333; }\n\n.btn-primary,\n.btn-primary:disabled {\n  background: #5d8a3c;\n  border-color: #4c7032; }\n\n.btn-primary:not(:disabled):not(.disabled):active,\n.btn-primary:hover:enabled {\n  background: #4c7032;\n  border-color: #2b401c; }\n\n.btn-primary:not(:disabled):not(.disabled):active:focus {\n  box-shadow: 0 0 0 0.2rem rgba(95, 142, 20, 0.5); }\n\n.btn-default:hover:enabled {\n  background-color: #eee; }\n\n.btn:focus {\n  box-shadow: none; }\n\n.dropdown-item {\n  background-color: transparent !important;\n  color: black !important;\n  user-select: none; }\n\n.dropdown-item:hover {\n  background-color: #e6e6e6 !important; }\n\n.checkbox-input {\n  position: relative; }\n\n.checkbox-input__checkbox {\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n  left: 9px; }\n\n.checkbox-input__input {\n  padding-left: 30px; }\n";});;
define('text!app.html',[],function(){return "<template>\n  <require from=\"bootstrap/css/bootstrap.css\"></require>\n  <require from=\"dist/web/@fortawesome/fontawesome-free/css/all.css\"></require>\n  <require from=\"toastr/build/toastr.min.css\"></require>\n  <require from=\"./app.css\"></require>\n  <require from=\"./electron.css\"></require>\n  <require from=\"./modules/navbar/navbar\"></require>\n  <require from=\"./modules/solution-explorer/solution-explorer-panel/solution-explorer-panel\"></require>\n  <require from=\"./modules/status-bar/status-bar\"></require>\n  <require from=\"./modules/deploy-modals/deploy-modals\"></require>\n  <require from=\"./modules/feedback-modal/feedback-modal\"></require>\n\n  <div class=\"bpmn-studio-layout\" class.bind=\"isRunningInElectron ? 'electron' : ''\">\n    <nav-bar></nav-bar>\n    <feedback-modal></feedback-modal>\n\n    <deploy-modals></deploy-modals>\n\n    <div class=\"bpmn-studio-layout__content\">\n      <solution-explorer-panel show.bind=\"showSolutionExplorer\" data-test-solution-explorer-panel></solution-explorer-panel>\n      <router-view></router-view>\n    </div>\n\n    <status-bar></status-bar>\n  </div>\n\n</template>\n";});;
define('contracts/authentication/IAuthenticationRepository',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/authentication/IAuthenticationService',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/authentication/IIdentity',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/authentication/ILoginResult',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/authentication/ILogoutResult',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/authentication/IOidcConfig',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/authentication/ITokenObject',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/authentication/IUserIdentity',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/authentication/constants',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var AuthenticationStateEvent;
    (function (AuthenticationStateEvent) {
        AuthenticationStateEvent["LOGIN"] = "login";
        AuthenticationStateEvent["LOGOUT"] = "logout";
    })(AuthenticationStateEvent = exports.AuthenticationStateEvent || (exports.AuthenticationStateEvent = {}));
});


;
define('contracts/authentication/index',["require", "exports", "./constants"], function (require, exports, constants_1) {
    "use strict";
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(constants_1);
});


;
define('contracts/bpmn/SupportedBPMNElementListEntry',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/bpmn/constants',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SupportedBPMNElements = [
        {
            type: 'bpmn:StartEvent',
            supportedEventDefinitions: [
                '',
                'bpmn:MessageEventDefinition',
                'bpmn:TimerEventDefinition',
                'bpmn:SignalEventDefinition',
            ],
            unsupportedVariables: [],
        },
        {
            type: 'bpmn:Task',
            supportedEventDefinitions: [''],
            unsupportedVariables: [],
        },
        {
            type: 'bpmn:UserTask',
            supportedEventDefinitions: [''],
            unsupportedVariables: [],
        },
        {
            type: 'bpmn:ManualTask',
            supportedEventDefinitions: [''],
            unsupportedVariables: [],
        },
        {
            type: 'bpmn:ReceiveTask',
            supportedEventDefinitions: [''],
            unsupportedVariables: [],
        },
        {
            type: 'bpmn:SendTask',
            supportedEventDefinitions: [''],
            unsupportedVariables: [],
        },
        {
            type: 'bpmn:ScriptTask',
            supportedEventDefinitions: [''],
            unsupportedVariables: [],
        },
        {
            type: 'bpmn:ServiceTask',
            supportedEventDefinitions: [''],
            unsupportedVariables: [],
        },
        {
            type: 'bpmn:EndEvent',
            supportedEventDefinitions: [
                '',
                'bpmn:MessageEventDefinition',
                'bpmn:SignalEventDefinition',
                'bpmn:ErrorEventDefinition',
                'bpmn:TerminateEventDefinition',
            ],
            unsupportedVariables: [],
        },
        {
            type: 'bpmn:CallActivity',
            supportedEventDefinitions: [''],
            unsupportedVariables: [],
        },
        {
            type: 'bpmn:Lane',
            supportedEventDefinitions: [''],
            unsupportedVariables: [],
        },
        {
            type: 'bpmn:Participant',
            supportedEventDefinitions: [''],
            unsupportedVariables: [],
        },
        {
            type: 'bpmn:BoundaryEvent',
            supportedEventDefinitions: [
                '',
                'bpmn:MessageEventDefinition',
                'bpmn:TimerEventDefinition',
                'bpmn:SignalEventDefinition',
                'bpmn:ErrorEventDefinition',
            ],
            unsupportedVariables: [],
        },
        {
            type: 'bpmn:IntermediateThrowEvent',
            supportedEventDefinitions: [
                '',
                'bpmn:MessageEventDefinition',
                'bpmn:LinkEventDefinition',
                'bpmn:SignalEventDefinition',
            ],
            unsupportedVariables: [],
        },
        {
            type: 'bpmn:IntermediateCatchEvent',
            supportedEventDefinitions: [
                '',
                'bpmn:MessageEventDefinition',
                'bpmn:LinkEventDefinition',
                'bpmn:SignalEventDefinition',
                'bpmn:TimerEventDefinition',
            ],
            unsupportedVariables: [],
        },
        {
            type: 'bpmn:ExclusiveGateway',
            supportedEventDefinitions: [''],
            unsupportedVariables: [],
        },
        {
            type: 'bpmn:ParallelGateway',
            supportedEventDefinitions: [''],
            unsupportedVariables: [],
        },
        {
            type: 'bpmn:SequenceFlow',
            supportedEventDefinitions: [''],
            unsupportedVariables: [],
        },
        {
            type: 'bpmn:SubProcess',
            supportedEventDefinitions: [''],
            unsupportedVariables: ['triggeredByEvent'],
        },
        {
            type: 'bpmn:Association',
            supportedEventDefinitions: [''],
            unsupportedVariables: [],
        },
        {
            type: 'bpmn:TextAnnotation',
            supportedEventDefinitions: [''],
            unsupportedVariables: [],
        },
        {
            type: 'label',
            supportedEventDefinitions: [''],
            unsupportedVariables: [],
        },
        {
            type: 'bpmn:Collaboration',
            supportedEventDefinitions: [''],
            unsupportedVariables: [],
        },
    ];
});


;
define('contracts/bpmn/index',["require", "exports", "./constants"], function (require, exports, constants_1) {
    "use strict";
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(constants_1);
});


;
define('contracts/bpmnmodeler/IBpmnFunction',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/bpmnmodeler/IBpmnModdle',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/bpmnmodeler/IBpmnModeler',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/bpmnmodeler/IBpmnModelerConstructor',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/bpmnmodeler/IBpmnXmlSaveOptions',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/bpmnmodeler/ICanvas',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/bpmnmodeler/IDefaultOverlayPositions',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/bpmnmodeler/IDefinition',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/bpmnmodeler/IDependencyHook',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/bpmnmodeler/IDescriptor',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/bpmnmodeler/IEditorActions',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/bpmnmodeler/IElementRegistry',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/bpmnmodeler/IEvent',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/bpmnmodeler/IEventFunction',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/bpmnmodeler/IIds',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/bpmnmodeler/IInnerViewbox',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/bpmnmodeler/IInternalEvent',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/bpmnmodeler/IKeyboard',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/bpmnmodeler/ILinting',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/bpmnmodeler/IModeling',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/bpmnmodeler/IOuterViewbox',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/bpmnmodeler/IOverlay',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/bpmnmodeler/IOverlayDescriptor',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/bpmnmodeler/IOverlayManager',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/bpmnmodeler/IOverlayPosition',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/bpmnmodeler/IOverlays',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/bpmnmodeler/ISeed',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/bpmnmodeler/IValidateIssue',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/bpmnmodeler/IValidateIssueCategory',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var IValidateIssueCategory;
    (function (IValidateIssueCategory) {
        IValidateIssueCategory["warn"] = "warn";
        IValidateIssueCategory["error"] = "error";
    })(IValidateIssueCategory = exports.IValidateIssueCategory || (exports.IValidateIssueCategory = {}));
});


;
define('contracts/bpmnmodeler/IValidateResult',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/bpmnmodeler/IViewbox',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/bpmnmodeler/constants',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ElementDistributeOptions;
    (function (ElementDistributeOptions) {
        ElementDistributeOptions["HORIZONTAL"] = "horizontal";
        ElementDistributeOptions["VERTICAL"] = "vertical";
    })(ElementDistributeOptions = exports.ElementDistributeOptions || (exports.ElementDistributeOptions = {}));
});


;
define('contracts/bpmnmodeler/index',["require", "exports", "./constants", "./IValidateIssueCategory"], function (require, exports, constants_1, IValidateIssueCategory_1) {
    "use strict";
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(constants_1);
    exports.IValidateIssueCategory = IValidateIssueCategory_1.IValidateIssueCategory;
});


;
define('contracts/colorpicker/IColorPickerColor',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/colorpicker/IColorPickerSettings',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/colorpicker/IDefaultBpmnColors',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/colorpicker/constants',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultBpmnColors = {
        red: {
            fill: '#FFCDD2',
            border: '#E53935',
        },
        blue: {
            fill: '#BBDEFB',
            border: '#1E88E5',
        },
        green: {
            fill: '#C8E6C9',
            border: '#43A047',
        },
        purple: {
            fill: '#E1BEE7',
            border: '#8E24AA',
        },
        orange: {
            fill: '#FFE0B2',
            border: '#FB8C00',
        },
        grey: {
            border: '#000000',
            fill: '#cccccc',
        },
        none: {
            fill: null,
            border: null,
        },
    };
});


;
define('contracts/colorpicker/index',["require", "exports", "./constants"], function (require, exports, constants_1) {
    "use strict";
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(constants_1);
});


;
define('contracts/constants',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var StudioVersion;
    (function (StudioVersion) {
        StudioVersion["Dev"] = "dev";
        StudioVersion["Alpha"] = "alpha";
        StudioVersion["Beta"] = "beta";
        StudioVersion["Stable"] = "stable";
    })(StudioVersion = exports.StudioVersion || (exports.StudioVersion = {}));
});


;
define('contracts/diagram-creation-service/IDiagramCreationService',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/diagram-creation-service/index',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/diagram-validation-service/IDiagramValidationRule',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/diagram-validation-service/IDiagramValidationRuleSet',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/diagram-validation-service/IDiagramValidationRules',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/diagram-validation-service/IDiagramValidationService',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/diagram-validation-service/IDiagramValidator',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/diagram-validation-service/index',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/diagram/DeployResult',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/diagram/DiagramStateChange',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/diagram/IDiagramState',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/diagram/IDiagramStateList',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/diagram/IDiagramStateListEntry',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/diagram/index',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/diffview/IChangeListEntry',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/diffview/IChangedElement',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/diffview/IChangedElementList',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/diffview/IDiffChangeListData',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/diffview/IDiffChanges',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/diffview/IDiffElementList',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/diffview/constants',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DiffMode;
    (function (DiffMode) {
        DiffMode[DiffMode["OldVsNew"] = 0] = "OldVsNew";
        DiffMode[DiffMode["NewVsOld"] = 1] = "NewVsOld";
    })(DiffMode = exports.DiffMode || (exports.DiffMode = {}));
});


;
define('contracts/diffview/index',["require", "exports", "./constants"], function (require, exports, constants_1) {
    "use strict";
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(constants_1);
});


;
define('contracts/dynamic-ui/IDynamicUiService',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/dynamic-ui/index',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/eventbus/IEventBus',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/eventbus/index',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/exportRepository/IDiagramExportRepositoryContracts',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/exportRepository/index',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/exportService/IDiagramExportService',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/exportService/IExportService',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/exportService/ISvgConvertService',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/exportService/IXmlConvertService',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/exportService/index',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/feedback/FeedbackData',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/feedback/index',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/file-input-event/IFile',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/file-input-event/IInputEvent',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/file-input-event/IInputTarget',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/file-input-event/index',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/form-fields/IBooleanFormField',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/form-fields/IEnumFormField',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/form-fields/IStringFormField',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/form-fields/index',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/help-text/help-text',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/help-text/help-text-id',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var HelpTextId;
    (function (HelpTextId) {
        HelpTextId["ScriptTaskTokenUsage"] = "script-task-token-usage";
        HelpTextId["ExternalTaskTokenUsage"] = "external-task-token-usage";
        HelpTextId["UserTaskUsage"] = "usertask-usage";
    })(HelpTextId = exports.HelpTextId || (exports.HelpTextId = {}));
});


;
define('contracts/help-text/index',["require", "exports", "./help-text-id"], function (require, exports, help_text_id_1) {
    "use strict";
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(help_text_id_1);
});


;
define('contracts/index',["require", "exports", "./authentication/index", "./bpmn/index", "./bpmnmodeler/index", "./colorpicker/index", "./diffview/index", "./notification/index", "./diffview/index", "./inspect-process-instance/index", "./constants", "./help-text/index"], function (require, exports, index_1, index_2, index_3, index_4, index_5, index_6, index_7, index_8, constants_1, index_9) {
    "use strict";
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(index_1);
    __export(index_2);
    __export(index_3);
    __export(index_4);
    __export(index_5);
    __export(index_6);
    __export(index_7);
    __export(index_8);
    __export(constants_1);
    __export(index_9);
});


;
define('contracts/inspect-process-instance/index',["require", "exports", "./inspect-panel/index"], function (require, exports, index_1) {
    "use strict";
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(index_1);
});


;
define('contracts/inspect-process-instance/inspect-panel/constants',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var InspectPanelTab;
    (function (InspectPanelTab) {
        InspectPanelTab["CorrelationList"] = "CorrelationList";
        InspectPanelTab["LogViewer"] = "LogViewer";
        InspectPanelTab["ProcessInstanceList"] = "ProcessInstanceList";
    })(InspectPanelTab = exports.InspectPanelTab || (exports.InspectPanelTab = {}));
});


;
define('contracts/inspect-process-instance/inspect-panel/correlation-list/ICorrelationSortSettings',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/inspect-process-instance/inspect-panel/correlation-list/ICorrelationTableEntry',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/inspect-process-instance/inspect-panel/correlation-list/constants',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CorrelationListSortProperty;
    (function (CorrelationListSortProperty) {
        CorrelationListSortProperty["Number"] = "index";
        CorrelationListSortProperty["StartedAt"] = "startedAt";
        CorrelationListSortProperty["State"] = "state";
        CorrelationListSortProperty["CorrelationId"] = "correlationId";
    })(CorrelationListSortProperty = exports.CorrelationListSortProperty || (exports.CorrelationListSortProperty = {}));
});


;
define('contracts/inspect-process-instance/inspect-panel/correlation-list/index',["require", "exports", "./constants"], function (require, exports, constants_1) {
    "use strict";
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(constants_1);
});


;
define('contracts/inspect-process-instance/inspect-panel/index',["require", "exports", "./constants", "./correlation-list/index", "./log-viewer/index", "./process-instance-list/index"], function (require, exports, constants_1, index_1, index_2, index_3) {
    "use strict";
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(constants_1);
    __export(index_1);
    __export(index_2);
    __export(index_3);
});


;
define('contracts/inspect-process-instance/inspect-panel/log-viewer/ILogSortSettings',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/inspect-process-instance/inspect-panel/log-viewer/constants',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var LogSortProperty;
    (function (LogSortProperty) {
        LogSortProperty["FlowNodeId"] = "flowNodeId";
        LogSortProperty["FlowNodeInstanceId"] = "flowNodeInstanceId";
        LogSortProperty["LogLevel"] = "logLevel";
        LogSortProperty["Message"] = "message";
        LogSortProperty["Time"] = "timestamp";
    })(LogSortProperty = exports.LogSortProperty || (exports.LogSortProperty = {}));
});


;
define('contracts/inspect-process-instance/inspect-panel/log-viewer/index',["require", "exports", "./constants"], function (require, exports, constants_1) {
    "use strict";
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(constants_1);
});


;
define('contracts/inspect-process-instance/inspect-panel/process-instance-list/ProcessInstanceListSortSettings',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/inspect-process-instance/inspect-panel/process-instance-list/ProcessInstanceTableEntry',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/inspect-process-instance/inspect-panel/process-instance-list/constants',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ProcessInstanceListSortProperty;
    (function (ProcessInstanceListSortProperty) {
        ProcessInstanceListSortProperty["Number"] = "index";
        ProcessInstanceListSortProperty["StartedAt"] = "startedAt";
        ProcessInstanceListSortProperty["State"] = "state";
        ProcessInstanceListSortProperty["User"] = "user";
        ProcessInstanceListSortProperty["ProcessInstanceId"] = "processInstanceId";
        ProcessInstanceListSortProperty["ProcessModelId"] = "processModelId";
    })(ProcessInstanceListSortProperty = exports.ProcessInstanceListSortProperty || (exports.ProcessInstanceListSortProperty = {}));
});


;
define('contracts/inspect-process-instance/inspect-panel/process-instance-list/index',["require", "exports", "./constants"], function (require, exports, constants_1) {
    "use strict";
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(constants_1);
});


;
define('contracts/navigation/AureliaNavigationResult',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/navigation/index',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/notification/INotification',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/notification/constants',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var NotificationType;
    (function (NotificationType) {
        NotificationType["SUCCESS"] = "success";
        NotificationType["INFO"] = "info";
        NotificationType["WARNING"] = "warning";
        NotificationType["ERROR"] = "error";
    })(NotificationType = exports.NotificationType || (exports.NotificationType = {}));
});


;
define('contracts/notification/index',["require", "exports", "./constants"], function (require, exports, constants_1) {
    "use strict";
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(constants_1);
});


;
define('contracts/print/IDiagramPrintService',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/print/index',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/propertypanel/IIndextab',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/propertypanel/IPageModel',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/propertypanel/ISection',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/propertypanel/index',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/solution-explorer/ISolutionEntry',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/solution-explorer/ISolutionService',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/solution-explorer/index',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/user-input-validation/IUserInputValidationRule',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/user-input-validation/IUserInputValidationRuleset',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('contracts/user-input-validation/index',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('text!electron.css',[],function(){return ".electron button,\n.electron button:not(:disabled),\n.electron a.tool,\n.electron .dropdown,\n.electron .dropdown-item {\n  cursor: default; }\n";});;
define('environment',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var processEngineRoute = 'http://localhost:8000';
    var electronHost = 'bpmn-studio:/';
    var isRunningInElectron = Boolean(window.nodeRequire);
    exports.default = {
        debug: true,
        testing: true,
        appHost: isRunningInElectron ? electronHost : "http://" + window.location.host,
        processlist: {
            pageLimit: 10,
        },
        openIdConnect: {
            authority: 'http://localhost:5000',
        },
        processengine: {
            liveExecutionTrackerPollingIntervalInMs: 1000,
            solutionExplorerPollingIntervalInMs: 5000,
            processDefListPollingIntervalInMs: 5000,
            dashboardPollingIntervalInMs: 1500,
            updateRemoteSolutionHistoryIntervalInMs: 3000,
            routes: {
                processes: processEngineRoute + "/datastore/ProcessDef",
                startProcess: processEngineRoute + "/processengine/start",
                iam: processEngineRoute + "/iam",
                userTasks: processEngineRoute + "/datastore/UserTask",
                importBPMN: processEngineRoute + "/processengine/create_bpmn_from_xml",
            },
        },
        events: {
            differsFromOriginal: 'differsFromOriginal',
            diagramChangedOutsideTheStudio: 'diagramChangedOutsideTheStudio',
            diagramNeedsToBeUpdated: 'diagramNeedsToBeUpdated',
            xmlChanged: 'xmlChanged',
            diagramWasSaved: 'diagramWasSaved',
            deployModals: {
                showRemoteSolutionSelectionModal: 'deployModals:remoteSolutionSelectionModal:show',
                showOverwriteDiagramModal: 'deployModals:overwriteDiagramModal:show',
            },
            startPage: {
                openLocalSolution: 'startpage:openlocalsolution',
                openDiagram: 'startpage:openDiagram',
                createDiagram: 'startpage:createDiagram',
            },
            statusBar: {
                showDiagramViewButtons: 'statusbar:diagramviewbuttons:show',
                hideDiagramViewButtons: 'statusbar:diagramviewbuttons:hide',
                setXmlIdentifier: 'statusbar:xmlIdentifier',
                showInspectProcessInstanceButtons: 'statusbar:InspectProcessInstancebuttons',
            },
            configPanel: {
                solutionEntryChanged: 'configpanel:solutionentry:changed',
            },
            navBar: {
                showTools: 'navbar:tools:show',
                hideTools: 'navbar:tools:hide',
                validationError: 'navbar:validationError:true',
                noValidationError: 'navbar:validationError:false',
                inspectNavigateToDashboard: 'navbar:inspectLink:navigateToDashboard',
                showInspectButtons: 'navbar:tools:showButtonsOnInspect',
                hideInspectButtons: 'navbar:tools:hideButtonsOnInspect',
                toggleDashboardView: 'navbar:tools:inspectButtons:toggleDashboardView',
                toggleHeatmapView: 'navbar:tools:inspectButtons:toggleHeatmapView',
                toggleInspectProcessInstanceView: 'navbar:tools:inspectButtons:toggleInspectProcessInstanceView',
                updateActiveSolutionAndDiagram: 'navbar:activeSolution:diagram:update',
            },
            diagramDetail: {
                onDiagramDeployed: 'diagramdetail:diagram:ondeployed',
                printDiagram: 'diagramdetail:diagram:print',
                saveDiagram: 'diagramdetail:diagram:save',
                saveDiagramDone: 'diagramdetail:diagram:save:done',
                saveDiagramAs: 'diagramdetail:diagram:save:as',
                exportDiagramAs: 'diagramdetail:diagram:exportas',
                startProcess: 'diagramdetail:process:start',
                startProcessWithOptions: 'diagramdetail:process:startWithOptions',
                toggleXMLView: 'design:xmlview:toggle',
                uploadProcess: 'diagramdetail:process:upload',
            },
            bpmnio: {
                toggleXMLView: 'design:xmlview:toggle',
                toggleDiffView: 'design:diffview:toggle',
                showDiffDestinationButton: 'design:diffDestinationButton:toggle',
                togglePropertyPanel: 'design:propertypanel:toggle',
                propertyPanelActive: 'design:propertypanel:active',
                bindKeyboard: 'design:keyboard:bind',
                unbindKeyboard: 'design:keyboard:unbind',
            },
            diffView: {
                changeDiffMode: 'diffview:diffmode:change',
                toggleChangeList: 'diffview:changelist:toggle',
                setDiffDestination: 'diffview:diffDestination:set',
            },
            diagramChange: 'diagram:change',
            solutionExplorerPanel: {
                toggleSolutionExplorer: 'solutionExplorerPanel:solutionExplorer:toggle',
            },
            inspect: {
                shouldDisableTokenViewerButton: 'inspect:tokenViewerButton:disable',
                exportDiagramAs: 'inspect:diagram:exportas',
            },
            inspectProcessInstance: {
                showInspectPanel: 'inspectProcessInstance:inspectPanel:show',
                showTokenViewer: 'inspectProcessInstance:tokenViewer:show',
                showLogViewer: 'inspectProcessInstance:logViewer:show',
                showProcessInstanceList: 'inspectProcessInstance:processInstanceList:show',
                noCorrelationsFound: 'inspectProcessInstance:diagramViewer:noCorrelationsFound',
                updateProcessInstances: 'inspectProcessInstance:updateProcessInstances',
                updateCorrelations: 'inspectProcessInstance:updateCorrelations',
            },
            solutionExplorer: {
                closeAllOpenDiagrams: 'solutionExplorer:openDiagrams:closeAll',
                closeDiagram: 'solutionExplorer:openDiagrams:closeDiagram',
                updateOpenDiagrams: 'solutioneExplorer:openDiagrams:update',
            },
        },
        baseRoute: processEngineRoute,
        propertyPanel: {
            defaultWidth: 250,
        },
        colorPickerSettings: {
            preferredFormat: 'hex',
            clickoutFiresChange: true,
            showPalette: true,
            maxSelectionSize: 8,
            showInitial: true,
            showInput: true,
            allowEmpty: true,
            showButtons: false,
            containerClassName: 'colorpicker-container',
        },
    };
});


;
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('main',["require", "exports", "process", "./environment", "./open-id-connect-web-configuration", "./services/is-running-in-electron-module/is-running-in-electron.module"], function (require, exports, process_1, environment_1, open_id_connect_web_configuration_1, is_running_in_electron_module_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    process_1 = __importDefault(process_1);
    environment_1 = __importDefault(environment_1);
    function configure(aurelia) {
        if (navigator.cookieEnabled === false) {
            var url = location.href;
            throw new Error("In order to use the web version of BPMN Studio please enable cookies for this URL: " + url + ".");
        }
        if (is_running_in_electron_module_1.isRunningInElectron()) {
            var ipcRenderer = window.nodeRequire('electron').ipcRenderer;
            var newHost = ipcRenderer.sendSync('get_host');
            var processEngineVersion = ipcRenderer.sendSync('get_version');
            var processEngineBaseRouteWithProtocol = "http://" + newHost;
            localStorage.setItem('InternalProcessEngineRoute', processEngineBaseRouteWithProtocol);
            localStorage.setItem('InternalProcessEngineVersion', processEngineVersion);
            aurelia.container.registerInstance('InternalProcessEngineBaseRoute', processEngineBaseRouteWithProtocol);
        }
        else {
            window.process = process_1.default;
            localStorage.setItem('InternalProcessEngineRoute', environment_1.default.baseRoute);
            localStorage.setItem('InternalProcessEngineVersion', null);
            aurelia.container.registerInstance('InternalProcessEngineBaseRoute', null);
        }
        aurelia.use
            .standardConfiguration()
            .globalResources('modules/custom_elements/modal/modal.html')
            .feature('modules/fetch-http-client')
            .feature('services/dynamic-ui-service')
            .feature('services/notification-service')
            .feature('services/user-config-service')
            .feature('services/diagram-validation-service')
            .feature('modules/management-api_client')
            .feature('services/authentication-service')
            .feature('services/solution-explorer-services')
            .feature('modules/inspect/token-viewer')
            .feature('modules/inspect/inspect-process-instance')
            .feature('modules/inspect/dashboard')
            .feature('modules/design/diagram-detail')
            .feature('services/diagram-creation-service')
            .feature('services/solution-service')
            .feature('modules/inspect/heatmap')
            .feature('modules/live-execution-tracker')
            .plugin('aurelia-bootstrap')
            .plugin('aurelia-validation')
            .plugin('aurelia-open-id-connect', function () { return open_id_connect_web_configuration_1.oidcConfig; });
        if (environment_1.default.debug) {
            aurelia.use.developmentLogging();
        }
        if (environment_1.default.testing) {
            aurelia.use.plugin('aurelia-testing');
        }
        aurelia.start().then(function () {
            aurelia.setRoot();
            if (is_running_in_electron_module_1.isRunningInElectron()) {
                var ipcRenderer = window.nodeRequire('electron').ipcRenderer;
                ipcRenderer.send('app_ready');
            }
        });
    }
    exports.configure = configure;
});


;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/config-panel/config-panel',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "aurelia-router", "fs", "path", "../../contracts/index", "../fetch-http-client/http-fetch-client", "../../services/is-running-in-electron-module/is-running-in-electron.module"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, aurelia_router_1, fs, path_1, index_1, http_fetch_client_1, is_running_in_electron_module_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    fs = __importStar(fs);
    path_1 = __importDefault(path_1);
    var ConfigPanel = (function () {
        function ConfigPanel(router, solutionService, authenticationService, eventAggregator, httpFetchClient) {
            this.router = router;
            this.solutionService = solutionService;
            this.authenticationService = authenticationService;
            this.eventAggregator = eventAggregator;
            this.httpFetchClient = httpFetchClient;
            if (is_running_in_electron_module_1.isRunningInElectron()) {
                this.ipcRenderer = window.nodeRequire('electron').ipcRenderer;
            }
        }
        ConfigPanel.prototype.attached = function () {
            return __awaiter(this, void 0, void 0, function () {
                var internalSolutionUri;
                return __generator(this, function (_a) {
                    internalSolutionUri = window.localStorage.getItem('InternalProcessEngineRoute');
                    this.internalSolution = this.solutionService.getSolutionEntryForUri(internalSolutionUri);
                    this.authority = this.internalSolution.authority;
                    return [2];
                });
            });
        };
        ConfigPanel.prototype.updateSettings = function () {
            return __awaiter(this, void 0, void 0, function () {
                var authorityDoesNotEndWithSlash, userIsLoggedIn, iamServiceConfig, authorityChanged;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            authorityDoesNotEndWithSlash = !this.authority.endsWith('/');
                            if (authorityDoesNotEndWithSlash) {
                                this.authority = this.authority + "/";
                            }
                            return [4, this.authenticationService.isLoggedIn(this.internalSolution.authority, this.internalSolution.identity)];
                        case 1:
                            userIsLoggedIn = _a.sent();
                            if (!userIsLoggedIn) return [3, 3];
                            return [4, this.authenticationService.logout(this.internalSolution.authority, this.internalSolution.uri, this.internalSolution.identity)];
                        case 2:
                            _a.sent();
                            this.internalSolution.identity = this.createDummyIdentity();
                            this.internalSolution.isLoggedIn = false;
                            this.internalSolution.userName = undefined;
                            this.internalSolution.service.openSolution(this.internalSolution.uri, this.internalSolution.identity);
                            this.solutionService.persistSolutionsInLocalStorage();
                            this.eventAggregator.publish(index_1.AuthenticationStateEvent.LOGOUT);
                            _a.label = 3;
                        case 3:
                            if (!is_running_in_electron_module_1.isRunningInElectron()) return [3, 8];
                            return [4, this.getIamServiceConfig()];
                        case 4:
                            iamServiceConfig = _a.sent();
                            authorityChanged = iamServiceConfig.basePath !== this.authority;
                            if (!authorityChanged) return [3, 6];
                            return [4, this.saveNewAuthority()];
                        case 5:
                            _a.sent();
                            this.showRestartModal = true;
                            return [3, 7];
                        case 6:
                            this.router.navigateBack();
                            _a.label = 7;
                        case 7: return [3, 9];
                        case 8:
                            this.internalSolution.authority = this.authority;
                            this.router.navigateBack();
                            _a.label = 9;
                        case 9: return [2];
                    }
                });
            });
        };
        ConfigPanel.prototype.cancelUpdate = function () {
            this.router.navigateBack();
        };
        ConfigPanel.prototype.restartNow = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.showRestartModal = false;
                    this.ipcRenderer.send('restart');
                    return [2];
                });
            });
        };
        ConfigPanel.prototype.restartLater = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.showRestartModal = false;
                    this.router.navigateBack();
                    return [2];
                });
            });
        };
        ConfigPanel.prototype.saveNewAuthority = function () {
            return __awaiter(this, void 0, void 0, function () {
                var iamServiceConfig, configPath;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.getIamServiceConfig()];
                        case 1:
                            iamServiceConfig = _a.sent();
                            iamServiceConfig.basePath = this.authority;
                            iamServiceConfig.claimPath = this.authority + "claims/ensure";
                            return [4, this.getIamServiceConfigPath()];
                        case 2:
                            configPath = _a.sent();
                            fs.writeFileSync(configPath, JSON.stringify(iamServiceConfig, null, 2));
                            return [2];
                    }
                });
            });
        };
        ConfigPanel.prototype.getIamServiceConfig = function () {
            return __awaiter(this, void 0, void 0, function () {
                var configPath, iamServiceConfig;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.getIamServiceConfigPath()];
                        case 1:
                            configPath = _a.sent();
                            iamServiceConfig = JSON.parse(fs.readFileSync(configPath, 'utf-8'));
                            return [2, iamServiceConfig];
                    }
                });
            });
        };
        ConfigPanel.prototype.getIamServiceConfigPath = function () {
            return __awaiter(this, void 0, void 0, function () {
                var pathToJson, iamServiceConfigPath, isDevelop;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            pathToJson = 'config/sqlite/iam/iam_service.json';
                            return [4, is_running_in_electron_module_1.isRunningAsDevelop()];
                        case 1:
                            isDevelop = _a.sent();
                            if (!isDevelop) {
                                iamServiceConfigPath = path_1.default.join(__dirname, '..', '..', pathToJson);
                            }
                            else {
                                iamServiceConfigPath = path_1.default.join(__dirname, pathToJson);
                            }
                            return [2, iamServiceConfigPath];
                    }
                });
            });
        };
        Object.defineProperty(ConfigPanel.prototype, "uriIsValid", {
            get: function () {
                if (this.uriIsEmpty) {
                    return true;
                }
                var urlRegEx = /^(?:http(s)?:\/\/)+[\w.-]?[\w\-._~:/?#[\]@!$&'()*+,;=.]+$/g;
                var uriIsValid = urlRegEx.test(this.authority);
                return uriIsValid;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConfigPanel.prototype, "uriIsEmpty", {
            get: function () {
                var uriIsEmtpy = this.authority === undefined || this.authority.length === 0;
                return uriIsEmtpy;
            },
            enumerable: true,
            configurable: true
        });
        ConfigPanel.prototype.createDummyIdentity = function () {
            var accessToken = this.createDummyAccessToken();
            var identity = {
                token: accessToken,
                userId: '',
            };
            return identity;
        };
        ConfigPanel.prototype.createDummyAccessToken = function () {
            var dummyAccessTokenString = 'dummy_token';
            var base64EncodedString = btoa(dummyAccessTokenString);
            return base64EncodedString;
        };
        ConfigPanel = __decorate([
            aurelia_framework_1.inject(aurelia_router_1.Router, 'SolutionService', 'AuthenticationService', aurelia_event_aggregator_1.EventAggregator, 'HttpFetchClient'),
            __metadata("design:paramtypes", [aurelia_router_1.Router, Object, Object, aurelia_event_aggregator_1.EventAggregator,
                http_fetch_client_1.HttpFetchClient])
        ], ConfigPanel);
        return ConfigPanel;
    }());
    exports.ConfigPanel = ConfigPanel;
});


;
define('text!modules/config-panel/config-panel.css',[],function(){return ".config-panel {\n  margin: 20px 20px 20px 20px; }\n\n.config-panel__title {\n  margin-bottom: 20px; }\n\n.config-panel__subtitle {\n  padding-top: 5px; }\n\n.config-panel__card {\n  margin-bottom: 20px; }\n\n.config-panel__card__alert {\n  margin-top: 10px;\n  margin-bottom: 0; }\n\n.uri-input--invalid {\n  border: 2px red solid; }\n\n.uri-input--invalid:focus {\n  border: 2px red solid; }\n\n.config-panel__invalid-uri-message {\n  white-space: pre-line; }\n";});;
define('text!modules/config-panel/config-panel.html',[],function(){return "<template>\n  <require from=\"./config-panel.css\"></require>\n  <div class=\"config-panel\">\n    <div class=\"config-panel__title\">\n      <h1>Settings</h1>\n    </div>\n    <div class=\"config-panel__card card\">\n      <div class=\"card-header\">\n        Authority\n      </div>\n      <div class=\"card-body\">\n        <input value.bind=\"authority\" class.bind=\"uriIsValid ? '' : 'uri-input--invalid'\" type=\"text\" class=\"form-control\" id=\"authority\">\n        <div class=\"config-panel__card__alert alert alert-danger\" if.bind=\"!uriIsValid\" role=\"alert\">\n          <div class=\"config-panel__invalid-uri-message\"><i class=\"fas fa-exclamation-triangle\" aria-hidden=\"true\"></i> The entered authority must be a valid uri.\n            To make it valid make sure:\n            - it begins with \"http://\" or \"https://\" and\n            - only contains the following characters: a-Z 0-9 - . _ ~ : / ? # [ ] @ ! $ & ' ( ) * + , ; = .\n          </div>\n        </div>\n      </div>\n    </div>\n    <button class=\"btn btn-default\" click.delegate=\"cancelUpdate()\">Cancel</button>\n    <button class=\"btn btn-primary\" click.delegate=\"updateSettings()\" disabled.bind=\"!uriIsValid || uriIsEmpty\">Save</button>\n  </div>\n  <modal show.bind=\"showRestartModal\"\n         header-text=\"BPMN Studio needs to restart\">\n    <template replace-part=\"modal-body\">\n      A restart is required in order to apply the changes.\n    </template>\n    <template replace-part=\"modal-footer\">\n      <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" click.delegate=\"restartLater()\">Restart later (manually)</button>\n      <button type=\"button\" class=\"btn btn-primary\" data-dismiss=\"modal\" click.delegate=\"restartNow()\">Restart now</button>\n    </template>\n  </modal>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
define('modules/confirm-widget/confirm-widget',["require", "exports", "aurelia-framework", "@process-engine/management_api_contracts", "../../contracts/index", "../../services/notification-service/notification.service"], function (require, exports, aurelia_framework_1, management_api_contracts_1, index_1, notification_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ConfirmWidget = (function () {
        function ConfirmWidget(notificationService) {
            this.notificationService = notificationService;
        }
        ConfirmWidget.prototype.attached = function () {
            var firstBooleanFormField = this.getFirstBooleanFormField();
            var userTaskHasNoBooleanFormField = firstBooleanFormField === undefined;
            if (userTaskHasNoBooleanFormField) {
                var errorMessage = 'Confirm UserTasks must have a form field of type boolean that should get confirmed.';
                this.notificationService.showNotification(index_1.NotificationType.ERROR, errorMessage);
            }
            this.confirmMessage = firstBooleanFormField.label;
            this.formFields = this.getAllOtherFormFields(firstBooleanFormField);
        };
        ConfirmWidget.prototype.getFieldControl = function (field) {
            switch (field.type) {
                case management_api_contracts_1.DataModels.UserTasks.UserTaskFormFieldType.enum:
                    return 'dropdown';
                case management_api_contracts_1.DataModels.UserTasks.UserTaskFormFieldType.string:
                    return 'textbox';
                case management_api_contracts_1.DataModels.UserTasks.UserTaskFormFieldType.boolean:
                    return 'checkbox';
                case management_api_contracts_1.DataModels.UserTasks.UserTaskFormFieldType.long:
                    return 'number';
                default: {
                    var notSupportedType = field.type !== undefined ? field.type : 'Custom Type';
                    var errorMessage = "Not supported form field type: " + notSupportedType + "." +
                        ("</br>Please change the form field type with id \"" + field.id + "\".");
                    this.notificationService.showNotification(index_1.NotificationType.ERROR, errorMessage);
                    return null;
                }
            }
        };
        ConfirmWidget.prototype.getAllOtherFormFields = function (formField) {
            var booleanFormFieldIndex = this.userTaskConfig.formFields.indexOf(formField);
            var otherFormFields = this.userTaskConfig.formFields.slice();
            otherFormFields.splice(booleanFormFieldIndex, 1);
            return otherFormFields;
        };
        ConfirmWidget.prototype.getFirstBooleanFormField = function () {
            var formFields = this.userTaskConfig.formFields;
            return formFields.find(function (formField) {
                return formField.type === management_api_contracts_1.DataModels.UserTasks.UserTaskFormFieldType.boolean;
            });
        };
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", management_api_contracts_1.DataModels.UserTasks.UserTaskConfig)
        ], ConfirmWidget.prototype, "userTaskConfig", void 0);
        ConfirmWidget = __decorate([
            aurelia_framework_1.inject('NotificationService'),
            __metadata("design:paramtypes", [notification_service_1.NotificationService])
        ], ConfirmWidget);
        return ConfirmWidget;
    }());
    exports.ConfirmWidget = ConfirmWidget;
});


;
define('text!modules/confirm-widget/confirm-widget.css',[],function(){return ".confirm-widget-confirm-message {\n  margin-top: 50px; }\n";});;
define('text!modules/confirm-widget/confirm-widget.html',[],function(){return "<template>\n  <require from=\"./confirm-widget.css\"></require>\n  <template if.bind=\"userTaskConfig\">\n    <template repeat.for=\"field of formFields\">\n      <compose view-model=\"../dynamic-ui-${getFieldControl(field)}-element/dynamic-ui-${getFieldControl(field)}-element\" model.bind=\"field\"></compose>\n    </template>\n  </template>\n  <p class=\"confirm-widget-confirm-message\">${confirmMessage}</p>\n</template>\n";});;
define('text!modules/custom_elements/modal/modal.css',[],function(){return ".modal-backdrop {\n  opacity: 0.3 !important; }\n\n.show-modal {\n  display: block !important; }\n\n.modal-style {\n  top: 20%; }\n\n.modal-content {\n  width: 100%;\n  height: 100%;\n  max-height: 100%; }\n";});;
define('text!modules/custom_elements/modal/modal.html',[],function(){return "<template bindable=\"modalStyle,contentStyle,headerStyle,bodyStyle,footerStyle,headerText,bodyText,footerText,origin\">\n  <require from=\"./modal.css\"></require>\n\n  <div class=\"modal show show-modal\" tabindex=\"-1\" role=\"dialog\">\n    <div class=\"modal-dialog modal-style\" style.bind=\"modalStyle\" role=\"document\">\n      <div class=\"modal-content\" style.bind=\"contentStyle\">\n        <div class=\"modal-header\" style.bind=\"headerStyle\">\n          <template replaceable part=\"modal-header\">\n            <h3>\n              ${headerText}\n            </h3>\n          </template>\n        </div>\n        <div class=\"modal-body\" style.bind=\"bodyStyle\">\n          <template replaceable part=\"modal-body\">\n            ${bodyText}\n          </template>\n        </div>\n        <div class=\"modal-footer\" style.bind=\"footerStyle\">\n          <template replaceable part=\"modal-footer\">\n            ${footerText}\n          </template>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"modal-backdrop fade in\"></div>\n\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/deploy-modals/deploy-modals',["require", "exports", "aurelia-framework", "aurelia-event-aggregator", "../../environment", "../../services/solution-service/solution.service"], function (require, exports, aurelia_framework_1, aurelia_event_aggregator_1, environment_1, solution_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var DeployModals = (function () {
        function DeployModals(eventAggregator, solutionService) {
            this.showRemoteSolutionOnDeployModal = false;
            this.showOverwriteDiagramModal = false;
            this.eventAggregator = eventAggregator;
            this.solutionService = solutionService;
        }
        DeployModals.prototype.attached = function () {
            var _this = this;
            this.subscriptions = [
                this.eventAggregator.subscribe(environment_1.default.events.deployModals.showRemoteSolutionSelectionModal, function (callback) {
                    _this.handleRemoteSolutionSelection(callback);
                }),
                this.eventAggregator.subscribe(environment_1.default.events.deployModals.showOverwriteDiagramModal, function (callback) {
                    _this.handleOverwriting(callback);
                }),
            ];
        };
        DeployModals.prototype.detached = function () {
            this.subscriptions.forEach(function (subscription) {
                subscription.dispose();
            });
        };
        DeployModals.prototype.handleRemoteSolutionSelection = function (callback) {
            var _this = this;
            this.updateRemoteSolutions();
            this.showRemoteSolutionOnDeployModal = true;
            this.cancelMultipleRemoteSolutionModal = function () {
                _this.showRemoteSolutionOnDeployModal = false;
                callback();
            };
            this.selectRemoteSolution = function (remoteSolution) {
                _this.showRemoteSolutionOnDeployModal = false;
                callback(remoteSolution);
            };
        };
        DeployModals.prototype.handleOverwriting = function (callback) {
            var _this = this;
            this.showOverwriteDiagramModal = true;
            this.cancelOverwriteModal = function () {
                _this.showOverwriteDiagramModal = false;
                callback(false);
            };
            this.overwriteDiagram = function () {
                _this.showOverwriteDiagramModal = false;
                callback(true);
            };
        };
        DeployModals.prototype.updateRemoteSolutions = function () {
            this.remoteSolutions = this.solutionService.getRemoteSolutionEntries();
        };
        DeployModals = __decorate([
            aurelia_framework_1.inject(aurelia_event_aggregator_1.EventAggregator, 'SolutionService'),
            __metadata("design:paramtypes", [aurelia_event_aggregator_1.EventAggregator, solution_service_1.SolutionService])
        ], DeployModals);
        return DeployModals;
    }());
    exports.DeployModals = DeployModals;
});


;
define('text!modules/deploy-modals/deploy-modals.css',[],function(){return "";});;
define('text!modules/deploy-modals/deploy-modals.html',[],function(){return "<template>\n  <require from='./deploy-modals.css'></require>\n\n  <modal if.bind=\"showRemoteSolutionOnDeployModal\"\n         header-text=\"Multiple Connected ProcessEngines Found\">\n    <template replace-part=\"modal-body\">\n      Choose the remote ProcessEngine to which to deploy the diagram.\n      <select class=\"form-control\" value.bind=\"selectedRemoteSolution\">\n        <option repeat.for=\"entry of remoteSolutions\" model.bind=\"entry\">${entry.uri}</option>\n      </select>\n    </template>\n\n    <template replace-part=\"modal-footer\">\n      <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" click.delegate=\"cancelMultipleRemoteSolutionModal()\">Cancel</button>\n      <button type=\"button\" class=\"btn btn-primary\" data-dismiss=\"modal\" click.delegate=\"selectRemoteSolution(selectedRemoteSolution)\">Deploy Process</button>\n    </template>\n  </modal>\n\n\n  <modal show.bind=\"showOverwriteDiagramModal\"\n         header-text=\"Warning: Diagram already exists!\">\n    <template replace-part=\"modal-body\">\n      The target solution already contains a diagram with that name and ID.<br>\n      Are you sure you want to overwrite the deployed diagram with your local version?\n    </template>\n    <template replace-part=\"modal-footer\">\n      <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" click.delegate=\"cancelOverwriteModal()\">Cancel</button>\n      <button type=\"button\" class=\"btn btn-primary\" data-dismiss=\"modal\" click.delegate=\"overwriteDiagram()\">Deploy</button>\n    </template>\n  </modal>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/design/bpmn-diff-view/bpmn-diff-view',["require", "exports", "aurelia-dependency-injection", "aurelia-event-aggregator", "aurelia-framework", "@process-engine/bpmn-js-custom-bundle", "bpmn-js-differ", "../../../contracts/index", "../../../environment", "../../../services/elementname-service/elementname.service", "../../../services/notification-service/notification.service", "../../../services/solution-service/solution.service"], function (require, exports, aurelia_dependency_injection_1, aurelia_event_aggregator_1, aurelia_framework_1, bundle, bpmn_js_differ_1, index_1, environment_1, elementname_service_1, notification_service_1, solution_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    bundle = __importStar(bundle);
    environment_1 = __importDefault(environment_1);
    var BpmnDiffView = (function () {
        function BpmnDiffView(notificationService, eventAggregator, solutionService) {
            this.currentDiffMode = index_1.DiffMode.NewVsOld;
            this.noChangesExisting = true;
            this.changeListData = {
                removed: [],
                changed: [],
                added: [],
                layoutChanged: [],
            };
            this.showSavedXml = true;
            this.diffDestination = 'lastSaved';
            this.notificationService = notificationService;
            this.eventAggregator = eventAggregator;
            this.elementNameService = new elementname_service_1.ElementNameService();
            this.solutionService = solutionService;
        }
        BpmnDiffView.prototype.created = function () {
            this.leftViewer = this.createNewViewer();
            this.rightViewer = this.createNewViewer();
            this.lowerViewer = this.createNewViewer();
            this.diffModeler = new bundle.modeler();
            this.previousXmlModeler = new bundle.modeler();
            this.currentXmlModeler = new bundle.modeler();
            this.modeling = this.diffModeler.get('modeling');
            this.elementRegistry = this.diffModeler.get('elementRegistry');
            this.startSynchronizingViewers();
        };
        BpmnDiffView.prototype.attached = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    this.leftViewer.attachTo(this.leftCanvasModel);
                    this.rightViewer.attachTo(this.rightCanvasModel);
                    this.lowerViewer.attachTo(this.lowerCanvasModel);
                    this.syncAllViewers();
                    this.subscriptions = [
                        this.eventAggregator.subscribe(environment_1.default.events.diffView.changeDiffMode, function (diffMode) {
                            _this.currentDiffMode = diffMode;
                            _this.updateDiffView();
                        }),
                        this.eventAggregator.subscribe(environment_1.default.events.diffView.toggleChangeList, function () {
                            _this.showChangeList = !_this.showChangeList;
                        }),
                        this.eventAggregator.subscribe(environment_1.default.events.diffView.setDiffDestination, function (data) { return __awaiter(_this, void 0, void 0, function () {
                            var diffLastSavedXml, updatingDeployedXmlWasSuccessful, diagramNameIsSet;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        this.diffDestination = data[0], this.diagramName = data[1];
                                        diffLastSavedXml = this.diffDestination === 'lastSaved';
                                        if (!diffLastSavedXml) return [3, 1];
                                        this.setSavedProcessModelAsPreviousXml();
                                        return [3, 3];
                                    case 1: return [4, this.updateDeployedXml()];
                                    case 2:
                                        updatingDeployedXmlWasSuccessful = _a.sent();
                                        diagramNameIsSet = this.diagramName !== undefined;
                                        if (updatingDeployedXmlWasSuccessful && diagramNameIsSet) {
                                            this.setCustomProcessModelAsPreviousXml();
                                            return [2];
                                        }
                                        if (updatingDeployedXmlWasSuccessful) {
                                            this.setDeployedProcessModelAsPreviousXml();
                                        }
                                        _a.label = 3;
                                    case 3: return [2];
                                }
                            });
                        }); }),
                    ];
                    return [2];
                });
            });
        };
        BpmnDiffView.prototype.detached = function () {
            for (var _i = 0, _a = this.subscriptions; _i < _a.length; _i++) {
                var subscription = _a[_i];
                subscription.dispose();
            }
        };
        BpmnDiffView.prototype.savedXmlChanged = function () {
            if (this.showSavedXml) {
                this.setSavedProcessModelAsPreviousXml();
            }
        };
        BpmnDiffView.prototype.processModelIdChanged = function () {
            return __awaiter(this, void 0, void 0, function () {
                var hasNoProcessModelId, updatingDeploydedXmlWasSuccessfull;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            hasNoProcessModelId = this.processModelId === undefined;
                            if (hasNoProcessModelId) {
                                this.deployedXml = undefined;
                                return [2];
                            }
                            return [4, this.updateDeployedXml()];
                        case 1:
                            updatingDeploydedXmlWasSuccessfull = _a.sent();
                            if (updatingDeploydedXmlWasSuccessfull) {
                                return [2];
                            }
                            this.diffDestination = 'lastSaved';
                            this.setSavedProcessModelAsPreviousXml();
                            return [2];
                    }
                });
            });
        };
        BpmnDiffView.prototype.deployedXmlChanged = function () {
            var processModelIsDeployed = this.deployedXml !== undefined;
            this.eventAggregator.publish(environment_1.default.events.bpmnio.showDiffDestinationButton, processModelIsDeployed);
        };
        BpmnDiffView.prototype.unconvertedPreviousXmlChanged = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4, this.importXml(this.unconvertedPreviousXml, this.previousXmlModeler)];
                        case 1:
                            _b.sent();
                            _a = this;
                            return [4, this.exportXml(this.previousXmlModeler)];
                        case 2:
                            _a.previousXml = _b.sent();
                            this.importXml(this.previousXml, this.rightViewer);
                            return [4, this.updateXmlChanges()];
                        case 3:
                            _b.sent();
                            this.updateDiffView();
                            return [2];
                    }
                });
            });
        };
        BpmnDiffView.prototype.unconvertedCurrentXmlChanged = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4, this.importXml(this.unconvertedCurrentXml, this.currentXmlModeler)];
                        case 1:
                            _b.sent();
                            _a = this;
                            return [4, this.exportXml(this.currentXmlModeler)];
                        case 2:
                            _a.currentXml = _b.sent();
                            this.importXml(this.currentXml, this.leftViewer);
                            return [4, this.updateXmlChanges()];
                        case 3:
                            _b.sent();
                            this.updateDiffView();
                            return [2];
                    }
                });
            });
        };
        BpmnDiffView.prototype.togglePreviousXml = function () {
            this.showSavedXml = !this.showSavedXml;
            if (this.showSavedXml) {
                this.setSavedProcessModelAsPreviousXml();
            }
            else {
                this.setDeployedProcessModelAsPreviousXml();
            }
        };
        Object.defineProperty(BpmnDiffView.prototype, "diffModeIsNewVsOld", {
            get: function () {
                return this.currentDiffMode === index_1.DiffMode.NewVsOld;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BpmnDiffView.prototype, "diffModeIsOldVsNew", {
            get: function () {
                return this.currentDiffMode === index_1.DiffMode.OldVsNew;
            },
            enumerable: true,
            configurable: true
        });
        BpmnDiffView.prototype.syncAllViewers = function () {
            var lowerCanvas = this.lowerViewer.get('canvas');
            var leftCanvas = this.leftViewer.get('canvas');
            var rightCanvas = this.rightViewer.get('canvas');
            var changedViewbox = lowerCanvas.viewbox();
            leftCanvas.viewbox(changedViewbox);
            rightCanvas.viewbox(changedViewbox);
        };
        BpmnDiffView.prototype.setDeployedProcessModelAsPreviousXml = function () {
            this.unconvertedPreviousXml = this.deployedXml;
            this.previousXmlIdentifier = 'Deployed';
            this.currentXmlIdentifier = 'Filesystem';
            this.eventAggregator.publish(environment_1.default.events.statusBar.setXmlIdentifier, [
                this.previousXmlIdentifier,
                this.currentXmlIdentifier,
            ]);
        };
        BpmnDiffView.prototype.setCustomProcessModelAsPreviousXml = function () {
            this.unconvertedPreviousXml = this.deployedXml;
            this.previousXmlIdentifier = this.diagramName;
            this.currentXmlIdentifier = this.processModelId;
            this.eventAggregator.publish(environment_1.default.events.statusBar.setXmlIdentifier, [
                this.previousXmlIdentifier,
                this.currentXmlIdentifier,
            ]);
            this.diagramName = undefined;
        };
        BpmnDiffView.prototype.setSavedProcessModelAsPreviousXml = function () {
            this.unconvertedPreviousXml = this.savedXml;
            this.previousXmlIdentifier = 'Old';
            this.currentXmlIdentifier = 'New';
            this.eventAggregator.publish(environment_1.default.events.statusBar.setXmlIdentifier, [
                this.previousXmlIdentifier,
                this.currentXmlIdentifier,
            ]);
        };
        BpmnDiffView.prototype.updateDeployedXml = function () {
            return __awaiter(this, void 0, void 0, function () {
                var activeSolutionEntry, activeSolutionEntryNotFound, diagramName, getXmlFromDeployed, _a, diagramIsNotDeployed, diffingAgainstDeployed, errorMessage;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            activeSolutionEntry = this.solutionService.getSolutionEntryForUri(this.diffDestination);
                            activeSolutionEntryNotFound = activeSolutionEntry === undefined;
                            if (activeSolutionEntryNotFound) {
                                return [2, false];
                            }
                            diagramName = this.diagramName ? this.diagramName : this.processModelId;
                            getXmlFromDeployed = function () { return __awaiter(_this, void 0, void 0, function () {
                                var diagram, diagramFound, _a;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            _b.trys.push([0, 2, , 3]);
                                            return [4, activeSolutionEntry.service.loadDiagram(diagramName)];
                                        case 1:
                                            diagram = _b.sent();
                                            diagramFound = diagram !== undefined;
                                            return [2, diagramFound ? diagram.xml : undefined];
                                        case 2:
                                            _a = _b.sent();
                                            return [2, undefined];
                                        case 3: return [2];
                                    }
                                });
                            }); };
                            _a = this;
                            return [4, getXmlFromDeployed()];
                        case 1:
                            _a.deployedXml = _b.sent();
                            diagramIsNotDeployed = this.deployedXml === undefined;
                            diffingAgainstDeployed = this.diffDestination !== 'lastSaved';
                            if (diagramIsNotDeployed && diffingAgainstDeployed) {
                                errorMessage = 'Could not diff against the deployed version: This diagram is not deployed to the ProcessEngine.';
                                this.notificationService.showNotification(index_1.NotificationType.ERROR, errorMessage);
                                return [2, false];
                            }
                            return [2, true];
                    }
                });
            });
        };
        BpmnDiffView.prototype.updateXmlChanges = function () {
            return __awaiter(this, void 0, void 0, function () {
                var previousXmlIsNotDefined, previousDefinitions, newDefinitions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            previousXmlIsNotDefined = this.previousXml === undefined;
                            if (previousXmlIsNotDefined) {
                                this.previousXml = this.currentXml;
                            }
                            return [4, this.getDefintionsFromXml(this.previousXml)];
                        case 1:
                            previousDefinitions = _a.sent();
                            return [4, this.getDefintionsFromXml(this.currentXml)];
                        case 2:
                            newDefinitions = _a.sent();
                            this.xmlChanges = bpmn_js_differ_1.diff(previousDefinitions, newDefinitions);
                            this.prepareChangesForChangeList();
                            return [2];
                    }
                });
            });
        };
        BpmnDiffView.prototype.getDefintionsFromXml = function (xml) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2, new Promise(function (resolve, reject) {
                            var moddle = _this.diffModeler.get('moddle');
                            moddle.fromXML(xml, function (error, definitions) {
                                if (error) {
                                    reject(error);
                                }
                                resolve(definitions);
                            });
                        })];
                });
            });
        };
        BpmnDiffView.prototype.getChangeListEntriesFromChanges = function (elementChanges) {
            var changeListEntries = [];
            var elementIds = Object.keys(elementChanges);
            for (var _i = 0, elementIds_1 = elementIds; _i < elementIds_1.length; _i++) {
                var elementId = elementIds_1[_i];
                var elementChange = elementChanges[elementId];
                var isElementAChangedElement = elementChange.$type === undefined;
                var changeListEntry = isElementAChangedElement
                    ? this.createChangeListEntry(elementChange.model.name, elementChange.model.$type)
                    : this.createChangeListEntry(elementChange.name, elementChange.$type);
                changeListEntries.push(changeListEntry);
            }
            return changeListEntries;
        };
        BpmnDiffView.prototype.prepareChangesForChangeList = function () {
            this.changeListData.removed = [];
            this.changeListData.changed = [];
            this.changeListData.added = [];
            this.changeListData.layoutChanged = [];
            var changedElement = this.removeElementsWithoutChanges(this.xmlChanges._changed);
            this.changeListData.removed = this.getChangeListEntriesFromChanges(this.xmlChanges._removed);
            this.changeListData.changed = this.getChangeListEntriesFromChanges(changedElement);
            this.changeListData.added = this.getChangeListEntriesFromChanges(this.xmlChanges._added);
            this.changeListData.layoutChanged = this.getChangeListEntriesFromChanges(this.xmlChanges._layoutChanged);
            this.totalAmountOfChange =
                this.changeListData.removed.length +
                    this.changeListData.changed.length +
                    this.changeListData.added.length +
                    this.changeListData.layoutChanged.length;
            this.noChangesExisting = this.totalAmountOfChange === 0;
            if (this.noChangesExisting) {
                this.setNoChangesReason();
            }
            else {
                this.noChangesReason = '';
            }
        };
        BpmnDiffView.prototype.setNoChangesReason = function () {
            var whitespaceAndNewLineRegex = /\r?\n|\r|\s/g;
            var unformattedXml = this.currentXml.replace(whitespaceAndNewLineRegex, '');
            var unformattedSaveXml = this.previousXml.replace(whitespaceAndNewLineRegex, '');
            var diagramIsUnchanged = unformattedSaveXml === unformattedXml;
            if (diagramIsUnchanged) {
                this.noChangesReason = 'The two diagrams are identical.';
            }
            else {
                this.noChangesReason = 'The two diagrams are incomparable.';
            }
        };
        BpmnDiffView.prototype.createChangeListEntry = function (elementName, elementType) {
            var humanReadableElementName = this.elementNameService.getHumanReadableName(elementName);
            var humanReadableElementType = this.elementNameService.getHumanReadableType(elementType);
            var changeListEntry = {
                name: humanReadableElementName,
                type: humanReadableElementType,
            };
            return changeListEntry;
        };
        BpmnDiffView.prototype.startSynchronizingViewers = function () {
            var lowerCanvas = this.lowerViewer.get('canvas');
            var leftCanvas = this.leftViewer.get('canvas');
            var rightCanvas = this.rightViewer.get('canvas');
            this.setEventFunctions(lowerCanvas, leftCanvas, rightCanvas);
            this.setEventFunctions(leftCanvas, rightCanvas, lowerCanvas);
            this.setEventFunctions(rightCanvas, lowerCanvas, leftCanvas);
        };
        BpmnDiffView.prototype.setEventFunctions = function (changingCanvas, firstCanvas, secondCanvas) {
            var changingCanvasContainer = changingCanvas._container;
            var adjustViewboxes = function () {
                var changedViewbox = changingCanvas.viewbox();
                firstCanvas.viewbox(changedViewbox);
                secondCanvas.viewbox(changedViewbox);
            };
            var startCheckingForMouseMovement = function () {
                window.onmousemove = adjustViewboxes;
            };
            var stopCheckingForMousemovement = function () {
                window.onmousemove = null;
            };
            changingCanvasContainer.onwheel = adjustViewboxes;
            changingCanvasContainer.onmousedown = startCheckingForMouseMovement;
            changingCanvasContainer.onmouseup = stopCheckingForMousemovement;
        };
        BpmnDiffView.prototype.markAddedElements = function (addedElements) {
            var elementsToBeColored = this.getElementsToBeColored(addedElements);
            this.colorizeElements(elementsToBeColored, index_1.defaultBpmnColors.green);
        };
        BpmnDiffView.prototype.markRemovedElements = function (deletedElements) {
            var elementsToBeColored = this.getElementsToBeColored(deletedElements);
            this.colorizeElements(elementsToBeColored, index_1.defaultBpmnColors.red);
        };
        BpmnDiffView.prototype.markElementsWithLayoutChanges = function (elementsWithLayoutChanges) {
            var elementsToBeColored = this.getElementsToBeColored(elementsWithLayoutChanges);
            this.colorizeElements(elementsToBeColored, index_1.defaultBpmnColors.purple);
        };
        BpmnDiffView.prototype.markChangedElements = function (changedElements) {
            var changedElementsWithChanges = this.removeElementsWithoutChanges(changedElements);
            var elementsToBeColored = this.getChangedElementsToBeColored(changedElementsWithChanges);
            this.colorizeElements(elementsToBeColored, index_1.defaultBpmnColors.orange);
        };
        BpmnDiffView.prototype.removeElementsWithoutChanges = function (changedElements) {
            var copyOfChangedElements = Object.assign({}, changedElements);
            Object.keys(copyOfChangedElements).forEach(function (element) {
                var currentElementHasNoChanges = Object.keys(copyOfChangedElements[element].attrs).length === 0;
                if (currentElementHasNoChanges) {
                    delete copyOfChangedElements[element];
                }
            });
            return copyOfChangedElements;
        };
        BpmnDiffView.prototype.updateDiffView = function () {
            if (this.diffModeIsNewVsOld) {
                this.updateLowerDiff(this.currentXml);
            }
            else if (this.diffModeIsOldVsNew) {
                this.updateLowerDiff(this.previousXml);
            }
        };
        BpmnDiffView.prototype.updateLowerDiff = function (xml) {
            return __awaiter(this, void 0, void 0, function () {
                var xmlIsNotLoaded, notificationMessage, addedElements, removedElements, changedElements, layoutChangedElements, diffModeIsCurrentVsPrevious, coloredXml;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            xmlIsNotLoaded = xml === undefined || xml === null;
                            if (xmlIsNotLoaded) {
                                notificationMessage = 'The xml could not be loaded. Please try to reopen the Diff View or reload the Detail View.';
                                this.notificationService.showNotification(index_1.NotificationType.ERROR, notificationMessage);
                                return [2];
                            }
                            addedElements = this.xmlChanges._added;
                            removedElements = this.xmlChanges._removed;
                            changedElements = this.xmlChanges._changed;
                            layoutChangedElements = this.xmlChanges._layoutChanged;
                            diffModeIsCurrentVsPrevious = this.currentDiffMode === index_1.DiffMode.NewVsOld;
                            return [4, this.importXml(xml, this.diffModeler)];
                        case 1:
                            _a.sent();
                            this.clearColors();
                            this.markElementsWithLayoutChanges(layoutChangedElements);
                            this.markChangedElements(changedElements);
                            if (diffModeIsCurrentVsPrevious) {
                                this.markAddedElements(addedElements);
                            }
                            else {
                                this.markRemovedElements(removedElements);
                            }
                            return [4, this.exportXml(this.diffModeler)];
                        case 2:
                            coloredXml = _a.sent();
                            return [4, this.importXml(coloredXml, this.lowerViewer)];
                        case 3:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        BpmnDiffView.prototype.importXml = function (xml, viewer) {
            return __awaiter(this, void 0, void 0, function () {
                var xmlIsNotLoaded, notificationMessage, xmlImportPromise;
                var _this = this;
                return __generator(this, function (_a) {
                    xmlIsNotLoaded = xml === undefined || xml === null;
                    if (xmlIsNotLoaded) {
                        notificationMessage = 'The xml could not be loaded. Please try to reopen the Diff View or reload the Detail View.';
                        this.notificationService.showNotification(index_1.NotificationType.ERROR, notificationMessage);
                        return [2, undefined];
                    }
                    xmlImportPromise = new Promise(function (resolve, reject) {
                        viewer.importXML(xml, function (importXmlError) {
                            if (importXmlError) {
                                reject(importXmlError);
                                return;
                            }
                            _this.fitDiagramToViewport(viewer);
                            resolve();
                        });
                    });
                    return [2, xmlImportPromise];
                });
            });
        };
        BpmnDiffView.prototype.fitDiagramToViewport = function (viewer) {
            var canvas = viewer.get('canvas');
            var viewbox = canvas.viewbox();
            var diagramIsVisible = viewbox.height > 0 && viewbox.width > 0;
            if (diagramIsVisible) {
                canvas.zoom('fit-viewport', 'auto');
            }
        };
        BpmnDiffView.prototype.exportXml = function (modeler) {
            return __awaiter(this, void 0, void 0, function () {
                var exportXmlPromise;
                var _this = this;
                return __generator(this, function (_a) {
                    exportXmlPromise = new Promise(function (resolve, reject) {
                        var xmlSaveOptions = {
                            format: true,
                        };
                        modeler.saveXML(xmlSaveOptions, function (saveXmlError, xml) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                if (saveXmlError) {
                                    reject(saveXmlError);
                                    return [2];
                                }
                                resolve(xml);
                                return [2];
                            });
                        }); });
                    });
                    return [2, exportXmlPromise];
                });
            });
        };
        BpmnDiffView.prototype.createNewViewer = function () {
            return new bundle.viewer({
                additionalModules: [bundle.ZoomScrollModule, bundle.MoveCanvasModule],
            });
        };
        BpmnDiffView.prototype.getChangedElementsToBeColored = function (changedElementList) {
            var _this = this;
            return Object.values(changedElementList)
                .filter(function (element) {
                return element.model.$type !== 'bpmn:Collaboration' && element.model.$type !== 'bpmn:Process';
            })
                .map(function (element) {
                var currentElement = _this.elementRegistry.get(element.model.id);
                return currentElement;
            });
        };
        BpmnDiffView.prototype.getElementsToBeColored = function (elements) {
            var _this = this;
            return Object.values(elements)
                .filter(function (element) {
                return element.$type !== 'bpmn:Collaboration' && element.$type !== 'bpmn:Process';
            })
                .map(function (element) {
                var currentElement = _this.elementRegistry.get(element.id);
                return currentElement;
            });
        };
        BpmnDiffView.prototype.clearColors = function () {
            var elementsToBeColored = this.elementRegistry.filter(function (element) {
                var elementHasFillColor = element.businessObject.di.fill !== undefined;
                var elementHasBorderColor = element.businessObject.di.stroke !== undefined;
                var elementHasColor = elementHasFillColor || elementHasBorderColor;
                return elementHasColor;
            });
            this.colorizeElements(elementsToBeColored, index_1.defaultBpmnColors.none);
        };
        BpmnDiffView.prototype.colorizeElements = function (elementsToBeColored, color) {
            var noElementsToBeColored = elementsToBeColored.length === 0;
            if (noElementsToBeColored) {
                return;
            }
            this.modeling.setColor(elementsToBeColored, {
                stroke: color.border,
                fill: color.fill,
            });
        };
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", String)
        ], BpmnDiffView.prototype, "unconvertedPreviousXml", void 0);
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", String)
        ], BpmnDiffView.prototype, "unconvertedCurrentXml", void 0);
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", String)
        ], BpmnDiffView.prototype, "savedXml", void 0);
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", String)
        ], BpmnDiffView.prototype, "processModelId", void 0);
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", String)
        ], BpmnDiffView.prototype, "deployedXml", void 0);
        __decorate([
            aurelia_framework_1.computedFrom('currentDiffMode'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [])
        ], BpmnDiffView.prototype, "diffModeIsNewVsOld", null);
        __decorate([
            aurelia_framework_1.computedFrom('currentDiffMode'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [])
        ], BpmnDiffView.prototype, "diffModeIsOldVsNew", null);
        BpmnDiffView = __decorate([
            aurelia_dependency_injection_1.inject('NotificationService', aurelia_event_aggregator_1.EventAggregator, 'SolutionService'),
            __metadata("design:paramtypes", [notification_service_1.NotificationService,
                aurelia_event_aggregator_1.EventAggregator,
                solution_service_1.SolutionService])
        ], BpmnDiffView);
        return BpmnDiffView;
    }());
    exports.BpmnDiffView = BpmnDiffView;
});


;
define('text!modules/design/bpmn-diff-view/bpmn-diff-view.css',[],function(){return ".diff-view {\n  height: 100%;\n  width: 100%;\n  background: white;\n  bottom: 0; }\n\n.left-diff-view {\n  position: relative;\n  float: left;\n  width: 50%;\n  height: 33%; }\n\n.right-diff-view {\n  position: relative;\n  width: 50%;\n  height: 33%;\n  overflow: hidden; }\n\n.lower-diff-view {\n  position: relative;\n  display: inline-flex;\n  width: 100%;\n  height: 67%; }\n\n.left-diff-view__canvasModel {\n  width: 100%;\n  height: 100%;\n  border-bottom: 4px dashed #ccc; }\n\n.right-diff-view__canvasModel {\n  width: 100%;\n  height: 100%;\n  border-left: 4px dashed #ccc;\n  border-bottom: 4px dashed #ccc; }\n\n.lower-diff-view__canvasModel {\n  width: 100%;\n  height: 100%;\n  flex: 2; }\n\n.diff-canvas-title {\n  position: absolute;\n  bottom: 5px;\n  left: 10px;\n  background: rgba(255, 255, 255, 0.9);\n  border-radius: 2px;\n  font-size: 20px;\n  max-width: calc(100% - 80px);\n  white-space: nowrap; }\n\n.diff-button-hint {\n  position: fixed;\n  bottom: 22px;\n  left: calc(50% - 115px);\n  display: inline-flex;\n  width: 230px; }\n\n.diff-button-hint__text {\n  width: 156px;\n  font-weight: 500;\n  text-align: center; }\n\n.diff-legend {\n  position: absolute;\n  bottom: 35px;\n  left: 10px;\n  max-width: 140px;\n  background: whitesmoke;\n  user-select: none; }\n\n.diff-legend-entry {\n  display: block;\n  margin: 0 10px; }\n\n.diff-legend-entry-first {\n  margin-top: 10px;\n  margin-bottom: 2px;\n  font-size: 16px;\n  font-weight: bold; }\n\n.diff-legend-entry-last {\n  margin-bottom: 10px; }\n\n.diff-change-list {\n  position: relative;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  width: 100%;\n  height: 99%;\n  min-width: calc(44% + 2px);\n  background: white;\n  border-left: 4px dashed #ccc;\n  z-index: 1; }\n\n.no-change-message {\n  position: absolute;\n  margin-left: 10px;\n  margin-top: 10px;\n  font-size: 20px;\n  font-weight: bold; }\n\n.change-list-table {\n  width: 100%;\n  margin: 10px; }\n\n.change-list-table__entry {\n  height: 35px;\n  padding-right: 10px;\n  max-width: 164px;\n  overflow: hidden;\n  text-overflow: ellipsis; }\n\n.change-list-table-wrapper {\n  flex: 1;\n  width: 100%;\n  overflow-x: hidden;\n  overflow-y: auto; }\n\n.diff-summary {\n  width: 100%;\n  min-height: 18px;\n  text-align: center;\n  border-top: 4px dashed #ccc; }\n\n.diff-summary__change-type {\n  display: inline-block;\n  position: relative; }\n\n.diff-mode {\n  margin: 0;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  user-select: none; }\n\n.badge-red {\n  background-color: #E53935;\n  color: white; }\n\n.badge-orange {\n  background-color: #FB8C00;\n  color: white; }\n\n.badge-green {\n  background-color: #43A047;\n  color: white; }\n\n.badge-purple {\n  background-color: #8E24AA;\n  color: white; }\n";});;
define('text!modules/design/bpmn-diff-view/bpmn-diff-view.html',[],function(){return "<template>\n  <require from=\"@process-engine/bpmn-js-custom-bundle/bpmn-modeler-custom.css\"></require>\n  <require from=\"./bpmn-diff-view.css\"></require>\n  <div class=\"diff-view\">\n    <div class=\"left-diff-view\" data-test-left-diff-view>\n      <div ref=\"leftCanvasModel\" class=\"left-diff-view__canvasModel\"></div>\n      <span class=\"diff-canvas-title\">\n        <p class=\"diff-mode\">${currentXmlIdentifier}</p>\n      </span>\n    </div>\n    <div class=\"right-diff-view\" data-test-right-diff-view>\n      <div ref=\"rightCanvasModel\" class=\"right-diff-view__canvasModel\"></div>\n      <span class=\"diff-canvas-title\">\n        <p class=\"diff-mode\">${previousXmlIdentifier}</p>\n      </span>\n    </div>\n    <div class=\"lower-diff-view\" data-test-lower-diff-view>\n      <div ref=\"lowerCanvasModel\" class=\"lower-diff-view__canvasModel\"></div>\n      <div class=\"diff-legend\">\n        <span class=\"diff-legend-entry diff-legend-entry-first\">Legend:</span>\n        <span class=\"diff-legend-entry\"><i class=\"fas fa-stop green\"></i> Added</span>\n        <span class=\"diff-legend-entry\"><i class=\"fas fa-stop red\"></i>  Removed</span>\n        <span class=\"diff-legend-entry\"><i class=\"fas fa-stop orange\"></i> Changed</span>\n        <span class=\"diff-legend-entry diff-legend-entry-last\"><i class=\"fas fa-stop purple\"></i> Layout Changed</span>\n      </div>\n      <span if.bind=\"diffModeIsNewVsOld\" class=\"diff-canvas-title\">\n        <p class=\"diff-mode\" id=\"js-diff-identifier\">${currentXmlIdentifier} vs. ${previousXmlIdentifier}</p>\n      </span>\n      <span else class=\"diff-canvas-title\">\n        <p class=\"diff-mode\">${previousXmlIdentifier} vs. ${currentXmlIdentifier}</p>\n      </span>\n      <span class=\"diff-button-hint\" if.bind=\"currentDiffMode === undefined\">\n        <i class=\"fas fa-arrow-down fa-3x\"></i>\n        <span class=\"diff-button-hint__text\">Select diff mode</span>\n        <i class=\"fas fa-arrow-down fa-3x\"></i>\n      </span>\n      <div class=\"diff-change-list\" if.bind=\"showChangeList\" id=\"changesList\">\n        <span class=\"no-change-message\" if.bind=\"noChangesExisting\">${noChangesReason}</span>\n        <div class=\"change-list-table-wrapper\" if.bind=\"!noChangesExisting\">\n          <table class=\"change-list-table\">\n            <tr repeat.for=\"removedElement of changeListData.removed\">\n              <td class=\"change-list-table__entry\">\n                <span class=\"badge badge-red\">Removed</span> - ${removedElement.type}\n                <span if.bind=\"removedElement.name !== ''\">with the name ${removedElement.name}</span>\n              </td>\n            </tr>\n            <tr repeat.for=\"changedElement of changeListData.changed\">\n              <td class=\"change-list-table__entry\">\n                <span class=\"badge badge-orange\">Change</span> - ${changedElement.type}\n                <span if.bind=\"changedElement.name !== ''\">with the name ${changedElement.name}</span>\n              </td>\n            </tr>\n            <tr repeat.for=\"addedElement of changeListData.added\">\n              <td class=\"change-list-table__entry\">\n                <span class=\"badge badge-green\">Added</span> - ${addedElement.type}\n                <span if.bind=\"addedElement.name !== ''\">with the name ${addedElement.name}</span>\n              </td>\n            </tr>\n            <tr repeat.for=\"layoutChangedElement of changeListData.layoutChanged\">\n              <td class=\"change-list-table__entry\">\n                <span class=\"badge badge-purple\">Layout Changed</span> - ${layoutChangedElement.type}\n                <span if.bind=\"layoutChangedElement.name !== ''\">with the name ${layoutChangedElement.name}</span>\n              </td>\n            </tr>\n         </table>\n        </div>\n       <span class=\"diff-summary\" if.bind=\"!noChangesExisting\">\n         ${totalAmountOfChange} Total Differences:\n         <span class=\"diff-summary__change-type\" if.bind=\"changeListData.removed.length !== 0\">${changeListData.removed.length} Removed;</span>\n         <span class=\"diff-summary__change-type\" if.bind=\"changeListData.changed.length !== 0\">${changeListData.changed.length} Changed;</span>\n         <span class=\"diff-summary__change-type\" if.bind=\"changeListData.added.length !== 0\">${changeListData.added.length} Added;</span>\n         <span class=\"diff-summary__change-type\" if.bind=\"changeListData.layoutChanged.length !== 0\">${changeListData.layoutChanged.length} Layout Changed;</span>\n      </div>\n    </div>\n  </div>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/design/bpmn-io/bpmn-io',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "@process-engine/bpmn-js-custom-bundle", "@process-engine/bpmn-lint_rules", "../../../contracts/index", "../../../environment", "../../../services/notification-service/notification.service", "../../../services/solution-explorer-services/open-diagram-state.service", "../property-panel/property-panel", "./services/index", "../../../services/user-config-service/user-config.service", "../../../services/solution-is-remote-solution-module/solution-is-remote-solution.module", "../../../services/is-running-in-electron-module/is-running-in-electron.module"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, bundle, bpmnlintConfig, index_1, environment_1, notification_service_1, open_diagram_state_service_1, property_panel_1, index_2, user_config_service_1, solution_is_remote_solution_module_1, is_running_in_electron_module_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    bundle = __importStar(bundle);
    bpmnlintConfig = __importStar(bpmnlintConfig);
    environment_1 = __importDefault(environment_1);
    var sideBarRightSize = 35;
    var BpmnIo = (function () {
        function BpmnIo(notificationService, eventAggregator, openDiagramStateService, solutionService, userConfigService) {
            var _this = this;
            this.solutionIsRemote = false;
            this.showPropertyPanel = false;
            this.colorPickerLoaded = false;
            this.minCanvasWidth = 100;
            this.minPropertyPanelWidth = 200;
            this.diagramIsInvalid = false;
            this.diagramHasChanged = false;
            this.saveStateForNewUri = false;
            this.linterIsActive = true;
            this.propertyPanelShouldOpen = false;
            this.propertyPanelHiddenForSpaceReasons = false;
            this.propertyPanelHasNoSpace = false;
            this.resizeEventHandler = function (event) {
                _this.hideOrShowPpForSpaceReasons();
                var mousePosition = event.clientX;
                _this.setNewPropertyPanelWidthFromMousePosition(mousePosition);
            };
            this.saveHotkeyEventHandler = function (event) {
                var currentPlatformIsMac = _this.checkIfCurrentPlatformIsMac();
                var metaKeyIsPressed = currentPlatformIsMac ? event.metaKey : event.ctrlKey;
                var shiftKeyIsPressed = event.shiftKey;
                var sKeyIsPressed = event.key === 's';
                var userWantsToSave = metaKeyIsPressed && sKeyIsPressed && !shiftKeyIsPressed;
                var userWantsToSaveAs = metaKeyIsPressed && sKeyIsPressed && shiftKeyIsPressed;
                if (userWantsToSave) {
                    event.preventDefault();
                    _this.eventAggregator.publish(environment_1.default.events.diagramDetail.saveDiagram);
                    return;
                }
                if (userWantsToSaveAs) {
                    event.preventDefault();
                    _this.eventAggregator.publish(environment_1.default.events.diagramDetail.saveDiagramAs);
                }
            };
            this.printHotkeyEventHandler = function (event) {
                var currentPlatformIsMac = _this.checkIfCurrentPlatformIsMac();
                var metaKeyIsPressed = currentPlatformIsMac ? event.metaKey : event.ctrlKey;
                var pKeyIsPressed = event.key === 'p';
                var userWantsToPrint = metaKeyIsPressed && pKeyIsPressed;
                if (userWantsToPrint) {
                    event.preventDefault();
                    _this.getSVG().then(function (svg) {
                        _this.diagramPrintService.printDiagram(svg);
                    });
                }
            };
            this.checkIfCurrentPlatformIsMac = function () {
                var macRegex = /.*mac*./i;
                var currentPlatform = navigator.platform;
                var currentPlatformIsMac = macRegex.test(currentPlatform);
                return currentPlatformIsMac;
            };
            this.notificationService = notificationService;
            this.eventAggregator = eventAggregator;
            this.openDiagramStateService = openDiagramStateService;
            this.solutionService = solutionService;
            this.userConfigService = userConfigService;
        }
        BpmnIo.prototype.created = function () {
            var _this = this;
            this.modeler = new bundle.modeler({
                additionalModules: [
                    bundle.MiniMap,
                    bundle.ZoomScrollModule,
                    bundle.MoveCanvasModule,
                    bundle.resizeAllModule,
                    bundle.lintModule,
                ],
                linting: {
                    bpmnlint: bpmnlintConfig,
                },
                moddleExtensions: {
                    camunda: bundle.camundaModdleDescriptor,
                },
                keyboard: {
                    bindTo: document,
                },
            });
            this.diagramConverter = new bundle.modeler({
                moddleExtensions: {
                    camunda: bundle.camundaModdleDescriptor,
                },
            });
            this.linting = this.modeler.get('linting');
            this.modeler.on('elements.paste.rejected', function () {
                _this.notificationService.showNotification(index_1.NotificationType.INFO, 'In order to paste an element you have to place your cursor outside of the element.');
            });
            this.addRemoveWithBackspaceKeyboardListener();
            var handlerPriority = 1000;
            this.modeler.on('commandStack.changed', function () { return __awaiter(_this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!this.solutionIsRemote) {
                                this.eventAggregator.publish(environment_1.default.events.diagramChange);
                            }
                            _a = this;
                            return [4, this.getXML()];
                        case 1:
                            _a.xml = _b.sent();
                            return [2];
                    }
                });
            }); }, handlerPriority);
            this.modeler.on('contextPad.create', function (event) {
                if (_this.solutionIsRemote) {
                    return;
                }
                var elementIsNoParticipant = event.element.type !== 'bpmn:Participant';
                if (elementIsNoParticipant) {
                    return;
                }
                setTimeout(function () {
                    var contextPadWrench = document.querySelector('.bpmn-icon-screw-wrench');
                    contextPadWrench.parentNode.removeChild(contextPadWrench);
                }, 0);
            });
            this.modeler.on('import.done', function () {
                if (!_this.diagramHasState(_this.diagramUri)) {
                    _this.fitDiagramToViewport();
                }
                if (!_this.solutionIsRemote) {
                    _this.validateDiagram();
                    _this.linting.update();
                }
            }, 1);
            this.modeler.on('element.paste', function (event) {
                if (!_this.solutionIsRemote) {
                    var elementToPasteIsUserTask = event.descriptor.type === 'bpmn:UserTask';
                    if (elementToPasteIsUserTask) {
                        return _this.renameFormFields(event);
                    }
                }
                return false;
            });
            this.diagramPrintService = new index_2.DiagramPrintService();
            this.diagramExportService = new index_2.DiagramExportService();
        };
        BpmnIo.prototype.attached = function () {
            return __awaiter(this, void 0, void 0, function () {
                var diagramState, xmlIsNotEmpty, _a, previousPropertyPanelWidth, propertyPanelHideState, wasPropertyPanelVisible;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.linterIsActive = this.userConfigService.getUserConfig('design.activate_linter');
                            if (!this.diagramHasState(this.diagramUri)) return [3, 2];
                            diagramState = this.loadDiagramState(this.diagramUri);
                            return [4, this.importXmlIntoModeler(diagramState.data.xml)];
                        case 1:
                            _b.sent();
                            return [3, 5];
                        case 2:
                            xmlIsNotEmpty = this.xml !== undefined && this.xml !== null;
                            if (!xmlIsNotEmpty) return [3, 5];
                            return [4, this.importXmlIntoModeler(this.xml)];
                        case 3:
                            _b.sent();
                            _a = this;
                            return [4, this.convertXml(this.xml)];
                        case 4:
                            _a.savedXml = _b.sent();
                            _b.label = 5;
                        case 5:
                            setTimeout(function () {
                                _this.bpmnLintButton = document.querySelector('.bpmn-js-bpmnlint-button');
                                if (_this.bpmnLintButton) {
                                    _this.bpmnLintButton.style.display = 'none';
                                }
                            }, 0);
                            if (!this.solutionIsRemote) return [3, 7];
                            return [4, this.importXmlIntoViewer(this.xml)];
                        case 6:
                            _b.sent();
                            this.viewer.attachTo(this.canvasModel);
                            return [3, 8];
                        case 7:
                            this.modeler.attachTo(this.canvasModel);
                            this.movePaletteToLeftToolbar();
                            _b.label = 8;
                        case 8:
                            window.addEventListener('resize', this.resizeEventHandler);
                            this.resizeButton.addEventListener('mousedown', function (e) {
                                var windowEvent = e || window.event;
                                windowEvent.cancelBubble = true;
                                var mousemoveFunction = function (event) {
                                    _this.resize(event);
                                    document.getSelection().empty();
                                };
                                var mouseUpFunction = function () {
                                    document.removeEventListener('mousemove', mousemoveFunction);
                                    document.removeEventListener('mouseup', mouseUpFunction);
                                };
                                document.addEventListener('mousemove', mousemoveFunction);
                                document.addEventListener('mouseup', mouseUpFunction);
                            });
                            document.addEventListener('keydown', this.printHotkeyEventHandler);
                            if (!is_running_in_electron_module_1.isRunningInElectron()) {
                                document.addEventListener('keydown', this.saveHotkeyEventHandler);
                            }
                            this.hideOrShowPpForSpaceReasons();
                            this.subscriptions = [
                                this.eventAggregator.subscribe(environment_1.default.events.solutionExplorerPanel.toggleSolutionExplorer, function (showSolutionExplorer) {
                                    if (!_this.solutionIsRemote) {
                                        _this.setDjsPaletteLeftStyle(showSolutionExplorer);
                                    }
                                    setTimeout(function () {
                                        _this.hideOrShowPpForSpaceReasons();
                                    }, 0);
                                }),
                                this.eventAggregator.subscribe(environment_1.default.events.diagramNeedsToBeUpdated, function () { return __awaiter(_this, void 0, void 0, function () {
                                    var diagramState, newXml;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                this.diagramHasChanged = true;
                                                diagramState = this.openDiagramStateService.loadDiagramState(this.diagramUri);
                                                newXml = diagramState.data.xml;
                                                return [4, this.importXmlIntoModeler(newXml)];
                                            case 1:
                                                _a.sent();
                                                this.savedXml = newXml;
                                                this.xml = newXml;
                                                return [2];
                                        }
                                    });
                                }); }),
                                this.eventAggregator.subscribe(environment_1.default.events.diagramDetail.exportDiagramAs + ":BPMN", function () { return __awaiter(_this, void 0, void 0, function () {
                                    var exportName, xmlToExport, _a;
                                    return __generator(this, function (_b) {
                                        switch (_b.label) {
                                            case 0:
                                                _b.trys.push([0, 3, , 4]);
                                                exportName = this.name + ".bpmn";
                                                return [4, this.getXML()];
                                            case 1:
                                                xmlToExport = _b.sent();
                                                return [4, this.diagramExportService
                                                        .loadXML(xmlToExport)
                                                        .asBpmn()
                                                        .export(exportName)];
                                            case 2:
                                                _b.sent();
                                                return [3, 4];
                                            case 3:
                                                _a = _b.sent();
                                                this.notificationService.showNotification(index_1.NotificationType.ERROR, 'An error occurred while preparing the diagram for exporting');
                                                return [3, 4];
                                            case 4: return [2];
                                        }
                                    });
                                }); }),
                                this.eventAggregator.subscribe(environment_1.default.events.diagramDetail.exportDiagramAs + ":SVG", function () { return __awaiter(_this, void 0, void 0, function () {
                                    var exportName, _a, _b, error_1;
                                    return __generator(this, function (_c) {
                                        switch (_c.label) {
                                            case 0:
                                                _c.trys.push([0, 3, , 4]);
                                                exportName = this.name + ".svg";
                                                _b = (_a = this.diagramExportService).loadSVG;
                                                return [4, this.getSVG()];
                                            case 1: return [4, _b.apply(_a, [_c.sent()])
                                                    .asSVG()
                                                    .export(exportName)];
                                            case 2:
                                                _c.sent();
                                                return [3, 4];
                                            case 3:
                                                error_1 = _c.sent();
                                                this.notificationService.showNotification(index_1.NotificationType.ERROR, 'An error occurred while preparing the diagram for exporting');
                                                return [3, 4];
                                            case 4: return [2];
                                        }
                                    });
                                }); }),
                                this.eventAggregator.subscribe(environment_1.default.events.diagramDetail.exportDiagramAs + ":PNG", function () { return __awaiter(_this, void 0, void 0, function () {
                                    var exportName, _a, _b, error_2;
                                    return __generator(this, function (_c) {
                                        switch (_c.label) {
                                            case 0:
                                                _c.trys.push([0, 3, , 4]);
                                                exportName = this.name + ".png";
                                                _b = (_a = this.diagramExportService).loadSVG;
                                                return [4, this.getSVG()];
                                            case 1: return [4, _b.apply(_a, [_c.sent()])
                                                    .asPNG()
                                                    .export(exportName)];
                                            case 2:
                                                _c.sent();
                                                return [3, 4];
                                            case 3:
                                                error_2 = _c.sent();
                                                this.notificationService.showNotification(index_1.NotificationType.ERROR, 'An error occurred while preparing the diagram for exporting');
                                                return [3, 4];
                                            case 4: return [2];
                                        }
                                    });
                                }); }),
                                this.eventAggregator.subscribe(environment_1.default.events.diagramDetail.exportDiagramAs + ":JPEG", function () { return __awaiter(_this, void 0, void 0, function () {
                                    var exportName, _a, _b, error_3;
                                    return __generator(this, function (_c) {
                                        switch (_c.label) {
                                            case 0:
                                                _c.trys.push([0, 3, , 4]);
                                                exportName = this.name + ".jpeg";
                                                _b = (_a = this.diagramExportService).loadSVG;
                                                return [4, this.getSVG()];
                                            case 1: return [4, _b.apply(_a, [_c.sent()])
                                                    .asJPEG()
                                                    .export(exportName)];
                                            case 2:
                                                _c.sent();
                                                return [3, 4];
                                            case 3:
                                                error_3 = _c.sent();
                                                this.notificationService.showNotification(index_1.NotificationType.ERROR, 'An error occurred while preparing the diagram for exporting');
                                                return [3, 4];
                                            case 4: return [2];
                                        }
                                    });
                                }); }),
                                this.eventAggregator.subscribe("" + environment_1.default.events.diagramDetail.printDiagram, function () { return __awaiter(_this, void 0, void 0, function () {
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4, this.printHandler()];
                                            case 1:
                                                _a.sent();
                                                return [2];
                                        }
                                    });
                                }); }),
                                this.eventAggregator.subscribe(environment_1.default.events.diagramDetail.saveDiagram, function () { return __awaiter(_this, void 0, void 0, function () {
                                    var _a;
                                    return __generator(this, function (_b) {
                                        switch (_b.label) {
                                            case 0:
                                                _a = this;
                                                return [4, this.getXML()];
                                            case 1:
                                                _a.savedXml = _b.sent();
                                                return [2];
                                        }
                                    });
                                }); }),
                                this.eventAggregator.subscribe(environment_1.default.events.diagramChange, function () { return __awaiter(_this, void 0, void 0, function () {
                                    var _a, diagramIsChanged;
                                    return __generator(this, function (_b) {
                                        switch (_b.label) {
                                            case 0:
                                                _a = this;
                                                return [4, this.getXML()];
                                            case 1:
                                                _a.xml = _b.sent();
                                                diagramIsChanged = !this.areXmlsIdentical(this.xml, this.savedXml);
                                                this.validateDiagram();
                                                this.eventAggregator.publish(environment_1.default.events.differsFromOriginal, diagramIsChanged);
                                                return [2];
                                        }
                                    });
                                }); }),
                                this.eventAggregator.subscribe(environment_1.default.events.navBar.validationError, function () {
                                    _this.diagramIsInvalid = true;
                                }),
                                this.eventAggregator.subscribe(environment_1.default.events.navBar.noValidationError, function () {
                                    _this.diagramIsInvalid = false;
                                }),
                                this.eventAggregator.subscribe(environment_1.default.events.bpmnio.togglePropertyPanel, function () {
                                    _this.togglePanel();
                                }),
                                this.eventAggregator.subscribe(environment_1.default.events.bpmnio.bindKeyboard, function () {
                                    var keyboard = _this.modeler.get('keyboard');
                                    var element = document;
                                    keyboard.bind(element);
                                }),
                                this.eventAggregator.subscribe(environment_1.default.events.bpmnio.unbindKeyboard, function () {
                                    var keyboard = _this.modeler.get('keyboard');
                                    keyboard.unbind();
                                }),
                            ];
                            previousPropertyPanelWidth = window.localStorage.getItem('propertyPanelWidth');
                            this.propertyPanelWidth =
                                previousPropertyPanelWidth !== undefined
                                    ? parseInt(previousPropertyPanelWidth)
                                    : environment_1.default.propertyPanel.defaultWidth;
                            propertyPanelHideState = window.localStorage.getItem('propertyPanelHideState');
                            wasPropertyPanelVisible = propertyPanelHideState === null || propertyPanelHideState === 'show';
                            this.propertyPanelShouldOpen = wasPropertyPanelVisible;
                            this.togglePanel();
                            this.updateViewboxStateOnChange();
                            return [2];
                    }
                });
            });
        };
        BpmnIo.prototype.detached = function () {
            this.modeler.detach();
            this.modeler.destroy();
            this.diagramConverter.destroy();
            var viewerIsInitialized = this.viewer !== undefined;
            if (viewerIsInitialized) {
                this.viewer.destroy();
                this.viewer.detach();
            }
            window.removeEventListener('resize', this.resizeEventHandler);
            document.removeEventListener('keydown', this.printHotkeyEventHandler);
            if (!is_running_in_electron_module_1.isRunningInElectron()) {
                document.removeEventListener('keydown', this.saveHotkeyEventHandler);
            }
            for (var _i = 0, _a = this.subscriptions; _i < _a.length; _i++) {
                var subscription = _a[_i];
                subscription.dispose();
            }
        };
        BpmnIo.prototype.movePaletteToLeftToolbar = function () {
            var bpmnIoPaletteContainer = this.canvasModel.getElementsByClassName('djs-palette')[0];
            if (bpmnIoPaletteContainer.className.includes('djs-palette-override')) {
                return;
            }
            bpmnIoPaletteContainer.className += ' djs-palette-override';
            if (!this.solutionIsRemote) {
                var showSolutionExplorer = localStorage.getItem('SolutionExplorerVisibility') !== 'false';
                this.setDjsPaletteLeftStyle(showSolutionExplorer);
            }
        };
        BpmnIo.prototype.saveCurrentXML = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4, this.getXML()];
                        case 1:
                            _a.savedXml = _b.sent();
                            return [2];
                    }
                });
            });
        };
        BpmnIo.prototype.xmlChanged = function (newValue, oldValue) {
            return __awaiter(this, void 0, void 0, function () {
                var _a, diagramState, diagramContainsChanges, oldValueExists;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!this.diagramHasChanged) return [3, 6];
                            _a = this;
                            return [4, this.convertXml(newValue)];
                        case 1:
                            _a.savedXml = _b.sent();
                            if (this.solutionIsRemote) {
                                this.importXmlIntoViewer(this.xml);
                            }
                            if (!this.diagramHasState(this.diagramUri)) return [3, 3];
                            return [4, this.recoverDiagramState()];
                        case 2:
                            _b.sent();
                            return [3, 5];
                        case 3: return [4, this.importXmlIntoModeler(this.xml)];
                        case 4:
                            _b.sent();
                            _b.label = 5;
                        case 5:
                            this.propertyPanelViewModel.xmlWasChanged();
                            diagramState = this.loadDiagramState(this.diagramUri);
                            diagramContainsChanges = diagramState !== null && diagramState.metadata.isChanged;
                            this.eventAggregator.publish(environment_1.default.events.differsFromOriginal, diagramContainsChanges);
                            _b.label = 6;
                        case 6:
                            oldValueExists = oldValue !== undefined;
                            if (!this.diagramHasChanged && oldValueExists && !this.solutionIsRemote) {
                                this.saveDiagramState(this.diagramUri);
                            }
                            this.diagramHasChanged = false;
                            return [2];
                    }
                });
            });
        };
        BpmnIo.prototype.diagramChanged = function (newUri, previousUri) {
            return __awaiter(this, void 0, void 0, function () {
                var previousDiagramExists, previousDiagramWasNoNewDiagram, previousDiagramIsNotDeleted, viewerNotInitialized, xmlExists;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.diagramHasChanged = true;
                            previousDiagramExists = previousUri !== undefined;
                            if (!(!this.solutionIsRemote && previousDiagramExists)) return [3, 5];
                            if (!this.saveStateForNewUri) return [3, 3];
                            this.saveStateForNewUri = false;
                            previousDiagramWasNoNewDiagram = !previousUri.startsWith('about:open-diagrams');
                            if (!previousDiagramWasNoNewDiagram) return [3, 2];
                            return [4, this.saveDiagramState(newUri)];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2: return [3, 5];
                        case 3:
                            previousDiagramIsNotDeleted = this.solutionService
                                .getOpenDiagrams()
                                .some(function (diagram) { return diagram.uri === previousUri; });
                            if (!previousDiagramIsNotDeleted) return [3, 5];
                            return [4, this.saveDiagramState(previousUri)];
                        case 4:
                            _a.sent();
                            _a.label = 5;
                        case 5:
                            this.solutionIsRemote = solution_is_remote_solution_module_1.solutionIsRemoteSolution(this.diagramUri);
                            if (this.solutionIsRemote) {
                                viewerNotInitialized = this.viewer === undefined;
                                if (viewerNotInitialized) {
                                    this.viewer = new bundle.viewer({
                                        additionalModules: [bundle.ZoomScrollModule, bundle.MoveCanvasModule, bundle.MiniMap],
                                    });
                                    this.viewer.on('selection.changed', function (event) {
                                        var nothingIsSelected = event.newSelection.length === 0;
                                        if (nothingIsSelected) {
                                            return;
                                        }
                                        var selectedElement = event.newSelection[0];
                                        var elementRegistry = _this.modeler.get('elementRegistry');
                                        var modelerShape = elementRegistry.get(selectedElement.id);
                                        _this.modeler.get('selection').select(modelerShape);
                                    });
                                    this.viewer.on('import.done', function () {
                                        if (!_this.diagramHasState(_this.diagramUri)) {
                                            _this.fitDiagramToViewport();
                                        }
                                    });
                                }
                                xmlExists = this.xml !== undefined;
                                if (xmlExists) {
                                    this.xmlChanged(this.xml);
                                    this.propertyPanelViewModel.selectPreviouslySelectedOrFirstElement();
                                }
                                setTimeout(function () {
                                    _this.viewer.attachTo(_this.canvasModel);
                                    var xmlIsNotEmpty = _this.xml !== undefined && _this.xml !== null;
                                    if (xmlIsNotEmpty) {
                                        _this.importXmlIntoViewer(_this.xml);
                                    }
                                    _this.linting.deactivateLinting();
                                }, 0);
                            }
                            else {
                                setTimeout(function () {
                                    _this.modeler.attachTo(_this.canvasModel);
                                    var xmlExists = _this.xml !== undefined;
                                    if (xmlExists) {
                                        _this.xmlChanged(_this.xml);
                                        _this.propertyPanelViewModel.selectPreviouslySelectedOrFirstElement();
                                    }
                                    _this.movePaletteToLeftToolbar();
                                    _this.bpmnLintButton = document.querySelector('.bpmn-js-bpmnlint-button');
                                    if (_this.bpmnLintButton) {
                                        _this.bpmnLintButton.style.display = 'none';
                                    }
                                }, 0);
                            }
                            return [2];
                    }
                });
            });
        };
        BpmnIo.prototype.nameChanged = function (newValue) {
            if (this.modeler !== undefined && this.modeler !== null) {
                this.name = newValue;
            }
        };
        BpmnIo.prototype.propertyPanelWidthChanged = function (newValue) {
            if (newValue !== undefined) {
                window.localStorage.setItem('propertyPanelWidth', "" + this.propertyPanelWidth);
            }
        };
        BpmnIo.prototype.diagramHasState = function (uri) {
            var diagramState = this.loadDiagramState(uri);
            return diagramState !== null;
        };
        BpmnIo.prototype.loadDiagramState = function (diagramUri) {
            return this.openDiagramStateService.loadDiagramState(diagramUri);
        };
        BpmnIo.prototype.recoverDiagramState = function () {
            return __awaiter(this, void 0, void 0, function () {
                var diagramState, diagramHasNoState, xml, viewbox, viewboxIsSet;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            diagramState = this.loadDiagramState(this.diagramUri);
                            diagramHasNoState = diagramState === null;
                            if (diagramHasNoState) {
                                return [2];
                            }
                            xml = diagramState.data.xml;
                            return [4, this.importXmlIntoModeler(xml)];
                        case 1:
                            _a.sent();
                            viewbox = diagramState.metadata.location;
                            viewboxIsSet = viewbox !== undefined;
                            if (viewboxIsSet) {
                                this.modeler.get('canvas').viewbox(viewbox);
                            }
                            else {
                                this.fitDiagramToViewport();
                            }
                            return [2];
                    }
                });
            });
        };
        BpmnIo.prototype.validateDiagram = function () {
            return __awaiter(this, void 0, void 0, function () {
                var validationResult, validationResultContainsErrors;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.linterIsActive) {
                                return [2];
                            }
                            return [4, this.linting.lint()];
                        case 1:
                            validationResult = _a.sent();
                            this.linting.update();
                            validationResultContainsErrors = false;
                            Object.entries(validationResult).forEach(function (_a) {
                                var key = _a[0], validationIssues = _a[1];
                                var issuesContainError = validationIssues.some(function (issue) {
                                    return issue.category === index_1.IValidateIssueCategory.error;
                                });
                                if (issuesContainError) {
                                    validationResultContainsErrors = true;
                                }
                            });
                            this.diagramIsInvalid = validationResultContainsErrors;
                            return [2];
                    }
                });
            });
        };
        BpmnIo.prototype.togglePanel = function () {
            if (this.propertyPanelShouldOpen) {
                if (this.propertyPanelHasNoSpace) {
                    this.notificationService.showNotification(index_1.NotificationType.ERROR, 'There is not enough space for the property panel!');
                    return;
                }
                document.getElementById('toggleButtonPropertyPanel').classList.add('design-layout__tool--active');
                this.showPropertyPanel = true;
                this.eventAggregator.publish(environment_1.default.events.bpmnio.propertyPanelActive, true);
                this.propertyPanelShouldOpen = false;
                window.localStorage.setItem('propertyPanelHideState', 'show');
            }
            else {
                document.getElementById('toggleButtonPropertyPanel').classList.remove('design-layout__tool--active');
                this.showPropertyPanel = false;
                this.eventAggregator.publish(environment_1.default.events.bpmnio.propertyPanelActive, false);
                this.propertyPanelShouldOpen = true;
                window.localStorage.setItem('propertyPanelHideState', 'hide');
            }
        };
        BpmnIo.prototype.resize = function (event) {
            var mousePosition = event.clientX;
            this.setNewPropertyPanelWidthFromMousePosition(mousePosition);
        };
        BpmnIo.prototype.getXML = function () {
            return __awaiter(this, void 0, void 0, function () {
                var returnPromise;
                var _this = this;
                return __generator(this, function (_a) {
                    returnPromise = new Promise(function (resolve, reject) {
                        var xmlSaveOptions = {
                            format: true,
                        };
                        _this.modeler.saveXML(xmlSaveOptions, function (error, result) {
                            if (error) {
                                reject(error);
                                return;
                            }
                            resolve(result);
                        });
                    });
                    return [2, returnPromise];
                });
            });
        };
        BpmnIo.prototype.toggleLinter = function () {
            this.showLinter = !this.showLinter;
            this.bpmnLintButton = document.querySelector('.bpmn-js-bpmnlint-button');
            if (this.showLinter) {
                this.bpmnLintButton.style.display = 'block';
                this.linting.activateLinting();
            }
            else {
                this.bpmnLintButton.style.display = 'none';
                this.linting.deactivateLinting();
            }
        };
        BpmnIo.prototype.saveDiagramState = function (diagramUri) {
            return __awaiter(this, void 0, void 0, function () {
                var savedXml, modelerCanvas, isUnsavedDiagram, currentViewbox, diagramIsVisible, xml, viewbox, selectedElements, isChanged, diagramState, diagramStateExists;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            savedXml = this.savedXml;
                            modelerCanvas = this.modeler.get('canvas');
                            isUnsavedDiagram = diagramUri.startsWith('about:open-diagrams');
                            currentViewbox = modelerCanvas.viewbox();
                            diagramIsVisible = currentViewbox.width > 0 && currentViewbox.height > 0;
                            return [4, this.getXML()];
                        case 1:
                            xml = _a.sent();
                            viewbox = diagramIsVisible ? currentViewbox : undefined;
                            selectedElements = this.modeler.get('selection')._selectedElements;
                            isChanged = isUnsavedDiagram || !this.areXmlsIdentical(xml, savedXml);
                            diagramState = this.openDiagramStateService.loadDiagramState(diagramUri);
                            diagramStateExists = diagramState !== null;
                            if (diagramStateExists) {
                                diagramState.data.xml = xml;
                                diagramState.metadata.selectedElements = selectedElements;
                                diagramState.metadata.isChanged = isChanged;
                                if (viewbox) {
                                    diagramState.metadata.location = viewbox;
                                }
                                this.openDiagramStateService.updateDiagramState(diagramUri, diagramState);
                            }
                            else {
                                this.openDiagramStateService.saveDiagramState(diagramUri, xml, viewbox, selectedElements, isChanged);
                            }
                            return [2];
                    }
                });
            });
        };
        BpmnIo.prototype.updateViewboxStateOnChange = function () {
            var _this = this;
            this.modeler.on('canvas.viewbox.changed', function () {
                _this.updateViewboxState();
            });
        };
        BpmnIo.prototype.updateViewboxState = function () {
            var modelerCanvas = this.modeler.get('canvas');
            var viewbox = modelerCanvas.viewbox();
            var diagramState = this.openDiagramStateService.loadDiagramState(this.diagramUri);
            var diagramHasNoState = !this.diagramHasState(this.diagramUri);
            var diagramIsVisible = viewbox.width > 0 && viewbox.height > 0;
            if (!diagramIsVisible || diagramHasNoState) {
                return;
            }
            diagramState.metadata.location = viewbox;
            this.openDiagramStateService.updateDiagramState(this.diagramUri, diagramState);
        };
        BpmnIo.prototype.areXmlsIdentical = function (firstXml, secondXml) {
            var whitespaceAndNewLineRegex = /\r?\n|\r|\s/g;
            var unformattedXml = firstXml.replace(whitespaceAndNewLineRegex, '');
            var unformattedSaveXml = secondXml.replace(whitespaceAndNewLineRegex, '');
            return unformattedSaveXml === unformattedXml;
        };
        BpmnIo.prototype.importXmlIntoModeler = function (xml) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.modeler.importXML(xml, function (error) {
                    var errorOccured = error !== undefined;
                    if (errorOccured) {
                        reject();
                        return;
                    }
                    resolve();
                });
            });
        };
        BpmnIo.prototype.importXmlIntoViewer = function (xml) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.viewer.importXML(xml, function (error) {
                    var errorOccured = error !== undefined;
                    if (errorOccured) {
                        reject();
                        return;
                    }
                    resolve();
                });
            });
        };
        BpmnIo.prototype.convertXml = function (xml) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.diagramConverter.importXML(xml, function (importError) {
                    var importErrorOccured = importError !== undefined;
                    if (importErrorOccured) {
                        reject(importError);
                        return;
                    }
                    _this.diagramConverter.saveXML({ format: true }, function (exportError, convertedXml) {
                        var exportErrorOccured = exportError !== undefined;
                        if (exportErrorOccured) {
                            reject(exportError);
                            return;
                        }
                        resolve(convertedXml);
                    });
                });
            });
        };
        BpmnIo.prototype.fitDiagramToViewport = function () {
            var modelerCanvas = this.modeler.get('canvas');
            var modelerViewbox = modelerCanvas.viewbox();
            var modelerDiagramIsVisible = modelerViewbox.height > 0 && modelerViewbox.width > 0;
            if (this.solutionIsRemote) {
                var viewerCanvas = this.viewer.get('canvas');
                var viewerViewbox = viewerCanvas.viewbox();
                var viewerDiagramIsVisible = viewerViewbox.height > 0 && viewerViewbox.width > 0;
                if (viewerDiagramIsVisible) {
                    viewerCanvas.zoom('fit-viewport', 'auto');
                }
            }
            else if (modelerDiagramIsVisible) {
                modelerCanvas.zoom('fit-viewport', 'auto');
            }
        };
        BpmnIo.prototype.renameFormFields = function (event) {
            var _this = this;
            var allFields = event.descriptor.businessObject.extensionElements.values;
            var formDataObject = allFields.find(function (field) {
                return field.$type === 'camunda:FormData';
            });
            var noFieldsSpecified = formDataObject.fields === undefined || formDataObject.fields === null;
            if (noFieldsSpecified) {
                return undefined;
            }
            formDataObject.fields.forEach(function (formField) {
                formField.id = "Form_" + _this.generateRandomId();
            });
            return event;
        };
        BpmnIo.prototype.generateRandomId = function () {
            var randomId = '';
            var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
            var randomIdLength = 8;
            for (var i = 0; i < randomIdLength; i++) {
                randomId += possible.charAt(Math.floor(Math.random() * possible.length));
            }
            return randomId;
        };
        BpmnIo.prototype.setNewPropertyPanelWidthFromMousePosition = function (mousePosition) {
            var propertyPanelMaxWidth = this.propertyPanel.parentElement.offsetWidth - this.minCanvasWidth;
            var mousePositionFromRight = document.body.clientWidth - mousePosition;
            var resizedWidth = mousePositionFromRight - sideBarRightSize;
            var newPropertyPanelWidth = Math.min(resizedWidth, propertyPanelMaxWidth);
            this.propertyPanelWidth = newPropertyPanelWidth;
        };
        BpmnIo.prototype.hidePropertyPanelForSpaceReasons = function () {
            this.propertyPanelHasNoSpace = true;
            var propertyPanelIsOpen = !this.propertyPanelShouldOpen;
            if (propertyPanelIsOpen) {
                this.propertyPanelHiddenForSpaceReasons = true;
                this.togglePanel();
            }
        };
        BpmnIo.prototype.showPropertyPanelForSpaceReasons = function () {
            this.propertyPanelHasNoSpace = false;
            this.propertyPanelHiddenForSpaceReasons = false;
            this.propertyPanelShouldOpen = true;
            this.togglePanel();
        };
        BpmnIo.prototype.hideOrShowPpForSpaceReasons = function () {
            var minModelerWidthForPropertyPanel = this.minCanvasWidth + this.minPropertyPanelWidth;
            var modelerWidth = this.propertyPanel.parentElement.offsetWidth;
            if (modelerWidth === 0) {
                return;
            }
            this.propertyPanelHasNoSpace = modelerWidth < minModelerWidthForPropertyPanel;
            if (this.propertyPanelHasNoSpace) {
                this.hidePropertyPanelForSpaceReasons();
            }
            else if (this.propertyPanelHiddenForSpaceReasons) {
                this.showPropertyPanelForSpaceReasons();
            }
        };
        BpmnIo.prototype.setDjsPaletteLeftStyle = function (solutionExplorerIsActive) {
            var bpmnIoPaletteContainer = this.canvasModel.getElementsByClassName('djs-palette')[0];
            var djsPaletteLeft = solutionExplorerIsActive ? 250 : 0;
            bpmnIoPaletteContainer.style.left = djsPaletteLeft + "px";
        };
        BpmnIo.prototype.printHandler = function () {
            return __awaiter(this, void 0, void 0, function () {
                var svgToPrint, error_4;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4, this.getSVG()];
                        case 1:
                            svgToPrint = _a.sent();
                            this.diagramPrintService.printDiagram(svgToPrint);
                            return [3, 3];
                        case 2:
                            error_4 = _a.sent();
                            this.notificationService.showNotification(index_1.NotificationType.ERROR, 'An error while trying to print the diagram occurred.');
                            return [3, 3];
                        case 3: return [2];
                    }
                });
            });
        };
        BpmnIo.prototype.addRemoveWithBackspaceKeyboardListener = function () {
            var currentPlatformIsNotMac = !this.checkIfCurrentPlatformIsMac();
            if (currentPlatformIsNotMac) {
                return;
            }
            var keyboard = this.modeler.get('keyboard');
            var editorActions = this.modeler.get('editorActions');
            var backSpaceKeyCode = 8;
            var removeSelectedElements = function (key, modifiers) {
                var backspaceWasPressed = key.keyEvent.keyCode === backSpaceKeyCode;
                if (backspaceWasPressed) {
                    editorActions.trigger('removeSelection');
                    return true;
                }
                return false;
            };
            keyboard.addListener(removeSelectedElements);
        };
        BpmnIo.prototype.getSVG = function () {
            return __awaiter(this, void 0, void 0, function () {
                var returnPromise;
                var _this = this;
                return __generator(this, function (_a) {
                    returnPromise = new Promise(function (resolve, reject) {
                        if (_this.solutionIsRemote) {
                            _this.viewer.saveSVG({}, function (error, result) {
                                if (error) {
                                    reject(error);
                                }
                                resolve(result);
                            });
                        }
                        else {
                            _this.modeler.saveSVG({}, function (error, result) {
                                if (error) {
                                    reject(error);
                                }
                                resolve(result);
                            });
                        }
                    });
                    return [2, returnPromise];
                });
            });
        };
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", property_panel_1.PropertyPanel)
        ], BpmnIo.prototype, "propertyPanelViewModel", void 0);
        __decorate([
            aurelia_framework_1.bindable({ changeHandler: 'diagramChanged' }),
            __metadata("design:type", String)
        ], BpmnIo.prototype, "diagramUri", void 0);
        __decorate([
            aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.twoWay }),
            __metadata("design:type", String)
        ], BpmnIo.prototype, "xml", void 0);
        __decorate([
            aurelia_framework_1.bindable({ changeHandler: 'nameChanged' }),
            __metadata("design:type", String)
        ], BpmnIo.prototype, "name", void 0);
        __decorate([
            aurelia_framework_1.observable,
            __metadata("design:type", Number)
        ], BpmnIo.prototype, "propertyPanelWidth", void 0);
        BpmnIo = __decorate([
            aurelia_framework_1.inject('NotificationService', aurelia_event_aggregator_1.EventAggregator, 'OpenDiagramStateService', 'SolutionService', 'UserConfigService'),
            __metadata("design:paramtypes", [notification_service_1.NotificationService,
                aurelia_event_aggregator_1.EventAggregator,
                open_diagram_state_service_1.OpenDiagramStateService, Object, user_config_service_1.UserConfigService])
        ], BpmnIo);
        return BpmnIo;
    }());
    exports.BpmnIo = BpmnIo;
});


;
define('text!modules/design/bpmn-io/bpmn-io.css',[],function(){return ".modeler {\n  display: flex;\n  flex: 1;\n  height: 100%; }\n\n.modeler__diagram {\n  flex: 1; }\n\n.modeler__properties {\n  position: relative;\n  display: flex;\n  width: 250px;\n  height: 100%;\n  flex-direction: column;\n  overflow-y: scroll;\n  background: #dcdbdb; }\n  .modeler__properties::-webkit-scrollbar {\n    display: none; }\n\n.canvasModel {\n  height: 100%; }\n\n.modeler .label {\n  color: black; }\n\n.resize-div {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: -3px;\n  width: 6px; }\n\n.resize-div:hover {\n  cursor: col-resize; }\n\n/*\n * TOOLS\n *\n*/\n.tool__right {\n  display: block;\n  padding: 2px;\n  text-align: center; }\n\n.tool--deactivated {\n  display: block;\n  padding: 2px;\n  opacity: 0.2;\n  color: #5e5e5e;\n  text-align: center; }\n\n/*\n * WINDOW\n *\n*/\n.bpmn-io-layout {\n  display: flex;\n  flex: 1;\n  background: white;\n  flex-direction: row;\n  align-items: stretch; }\n\n.bpmn-io-layout__tools-left {\n  width: 36px;\n  min-width: 36px;\n  overflow-y: auto;\n  overflow-x: hidden;\n  border-right: 2px solid #dcdbdb;\n  -ms-overflow-style: none; }\n\n.bpmn-io-layout__tools-left::-webkit-scrollbar {\n  display: none; }\n\n.bpmn-io-layout__tools-right {\n  border-left: 2px solid #dcdbdb; }\n\n.bpmn-io-layout__tools-left,\n.bpmn-io-layout__tools-right {\n  width: 36px;\n  background-color: #f7f7f7; }\n\n.panel {\n  background-color: #f7f7f7;\n  border-left: 1px solid #eee;\n  border-right: 1px solid #eee; }\n\n.panel:last-child {\n  margin-bottom: 2px;\n  border-bottom: none; }\n\n.bpmn-io-layout__main {\n  display: flex;\n  flex: 1 100%; }\n\n/*\n * MENUES\n *\n*/\n.menu-bar__menu-left--tool {\n  background-color: inherit;\n  border: none; }\n\n.djs-palette-override {\n  position: fixed !important;\n  top: 70px !important;\n  width: 36px !important;\n  background: transparent !important;\n  border: none !important; }\n  .djs-palette-override .entry,\n  .djs-palette-override .djs-palette-toggle {\n    width: 32px;\n    height: 32px;\n    margin-left: 1px;\n    font-size: 20px;\n    line-height: 24px; }\n  .djs-palette-override .entry {\n    /*\n     * This is used instead of the global button class because the\n     * button class does not use '!important' which is needed in this case\n     * to override the existing properties, given by bpmn.io.\n     */\n    color: #333 !important;\n    opacity: 0.5 !important; }\n  .djs-palette-override .highlighted-entry,\n  .djs-palette-override .entry:hover {\n    color: #333 !important;\n    opacity: 1 !important; }\n  .djs-palette-override .djs-palette-toggle {\n    display: none !important; }\n  .djs-palette-override .djs-palette-entries .separator {\n    margin: 5px 0;\n    padding: 0; }\n\n/*\n * Color Picker\n*/\n.red {\n  color: #e53935; }\n\n.blue {\n  color: #1e88e5; }\n\n.orange {\n  color: #fb8c00; }\n\n.green {\n  color: #43a047; }\n\n.purple {\n  color: #8e24aa; }\n\n.none {\n  color: transparent; }\n\n/*\n * !important is needed to override the default\n * styling of the used color-picker component.\n */\n.colorpicker-container {\n  background: white !important;\n  border: solid 1px #ccc !important; }\n\n.bpmn-js-bpmnlint-button {\n  top: unset;\n  bottom: 20px;\n  left: 55px;\n  height: 30px;\n  pointer-events: none; }\n\n.linter-toggle {\n  position: relative;\n  display: inline-block;\n  bottom: 50px;\n  left: 15px; }\n\n.linter-toggle__button {\n  width: 31px;\n  height: 31px;\n  padding: 0;\n  border: solid 1px #ccc;\n  border-radius: 2px;\n  background-color: rgba(255, 255, 255, 0.9); }\n  .linter-toggle__button:hover {\n    background-color: #f7f7f7; }\n\n.linter-toggle__button--invalid-diagram {\n  background-color: rgba(204, 51, 0, 0.95);\n  color: white; }\n  .linter-toggle__button--invalid-diagram:hover {\n    background-color: #e64d1a;\n    color: white; }\n\n.bpmn-js-bpmnlint-process-issues {\n  top: unset;\n  right: unset;\n  bottom: 20px;\n  left: 240px; }\n\n/*\n * This fixes the style of the bpmnlint icons.\n * Child combinators are used because these icons do not have a class.\n */\n.bpmn-js-bpmnlint-issues > .icons > .icon {\n  z-index: -1; }\n\n.bpmn-js-bpmnlint-issues > .icons > .icon > svg {\n  margin-top: -3px; }\n\n.bpmn-js-bpmnlint-button > svg {\n  margin-top: -4px; }\n\n.bpmn-js-bpmnlint-issues > .group > .header {\n  padding: 2px; }\n\n.bpmn-js-bpmnlint-issues > .group > .header > svg {\n  margin-top: -3px;\n  margin-left: 2px;\n  margin-bottom: 0px; }\n";});;
define('text!modules/design/bpmn-io/bpmn-io.html',[],function(){return "<template>\n  <require from=\"../property-panel/property-panel\"></require>\n  <require from=\"@process-engine/bpmn-js-custom-bundle/bpmn-modeler-custom.css\"></require>\n  <require from=\"../diagram-tools-right/diagram-tools-right\"></require>\n  <require from=\"./bpmn-io.css\"></require>\n  <div class=\"bpmn-io-layout\">\n    <!--\n      DIAGRAM TOOLS\n    -->\n    <div class=\"bpmn-io-layout__tools-left\" css.bind=\"solutionIsRemote ? 'pointer-events: none;' : ''\">\n      <div if.bind=\"!solutionIsRemote\" class=\"tool-list tool-list--vertical\">\n        <div class=\"button tool\">\n          <i class=\"fas fa-mouse-pointer\"></i>\n        </div>\n      </div>\n    </div>\n\n    <!--\n      MAIN CANVAS\n    -->\n    <div class=\"bpmn-io-layout__main js-main\">\n      <div class=\"modeler\">\n        <div if.bind=\"solutionIsRemote\" class=\"modeler__diagram\">\n          <div ref=\"canvasModel\" class=\"canvasModel\" data-test-canvas-model></div>\n        </div>\n        <div else class=\"modeler__diagram\">\n          <div ref=\"canvasModel\" class=\"canvasModel\" data-test-canvas-model></div>\n\n          <div if.bind=\"linterIsActive\" class=\"linter-toggle\">\n            <button class.bind=\"diagramIsInvalid ? 'linter-toggle__button linter-toggle__button--invalid-diagram' : 'linter-toggle__button'\"\n                    css.bind=\"showLinter || diagramIsInvalid? 'opacity: 1;' : ''\"\n                    title.bind=\"showLinter ? 'Hide Linter' : 'Show Linter'\"\n                    click.delegate=\"toggleLinter()\">\n              <i class.bind=\"diagramIsInvalid ? 'fas fa-times' : 'fas fa-check'\"></i>\n            </button>\n          </div>\n        </div>\n        <div class=\"modeler__properties\" ref=\"propertyPanel\" show.bind=\"showPropertyPanel\" css=\"width: ${propertyPanelWidth}px; max-width: calc(100% - ${minCanvasWidth}px); min-width: ${minPropertyPanelWidth}px;\">\n          <div class=\"resize-div\" ref=\"resizeButton\"></div>\n          <diagram-tools-right modeler.bind=\"modeler\" viewer.bind=\"viewer\" solution-is-remote.bind=\"solutionIsRemote\"></diagram-tools-right>\n          <property-panel view-model.ref=\"propertyPanelViewModel\" id=\"js-properties-panel\" modeler.bind=\"modeler\" viewer.bind=\"viewer\" diagram-uri.bind=\"diagramUri\" xml.bind=\"xml\" is-editable.bind=\"!solutionIsRemote\" data-test-property-panel></property-panel>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n";});;
define('modules/design/bpmn-io/repositories/diagram-export.repository',["require", "exports", "../../../../services/download-service/download.service"], function (require, exports, download_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DiagramExportRepository = (function () {
        function DiagramExportRepository() {
        }
        DiagramExportRepository.prototype.exportDiagram = function (fileContent, outputName, mimeType) {
            download_service_1.download(fileContent, outputName, mimeType);
        };
        return DiagramExportRepository;
    }());
    exports.DiagramExportRepository = DiagramExportRepository;
});


;
define('modules/design/bpmn-io/services/diagram-export.service',["require", "exports", "./diagram-svg-converter", "./diagram-xml-converter"], function (require, exports, diagram_svg_converter_1, diagram_xml_converter_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DiagramExportService = (function () {
        function DiagramExportService() {
        }
        DiagramExportService.prototype.loadXML = function (xml) {
            return new diagram_xml_converter_1.DiagramXmlConverter(xml);
        };
        DiagramExportService.prototype.loadSVG = function (svg) {
            return new diagram_svg_converter_1.DiagramSvgConverter(svg);
        };
        return DiagramExportService;
    }());
    exports.DiagramExportService = DiagramExportService;
});


;
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/design/bpmn-io/services/diagram-print.service',["require", "exports", "print-js"], function (require, exports, print_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    print_js_1 = __importDefault(print_js_1);
    var DiagramPrintService = (function () {
        function DiagramPrintService(svg) {
            this.svg = svg;
        }
        DiagramPrintService.prototype.printDiagram = function (svg) {
            return __awaiter(this, void 0, void 0, function () {
                var svgToPrint, png, printOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (svg !== undefined) {
                                svgToPrint = svg;
                            }
                            else if (this.svg !== undefined && this.svg !== null) {
                                svgToPrint = this.svg;
                            }
                            else {
                                return [2, Promise.reject('No SVG for printing defined')];
                            }
                            return [4, this.generateImageFromSVG('png', svgToPrint)];
                        case 1:
                            png = _a.sent();
                            printOptions = {
                                printable: png,
                                type: 'image',
                            };
                            print_js_1.default(printOptions);
                            return [2, Promise.resolve()];
                    }
                });
            });
        };
        DiagramPrintService.prototype.updateSVG = function (newSVG) {
            this.svg = newSVG;
        };
        DiagramPrintService.prototype.generateImageFromSVG = function (desiredImageType, svg) {
            return __awaiter(this, void 0, void 0, function () {
                var encoding, canvas, context, svgWidth, svgHeight, targetDPI, dinA4DiagonalSizeInch, pixelRatio, imageDataURL;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            encoding = "image/" + desiredImageType;
                            canvas = document.createElement('canvas');
                            context = canvas.getContext('2d');
                            svgWidth = parseInt(svg.match(/<svg[^>]*width\s*=\s*\"?(\d+)\"?[^>]*>/)[1]);
                            svgHeight = parseInt(svg.match(/<svg[^>]*height\s*=\s*\"?(\d+)\"?[^>]*>/)[1]);
                            targetDPI = 300;
                            dinA4DiagonalSizeInch = 14.17;
                            pixelRatio = this.calculatePixelRatioForDPI(svgWidth, svgHeight, targetDPI, dinA4DiagonalSizeInch);
                            canvas.width = svgWidth * pixelRatio;
                            canvas.height = svgHeight * pixelRatio;
                            context.fillStyle = 'white';
                            context.fillRect(0, 0, canvas.width, canvas.height);
                            return [4, this.drawSVGToCanvas(svg, canvas, context, encoding)];
                        case 1:
                            imageDataURL = _a.sent();
                            return [2, imageDataURL];
                    }
                });
            });
        };
        DiagramPrintService.prototype.calculatePixelRatioForDPI = function (svgWidth, svgHeight, targetDPI, diagonalSize) {
            var svgWidthSquared = Math.pow(svgWidth, 2);
            var svgHeightSquared = Math.pow(svgHeight, 2);
            var diagonalResolution = Math.sqrt(svgWidthSquared + svgHeightSquared);
            var originalDPI = diagonalResolution / diagonalSize;
            var pixelRatio = targetDPI / originalDPI;
            return pixelRatio;
        };
        DiagramPrintService.prototype.drawSVGToCanvas = function (svgContent, canvas, context, encoding) {
            return __awaiter(this, void 0, void 0, function () {
                var imageElement, encodedSVG, loadImagePromise;
                return __generator(this, function (_a) {
                    imageElement = document.createElement('img');
                    encodedSVG = btoa(unescape(encodeURIComponent(svgContent)));
                    imageElement.setAttribute('src', "data:image/svg+xml;base64, " + encodedSVG);
                    loadImagePromise = new Promise(function (resolve, reject) {
                        imageElement.onload = function () {
                            context.drawImage(imageElement, 0, 0, canvas.width, canvas.height);
                            var encodedImageURL = canvas.toDataURL(encoding);
                            resolve(encodedImageURL);
                        };
                        imageElement.onerror = function (errorEvent) {
                            reject(errorEvent);
                        };
                    });
                    return [2, loadImagePromise];
                });
            });
        };
        return DiagramPrintService;
    }());
    exports.DiagramPrintService = DiagramPrintService;
});


;
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define('modules/design/bpmn-io/services/diagram-svg-converter',["require", "exports", "./export.service"], function (require, exports, export_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DiagramSvgConverter = (function () {
        function DiagramSvgConverter(svgContent) {
            var _this = this;
            this.enqueuedPromises = [];
            this.pngExporter = function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, this.generateImageFromSVG('png', this.svgContent)];
                });
            }); };
            this.jpegExporter = function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, this.generateImageFromSVG('jpeg', this.svgContent)];
                });
            }); };
            this.svgContent = svgContent;
        }
        DiagramSvgConverter.prototype.asPNG = function () {
            var pngExporterPromise = this.pngExporter();
            var mimeType = 'image/png';
            this.enqueuedPromises.push(pngExporterPromise);
            return new export_service_1.ExportService(mimeType, this.enqueuedPromises);
        };
        DiagramSvgConverter.prototype.asJPEG = function () {
            var jpegExporterPromise = this.jpegExporter();
            var mimeType = 'image/jpeg';
            this.enqueuedPromises.push(jpegExporterPromise);
            return new export_service_1.ExportService(mimeType, this.enqueuedPromises);
        };
        DiagramSvgConverter.prototype.asSVG = function () {
            var _this = this;
            var mimeType = 'image/svg+xml';
            var svgExporterPromise = new Promise(function (resolve) {
                resolve(_this.svgContent);
            });
            this.enqueuedPromises.push(svgExporterPromise);
            return new export_service_1.ExportService(mimeType, this.enqueuedPromises);
        };
        DiagramSvgConverter.prototype.generateImageFromSVG = function (desiredImageType, svg) {
            return __awaiter(this, void 0, void 0, function () {
                var encoding, canvas, context, svgWidth, svgHeight, targetDPI, dinA4DiagonalSizeInch, pixelRatio, imageDataURL;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            encoding = "image/" + desiredImageType;
                            canvas = document.createElement('canvas');
                            context = canvas.getContext('2d');
                            svgWidth = parseInt(svg.match(/<svg[^>]*width\s*=\s*\"?(\d+)\"?[^>]*>/)[1]);
                            svgHeight = parseInt(svg.match(/<svg[^>]*height\s*=\s*\"?(\d+)\"?[^>]*>/)[1]);
                            targetDPI = 300;
                            dinA4DiagonalSizeInch = 14.17;
                            pixelRatio = this.calculatePixelRatioForDPI(svgWidth, svgHeight, targetDPI, dinA4DiagonalSizeInch);
                            canvas.width = svgWidth * pixelRatio;
                            canvas.height = svgHeight * pixelRatio;
                            context.fillStyle = 'white';
                            context.fillRect(0, 0, canvas.width, canvas.height);
                            return [4, this.drawSVGToCanvas(svg, canvas, context, encoding)];
                        case 1:
                            imageDataURL = _a.sent();
                            return [2, imageDataURL];
                    }
                });
            });
        };
        DiagramSvgConverter.prototype.calculatePixelRatioForDPI = function (svgWidth, svgHeight, targetDPI, diagonalSize) {
            var square = function (num) { return num * num; };
            var svgWidthSquared = square(svgWidth);
            var svgHeightSquared = square(svgHeight);
            var diagonalResolution = Math.sqrt(svgWidthSquared + svgHeightSquared);
            var originalDPI = diagonalResolution / diagonalSize;
            var pixelRatio = targetDPI / originalDPI;
            return pixelRatio;
        };
        DiagramSvgConverter.prototype.drawSVGToCanvas = function (svgContent, canvas, context, encoding) {
            return __awaiter(this, void 0, void 0, function () {
                var imageElement, encodedSVG, loadImagePromise;
                return __generator(this, function (_a) {
                    imageElement = document.createElement('img');
                    encodedSVG = btoa(unescape(encodeURIComponent(svgContent)));
                    imageElement.setAttribute('src', "data:image/svg+xml;base64, " + encodedSVG);
                    loadImagePromise = new Promise(function (resolve, reject) {
                        imageElement.onload = function () {
                            context.drawImage(imageElement, 0, 0, canvas.width, canvas.height);
                            var encodedImageURL = canvas.toDataURL(encoding);
                            resolve(encodedImageURL);
                        };
                        imageElement.onerror = function (errorEvent) {
                            reject(errorEvent);
                        };
                    });
                    return [2, loadImagePromise];
                });
            });
        };
        return DiagramSvgConverter;
    }());
    exports.DiagramSvgConverter = DiagramSvgConverter;
});


;
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define('modules/design/bpmn-io/services/diagram-xml-converter',["require", "exports", "./export.service"], function (require, exports, export_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DiagramXmlConverter = (function () {
        function DiagramXmlConverter(xmlContent) {
            var _this = this;
            this.enqueuedPromises = [];
            this.bpmnExporter = function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, Promise.resolve(this.xmlContent)];
                });
            }); };
            this.xmlContent = xmlContent;
        }
        DiagramXmlConverter.prototype.asBpmn = function () {
            var formatterPromise = this.bpmnExporter();
            var mimeType = 'application/bpmn20-xml';
            this.enqueuedPromises.push(formatterPromise);
            return new export_service_1.ExportService(mimeType, this.enqueuedPromises);
        };
        return DiagramXmlConverter;
    }());
    exports.DiagramXmlConverter = DiagramXmlConverter;
});


;
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define('modules/design/bpmn-io/services/export.service',["require", "exports", "../repositories/diagram-export.repository"], function (require, exports, diagram_export_repository_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ExportService = (function () {
        function ExportService(currentMimeType, enqueuedPromises) {
            this.currentMimeType = currentMimeType;
            this.enqueuedPromises = enqueuedPromises;
            this.exportDiagramRepository = new diagram_export_repository_1.DiagramExportRepository();
        }
        ExportService.prototype.export = function (filename) {
            return __awaiter(this, void 0, void 0, function () {
                var contentToExport;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.enqueuedPromises.reduce(function (lastPromise, currentPromise) {
                                return lastPromise.then(function (result) {
                                    return currentPromise;
                                });
                            })];
                        case 1:
                            contentToExport = _a.sent();
                            this.exportDiagramRepository.exportDiagram(contentToExport, filename, this.currentMimeType);
                            this.enqueuedPromises = [];
                            return [2];
                    }
                });
            });
        };
        return ExportService;
    }());
    exports.ExportService = ExportService;
});


;
define('modules/design/bpmn-io/services/index',["require", "exports", "./diagram-export.service", "./diagram-print.service"], function (require, exports, diagram_export_service_1, diagram_print_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DiagramExportService = diagram_export_service_1.DiagramExportService;
    exports.DiagramPrintService = diagram_print_service_1.DiagramPrintService;
});


;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
define('modules/design/bpmn-xml-view/bpmn-xml-view',["require", "exports", "aurelia-binding", "aurelia-framework", "highlight.js", "highlightjs-line-numbers.js"], function (require, exports, aurelia_binding_1, aurelia_framework_1, hljs) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    hljs = __importStar(hljs);
    var highlightEngine = hljs;
    var BpmnXmlView = (function () {
        function BpmnXmlView() {
            this.highlighted = false;
        }
        BpmnXmlView.prototype.attached = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    highlightEngine.configure({
                        languages: ['xml'],
                    });
                    setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!this.codeElement) return [3, 2];
                                    return [4, this.highlight()];
                                case 1:
                                    _a.sent();
                                    _a.label = 2;
                                case 2: return [2];
                            }
                        });
                    }); }, 0);
                    return [2];
                });
            });
        };
        BpmnXmlView.prototype.xmlChanged = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.highlighted = false;
                            if (!this.codeElement) return [3, 2];
                            return [4, this.highlight()];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2: return [2];
                    }
                });
            });
        };
        BpmnXmlView.prototype.highlight = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.newXML = this.xml;
                            return [4, highlightEngine.lineNumbersBlock(this.codeElement)];
                        case 1:
                            _a.sent();
                            return [4, highlightEngine.highlightBlock(this.codeElement)];
                        case 2:
                            _a.sent();
                            setTimeout(function () {
                                _this.highlighted = true;
                            }, 0);
                            return [2];
                    }
                });
            });
        };
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", String)
        ], BpmnXmlView.prototype, "xml", void 0);
        __decorate([
            aurelia_framework_1.bindable({ defaultBindingMode: aurelia_binding_1.bindingMode.oneWay }),
            __metadata("design:type", String)
        ], BpmnXmlView.prototype, "newXML", void 0);
        return BpmnXmlView;
    }());
    exports.BpmnXmlView = BpmnXmlView;
});


;
define('text!modules/design/bpmn-xml-view/bpmn-xml-view.css',[],function(){return ".xml-view__xml {\n  margin: 0;\n  background-color: unset;\n  border: none;\n  font-size: 14px;\n  font-family: monospace;\n  line-height: 14px;\n  word-break: unset;\n  word-wrap: unset; }\n\n.xml-view {\n  display: flex;\n  height: 100%; }\n\n.hljs-tag {\n  white-space: normal; }\n\ntd.hljs-ln-numbers {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  text-align: right;\n  color: #ccc;\n  border-right: 1px solid #CCC;\n  vertical-align: top;\n  padding-right: 5px; }\n\ntd.hljs-ln-code {\n  padding-left: 10px; }\n";});;
define('text!modules/design/bpmn-xml-view/bpmn-xml-view.html',[],function(){return "<template>\n  <require from=\"./bpmn-xml-view.css\"></require>\n  <require from=\"highlight.js/styles/github-gist.css\"></require>\n  <div show.bind=\"highlighted\" class=\"xml-view\">\n    <pre class=\"xml-view__xml\"><code ref=\"codeElement\" textcontent.bind=\"newXML\" data-test-xml-view-content>\n    </code></pre>\n  </div>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/design/design',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "aurelia-router", "fs", "../../contracts/index", "../../environment", "../../services/notification-service/notification.service", "../../services/solution-explorer-services/open-diagram-state.service", "../../services/solution-is-remote-solution-module/solution-is-remote-solution.module", "../../services/is-running-in-electron-module/is-running-in-electron.module"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, aurelia_router_1, fs, index_1, environment_1, notification_service_1, open_diagram_state_service_1, solution_is_remote_solution_module_1, is_running_in_electron_module_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    fs = __importStar(fs);
    environment_1 = __importDefault(environment_1);
    var Design = (function () {
        function Design(eventAggregator, solutionService, router, notificationService, openDiagramStateService) {
            this.showSelectDiagramModal = false;
            this.showDetail = true;
            this.showXML = false;
            this.showDiff = false;
            this.propertyPanelShown = false;
            this.showPropertyPanelButton = true;
            this.showDiffDestinationButton = false;
            this.design = this;
            this.filteredSolutions = [];
            this.diagramArray = [];
            this.eventAggregator = eventAggregator;
            this.solutionService = solutionService;
            this.router = router;
            this.notificationService = notificationService;
            this.openDiagramStateService = openDiagramStateService;
        }
        Design.prototype.activate = function (routeParameters) {
            return __awaiter(this, void 0, void 0, function () {
                var solutionIsSet, diagramNameIsSet, routerAndInstructionIsNotNull, diagramNamesAreDifferent, diagramUrisAreDifferent, solutionIsDifferent, routeFromOtherView, navigateToAnotherDiagram, diagramNotFound, routeViewIsDetail, routeViewIsXML, routeViewIsDiff, diagramState, diagramHasState;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            solutionIsSet = routeParameters.solutionUri !== undefined;
                            diagramNameIsSet = routeParameters.diagramName !== undefined;
                            routerAndInstructionIsNotNull = this.router !== null && this.router.currentInstruction !== null;
                            diagramNamesAreDifferent = routerAndInstructionIsNotNull
                                ? routeParameters.diagramName !== this.router.currentInstruction.params.diagramName
                                : true;
                            diagramUrisAreDifferent = routerAndInstructionIsNotNull
                                ? routeParameters.diagramUri !== this.router.currentInstruction.queryParams.diagramUri ||
                                    routeParameters.diagramUri === undefined
                                : false;
                            solutionIsDifferent = routerAndInstructionIsNotNull
                                ? routeParameters.solutionUri !== this.router.currentInstruction.queryParams.solutionUri
                                : true;
                            routeFromOtherView = routerAndInstructionIsNotNull
                                ? this.router.currentInstruction.config.name !== 'design'
                                : true;
                            navigateToAnotherDiagram = diagramNamesAreDifferent || diagramUrisAreDifferent || routeFromOtherView || solutionIsDifferent;
                            if (is_running_in_electron_module_1.isRunningInElectron()) {
                                this.ipcRenderer = window.nodeRequire('electron').ipcRenderer;
                            }
                            if (!solutionIsSet) return [3, 4];
                            this.activeSolutionEntry = this.solutionService.getSolutionEntryForUri(routeParameters.solutionUri);
                            return [4, this.activeSolutionEntry.service.openSolution(this.activeSolutionEntry.uri, this.activeSolutionEntry.identity)];
                        case 1:
                            _a.sent();
                            if (solution_is_remote_solution_module_1.solutionIsRemoteSolution(this.activeSolutionEntry.uri)) {
                                if (is_running_in_electron_module_1.isRunningInElectron()) {
                                    this.ipcRenderer.send('menu_hide-save-entries');
                                }
                                this.eventAggregator.publish(environment_1.default.events.configPanel.solutionEntryChanged, this.activeSolutionEntry);
                            }
                            else if (is_running_in_electron_module_1.isRunningInElectron()) {
                                this.ipcRenderer.send('menu_show-all-menu-entries');
                            }
                            if (!diagramNameIsSet) return [3, 3];
                            return [4, this.setActiveDiagram(routeParameters.diagramName, routeParameters.diagramUri)];
                        case 2:
                            _a.sent();
                            _a.label = 3;
                        case 3:
                            diagramNotFound = this.activeDiagram === undefined;
                            if (diagramNotFound) {
                                this.router.navigateToRoute('start-page');
                                this.notificationService.showNotification(index_1.NotificationType.INFO, 'Diagram could not be opened!');
                            }
                            if (navigateToAnotherDiagram) {
                                this.xml = this.activeDiagram.xml;
                            }
                            _a.label = 4;
                        case 4:
                            routeViewIsDetail = routeParameters.view === 'detail';
                            routeViewIsXML = routeParameters.view === 'xml';
                            routeViewIsDiff = routeParameters.view === 'diff';
                            this.routeView = routeParameters.view;
                            if (routeViewIsDetail) {
                                this.showDetail = true;
                                this.showXML = false;
                                this.showDiff = false;
                                this.showPropertyPanelButton = true;
                                this.showDiffDestinationButton = false;
                                this.eventAggregator.publish(environment_1.default.events.bpmnio.bindKeyboard);
                            }
                            else if (routeViewIsXML) {
                                this.showDetail = false;
                                this.showXML = true;
                                this.showDiff = false;
                                this.showDiffDestinationButton = false;
                                this.showPropertyPanelButton = false;
                                this.eventAggregator.publish(environment_1.default.events.bpmnio.unbindKeyboard);
                            }
                            else if (routeViewIsDiff) {
                                this.eventAggregator.publish(environment_1.default.events.bpmnio.unbindKeyboard);
                                diagramState = this.openDiagramStateService.loadDiagramState(this.activeDiagram.uri);
                                diagramHasState = diagramState !== null;
                                if (diagramHasState) {
                                    this.xmlForDiff = diagramState.data.xml;
                                }
                                else {
                                    this.xmlForDiff = this.activeDiagram.xml;
                                }
                                this.showDiffView();
                            }
                            this.eventAggregator.publish(environment_1.default.events.navBar.noValidationError);
                            return [2];
                    }
                });
            });
        };
        Design.prototype.attached = function () {
            return __awaiter(this, void 0, void 0, function () {
                var routeViewIsDiff, routeViewIsXML;
                var _this = this;
                return __generator(this, function (_a) {
                    routeViewIsDiff = this.routeView === 'diff';
                    routeViewIsXML = this.routeView === 'xml';
                    if (routeViewIsDiff) {
                        this.showDiffView();
                    }
                    if (routeViewIsDiff || routeViewIsXML) {
                        this.eventAggregator.publish(environment_1.default.events.bpmnio.unbindKeyboard);
                    }
                    this.subscriptions = [
                        this.eventAggregator.subscribe(environment_1.default.events.bpmnio.propertyPanelActive, function (showPanel) {
                            _this.propertyPanelShown = showPanel;
                        }),
                        this.eventAggregator.subscribe(environment_1.default.events.diagramNeedsToBeUpdated, function () {
                            var diagramState = _this.openDiagramStateService.loadDiagramState(_this.activeDiagram.uri);
                            var newXml = diagramState === null ? fs.readFileSync(_this.activeDiagram.uri, 'utf8') : diagramState.data.xml;
                            _this.xmlForDiff = newXml;
                            _this.activeDiagram.xml = newXml;
                        }),
                    ];
                    if (is_running_in_electron_module_1.isRunningInElectron()) {
                        this.ipcRenderer.send('menu_show-all-menu-entries');
                        this.ipcRenderer.on('menubar__epxort_diagram_as', function (event, format) {
                            _this.eventAggregator.publish(environment_1.default.events.diagramDetail.exportDiagramAs + ":" + format);
                        });
                    }
                    this.eventAggregator.publish(environment_1.default.events.statusBar.showDiagramViewButtons);
                    return [2];
                });
            });
        };
        Design.prototype.detached = function () {
            this.eventAggregator.publish(environment_1.default.events.statusBar.hideDiagramViewButtons);
            this.subscriptions.forEach(function (subscription) { return subscription.dispose(); });
            if (is_running_in_electron_module_1.isRunningInElectron()) {
                this.ipcRenderer.send('menu_hide-diagram-related-entries');
            }
        };
        Design.prototype.determineActivationStrategy = function () {
            return aurelia_router_1.activationStrategy.invokeLifecycle;
        };
        Design.prototype.setDiffDestination = function (diffDestination, diagramName) {
            this.eventAggregator.publish(environment_1.default.events.diffView.setDiffDestination, [diffDestination, diagramName]);
            this.showSelectDiagramModal = false;
        };
        Design.prototype.openSelectDiagramModal = function () {
            return __awaiter(this, void 0, void 0, function () {
                var allSolutions, loadedSolutionPromises, loadedSolutions, lastSaved, openedDiagramIndex;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.diagramArray = [];
                            allSolutions = this.solutionService.getAllSolutionEntries();
                            loadedSolutionPromises = allSolutions.map(function (value) { return __awaiter(_this, void 0, void 0, function () {
                                var loadedSolution;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4, value.service.loadSolution()];
                                        case 1:
                                            loadedSolution = _a.sent();
                                            return [2, loadedSolution];
                                    }
                                });
                            }); });
                            return [4, Promise.all(loadedSolutionPromises)];
                        case 1:
                            loadedSolutions = _a.sent();
                            this.filteredSolutions = loadedSolutions.filter(function (solution) {
                                return solution.diagrams.length !== 0;
                            });
                            loadedSolutions.forEach(function (solution) {
                                solution.diagrams.forEach(function (diagram) {
                                    var diagramWithSolutionName = {
                                        diagram: diagram,
                                        solutionName: solution.name,
                                        solutionUri: solution.uri,
                                    };
                                    _this.diagramArray.push(diagramWithSolutionName);
                                });
                            });
                            lastSaved = {
                                diagram: this.activeDiagram,
                                solutionName: 'Last Saved',
                                solutionUri: 'lastSaved',
                            };
                            this.diagramArray.unshift(lastSaved);
                            openedDiagramIndex = this.diagramArray.findIndex(function (diagram) {
                                var diagramIsOpenedDiagram = diagram.solutionUri === _this.activeSolutionEntry.uri && diagram.diagram.name === _this.activeDiagram.name;
                                return diagramIsOpenedDiagram;
                            });
                            this.diagramArray.splice(openedDiagramIndex, 1);
                            this.showSelectDiagramModal = true;
                            return [2];
                    }
                });
            });
        };
        Design.prototype.cancelDialog = function () {
            this.showSelectDiagramModal = false;
        };
        Design.prototype.togglePanel = function () {
            this.eventAggregator.publish(environment_1.default.events.bpmnio.togglePropertyPanel);
        };
        Design.prototype.activeDiagramChanged = function (newValue, oldValue) {
            var noOldValue = oldValue === undefined;
            if (noOldValue) {
                return;
            }
            var activeDiagramDidNotChange = newValue.id === oldValue.id && newValue.uri === oldValue.uri;
            if (activeDiagramDidNotChange) {
                return;
            }
            this.xml = newValue.xml;
            this.xmlForDiff = newValue.xml;
        };
        Object.defineProperty(Design.prototype, "connectedRemoteSolutions", {
            get: function () {
                var _this = this;
                var remoteSolutions = this.solutionService.getRemoteSolutionEntries();
                var remoteSolutionsWithoutActive = remoteSolutions.filter(function (remoteSolution) {
                    return remoteSolution.uri !== _this.activeSolutionEntry.uri && remoteSolution.isConnected;
                });
                return remoteSolutionsWithoutActive;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Design.prototype, "remoteSolutions", {
            get: function () {
                var _this = this;
                var remoteSolutions = this.solutionService.getRemoteSolutionEntries();
                var remoteSolutionsWithoutActive = remoteSolutions.filter(function (remoteSolution) {
                    return remoteSolution.uri !== _this.activeSolutionEntry.uri;
                });
                return remoteSolutionsWithoutActive;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Design.prototype, "showRemoteSolutionOnDeployModal", {
            get: function () {
                return this.diagramDetail.showRemoteSolutionOnDeployModal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Design.prototype, "showSaveForStartModal", {
            get: function () {
                return this.diagramDetail.showSaveForStartModal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Design.prototype, "showStartWithOptionsModal", {
            get: function () {
                return this.diagramDetail.showStartWithOptionsModal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Design.prototype, "showStartEventModal", {
            get: function () {
                return this.diagramDetail.showStartEventModal;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Design.prototype, "diagramHasChanged", {
            get: function () {
                return this.diagramDetail.diagramHasChanged;
            },
            enumerable: true,
            configurable: true
        });
        Design.prototype.setActiveDiagram = function (diagramName, diagramUri) {
            return __awaiter(this, void 0, void 0, function () {
                var isOpenDiagram, persistedDiagrams, persistedActiveDiagram, diagramIsSavedOnRemoteSolution, diagramIsSavedOnLocalSolution, uri, solutionEntry, diagramFromSolution, diagram, diagramIsSavedOnLocalSolution;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            isOpenDiagram = this.activeSolutionEntry.uri === 'about:open-diagrams';
                            if (!isOpenDiagram) return [3, 4];
                            persistedDiagrams = this.solutionService.getOpenDiagrams();
                            persistedActiveDiagram = persistedDiagrams.find(function (diagram) {
                                return diagram.name === diagramName && (diagram.uri === diagramUri || diagramUri === undefined);
                            });
                            diagramIsSavedOnRemoteSolution = solution_is_remote_solution_module_1.solutionIsRemoteSolution(persistedActiveDiagram.uri);
                            diagramIsSavedOnLocalSolution = !persistedActiveDiagram.uri.startsWith('about:open-diagrams') && !diagramIsSavedOnRemoteSolution;
                            if (!diagramIsSavedOnLocalSolution) return [3, 1];
                            if (fs.existsSync(persistedActiveDiagram.uri)) {
                                persistedActiveDiagram.xml = fs.readFileSync(persistedActiveDiagram.uri, 'utf8');
                            }
                            return [3, 3];
                        case 1:
                            if (!diagramIsSavedOnRemoteSolution) return [3, 3];
                            uri = persistedActiveDiagram.uri.substring(0, persistedActiveDiagram.uri.lastIndexOf('/'));
                            solutionEntry = this.solutionService.getSolutionEntryForUri(uri);
                            return [4, solutionEntry.service.loadDiagram(diagramName)];
                        case 2:
                            diagramFromSolution = _a.sent();
                            persistedActiveDiagram.xml = diagramFromSolution.xml;
                            _a.label = 3;
                        case 3:
                            this.activeDiagram = persistedActiveDiagram;
                            return [3, 6];
                        case 4: return [4, this.activeSolutionEntry.service.loadDiagram(diagramName)];
                        case 5:
                            diagram = _a.sent();
                            diagramIsSavedOnLocalSolution = !diagram.uri.startsWith('about:open-diagrams') && !solution_is_remote_solution_module_1.solutionIsRemoteSolution(diagram.uri);
                            if (diagramIsSavedOnLocalSolution) {
                                diagram.xml = fs.readFileSync(diagram.uri, 'utf8');
                            }
                            this.activeDiagram = diagram;
                            _a.label = 6;
                        case 6: return [2];
                    }
                });
            });
        };
        Design.prototype.showDiffView = function () {
            this.showDiff = true;
            this.showDetail = false;
            this.showXML = false;
            this.showPropertyPanelButton = false;
            this.showDiffDestinationButton = true;
        };
        Design.prototype.modalCanBeSuppressed = function (destinationInstruction) {
            var oldView = this.router.currentInstruction.params.view;
            var destinationView = destinationInstruction.params.view;
            var navigatingBetween = function (routeA, routeB) {
                return (routeA === oldView || routeA === destinationView) && (routeB === oldView || routeB === destinationView);
            };
            var shouldModalBeSuppressed = navigatingBetween('diff', 'xml') || navigatingBetween('diff', 'detail') || navigatingBetween('xml', 'detail');
            return shouldModalBeSuppressed;
        };
        __decorate([
            aurelia_framework_1.observable(),
            __metadata("design:type", Object)
        ], Design.prototype, "activeDiagram", void 0);
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", Object)
        ], Design.prototype, "activeSolutionEntry", void 0);
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", String)
        ], Design.prototype, "xmlForDiff", void 0);
        __decorate([
            aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.oneWay }),
            __metadata("design:type", String)
        ], Design.prototype, "xml", void 0);
        Design = __decorate([
            aurelia_framework_1.inject(aurelia_event_aggregator_1.EventAggregator, 'SolutionService', aurelia_router_1.Router, 'NotificationService', 'OpenDiagramStateService'),
            __metadata("design:paramtypes", [aurelia_event_aggregator_1.EventAggregator, Object, aurelia_router_1.Router,
                notification_service_1.NotificationService,
                open_diagram_state_service_1.OpenDiagramStateService])
        ], Design);
        return Design;
    }());
    exports.Design = Design;
});


;
define('text!modules/design/design.css',[],function(){return ".design {\n  height: 100%;\n  display: flex;\n  flex: 1; }\n\nbpmn-xml-view {\n  height: 100%;\n  margin-right: 36px; }\n\ndiagram-detail {\n  display: flex;\n  flex: 1;\n  height: 100%;\n  margin-right: 36px; }\n\n.design__diff-destination-button {\n  margin: auto;\n  background: inherit;\n  border: none;\n  opacity: 0.5; }\n\n.design__diff-destination-button--disabled {\n  opacity: 0.2 !important; }\n\n.design__diff-destination-button:hover {\n  opacity: 1; }\n\nbpmn-diff-view {\n  flex: 1;\n  height: 100%;\n  margin-right: 36px; }\n\n.design-layout__tools-right {\n  position: absolute;\n  width: 36px;\n  top: 42px;\n  right: 0px;\n  bottom: 20px;\n  background-color: #f7f7f7;\n  border-left: 2px solid #dcdbdb; }\n\n.design-layout__tool {\n  display: block;\n  padding: 5px;\n  text-align: center; }\n\n.design-layout__tool:hover {\n  opacity: 1; }\n\n.design-layout__tool--active {\n  opacity: 1; }\n\n.design-layout__tool--disabled {\n  display: block;\n  padding: 2px;\n  text-align: center;\n  opacity: 0.2 !important; }\n\n.design-layout__tool--disabled:hover {\n  opacity: 0.2; }\n\n.design-modal__textarea {\n  height: 120px;\n  max-height: 200px;\n  min-height: 30px; }\n\n.diagram-list_dropdown {\n  max-width: 100%; }\n\n.design__diff-view-dropdown {\n  position: absolute;\n  will-change: transform;\n  top: 0px;\n  transform: translate3d(-147px, 31px, 0px); }\n";});;
define('text!modules/design/design.html',[],function(){return "<template>\n  <require from=\"./design.css\"></require>\n  <require from=\"./diagram-detail/diagram-detail\"></require>\n  <require from=\"./bpmn-xml-view/bpmn-xml-view\"></require>\n  <require from=\"./bpmn-diff-view/bpmn-diff-view\"></require>\n\n  <div class=\"design\">\n\n    <diagram-detail show.bind=\"showDetail\" view-model.ref=\"diagramDetail\" active-diagram.bind=\"activeDiagram\" xml.two-way=\"xml\" active-solution-entry.bind=\"activeSolutionEntry\" data-test-diagram-detail></diagram-detail>\n    <bpmn-xml-view show.bind=\"showXML\" xml.bind=\"xml\" data-test-bpmn-xml-view></bpmn-xml-view>\n    <bpmn-diff-view if.bind=\"showDiff\" saved-xml.to-view=\"activeDiagram.xml\" unconverted-current-xml.to-view=\"xmlForDiff\" process-model-id.to-view=\"activeDiagram.name\" data-test-bpmn-diff-view></bpmn-diff-view>\n\n    <div class=\"design-layout__tools-right\">\n      <div class=\"tool-list tool-list--vertical\">\n        <div show.bind=\"showPropertyPanelButton\" id=\"toggleButtonPropertyPanel\" class=\"design-layout__tool\">\n          <button class=\"button menu-bar__menu-left--tool\" class.bind=\"propertyPanelShown ? 'design-layout__tool--active' : ''\" click.delegate=\"togglePanel()\" title=\"Toggle visibility of the Property Panel\" data-test-toggle-propertypanel>\n            <i class=\"fas fa-sliders-h\"></i>\n          </button>\n        </div>\n        <button type=\"button\" if.bind=\"showDiffDestinationButton\" class=\"design-layout__tool design__diff-destination-button dropdown-toggle\" class.bind=\"remoteSolutions.length < 1 ? 'design__diff-destination-button--disabled' : ''\" title.bind=\"remoteSolutions.length > 0 ? 'Set diff destination' : 'There is no other diff destination'\" disabled.bind=\"remoteSolutions.length < 1\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n          <i class=\"fas fa-database\"></i>\n          <i class=\"fas fa-angle-down start-options__icon\"></i>\n        </button>\n        <div class=\"dropdown-menu design__diff-view-dropdown\">\n          <li class=\"dropdown-item\" click.delegate=\"setDiffDestination('lastSaved')\">Last saved version</li>\n          <li repeat.for=\"solution of remoteSolutions\" class=\"dropdown-item\" click.delegate=\"setDiffDestination(solution.uri)\">${solution.uri}</li>\n        </div>\n        <button type=\"button\" if.bind=\"!showPropertyPanelButton && showXML === false\" class=\"design-layout__tool design__diff-destination-button dropdown-toggle\" title=\"Diff against other diagrams\" click.delegate=\"openSelectDiagramModal()\" id=\"js-diff-against-other-diagramButton\">\n          <i class=\"fas fa-exchange-alt\"></i>\n        </button>\n      </div>\n    </div>\n\n    <modal show.bind=\"showSaveForStartModal\"\n          header-text=\"Document Contains Changes\"\n          body-text=\"Your process has unsaved changes. Save changes to diagram before starting the process?\">\n      <template replace-part=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" id=\"cancelButtonProcessStart\" click.delegate=\"diagramDetail.cancelDialog()\">Cancel</button>\n        <button type=\"button\" class=\"btn btn-primary\" data-dismiss=\"modal\" id=\"saveButtonProcessStart\" click.delegate=\"diagramDetail.saveChangesBeforeStart()\" >Save and start process</button>\n      </template>\n    </modal>\n\n    <modal show.bind=\"showStartWithOptionsModal\"\n          header-text=\"Start Options\"\n          body-text=\"Your process has unsaved changes. Save changes to diagram before starting the process?\"\n          origin.bind=\"design\">\n      <template replace-part=\"modal-body\">\n        <div class=\"form-group\">\n          <label for=\"correlationId\"><b>Custom Correlation ID</b></label>\n          <input class=\"form-control input-field\" class.bind=\"diagramDetail.hasValidationError ? 'wrong-input' : ''\" id=\"correlationId\" aria-describedby=\"correlationIdHelp\" placeholder=\"Correlation ID\" type=\"text\" value.bind=\"diagramDetail.customCorrelationId\">\n          <ul if.bind=\"diagramDetail.hasValidationError\" class=\"correlation-id-error__container\">\n            <li class=\"error-list__container\">Your diagram contains at least one invalid-character\n              Supported characters: [a-z, 0-9, -, _, ä, ü, ö, ß, .]\n            </li>\n          </ul>\n          <small id=\"correlationIdHelp\" class=\"form-text text-muted\">\n              Setting a correlation ID is optional; a correlation ID is useful to identify a process instance; this does not need to be unique.\n          </small>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"initialToken\"><b>Initial StartEvent Token</b></label>\n          <textarea class=\"form-control input-field design-modal__textarea\" id=\"initialToken\" rows=\"4\" placeholder=\"Put your JSON payload here.\" value.bind=\"origin.diagramDetail.initialToken\"></textarea>\n          <small class=\"form-text text-muted\">\n              Setting an initial token (JSON payload) is optional; use this if you want to start your process with parameter.\n              If the StartEvent has a TextAnnotation beginning with `StartToken:`, it is used as the default token.\n          </small>\n        </div>\n\n        <small if.bind=\"diagramHasChanged\" class=\"form-text text-muted\">\n            Your diagram contains unsaved changes. Please save them before starting.\n        </small>\n      </template>\n\n      <template replace-part=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" id=\"cancelButtonProcessStart\" click.delegate=\"diagramDetail.cancelDialog()\">Cancel</button>\n        <button type=\"button\" class=\"btn btn-primary\" data-dismiss=\"modal\" id=\"startButton\" click.delegate=\"diagramDetail.setOptionsAndStart()\" disabled.bind=\"diagramDetail.hasValidationError\">${ diagramHasChanged ? 'Save and start process' : 'Start process'}</button>\n      </template>\n    </modal>\n\n    <modal show.bind=\"showStartEventModal\"\n          header-text=\"Select initial StartEvent\"\n          body-text=\"Your process has unsaved changes. Save changes to diagram before starting the process?\">\n      <template replace-part=\"modal-body\">\n        This process contains more than one start event.<br>\n        Please select a start event that should be used to start the process.\n        <div>\n          <select value.bind=\"diagramDetail.selectedStartEventId\" ref=\"dropdownMenu\" class=\"process-start-event-modal-dialog__dropdown-menu\">\n            <option>Select StartEvent</option>\n            <option repeat.for=\"startEvent of diagramDetail.processesStartEvents\" value.bind=\"startEvent.id\">${startEvent.id}</option>\n          </select>\n        </div>\n      </template>\n      <template replace-part=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" id=\"cancelStartEventSelection\" click.delegate=\"diagramDetail.cancelDialog()\">Cancel</button>\n        <button type=\"button\" class=\"btn btn-primary\" data-dismiss=\"modal\" id=\"startProcessWithSelectedStartEvent\" click.delegate=\"diagramDetail.continueStarting()\" disabled.bind=\"!diagramDetail.selectedStartEventId\">Start Process</button>\n      </template>\n    </modal>\n\n    <modal show.bind=\"showSelectDiagramModal\"\n          header-text=\"Choose a Diagram\"\n          id=\"js-chooseDiagram-modal\">\n      <template replace-part=\"modal-body\">\n        <select value.bind=\"selectedDiagram\" class=\"diagram-list_dropdown\" id=\"js-diagram-dropdown\">\n          <option>Select a diagram to compare it to the currently opened diagram</option>\n          <option repeat.for=\"diagram of diagramArray\" id=\"${diagram.diagram.name}\" model.bind=\"diagram\">${diagram.solutionName === 'Last Saved' ? diagram.solutionName : `${diagram.solutionName} | ${diagram.diagram.name}`}</option>\n        </select>\n      </template>\n      <template replace-part=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" id=\"js-cancel-diagram-selection\" click.delegate=\"cancelDialog()\">Cancel</button>\n        <button type=\"button\" class=\"btn btn-primary\" data-dismiss=\"modal\" id=\"js-choose-diagram\" click.delegate=\"setDiffDestination(selectedDiagram.solutionUri, selectedDiagram.diagram.name)\">Compare</button>\n      </template>\n    </modal>\n  </div>\n</template>\n";});;
define('modules/design/diagram-detail/contracts/IDiagramDetailRepository',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('modules/design/diagram-detail/contracts/IDiagramDetailService',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('modules/design/diagram-detail/contracts/index',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/design/diagram-detail/diagram-detail',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "aurelia-router", "aurelia-validation", "../../../contracts/index", "../../../environment", "../../../services/notification-service/notification.service", "../../../services/deploy-diagram-service/deploy-diagram.service", "../../../services/save-diagram-service/save-diagram.service", "../../../services/expose-functionality-module/expose-functionality.module", "./service/diagram-detail.service", "../../../services/is-running-in-electron-module/is-running-in-electron.module"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, aurelia_router_1, aurelia_validation_1, index_1, environment_1, notification_service_1, deploy_diagram_service_1, save_diagram_service_1, expose_functionality_module_1, diagram_detail_service_1, is_running_in_electron_module_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var DiagramDetail = (function () {
        function DiagramDetail(diagramDetailService, notificationService, eventAggregator, router, validationController, deployDiagramService, saveDiagramService) {
            var _this = this;
            this.showSaveForStartModal = false;
            this.showStartEventModal = false;
            this.showStartWithOptionsModal = false;
            this.processesStartEvents = [];
            this.hasValidationError = false;
            this.diagramIsInvalid = false;
            this.showRemoteSolutionOnDeployModal = false;
            this.remoteSolutions = [];
            this.showDiagramExistingModal = false;
            this.correlationIdValidationRegExpList = {
                alphanumeric: /^[a-z0-9]/i,
                specialCharacters: /^[._ -]/i,
                german: /^[äöüß]/i,
            };
            this.clickedOnCustomStart = false;
            this.electronOnSaveDiagramAs = function (_) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.saveDiagramAs()];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            }); };
            this.electronOnSaveDiagram = function (_) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.eventAggregator.publish(environment_1.default.events.diagramDetail.saveDiagram);
                    return [2];
                });
            }); };
            this.diagramDetailService = diagramDetailService;
            this.notificationService = notificationService;
            this.eventAggregator = eventAggregator;
            this.router = router;
            this.validationController = validationController;
            this.deployDiagramService = deployDiagramService;
            this.saveDiagramService = saveDiagramService;
            expose_functionality_module_1.exposeFunctionForTesting('saveDiagramAs', function (path) {
                _this.saveDiagramAs(path);
            });
        }
        DiagramDetail.prototype.determineActivationStrategy = function () {
            return 'replace';
        };
        DiagramDetail.prototype.getXML = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, this.bpmnio.getXML()];
                });
            });
        };
        DiagramDetail.prototype.attached = function () {
            var _this = this;
            this.diagramHasChanged = false;
            this.selectedRemoteSolution = this.getPreviouslySelectedRemoteSolution();
            if (is_running_in_electron_module_1.isRunningInElectron()) {
                this.ipcRenderer = window.nodeRequire('electron').ipcRenderer;
                this.ipcRenderer.on('menubar__start_save_diagram_as', this.electronOnSaveDiagramAs);
                this.ipcRenderer.on('menubar__start_save_diagram', this.electronOnSaveDiagram);
            }
            this.subscriptions = [
                this.validationController.subscribe(function (event) {
                    _this.handleFormValidateEvents(event);
                }),
                this.eventAggregator.subscribe(environment_1.default.events.diagramDetail.saveDiagram, function () { return __awaiter(_this, void 0, void 0, function () {
                    var error_1;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                return [4, this.saveDiagram()];
                            case 1:
                                _a.sent();
                                return [3, 3];
                            case 2:
                                error_1 = _a.sent();
                                if (error_1.message === 'No path was selected.') {
                                    return [2];
                                }
                                throw error_1;
                            case 3:
                                this.eventAggregator.publish(environment_1.default.events.diagramDetail.saveDiagramDone);
                                return [2];
                        }
                    });
                }); }),
                this.eventAggregator.subscribe(environment_1.default.events.diagramDetail.uploadProcess, function () {
                    _this.deployDiagram();
                }),
                this.eventAggregator.subscribe(environment_1.default.events.differsFromOriginal, function (savingNeeded) {
                    _this.diagramHasChanged = savingNeeded;
                }),
                this.eventAggregator.subscribe(environment_1.default.events.navBar.validationError, function () {
                    _this.diagramIsInvalid = true;
                }),
                this.eventAggregator.subscribe(environment_1.default.events.navBar.noValidationError, function () {
                    _this.diagramIsInvalid = false;
                }),
                this.eventAggregator.subscribe(environment_1.default.events.diagramDetail.startProcess, function () {
                    _this.showStartDialog();
                }),
                this.eventAggregator.subscribe(environment_1.default.events.diagramDetail.startProcessWithOptions, function () { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this.clickedOnCustomStart = true;
                                return [4, this.showSelectStartEventDialog()];
                            case 1:
                                _a.sent();
                                return [2];
                        }
                    });
                }); }),
                this.eventAggregator.subscribe(environment_1.default.events.diagramDetail.saveDiagramAs, function () {
                    _this.electronOnSaveDiagramAs();
                }),
                this.eventAggregator.subscribe(environment_1.default.events.diagramChangedOutsideTheStudio, function (diagramUri) {
                    var changedDiagramIsActiveDiagram = diagramUri === _this.activeDiagramUri;
                    if (changedDiagramIsActiveDiagram) {
                        _this.eventAggregator.publish(environment_1.default.events.differsFromOriginal, true);
                    }
                }),
            ];
        };
        DiagramDetail.prototype.selectedRemoteSolutionChanged = function () {
            var selectedRemoteSolutionAsString = JSON.stringify(this.selectedRemoteSolution);
            localStorage.setItem('selectedRemoteSolution', selectedRemoteSolutionAsString);
        };
        DiagramDetail.prototype.correlationChanged = function (newValue) {
            var _this = this;
            var inputAsCharArray = newValue.split('');
            var correlationIdPassesIdCheck = !inputAsCharArray.some(function (letter) {
                return Object.values(_this.correlationIdValidationRegExpList).forEach(function (regEx, index) {
                    var letterIsInvalid = letter.match(_this.correlationIdValidationRegExpList[index]) !== null;
                    if (letterIsInvalid) {
                        return false;
                    }
                    return true;
                });
            });
            var correlationIdDoesNotStartWithWhitespace = !newValue.match(/^\s/);
            var correlationIdDoesNotEndWithWhitespace = !newValue.match(/\s+$/);
            if (correlationIdDoesNotStartWithWhitespace &&
                correlationIdPassesIdCheck &&
                correlationIdDoesNotEndWithWhitespace) {
                this.hasValidationError = false;
            }
            else {
                this.hasValidationError = true;
            }
        };
        DiagramDetail.prototype.detached = function () {
            if (is_running_in_electron_module_1.isRunningInElectron()) {
                this.ipcRenderer.removeListener('menubar__start_save_diagram', this.electronOnSaveDiagram);
                this.ipcRenderer.removeListener('menubar__start_save_diagram_as', this.electronOnSaveDiagramAs);
            }
            for (var _i = 0, _a = this.subscriptions; _i < _a.length; _i++) {
                var subscription = _a[_i];
                subscription.dispose();
            }
        };
        Object.defineProperty(DiagramDetail.prototype, "activeDiagramUri", {
            get: function () {
                return this.activeDiagram.uri;
            },
            enumerable: true,
            configurable: true
        });
        DiagramDetail.prototype.setOptionsAndStart = function () {
            return __awaiter(this, void 0, void 0, function () {
                var parsedInitialToken;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (this.hasValidationError) {
                                return [2];
                            }
                            if (!this.diagramHasChanged) return [3, 2];
                            return [4, this.saveDiagram()];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            parsedInitialToken = this.getInitialTokenValues(this.initialToken);
                            return [4, this.startProcess(parsedInitialToken)];
                        case 3:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        DiagramDetail.prototype.startProcess = function (parsedInitialToken) {
            return __awaiter(this, void 0, void 0, function () {
                var defaultToken, startToken, startRequestPayload, useDefaultStartCallbackType, response, correlationId, processInstanceId, error_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (this.selectedStartEventId === null) {
                                return [2];
                            }
                            this.dropInvalidFormData();
                            this.getTokenFromStartEventAnnotation();
                            defaultToken = this.getInitialTokenValues(this.initialToken);
                            startToken = defaultToken === '' ? undefined : defaultToken;
                            startRequestPayload = {
                                inputValues: parsedInitialToken || startToken,
                                correlationId: this.customCorrelationId,
                            };
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            useDefaultStartCallbackType = undefined;
                            return [4, this.diagramDetailService.startProcessInstance(this.activeSolutionEntry.identity, this.activeDiagram.id, startRequestPayload, useDefaultStartCallbackType, this.selectedStartEventId)];
                        case 2:
                            response = _a.sent();
                            correlationId = response.correlationId, processInstanceId = response.processInstanceId;
                            this.router.navigateToRoute('live-execution-tracker', {
                                diagramName: this.activeDiagram.id,
                                solutionUri: this.activeSolutionEntry.uri,
                                correlationId: correlationId,
                                processInstanceId: processInstanceId,
                            });
                            return [3, 4];
                        case 3:
                            error_2 = _a.sent();
                            this.notificationService.showNotification(index_1.NotificationType.ERROR, error_2.message);
                            return [3, 4];
                        case 4:
                            this.clickedOnCustomStart = false;
                            return [2];
                    }
                });
            });
        };
        DiagramDetail.prototype.saveChangesBeforeStart = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.showSaveForStartModal = false;
                            return [4, this.saveDiagram()];
                        case 1:
                            _a.sent();
                            return [4, this.showSelectStartEventDialog()];
                        case 2:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        DiagramDetail.prototype.saveDiagram = function () {
            return __awaiter(this, void 0, void 0, function () {
                var xml;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (this.diagramIsInvalid) {
                                return [2];
                            }
                            return [4, this.bpmnio.getXML()];
                        case 1:
                            xml = _a.sent();
                            return [4, this.bpmnio.saveDiagramState(this.activeDiagramUri)];
                        case 2:
                            _a.sent();
                            return [4, this.saveDiagramService.saveDiagram(this.activeSolutionEntry, this.activeDiagram, xml)];
                        case 3:
                            _a.sent();
                            this.bpmnio.saveCurrentXML();
                            this.diagramHasChanged = false;
                            return [2];
                    }
                });
            });
        };
        DiagramDetail.prototype.saveDiagramAs = function (path) {
            return __awaiter(this, void 0, void 0, function () {
                var xml;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (this.diagramIsInvalid) {
                                return [2];
                            }
                            return [4, this.getXMLOrDisplayError()];
                        case 1:
                            xml = _a.sent();
                            if (!xml) {
                                return [2];
                            }
                            return [4, this.saveDiagramService.saveDiagramAs(this.activeSolutionEntry, this.activeDiagram, xml, path)];
                        case 2:
                            _a.sent();
                            this.bpmnio.saveStateForNewUri = true;
                            this.bpmnio.saveCurrentXML();
                            this.diagramHasChanged = false;
                            return [2];
                    }
                });
            });
        };
        DiagramDetail.prototype.showSelectStartEventDialog = function () {
            return __awaiter(this, void 0, void 0, function () {
                var onlyOneStarteventAvailable;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.updateProcessStartEvents()];
                        case 1:
                            _a.sent();
                            onlyOneStarteventAvailable = this.processesStartEvents.length === 1;
                            if (onlyOneStarteventAvailable) {
                                this.selectedStartEventId = this.processesStartEvents[0].id;
                                this.continueStarting();
                                return [2];
                            }
                            this.showStartEventModal = true;
                            this.showSaveForStartModal = false;
                            return [2];
                    }
                });
            });
        };
        DiagramDetail.prototype.continueStarting = function () {
            var functionCallDoesNotComeFromCustomModal = this.clickedOnCustomStart === false;
            if (functionCallDoesNotComeFromCustomModal) {
                this.startProcess();
                this.clickedOnCustomStart = false;
            }
            else {
                this.showCustomStartModal();
            }
            this.showStartEventModal = false;
        };
        DiagramDetail.prototype.cancelDialog = function () {
            this.showSaveForStartModal = false;
            this.showStartEventModal = false;
            this.showStartWithOptionsModal = false;
            this.showRemoteSolutionOnDeployModal = false;
            this.clickedOnCustomStart = false;
        };
        DiagramDetail.prototype.showCustomStartModal = function () {
            this.getTokenFromStartEventAnnotation();
            this.showStartWithOptionsModal = true;
        };
        DiagramDetail.prototype.getPreviouslySelectedRemoteSolution = function () {
            var selectedRemoteSolutionFromLocalStorage = localStorage.getItem('selectedRemoteSolution');
            if (selectedRemoteSolutionFromLocalStorage === null) {
                return undefined;
            }
            return JSON.parse(selectedRemoteSolutionFromLocalStorage);
        };
        DiagramDetail.prototype.getInitialTokenValues = function (token) {
            try {
                return JSON.parse(token);
            }
            catch (error) {
                return token;
            }
        };
        DiagramDetail.prototype.getXMLOrDisplayError = function () {
            return __awaiter(this, void 0, void 0, function () {
                var error_3;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4, this.bpmnio.getXML()];
                        case 1: return [2, _a.sent()];
                        case 2:
                            error_3 = _a.sent();
                            this.notificationService.showNotification(index_1.NotificationType.ERROR, "Unable to get the XML: " + error_3 + ".");
                            return [2, undefined];
                        case 3: return [2];
                    }
                });
            });
        };
        DiagramDetail.prototype.getTokenFromStartEventAnnotation = function () {
            var elementRegistry = this.bpmnio.modeler.get('elementRegistry');
            var noStartEventId = this.selectedStartEventId === undefined;
            var startEvent;
            if (noStartEventId) {
                startEvent = elementRegistry.filter(function (element) {
                    return element.type === 'bpmn:StartEvent';
                })[0];
            }
            else {
                startEvent = elementRegistry.get(this.selectedStartEventId);
            }
            var startEventAssociations = startEvent.outgoing.filter(function (connection) {
                var connectionIsAssociation = connection.type === 'bpmn:Association';
                return connectionIsAssociation;
            });
            var associationWithStartToken = startEventAssociations.find(function (connection) {
                var associationText = connection.target.businessObject.text;
                var associationTextIsEmpty = associationText === undefined || associationText === null;
                if (associationTextIsEmpty) {
                    return undefined;
                }
                var token = associationText.trim();
                return token.startsWith('StartToken:');
            });
            var associationWithStartTokenIsExisting = associationWithStartToken !== undefined;
            if (associationWithStartTokenIsExisting) {
                var untrimmedInitialToken = associationWithStartToken.target.businessObject.text;
                var untrimmedInitialTokenIsUndefined = untrimmedInitialToken === undefined;
                if (untrimmedInitialTokenIsUndefined) {
                    this.initialToken = '';
                    return;
                }
                var initialToken = untrimmedInitialToken.replace('StartToken:', '').trim();
                this.initialToken = initialToken.replace(/(\s*?{\s*?|\s*?,\s*?)(['"])?([a-zA-Z0-9]+)(['"])?:/g, '$1"$3":');
                return;
            }
            this.initialToken = '';
        };
        DiagramDetail.prototype.updateProcessStartEvents = function () {
            return __awaiter(this, void 0, void 0, function () {
                var startEventResponse;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.diagramDetailService.getStartEventsForProcessModel(this.activeSolutionEntry.identity, this.activeDiagram.id)];
                        case 1:
                            startEventResponse = _a.sent();
                            this.processesStartEvents = startEventResponse.events;
                            return [2];
                    }
                });
            });
        };
        DiagramDetail.prototype.deployDiagram = function () {
            return __awaiter(this, void 0, void 0, function () {
                var xml, _a, deployResult;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!this.diagramHasChanged) return [3, 2];
                            return [4, this.bpmnio.getXML()];
                        case 1:
                            _a = _b.sent();
                            return [3, 3];
                        case 2:
                            _a = undefined;
                            _b.label = 3;
                        case 3:
                            xml = _a;
                            return [4, this.deployDiagramService.deployDiagram(this.activeSolutionEntry, this.activeDiagram, xml)];
                        case 4:
                            deployResult = _b.sent();
                            if (deployResult === undefined) {
                                return [2];
                            }
                            this.router.navigateToRoute('design', {
                                diagramName: deployResult.diagram.name,
                                solutionUri: deployResult.solution.uri,
                            });
                            return [2];
                    }
                });
            });
        };
        DiagramDetail.prototype.showStartDialog = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.diagramHasChanged) return [3, 1];
                            this.showSaveForStartModal = true;
                            return [3, 3];
                        case 1: return [4, this.showSelectStartEventDialog()];
                        case 2:
                            _a.sent();
                            _a.label = 3;
                        case 3: return [2];
                    }
                });
            });
        };
        DiagramDetail.prototype.handleFormValidateEvents = function (event) {
            var eventIsValidateEvent = event.type !== 'validate';
            if (eventIsValidateEvent) {
                return;
            }
            for (var _i = 0, _a = event.results; _i < _a.length; _i++) {
                var result = _a[_i];
                var resultIsNotValid = result.valid === false;
                if (resultIsNotValid) {
                    this.eventAggregator.publish(environment_1.default.events.navBar.validationError);
                    this.diagramIsInvalid = true;
                    return;
                }
            }
            this.eventAggregator.publish(environment_1.default.events.navBar.noValidationError);
            this.diagramIsInvalid = false;
        };
        DiagramDetail.prototype.dropInvalidFormData = function () {
            var registry = this.bpmnio.modeler.get('elementRegistry');
            registry.forEach(function (element) {
                var elementIsUserTask = element.type === 'bpmn:UserTask';
                if (elementIsUserTask) {
                    var businessObj = element.businessObject;
                    var businessObjHasExtensionElements = businessObj.extensionElements !== undefined;
                    if (businessObjHasExtensionElements) {
                        var extensions = businessObj.extensionElements;
                        extensions.values = extensions.values.filter(function (value) {
                            var typeIsNotCamundaFormData = value.$type !== 'camunda:FormData';
                            var elementContainsFields = value.fields !== undefined && value.fields.length > 0;
                            var keepThisValue = typeIsNotCamundaFormData || elementContainsFields;
                            return keepThisValue;
                        });
                        var noExtensionValuesSet = extensions.values.length === 0;
                        if (noExtensionValuesSet) {
                            delete businessObj.extensionElements;
                        }
                    }
                }
            });
        };
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", Object)
        ], DiagramDetail.prototype, "activeDiagram", void 0);
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", Object)
        ], DiagramDetail.prototype, "activeSolutionEntry", void 0);
        __decorate([
            aurelia_framework_1.observable({ changeHandler: 'correlationChanged' }),
            __metadata("design:type", String)
        ], DiagramDetail.prototype, "customCorrelationId", void 0);
        __decorate([
            aurelia_framework_1.observable({ changeHandler: 'diagramHasChangedChanged' }),
            __metadata("design:type", Boolean)
        ], DiagramDetail.prototype, "diagramHasChanged", void 0);
        __decorate([
            aurelia_framework_1.bindable({ defaultBindingMode: aurelia_framework_1.bindingMode.oneWay }),
            __metadata("design:type", String)
        ], DiagramDetail.prototype, "xml", void 0);
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", String)
        ], DiagramDetail.prototype, "initialToken", void 0);
        __decorate([
            aurelia_framework_1.observable,
            __metadata("design:type", Object)
        ], DiagramDetail.prototype, "selectedRemoteSolution", void 0);
        __decorate([
            aurelia_framework_1.computedFrom('activeDiagram.uri'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [])
        ], DiagramDetail.prototype, "activeDiagramUri", null);
        DiagramDetail = __decorate([
            aurelia_framework_1.inject('DiagramDetailService', 'NotificationService', aurelia_event_aggregator_1.EventAggregator, aurelia_router_1.Router, aurelia_validation_1.ValidationController, deploy_diagram_service_1.DeployDiagramService, save_diagram_service_1.SaveDiagramService),
            __metadata("design:paramtypes", [diagram_detail_service_1.DiagramDetailService,
                notification_service_1.NotificationService,
                aurelia_event_aggregator_1.EventAggregator,
                aurelia_router_1.Router,
                aurelia_validation_1.ValidationController,
                deploy_diagram_service_1.DeployDiagramService,
                save_diagram_service_1.SaveDiagramService])
        ], DiagramDetail);
        return DiagramDetail;
    }());
    exports.DiagramDetail = DiagramDetail;
});


;
define('text!modules/design/diagram-detail/diagram-detail.css',[],function(){return "diagram-detail {\n  display: flex;\n  flex: 1;\n  height: 100%;\n  align-items: stretch; }\n\nbpmn-io {\n  display: flex;\n  flex: 1;\n  height: 100%; }\n\n/*\n * Save Modal Dialog\n*/\n.save-modal-dialog {\n  position: relative;\n  top: 20%;\n  width: 400px; }\n\n.save-modal-header {\n  text-align: center; }\n\n.show-modal {\n  display: block; }\n\n.custom-button {\n  margin: 10px 0;\n  padding: 5px 10px;\n  background-color: white;\n  border: 1px solid darkgray;\n  border-radius: 4px; }\n\n/*\n * Select Start Event Modal\n */\n.select-start-event-modal__dialog {\n  position: relative;\n  top: 20%;\n  width: 400px; }\n\n.input-field:focus {\n  border-color: #e6e6e6 !important;\n  box-shadow: none; }\n\n.wrong-input {\n  border-color: red !important; }\n\n.wrong-input:focus {\n  border-color: red !important;\n  box-shadow: none; }\n\n.correlation-id-error__container {\n  padding: 2px;\n  padding-left: 25px;\n  margin-top: -3px;\n  margin-right: 0px;\n  border: 1px solid red;\n  border-top: none;\n  color: red; }\n\n.error-list__container {\n  list-style-type: disc; }\n";});;
define('text!modules/design/diagram-detail/diagram-detail.html',[],function(){return "<template>\n  <require from=\"../bpmn-io/bpmn-io\"></require>\n  <require from=\"./diagram-detail.css\"></require>\n  <require from=\"spectrum-colorpicker/spectrum.css\"></require>\n\n  <bpmn-io view-model.ref=\"bpmnio\" xml.two-way=\"xml\" diagram-uri.bind=\"activeDiagramUri\" name.bind=\"activeDiagram.name\"></bpmn-io>\n</template>\n";});;
define('modules/design/diagram-detail/index',["require", "exports", "aurelia-event-aggregator", "./service/diagram-detail.service"], function (require, exports, aurelia_event_aggregator_1, diagram_detail_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function configure(config) {
        var eventAggregator = config.container.get(aurelia_event_aggregator_1.EventAggregator);
        var managementApiClient = config.container.get('ManagementApiClientService');
        var diagramDetailService = new diagram_detail_service_1.DiagramDetailService(eventAggregator, managementApiClient);
        config.container.registerInstance('DiagramDetailService', diagramDetailService);
    }
    exports.configure = configure;
});


;
define('modules/design/diagram-detail/repository/diagram-detail-repository-factory',["require", "exports", "../../../../services/process-engine-version-module/process-engine-version.module", "./diagram-detail.pagination-repository", "./diagram-detail.repository"], function (require, exports, process_engine_version_module_1, diagram_detail_pagination_repository_1, diagram_detail_repository_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function createDiagramDetailRepository(managementApiClient, runtimeVersion) {
        if (process_engine_version_module_1.processEngineSupportsPagination(runtimeVersion)) {
            return new diagram_detail_pagination_repository_1.DiagramDetailPaginationRepository(managementApiClient);
        }
        return new diagram_detail_repository_1.DiagramDetailRepository(managementApiClient);
    }
    exports.createDiagramDetailRepository = createDiagramDetailRepository;
});


;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define('modules/design/diagram-detail/repository/diagram-detail.pagination-repository',["require", "exports", "./diagram-detail.repository"], function (require, exports, diagram_detail_repository_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DiagramDetailPaginationRepository = (function (_super) {
        __extends(DiagramDetailPaginationRepository, _super);
        function DiagramDetailPaginationRepository() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DiagramDetailPaginationRepository.prototype.getStartEventsForProcessModel = function (identity, processModelId) {
            return this.managementApiClient.getStartEventsForProcessModel(identity, processModelId);
        };
        return DiagramDetailPaginationRepository;
    }(diagram_detail_repository_1.DiagramDetailRepository));
    exports.DiagramDetailPaginationRepository = DiagramDetailPaginationRepository;
});


;
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define('modules/design/diagram-detail/repository/diagram-detail.repository',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DiagramDetailRepository = (function () {
        function DiagramDetailRepository(managementApiClient) {
            this.managementApiClient = managementApiClient;
        }
        DiagramDetailRepository.prototype.getStartEventsForProcessModel = function (identity, processModelId) {
            return __awaiter(this, void 0, void 0, function () {
                var startEvents, eventList;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.managementApiClient.getStartEventsForProcessModel(identity, processModelId)];
                        case 1:
                            startEvents = (_a.sent());
                            eventList = {
                                events: startEvents.events,
                                totalCount: startEvents.events.length,
                            };
                            return [2, eventList];
                    }
                });
            });
        };
        DiagramDetailRepository.prototype.startProcessInstance = function (identity, processModelId, startRequestPayload, startCallbackType, startEventId, endEventId, processEndedCallback) {
            return this.managementApiClient.startProcessInstance(identity, processModelId, startRequestPayload, startCallbackType, startEventId, endEventId, processEndedCallback);
        };
        return DiagramDetailRepository;
    }());
    exports.DiagramDetailRepository = DiagramDetailRepository;
});


;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/design/diagram-detail/service/diagram-detail.service',["require", "exports", "aurelia-framework", "aurelia-event-aggregator", "@process-engine/management_api_client", "../../../../environment", "../repository/diagram-detail-repository-factory"], function (require, exports, aurelia_framework_1, aurelia_event_aggregator_1, management_api_client_1, environment_1, diagram_detail_repository_factory_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var DiagramDetailService = (function () {
        function DiagramDetailService(eventAggregator, managementApiClient) {
            var _this = this;
            eventAggregator.subscribe(environment_1.default.events.configPanel.solutionEntryChanged, function (solutionEntry) {
                if (managementApiClient.managementApiAccessor === undefined) {
                    return;
                }
                _this.diagramDetailRepository = diagram_detail_repository_factory_1.createDiagramDetailRepository(managementApiClient, solutionEntry.processEngineVersion);
            });
        }
        DiagramDetailService.prototype.getStartEventsForProcessModel = function (identity, processModelId) {
            return this.diagramDetailRepository.getStartEventsForProcessModel(identity, processModelId);
        };
        DiagramDetailService.prototype.startProcessInstance = function (identity, processModelId, startRequestPayload, startCallbackType, startEventId, endEventId, processEndedCallback) {
            return this.diagramDetailRepository.startProcessInstance(identity, processModelId, startRequestPayload, startCallbackType, startEventId, endEventId, processEndedCallback);
        };
        DiagramDetailService = __decorate([
            aurelia_framework_1.inject(aurelia_event_aggregator_1.EventAggregator, management_api_client_1.ManagementApiClient),
            __metadata("design:paramtypes", [aurelia_event_aggregator_1.EventAggregator, Object])
        ], DiagramDetailService);
        return DiagramDetailService;
    }());
    exports.DiagramDetailService = DiagramDetailService;
});


;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/design/diagram-tools-right/diagram-tools-right',["require", "exports", "aurelia-framework", "../../../contracts/index", "../../../environment", "../../../services/notification-service/notification.service", "spectrum-colorpicker/spectrum"], function (require, exports, aurelia_framework_1, index_1, environment_1, notification_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var DiagramToolsRight = (function () {
        function DiagramToolsRight(notificationService) {
            var _this = this;
            this.colorPickerEnabled = true;
            this.colorPickerLoaded = false;
            this.colorSelectionDropdownClickListener = function () {
                if (_this.preventColorSelectionFromHiding) {
                    _this.colorSelectionDropdown.classList.add('color-selection-dropdown--show');
                    _this.preventColorSelectionFromHiding = false;
                }
                else {
                    _this.colorSelectionDropdown.classList.remove('color-selection-dropdown--show');
                    document.removeEventListener('click', _this.colorSelectionDropdownClickListener);
                }
            };
            this.notificationService = notificationService;
        }
        DiagramToolsRight.prototype.attached = function () {
            var _this = this;
            this.distributeElementsEnabled = false;
            this.modeler.on('selection.changed', function (event) {
                var selectedElements = _this.getSelectedElements();
                var userSelectedDiagramElement = selectedElements.length > 0;
                _this.colorPickerEnabled = _this.solutionIsRemote ? false : userSelectedDiagramElement;
                if (userSelectedDiagramElement) {
                    _this.borderColor = selectedElements[0].businessObject.di.stroke;
                    _this.fillColor = selectedElements[0].businessObject.di.fill;
                }
                _this.distributeElementsEnabled = selectedElements.length > 2;
            });
            this.modeler.on('commandStack.elements.move.postExecute', function (event) {
                _this.colorPickerEnabled = true;
            });
        };
        DiagramToolsRight.prototype.detached = function () {
            $(this.colorPickerBorder).spectrum('destroy');
            $(this.colorPickerFill).spectrum('destroy');
            window.localStorage.removeItem('borderColors');
            window.localStorage.removeItem('fillColors');
        };
        DiagramToolsRight.prototype.setColorRed = function () {
            this.setColor(index_1.defaultBpmnColors.red);
        };
        DiagramToolsRight.prototype.setColorBlue = function () {
            this.setColor(index_1.defaultBpmnColors.blue);
        };
        DiagramToolsRight.prototype.setColorGreen = function () {
            this.setColor(index_1.defaultBpmnColors.green);
        };
        DiagramToolsRight.prototype.setColorPurple = function () {
            this.setColor(index_1.defaultBpmnColors.purple);
        };
        DiagramToolsRight.prototype.setColorOrange = function () {
            this.setColor(index_1.defaultBpmnColors.orange);
        };
        DiagramToolsRight.prototype.removeColor = function () {
            this.setColor(index_1.defaultBpmnColors.none);
        };
        DiagramToolsRight.prototype.setPickedColor = function () {
            var customColor = { fill: this.fillColor, border: this.borderColor };
            this.setColor(customColor);
        };
        DiagramToolsRight.prototype.updateCustomColors = function () {
            var _a;
            if (!this.colorPickerLoaded) {
                this.activateColorPicker();
            }
            _a = this.getColors(), this.fillColor = _a[0], this.borderColor = _a[1];
            $(this.colorPickerFill).spectrum('set', this.fillColor);
            $(this.colorPickerBorder).spectrum('set', this.borderColor);
        };
        DiagramToolsRight.prototype.fitDiagramToViewport = function () {
            if (this.solutionIsRemote) {
                var viewerCanvas = this.viewer.get('canvas');
                viewerCanvas.zoom('fit-viewport', 'auto');
            }
            else {
                var modelerCanvas = this.modeler.get('canvas');
                modelerCanvas.zoom('fit-viewport', 'auto');
            }
        };
        DiagramToolsRight.prototype.setColor = function (color) {
            var modeling = this.modeler.get('modeling');
            var selectedElements = this.getSelectedElements();
            var elementIsNotValid = selectedElements.length < 1 ||
                (selectedElements.length === 1 && selectedElements[0].$type === 'bpmn:Collaboration');
            if (elementIsNotValid) {
                var notificationMessage = 'Unable to apply color. Please select an element and use the color picker again.';
                this.notificationService.showNotification(index_1.NotificationType.INFO, notificationMessage);
                return;
            }
            this.fillColor = color.fill;
            this.borderColor = color.border;
            modeling.setColor(selectedElements, {
                fill: color.fill,
                stroke: color.border,
            });
        };
        DiagramToolsRight.prototype.getColors = function () {
            var selectedElements = this.getSelectedElements();
            var noElementSelected = !selectedElements || !selectedElements[0] || !selectedElements[0].businessObject;
            if (noElementSelected) {
                var undefinedFillColorUndefinedBorderColor = [undefined, undefined];
                return undefinedFillColorUndefinedBorderColor;
            }
            var firstElement = selectedElements[0].businessObject;
            var fillColor = firstElement.di.fill;
            var borderColor = firstElement.di.stroke;
            return [fillColor, borderColor];
        };
        DiagramToolsRight.prototype.distributeElementsVertically = function () {
            var distributor = this.modeler.get('distributeElements');
            var elements = this.getSelectedElements();
            distributor.trigger(elements, index_1.ElementDistributeOptions.VERTICAL);
        };
        DiagramToolsRight.prototype.distributeElementsHorizontally = function () {
            var distributor = this.modeler.get('distributeElements');
            var elements = this.getSelectedElements();
            distributor.trigger(elements, index_1.ElementDistributeOptions.HORIZONTAL);
        };
        DiagramToolsRight.prototype.activateColorPicker = function () {
            var _this = this;
            window.localStorage.removeItem('borderColors');
            window.localStorage.removeItem('fillColors');
            var borderMoveSetting = {
                move: function (borderColor) {
                    _this.updateBorderColor(borderColor);
                },
            };
            var borderLocalStorageKey = { localStorageKey: 'borderColors' };
            var borderDefaultColors = [
                index_1.defaultBpmnColors.red.border,
                index_1.defaultBpmnColors.blue.border,
                index_1.defaultBpmnColors.green.border,
                index_1.defaultBpmnColors.purple.border,
                index_1.defaultBpmnColors.orange.border,
            ];
            var borderDefaultPalette = { palette: borderDefaultColors };
            var colorPickerBorderSettings = Object.assign({}, environment_1.default.colorPickerSettings, borderDefaultPalette, borderLocalStorageKey, borderMoveSetting);
            $(this.colorPickerBorder).spectrum(colorPickerBorderSettings);
            var fillMoveSetting = {
                move: function (fillColor) {
                    _this.updateFillColor(fillColor);
                },
            };
            var fillLocalStorageKey = { localStorageKey: 'fillColors' };
            var fillDefaultColors = [
                index_1.defaultBpmnColors.red.fill,
                index_1.defaultBpmnColors.blue.fill,
                index_1.defaultBpmnColors.green.fill,
                index_1.defaultBpmnColors.purple.fill,
                index_1.defaultBpmnColors.orange.fill,
            ];
            var fillDefaultPalette = { palette: fillDefaultColors };
            var colorPickerFillSettings = Object.assign({}, environment_1.default.colorPickerSettings, fillDefaultPalette, fillLocalStorageKey, fillMoveSetting);
            $(this.colorPickerFill).spectrum(colorPickerFillSettings);
            var changeColorSelectionHiding = function (event) {
                var isDragStartEvent = event.type === 'dragstart';
                _this.preventColorSelectionFromHiding = isDragStartEvent;
                if (isDragStartEvent) {
                    document.addEventListener('click', _this.colorSelectionDropdownClickListener);
                }
            };
            $(this.colorPickerFill).on('dragstart.spectrum', changeColorSelectionHiding);
            $(this.colorPickerBorder).on('dragstart.spectrum', changeColorSelectionHiding);
            $(this.colorPickerFill).on('dragstop.spectrum', changeColorSelectionHiding);
            $(this.colorPickerBorder).on('dragstop.spectrum', changeColorSelectionHiding);
            this.colorPickerLoaded = true;
        };
        DiagramToolsRight.prototype.updateFillColor = function (fillColor) {
            if (fillColor) {
                this.fillColor = fillColor.toHexString();
            }
            else {
                this.fillColor = undefined;
            }
            this.setPickedColor();
        };
        DiagramToolsRight.prototype.updateBorderColor = function (borderColor) {
            if (borderColor) {
                this.borderColor = borderColor.toHexString();
            }
            else {
                this.borderColor = undefined;
            }
            this.setPickedColor();
        };
        DiagramToolsRight.prototype.getSelectedElements = function () {
            return this.modeler.get('selection')._selectedElements;
        };
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", Object)
        ], DiagramToolsRight.prototype, "modeler", void 0);
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", Object)
        ], DiagramToolsRight.prototype, "viewer", void 0);
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", Boolean)
        ], DiagramToolsRight.prototype, "solutionIsRemote", void 0);
        DiagramToolsRight = __decorate([
            aurelia_framework_1.inject('NotificationService'),
            __metadata("design:paramtypes", [notification_service_1.NotificationService])
        ], DiagramToolsRight);
        return DiagramToolsRight;
    }());
    exports.DiagramToolsRight = DiagramToolsRight;
});


;
define('text!modules/design/diagram-tools-right/diagram-tools-right.css',[],function(){return ".diagram-tools-panel {\n  display: flex;\n  background-color: #f7f7f7;\n  border-left: 2px solid #dcdbdb;\n  border-bottom: 2px solid #dcdbdb; }\n\n.tool {\n  display: block;\n  padding: 5px;\n  margin: 0 5px;\n  background: inherit;\n  border: none;\n  text-align: center; }\n\n.open .tool {\n  box-shadow: none !important; }\n\n/*\n * The border is used to seperate the two buttons for the colorpickers from the\n * other buttons\n *\n * The fill-colorpicker is the upper button and therefore only has the border at the top\n */\n.fill-colorpicker--border {\n  border-top: 1px solid #ccc; }\n\n/*\n * The border-colorpicker is the lower button and therefore only has the border at the bottom\n */\n.border-colorpicker--border {\n  border-bottom: 1px solid #ccc; }\n\n.fill-colorpicker__eyedropper {\n  margin-left: 39px;\n  margin-right: -14px; }\n\n.border-colorpicker__eyedropper {\n  margin-left: 14px;\n  margin-right: -14px; }\n\n.sp-replacer {\n  display: inline-block;\n  margin: 0;\n  overflow: hidden;\n  background: 0;\n  border: 0;\n  color: #333;\n  vertical-align: middle; }\n\n.sp-container {\n  height: 247px;\n  -webkit-border-radius: 10px;\n  -moz-border-radius: 10px;\n  border-radius: 10px; }\n\n.sp-palette-container {\n  position: absolute;\n  bottom: 0;\n  left: 6px;\n  z-index: 1;\n  height: 44px;\n  border-right: none; }\n\n.sp-sat, .sp-val {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: -1px; }\n\n.color-selection-dropdown--show {\n  display: block; }\n";});;
define('text!modules/design/diagram-tools-right/diagram-tools-right.html',[],function(){return "<template>\n  <require from=\"./diagram-tools-right.css\"></require>\n  <div class=\"diagram-tools-panel\">\n    <div css.bind=\"solutionIsRemote ? 'pointer-events: none;' : ''\" style=\"display: inherit;\">\n      <div class=\"dropdown\" ref=\"colorSelectionDropdownToggle\">\n        <a class=\"button dropdown-toggle tool\" class.bind=\"colorPickerEnabled ? '' : 'button--disabled tool--disabled'\" disabled.bind=\"!colorPickerEnabled\" data-toggle=\"dropdown\" click.delegate=\"updateCustomColors()\" title.bind=\"colorPickerEnabled ? 'Set a color for all selected elements' : 'Select an element to set a new color'\">\n          <i class=\"fas fa-eye-dropper\"></i>\n        </a>\n        <ul class=\"dropdown-menu pull-left color-dropdown\" ref=\"colorSelectionDropdown\">\n          <li class=\"dropdown-item\" click.delegate=\"setColorRed()\"><a><i class=\"fas fa-stop red\"></i> Red</a></li>\n          <li class=\"dropdown-item\" click.delegate=\"setColorBlue()\"><a><i class=\"fas fa-stop blue\"></i> Blue</a></li>\n          <li class=\"dropdown-item\" click.delegate=\"setColorGreen()\"><a><i class=\"fas fa-stop green\"></i> Green</a></li>\n          <li class=\"dropdown-item\" click.delegate=\"setColorPurple()\"><a><i class=\"fas fa-stop purple\"></i> Purple</a></li>\n          <li class=\"dropdown-item\" click.delegate=\"setColorOrange()\"><a><i class=\"fas fa-stop orange\"></i> Orange</a></li>\n          <li class=\"dropdown-item fill-colorpicker--border\" ref=\"colorPickerFill\">\n            <a show.bind=\"colorPickerLoaded\" click.delegate=\"setPickedColor()\">\n              <i class=\"fas fa-stop\" css=\"color: ${fillColor ? fillColor : 'white'};\"></i> Fill color <i class=\"fas fa-eye-dropper fill-colorpicker__eyedropper\"></i>\n            </a>\n          </li>\n          <li class=\"dropdown-item border-colorpicker--border\" ref=\"colorPickerBorder\">\n            <a show.bind=\"colorPickerLoaded\" click.delegate=\"setPickedColor()\">\n              <i class=\"fas fa-stop\" css=\"color: ${borderColor ? borderColor : 'black'};\"></i> Border color <i class=\"fas fa-eye-dropper border-colorpicker__eyedropper\"></i>\n            </a>\n          </li>\n          <li class=\"dropdown-item\"><a click.delegate=\"removeColor()\"><i class=\"fas fa-stop none\"></i> None</a></li>\n        </ul>\n      </div>\n      <a class=\"button tool\" class.bind=\"distributeElementsEnabled ? '' : 'button--disabled tool--disabled'\" title.bind=\"distributeElementsEnabled ? 'Distribute Elements Vertically' : 'Select at least three elements to distribute them vertically'\" click.delegate=\"distributeElementsVertically()\" disabled.bind=\"!distributeElementsEnabled\">\n        <i class=\"fas fa-arrows-alt-v\"></i>\n      </a>\n      <a class=\"button tool\" class.bind=\"distributeElementsEnabled ? '' : 'button--disabled tool--disabled'\" title.bind=\"distributeElementsEnabled ? 'Distribute Elements Horizontally' : 'Select at least three elements to distribute them horizontally'\" click.delegate=\"distributeElementsHorizontally()\" disabled.bind=\"!distributeElementsEnabled\">\n        <i class=\"fas fa-arrows-alt-h\"></i>\n      </a>\n    </div>\n    <a class=\"button tool\" title=\"Fit diagram to window.\" click.delegate=\"fitDiagramToViewport()\">\n      <i class=\"fas fa-expand\"></i>\n    </a>\n    <!-- Why are these here?-->\n    <div class=\"tool\">\n\n    </div>\n    <div class=\"tool\">\n\n    </div>\n  </div>\n</template>\n";});;
define('modules/design/property-panel/indextabs/extensions/extensions',["require", "exports", "./sections/basics/basics", "./sections/process/process"], function (require, exports, basics_1, process_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Extensions = (function () {
        function Extensions() {
            this.title = 'Extensions';
            this.path = '/indextabs/extensions/extensions';
            this.canHandleElement = true;
            this.basicsSection = new basics_1.BasicsSection();
            this.processSection = new process_1.ProcessSection();
            this.sections = [this.basicsSection, this.processSection];
        }
        Extensions.prototype.isSuitableForElement = function (element) {
            if (!element) {
                return false;
            }
            this.sections.forEach(function (section) {
                section.canHandleElement = section.isSuitableForElement(element);
            });
            return this.sections.some(function (section) {
                return section.isSuitableForElement(element);
            });
        };
        return Extensions;
    }());
    exports.Extensions = Extensions;
});


;
define('text!modules/design/property-panel/indextabs/extensions/extensions.css',[],function(){return "";});;
define('text!modules/design/property-panel/indextabs/extensions/extensions.html',[],function(){return "<template>\n  <require from=\"./extensions.css\"></require>\n  <require from=\"../../styles/registers.css\"></require>\n  <template repeat.for=\"section of sections\">\n    <template if.bind=\"section.isSuitableForElement(elementInPanel)\">\n      <compose\n        view-model=\".${section.path}\"\n        view=\".${section.path}.html\"\n        model.bind=\"{modeler: modeler, elementInPanel: elementInPanel, isEditable: isEditable}\"\n        containerless></compose>\n    </template>\n  </template>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/design/property-panel/indextabs/extensions/sections/basics/basics',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "../../../../../../../environment"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, environment_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var BasicsSection = (function () {
        function BasicsSection(eventAggregator) {
            this.path = '/sections/basics/basics';
            this.canHandleElement = false;
            this.properties = [];
            this.newNames = [];
            this.newValues = [];
            this.shouldFocus = false;
            this.eventAggregator = eventAggregator;
        }
        BasicsSection.prototype.activate = function (model) {
            this.businessObjInPanel = model.elementInPanel.businessObject;
            this.moddle = model.modeler.get('moddle');
            this.reloadProperties();
        };
        BasicsSection.prototype.isSuitableForElement = function (element) {
            var elementIsUndefined = element === undefined || element.businessObject === undefined;
            if (elementIsUndefined) {
                return false;
            }
            var elementHasExtensions = element.businessObject.$type !== 'bpmn:Process' && element.businessObject.$type !== 'bpmn:Collaboration';
            return elementHasExtensions;
        };
        BasicsSection.prototype.addProperty = function () {
            this.reloadProperties();
            var bpmnPropertyProperties = {
                name: '',
                value: '',
            };
            var bpmnProperty = this.moddle.create('camunda:Property', bpmnPropertyProperties);
            this.newNames.push('');
            this.newValues.push('');
            var businessObjectHasNoExtensionElements = this.businessObjInPanel.extensionElements === undefined ||
                this.businessObjInPanel.extensionElements === null ||
                this.businessObjInPanel.extensionElements.values === undefined ||
                this.businessObjInPanel.extensionElements.values.length === 0;
            if (businessObjectHasNoExtensionElements) {
                this.createExtensionElement();
            }
            this.propertiesElement = this.getPropertiesElement();
            var propertiesElementIsUndefined = this.propertiesElement === undefined;
            if (propertiesElementIsUndefined) {
                this.createEmptyCamundaProperties();
                this.propertiesElement = this.getPropertiesElement();
            }
            this.propertiesElement.values.push(bpmnProperty);
            this.properties.push(bpmnProperty);
            this.publishDiagramChange();
            this.shouldFocus = true;
        };
        BasicsSection.prototype.inputFieldBlurred = function (index, event) {
            var targetElement = event.relatedTarget;
            var targetIsNoInputField = !(targetElement instanceof HTMLInputElement);
            if (targetIsNoInputField) {
                this.checkAndRemoveEmptyProperties(index);
                return;
            }
            var targetFieldIndex = targetElement.getAttribute('data-fieldIndex');
            var indexAsString = index.toString();
            var targetValueFieldNotRelated = targetFieldIndex !== indexAsString;
            if (targetValueFieldNotRelated) {
                this.checkAndRemoveEmptyProperties(index);
            }
        };
        BasicsSection.prototype.removeProperty = function (index) {
            this.propertiesElement.values.splice(index, 1);
            var emptyProperties = this.propertiesElement.values.length === 0;
            if (emptyProperties) {
                this.deletePropertiesElementAndExtensionElements();
            }
            this.reloadProperties();
            this.publishDiagramChange();
        };
        BasicsSection.prototype.changeName = function (index) {
            this.propertiesElement.values[index].name = this.newNames[index];
            this.checkAndRemoveEmptyProperties(index);
            this.publishDiagramChange();
        };
        BasicsSection.prototype.changeValue = function (index) {
            this.propertiesElement.values[index].value = this.newValues[index];
            this.checkAndRemoveEmptyProperties(index);
            this.publishDiagramChange();
        };
        BasicsSection.prototype.deletePropertiesElementAndExtensionElements = function () {
            var indexOfPropertiesElement = this.businessObjInPanel.extensionElements.values.findIndex(function (element) {
                if (!element) {
                    return undefined;
                }
                return element.$type === 'camunda:Properties';
            });
            delete this.businessObjInPanel.extensionElements.values[indexOfPropertiesElement];
            var emptyExtensionElements = this.businessObjInPanel.extensionElements.values.length < 2;
            if (emptyExtensionElements) {
                delete this.businessObjInPanel.extensionElements;
            }
        };
        BasicsSection.prototype.checkAndRemoveEmptyProperties = function (index) {
            var propertyElement = this.propertiesElement.values[index];
            if (!propertyElement) {
                return;
            }
            var propertyIsEmpty = propertyElement.value === '' && propertyElement.name === '';
            if (propertyIsEmpty) {
                this.removeProperty(index);
            }
        };
        BasicsSection.prototype.reloadProperties = function () {
            this.properties = [];
            this.newNames = [];
            this.newValues = [];
            this.shouldFocus = false;
            var businessObjectHasNoExtensionElements = this.businessObjInPanel.extensionElements === undefined ||
                this.businessObjInPanel.extensionElements === null ||
                this.businessObjInPanel.extensionElements.values === undefined ||
                this.businessObjInPanel.extensionElements.values.length === 0;
            if (businessObjectHasNoExtensionElements) {
                return;
            }
            var extensionsPropertiesElement = this.businessObjInPanel.extensionElements.values.find(function (extensionValue) {
                if (!extensionValue) {
                    return undefined;
                }
                var extensionIsPropertyElement = extensionValue.$type === 'camunda:Properties' &&
                    extensionValue.values !== undefined &&
                    extensionValue.values !== null &&
                    extensionValue.values.length !== 0;
                return extensionIsPropertyElement;
            });
            var extensionElementHasNoPropertyElement = extensionsPropertiesElement === undefined;
            if (extensionElementHasNoPropertyElement) {
                return;
            }
            this.propertiesElement = extensionsPropertiesElement;
            var properties = extensionsPropertiesElement.values;
            for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {
                var property = properties_1[_i];
                if (property.$type !== 'camunda:Property') {
                    continue;
                }
                this.newNames.push(property.name);
                this.newValues.push(property.value);
                this.properties.push(property);
            }
        };
        BasicsSection.prototype.getPropertiesElement = function () {
            var businessObjectHasNoExtensionElements = this.businessObjInPanel.extensionElements === undefined ||
                this.businessObjInPanel.extensionElements === null ||
                this.businessObjInPanel.extensionElements.values === undefined ||
                this.businessObjInPanel.extensionElements.values.length === 0;
            if (businessObjectHasNoExtensionElements) {
                return undefined;
            }
            var propertiesElement = this.businessObjInPanel.extensionElements.values.find(function (extensionValue) {
                if (!extensionValue) {
                    return undefined;
                }
                var extensionIsPropertiesElement = extensionValue.$type === 'camunda:Properties' &&
                    extensionValue.values !== undefined &&
                    extensionValue.values !== null;
                return extensionIsPropertiesElement;
            });
            return propertiesElement;
        };
        BasicsSection.prototype.createExtensionElement = function () {
            var extensionValues = [];
            var properties = [];
            var propertiesElement = this.moddle.create('camunda:Properties', { values: properties });
            extensionValues.push(propertiesElement);
            var extensionElements = this.moddle.create('bpmn:ExtensionElements', {
                values: extensionValues,
            });
            this.businessObjInPanel.extensionElements = extensionElements;
        };
        BasicsSection.prototype.createEmptyCamundaProperties = function () {
            var _this = this;
            var addPropertiesElement = function (element) {
                return _this.businessObjInPanel.extensionElements.values.push(element);
            };
            var emptyProperties = [];
            var createCamundaProperties = function () {
                return _this.moddle.create('camunda:Properties', { values: emptyProperties });
            };
            addPropertiesElement(createCamundaProperties());
        };
        BasicsSection.prototype.publishDiagramChange = function () {
            this.eventAggregator.publish(environment_1.default.events.diagramChange);
        };
        BasicsSection = __decorate([
            aurelia_framework_1.inject(aurelia_event_aggregator_1.EventAggregator),
            __metadata("design:paramtypes", [aurelia_event_aggregator_1.EventAggregator])
        ], BasicsSection);
        return BasicsSection;
    }());
    exports.BasicsSection = BasicsSection;
});


;
define('text!modules/design/property-panel/indextabs/extensions/sections/basics/basics.css',[],function(){return ".property-table {\n  border-collapse: separate; }\n\n.property-table-column-left {\n  width: 30%;\n  padding-right: 3px; }\n\n.property-table-column-right {\n  width: 70%;\n  padding-left: 3px; }\n\n.key-value-input {\n  width: 100%;\n  margin: 2px 0; }\n\n.key-value-input:disabled {\n  opacity: 0.5; }\n\n.key-value-delete-button {\n  padding-top: 2px;\n  background: transparent;\n  border: none;\n  color: darkgray; }\n\n.key-value-delete-button:hover {\n  color: black; }\n\n.key-value-delete-button:focus {\n  color: black; }\n\n.key-value-delete-button:disabled {\n  opacity: 0.2; }\n\n.key-value-delete-button:hover:disabled {\n  opacity: 0.2;\n  color: darkgrey; }\n";});;
define('text!modules/design/property-panel/indextabs/extensions/sections/basics/basics.html',[],function(){return "<template>\n  <require from=\"./basics.css\"></require>\n  <require from=\"../../../../styles/sections.css\"></require>\n  <div class=\"section-panel\" id=\"js-extensions-basics-section\">\n    <div class=\"panel__heading\">\n      Properties\n      <button class=\"button add-context-button\" click.delegate=\"addProperty()\" disabled.bind=\"!isEditable\">\n        <i class=\"fas fa-plus\"></i>\n      </button>\n    </div>\n    <div class=\"panel__content\">\n      <table class=\"property-table\">\n        <tr repeat.for=\"property of properties\" index.bind=\"$index\">\n          <td class=\"property-table-column-left\">\n            <input data-fieldIndex=\"${$index}\" type=\"text\" class=\"props-input key-value-input\" placeholder=\"Name\" focus.one-time=\"shouldFocus\" blur.trigger=\"inputFieldBlurred($index, $event)\" value.bind=\"newNames[$index]\" change.delegate=\"changeName($index)\" disabled.bind=\"!isEditable\">\n          </td>\n          <td class=\"property-table-column-right\">\n            <input data-fieldIndex=\"${$index}\" type=\"text\" class=\"props-input key-value-input\" placeholder=\"Value\"  blur.trigger=\"inputFieldBlurred($index, $event)\" value.bind=\"newValues[$index]\" change.delegate=\"changeValue($index)\" disabled.bind=\"!isEditable\">\n          </td>\n          <td>\n            <button class=\"button key-value-delete-button\" click.delegate=\"removeProperty($index)\" disabled.bind=\"!isEditable\">\n              <i class=\"fas fa-times\"></i>\n            </button>\n          </td>\n        </tr>\n      </table>\n    </div>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/design/property-panel/indextabs/extensions/sections/process/process',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "../../../../../../../environment"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, environment_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var ProcessSection = (function () {
        function ProcessSection(eventAggregator) {
            this.path = '/sections/process/process';
            this.canHandleElement = false;
            this.newNames = [];
            this.newValues = [];
            this.properties = [];
            this.shouldFocus = false;
            this.eventAggregator = eventAggregator;
        }
        ProcessSection.prototype.activate = function (model) {
            this.businessObjInPanel = model.elementInPanel.businessObject.participants[0];
            this.moddle = model.modeler.get('moddle');
            this.reloadProperties();
        };
        ProcessSection.prototype.isSuitableForElement = function (element) {
            var businessObjectIsNotExisting = element === undefined || element.businessObject === undefined;
            if (businessObjectIsNotExisting) {
                return false;
            }
            var elementIsRoot = element.businessObject.$type === 'bpmn:Collaboration';
            return elementIsRoot;
        };
        ProcessSection.prototype.addProperty = function () {
            var bpmnPropertyProperties = {
                name: '',
                value: '',
            };
            var bpmnProperty = this.moddle.create('camunda:Property', bpmnPropertyProperties);
            this.newNames.push('');
            this.newValues.push('');
            var businessObjectHasNoExtensionElements = this.businessObjInPanel.processRef.extensionElements === undefined ||
                this.businessObjInPanel.processRef.extensionElements === null;
            if (businessObjectHasNoExtensionElements) {
                this.createExtensionElement();
            }
            this.propertiesElement = this.getPropertiesElement();
            var propertiesElementIsUndefined = this.propertiesElement === undefined;
            if (propertiesElementIsUndefined) {
                this.createEmptyCamundaProperties();
                this.propertiesElement = this.getPropertiesElement();
            }
            var propertyValuesUndefined = this.propertiesElement.values === undefined;
            if (propertyValuesUndefined) {
                this.propertiesElement.values = [];
            }
            this.propertiesElement.values.push(bpmnProperty);
            this.properties.push(bpmnProperty);
            this.publishDiagramChange();
            this.shouldFocus = true;
        };
        ProcessSection.prototype.removeProperty = function (index) {
            var propertyIsLast = this.propertiesElement.values.length === 1;
            if (propertyIsLast) {
                this.businessObjInPanel.processRef.extensionElements = undefined;
            }
            else {
                this.propertiesElement.values.splice(index, 1);
            }
            this.reloadProperties();
            this.publishDiagramChange();
        };
        ProcessSection.prototype.changeName = function (index) {
            this.propertiesElement.values[index].name = this.newNames[index];
            this.publishDiagramChange();
        };
        ProcessSection.prototype.changeValue = function (index) {
            this.propertiesElement.values[index].value = this.newValues[index];
            this.publishDiagramChange();
        };
        ProcessSection.prototype.inputFieldBlurred = function (index, event) {
            var targetElement = event.relatedTarget;
            var targetIsNoInputField = !(targetElement instanceof HTMLInputElement);
            if (targetIsNoInputField) {
                this.checkAndRemoveEmptyProperties(index);
                return;
            }
            var targetFieldIndex = targetElement.getAttribute('data-fieldIndex');
            var indexAsString = index.toString();
            var targetValueFieldNotRelated = targetFieldIndex !== indexAsString;
            if (targetValueFieldNotRelated) {
                this.checkAndRemoveEmptyProperties(index);
            }
        };
        ProcessSection.prototype.checkAndRemoveEmptyProperties = function (index) {
            var propertyElement = this.propertiesElement.values[index];
            var propertyIsEmpty = propertyElement.value === '' && propertyElement.name === '';
            if (propertyIsEmpty) {
                this.removeProperty(index);
            }
        };
        ProcessSection.prototype.reloadProperties = function () {
            this.properties = [];
            this.newNames = [];
            this.newValues = [];
            this.shouldFocus = false;
            var businessObjectHasNoExtensionElements = this.businessObjInPanel.processRef.extensionElements === undefined ||
                this.businessObjInPanel.processRef.extensionElements === null;
            if (businessObjectHasNoExtensionElements) {
                return;
            }
            this.propertiesElement = this.getPropertiesElement();
            var extensionsPropertiesElement = this.businessObjInPanel.processRef.extensionElements.values.find(function (extensionValue) {
                var extensionIsPropertyElement = extensionValue.$type === 'camunda:Properties' &&
                    extensionValue.values !== undefined &&
                    extensionValue.values !== null &&
                    extensionValue.values.length !== 0;
                return extensionIsPropertyElement;
            });
            var extensionElementHasNoPropertyElement = extensionsPropertiesElement === undefined;
            if (extensionElementHasNoPropertyElement) {
                return;
            }
            var properties = extensionsPropertiesElement.values;
            for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {
                var property = properties_1[_i];
                var propertyTypeIsNotCamunda = property.$type !== 'camunda:Property';
                if (propertyTypeIsNotCamunda) {
                    continue;
                }
                this.newNames.push(property.name);
                this.newValues.push(property.value);
                this.properties.push(property);
            }
        };
        ProcessSection.prototype.getPropertiesElement = function () {
            var propertiesElement = this.businessObjInPanel.processRef.extensionElements.values.find(function (extensionValue) {
                var extensionIsPropertiesElement = extensionValue.$type === 'camunda:Properties';
                return extensionIsPropertiesElement;
            });
            return propertiesElement;
        };
        ProcessSection.prototype.createExtensionElement = function () {
            var bpmnExecutionListenerProperties = {
                class: '',
                event: '',
            };
            var bpmnExecutionListener = this.moddle.create('camunda:ExecutionListener', bpmnExecutionListenerProperties);
            var extensionValues = [];
            var propertiesElement = this.moddle.create('camunda:Properties', { values: [] });
            extensionValues.push(bpmnExecutionListener);
            extensionValues.push(propertiesElement);
            var extensionElements = this.moddle.create('bpmn:ExtensionElements', {
                values: extensionValues,
            });
            this.businessObjInPanel.processRef.extensionElements = extensionElements;
        };
        ProcessSection.prototype.createEmptyCamundaProperties = function () {
            var _this = this;
            var addPropertiesElement = function (element) {
                return _this.businessObjInPanel.processRef.extensionElements.values.push(element);
            };
            var emptyProperties = [];
            var createCamundaProperties = function () {
                return _this.moddle.create('camunda:Properties', { values: emptyProperties });
            };
            addPropertiesElement(createCamundaProperties());
        };
        ProcessSection.prototype.publishDiagramChange = function () {
            this.eventAggregator.publish(environment_1.default.events.diagramChange);
        };
        ProcessSection = __decorate([
            aurelia_framework_1.inject(aurelia_event_aggregator_1.EventAggregator),
            __metadata("design:paramtypes", [aurelia_event_aggregator_1.EventAggregator])
        ], ProcessSection);
        return ProcessSection;
    }());
    exports.ProcessSection = ProcessSection;
});


;
define('text!modules/design/property-panel/indextabs/extensions/sections/process/process.css',[],function(){return ".process-properties-panel {\n  background-color: #f7f7f7;\n  border-bottom: 1px solid #eee;\n  border-left: 1px solid #eee; }\n\n.key-value-column {\n  width: 50%; }\n\n.key-value-input {\n  width: 100%; }\n";});;
define('text!modules/design/property-panel/indextabs/extensions/sections/process/process.html',[],function(){return "<template>\n  <require from=\"./process.css\"></require>\n  <require from=\"../../../../styles/sections.css\"></require>\n  <div class=\"process-properties-panel\" id=\"js-extensions-process-section\">\n    <div class=\"panel__heading\">\n      Process Properties\n      <button class=\"button add-context-button\" click.delegate=\"addProperty()\">\n        <i class=\"fas fa-plus\"></i>\n      </button>\n    </div>\n    <div class=\"panel__content\">\n      <table>\n        <tr repeat.for=\"property of properties\" index.bind=\"$index\">\n          <td class=\"key-value-column\">\n            <input type=\"text\" class=\"key-value-input\" focus.one-time=\"shouldFocus\" data-fieldIndex=\"${$index}\" blur.trigger=\"inputFieldBlurred($index, $event)\" value.bind=\"newNames[$index]\" placeholder=\"Name\" change.delegate=\"changeName($index)\">\n          </td>\n          <td class=\"key-value-column\">\n            <input type=\"text\" class=\"key-value-input\" data-fieldIndex=\"${$index}\" blur.trigger=\"inputFieldBlurred($index, $event)\" value.bind=\"newValues[$index]\" placeholder=\"Value\" change.delegate=\"changeValue($index)\">\n          </td>\n          <td>\n            <button class=\"button key-value-delete-button\" click.delegate=\"removeProperty($index)\">\n              <i class=\"fas fa-times\"></i>\n            </button>\n          </td>\n        </tr>\n      </table>\n    </div>\n</template>\n";});;
define('modules/design/property-panel/indextabs/forms/forms',["require", "exports", "./sections/basics/basics"], function (require, exports, basics_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Forms = (function () {
        function Forms() {
            this.title = 'Forms';
            this.path = '/indextabs/forms/forms';
            this.canHandleElement = false;
            this.basicsSection = new basics_1.BasicsSection();
            this.sections = [this.basicsSection];
        }
        Forms.prototype.activate = function (model) {
            if (model === undefined) {
                return;
            }
            this.elementInPanel = model.elementInPanel;
            this.modeler = model.modeler;
        };
        Forms.prototype.isSuitableForElement = function (element) {
            if (element === undefined || element === null) {
                return false;
            }
            this.sections.forEach(function (section) {
                section.canHandleElement = section.isSuitableForElement(element);
            });
            return this.sections.some(function (section) {
                return section.canHandleElement;
            });
        };
        return Forms;
    }());
    exports.Forms = Forms;
});


;
define('text!modules/design/property-panel/indextabs/forms/forms.css',[],function(){return "";});;
define('text!modules/design/property-panel/indextabs/forms/forms.html',[],function(){return "<template>\n  <require from=\"./forms.css\"></require>\n  <require from=\"../../styles/registers.css\"></require>\n  <div class=\"index-tab\">\n    <template repeat.for=\"section of sections\">\n      <template if.bind=\"section.canHandleElement\">\n        <compose\n          view-model=\".${section.path}\"\n          view=\".${section.path}.html\"\n          model.bind=\"{modeler: modeler, elementInPanel: elementInPanel, isEditable: isEditable}\"\n          containerless></compose>\n      </template>\n    </template>\n  </div>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/design/property-panel/indextabs/forms/sections/basics/basics',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "aurelia-validation", "../../../../../../../services/help-modal-service/help-modal-service", "../../../../../../../contracts/index", "../../../../../../../environment"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, aurelia_validation_1, help_modal_service_1, index_1, environment_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var FormfieldTypes;
    (function (FormfieldTypes) {
        FormfieldTypes["string"] = "string";
        FormfieldTypes["long"] = "long";
        FormfieldTypes["number"] = "number";
        FormfieldTypes["boolean"] = "boolean";
        FormfieldTypes["date"] = "date";
        FormfieldTypes["enum"] = "enum";
        FormfieldTypes["customType"] = "custom type";
    })(FormfieldTypes || (FormfieldTypes = {}));
    var BasicsSection = (function () {
        function BasicsSection(controller, eventAggregator, helpModalService) {
            this.path = '/sections/basics/basics';
            this.canHandleElement = true;
            this.validationError = false;
            this.isFormSelected = false;
            this.FormfieldTypes = FormfieldTypes;
            this.enumValues = [];
            this.newEnumValueIds = [];
            this.newEnumValueNames = [];
            this.validationController = controller;
            this.eventAggregator = eventAggregator;
            this.helpModalService = helpModalService;
        }
        BasicsSection.prototype.activate = function (model) {
            var _this = this;
            this.businessObjInPanel = model.elementInPanel.businessObject;
            this.modeler = model.modeler;
            this.bpmnModdle = this.modeler.get('moddle');
            this.validationController.subscribe(function (event) {
                _this.validateFormId(event);
            });
            this.init();
            if (this.validationError) {
                this.previousForm.id = this.previousFormId;
                this.validationController.validate();
            }
        };
        BasicsSection.prototype.detached = function () {
            this.validateOnDetach();
        };
        BasicsSection.prototype.isSuitableForElement = function (element) {
            var elementHasNoBusinessObject = element.businessObject === undefined || element.businessObject === null;
            if (elementHasNoBusinessObject) {
                return false;
            }
            return element.businessObject.$type === 'bpmn:UserTask';
        };
        BasicsSection.prototype.addEnumValue = function () {
            var enumValue = {
                id: "Value_" + this.generateRandomId(),
                value: '',
            };
            var bpmnValue = this.bpmnModdle.create('camunda:Value', enumValue);
            this.enumValues.push(bpmnValue);
            Object.assign(this.formElement.fields[this.selectedIndex].values, this.enumValues);
            this.reloadEnumValues();
            this.publishDiagramChange();
        };
        BasicsSection.prototype.removeEnumValue = function (index) {
            this.formElement.fields[this.selectedIndex].values.splice(index, 1);
            this.reloadEnumValues();
            this.publishDiagramChange();
        };
        BasicsSection.prototype.changeEnumValueId = function (index) {
            this.enumValues[index].id = this.newEnumValueIds[index];
            Object.assign(this.formElement.fields[this.selectedIndex].values, this.enumValues);
            this.publishDiagramChange();
        };
        BasicsSection.prototype.changeEnumValueName = function (index) {
            this.enumValues[index].name = this.newEnumValueNames[index];
            Object.assign(this.formElement.fields[this.selectedIndex].values, this.enumValues);
            this.publishDiagramChange();
        };
        BasicsSection.prototype.removeSelectedForm = function () {
            var noFormFieldSelected = !this.isFormSelected;
            if (noFormFieldSelected) {
                return;
            }
            this.formElement.fields.splice(this.selectedIndex, 1);
            this.isFormSelected = false;
            this.selectedForm = undefined;
            this.selectedIndex = undefined;
            this.reloadForms();
            this.publishDiagramChange();
        };
        BasicsSection.prototype.addForm = function () {
            return __awaiter(this, void 0, void 0, function () {
                var bpmnFormObject, bpmnForm;
                return __generator(this, function (_a) {
                    bpmnFormObject = {
                        id: "Form_" + this.generateRandomId(),
                        label: '',
                        defaultValue: '',
                    };
                    bpmnForm = this.bpmnModdle.create('camunda:FormField', bpmnFormObject);
                    if (this.formElement.fields === undefined || this.formElement.fields === null) {
                        this.formElement.fields = [];
                    }
                    this.formElement.fields.push(bpmnForm);
                    this.forms.push(bpmnForm);
                    this.selectedForm = bpmnForm;
                    this.selectForm();
                    this.publishDiagramChange();
                    return [2];
                });
            });
        };
        BasicsSection.prototype.updateId = function () {
            this.validationController.validate();
            var hasValidationErrors = this.validationController.errors.length > 0;
            if (hasValidationErrors) {
                this.resetId();
            }
            var isSelectedFormIdNotExisting = this.selectedForm === null || this.selectedForm.id === '';
            if (isSelectedFormIdNotExisting) {
                return;
            }
            this.formElement.fields[this.selectedIndex].id = this.selectedForm.id;
            this.publishDiagramChange();
        };
        BasicsSection.prototype.selectForm = function () {
            if (this.validationError) {
                this.previousForm.id = this.previousFormId;
            }
            this.previousFormId = this.selectedForm.id;
            this.previousForm = this.selectedForm;
            this.validationController.validate();
            this.isFormSelected = true;
            var selectedFormHasType = this.selectedForm.type !== undefined;
            this.selectedType = selectedFormHasType ? this.getTypeAndHandleCustomType(this.selectedForm.type) : null;
            this.selectedIndex = this.getSelectedIndex();
            this.setValidationRules();
            this.reloadEnumValues();
        };
        BasicsSection.prototype.updateType = function () {
            var _this = this;
            var type = (function () {
                var selectedTypeIsNotCustomType = _this.selectedType !== FormfieldTypes.customType;
                if (selectedTypeIsNotCustomType) {
                    return _this.selectedType;
                }
                var customTypeIsDefined = _this.customType !== undefined;
                return customTypeIsDefined ? _this.customType : '';
            })();
            this.formElement.fields[this.selectedIndex].type = type;
            this.reloadEnumValues();
            this.publishDiagramChange();
        };
        BasicsSection.prototype.updateLabel = function () {
            this.formElement.fields[this.selectedIndex].label = this.selectedForm.label;
            this.publishDiagramChange();
        };
        BasicsSection.prototype.updateBooleanDefaultValue = function () {
            this.booleanDefaultValueString = this.booleanDefaultValue.toString();
            this.updateDefaultValue();
        };
        BasicsSection.prototype.updateBooleanDefaultValueString = function () {
            this.booleanDefaultValue = this.booleanDefaultValueString === 'true' || this.booleanDefaultValueString === '1';
            this.updateDefaultValue();
        };
        BasicsSection.prototype.updateDefaultValue = function () {
            var selectedTypeIsBoolean = this.selectedType === FormfieldTypes.boolean;
            if (selectedTypeIsBoolean) {
                this.formElement.fields[this.selectedIndex].defaultValue = "" + this.booleanDefaultValueString;
            }
            else {
                this.formElement.fields[this.selectedIndex].defaultValue = this.selectedForm.defaultValue;
            }
            this.publishDiagramChange();
        };
        BasicsSection.prototype.showUserTaskHelpModal = function () {
            this.helpModalService.showHelpModal(index_1.HelpTextId.UserTaskUsage);
        };
        BasicsSection.prototype.validateOnDetach = function () {
            if (!this.validationError) {
                return;
            }
            var bpmnFormFieldObject = {
                id: "Form_" + this.generateRandomId(),
                label: '',
                defaultValue: '',
            };
            this.bpmnModdle.create('camunda:FormField', bpmnFormFieldObject);
            if (this.formElement.fields === undefined || this.formElement.fields === null) {
                this.formElement.fields = [];
            }
            this.resetIdOnSelectedOrPrevious();
            this.validationController.validate();
            this.updateId();
        };
        BasicsSection.prototype.resetIdOnSelectedOrPrevious = function () {
            if (this.selectedForm !== null) {
                this.selectedForm.id = this.previousFormId;
            }
            else {
                this.previousForm.id = this.previousFormId;
            }
        };
        BasicsSection.prototype.init = function () {
            this.isFormSelected = false;
            if (this.canHandleElement) {
                this.formElement = this.getOrCreateFormElement();
                this.reloadForms();
            }
        };
        BasicsSection.prototype.resetId = function () {
            this.resetIdOnSelectedOrPrevious();
            this.validationController.validate();
        };
        BasicsSection.prototype.reloadEnumValues = function () {
            var formIsNotEnum = this.selectedForm.type !== FormfieldTypes.enum;
            var noValuesInEnum = this.selectedForm.values === undefined || this.selectedForm.values.length === 0;
            if (formIsNotEnum) {
                return;
            }
            if (noValuesInEnum) {
                this.formElement.fields[this.selectedIndex].values = [];
            }
            var enumValues = [];
            var newEnumValueIds = [];
            var newEnumValueNames = [];
            for (var _i = 0, _a = this.selectedForm.values; _i < _a.length; _i++) {
                var value = _a[_i];
                var camundaValue = value.$type !== 'camunda:Value';
                if (camundaValue) {
                    continue;
                }
                enumValues.push(value);
                newEnumValueIds.push(value.id);
                newEnumValueNames.push(value.name);
            }
            this.enumValues = enumValues;
            this.newEnumValueIds = newEnumValueIds;
            this.newEnumValueNames = newEnumValueNames;
        };
        BasicsSection.prototype.reloadForms = function () {
            this.forms = [];
            var noFormFieldsExist = this.formElement === undefined ||
                this.formElement === null ||
                this.formElement.fields === undefined ||
                this.formElement.fields === null ||
                this.formElement.fields.length === 0;
            if (noFormFieldsExist) {
                return;
            }
            this.forms = this.formElement.fields.filter(function (form) {
                var formIsFormField = form.$type === 'camunda:FormField';
                return formIsFormField;
            });
        };
        BasicsSection.prototype.getTypeAndHandleCustomType = function (type) {
            var typeIsRegularType = type === FormfieldTypes.string ||
                type === FormfieldTypes.long ||
                type === FormfieldTypes.number ||
                type === FormfieldTypes.boolean ||
                type === FormfieldTypes.date ||
                type === FormfieldTypes.enum ||
                type === FormfieldTypes.customType ||
                type === null;
            if (typeIsRegularType) {
                this.customType = '';
                return type;
            }
            this.customType = type;
            return FormfieldTypes.customType;
        };
        BasicsSection.prototype.getSelectedIndex = function () {
            var _this = this;
            return this.formElement.fields.findIndex(function (form) {
                var formIsSelectedForm = form.id === _this.selectedForm.id;
                return formIsSelectedForm;
            });
        };
        BasicsSection.prototype.getOrCreateFormElement = function () {
            var elementHasNoExtensionsElement = this.businessObjInPanel.extensionElements === undefined || this.businessObjInPanel.extensionElements === null;
            if (elementHasNoExtensionsElement) {
                this.createExtensionElement();
            }
            var extensionsValues = this.businessObjInPanel.extensionElements.values;
            var formElement = extensionsValues.find(function (extensionValue) {
                var extensionIsValidForm = extensionValue.$type === 'camunda:FormData';
                return extensionIsValidForm;
            });
            if (formElement === undefined) {
                this.createEmptyFormData();
                return this.getOrCreateFormElement();
            }
            return formElement;
        };
        BasicsSection.prototype.createExtensionElement = function () {
            var values = [];
            var fields = [];
            var formData = this.bpmnModdle.create('camunda:FormData', { fields: fields });
            values.push(formData);
            this.businessObjInPanel.formKey = 'Form Key';
            var extensionElements = this.bpmnModdle.create('bpmn:ExtensionElements', { values: values });
            this.businessObjInPanel.extensionElements = extensionElements;
        };
        BasicsSection.prototype.createEmptyFormData = function () {
            var fields = [];
            var extensionFormElement = this.bpmnModdle.create('camunda:FormData', { fields: fields });
            this.businessObjInPanel.extensionElements.values.push(extensionFormElement);
        };
        BasicsSection.prototype.generateRandomId = function () {
            var randomId = '';
            var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
            var randomIdLength = 8;
            for (var i = 0; i < randomIdLength; i++) {
                randomId += possible.charAt(Math.floor(Math.random() * possible.length));
            }
            return randomId;
        };
        BasicsSection.prototype.validateFormId = function (event) {
            if (event.type !== 'validate') {
                return;
            }
            this.validationError = false;
            for (var _i = 0, _a = event.results; _i < _a.length; _i++) {
                var result = _a[_i];
                if (result.rule.property.displayName !== 'formId') {
                    continue;
                }
                if (result.valid === false) {
                    this.validationError = true;
                    document.getElementById(result.rule.property.displayName).style.border = '2px solid red';
                }
                else {
                    document.getElementById(result.rule.property.displayName).style.border = '';
                }
            }
        };
        BasicsSection.prototype.hasFormSameIdAsSelected = function (forms) {
            var _this = this;
            var unselectedFormWithSameId = forms.find(function (form) {
                var formHasSameIdAsSelectedForm = form.id === _this.selectedForm.id;
                var formIsNotSelectedForm = form !== _this.selectedForm;
                return formHasSameIdAsSelectedForm && formIsNotSelectedForm;
            });
            return unselectedFormWithSameId !== undefined;
        };
        BasicsSection.prototype.getFormDataFromBusinessObject = function (businessObject) {
            var extensionElement = businessObject.extensionElements;
            var hasNoExtensionElements = extensionElement === undefined;
            if (hasNoExtensionElements) {
                return undefined;
            }
            var extensions = extensionElement.values;
            return extensions.find(function (extension) {
                var isFormData = extension.$type === 'camunda:FormData';
                return isFormData;
            });
        };
        BasicsSection.prototype.getFormsById = function (id) {
            var _this = this;
            var elementRegistry = this.modeler.get('elementRegistry');
            var formsWithId = elementRegistry.filter(function (element) {
                var currentBusinessObject = element.businessObject;
                var isNoUserTask = currentBusinessObject.$type !== 'bpmn:UserTask';
                if (isNoUserTask) {
                    return false;
                }
                var formData = _this.getFormDataFromBusinessObject(currentBusinessObject);
                if (formData === undefined || formData.fields === undefined) {
                    return false;
                }
                var forms = formData.fields;
                return _this.hasFormSameIdAsSelected(forms);
            });
            var selectedTypeIsBoolean = this.selectedType === FormfieldTypes.boolean;
            if (selectedTypeIsBoolean) {
                this.booleanDefaultValueString = this.selectedForm.defaultValue;
                this.booleanDefaultValue = this.booleanDefaultValueString === 'true' || this.booleanDefaultValueString === '1';
            }
            return formsWithId;
        };
        BasicsSection.prototype.formIdIsUnique = function (id) {
            var formsWithSameId = this.getFormsById(id);
            var isIdUnique = formsWithSameId.length === 0;
            return isIdUnique;
        };
        BasicsSection.prototype.setValidationRules = function () {
            var _this = this;
            aurelia_validation_1.ValidationRules.ensure(function (form) { return form.id; })
                .displayName('formId')
                .required()
                .withMessage('ID cannot be blank.')
                .then()
                .satisfies(function (id) { return _this.formIdIsUnique(id); })
                .withMessage('ID already exists.')
                .on(this.selectedForm);
        };
        BasicsSection.prototype.publishDiagramChange = function () {
            this.eventAggregator.publish(environment_1.default.events.diagramChange);
        };
        BasicsSection = __decorate([
            aurelia_framework_1.inject(aurelia_validation_1.ValidationController, aurelia_event_aggregator_1.EventAggregator, help_modal_service_1.HelpModalService),
            __metadata("design:paramtypes", [aurelia_validation_1.ValidationController,
                aurelia_event_aggregator_1.EventAggregator,
                help_modal_service_1.HelpModalService])
        ], BasicsSection);
        return BasicsSection;
    }());
    exports.BasicsSection = BasicsSection;
});


;
define('text!modules/design/property-panel/indextabs/forms/sections/basics/basics.css',[],function(){return ".key-value-column-left {\n  width: 30%; }\n\n.key-value-column-right {\n  width: 70%; }\n\n.key-value-input {\n  width: 100%;\n  margin: 2px 0; }\n\n.key-value-input:disabled {\n  opacity: 0.5; }\n";});;
define('text!modules/design/property-panel/indextabs/forms/sections/basics/basics.html',[],function(){return "<template>\n  <require from=\"./basics.css\"></require>\n  <require from=\"../../../../styles/sections.css\"></require>\n  <div class=\"section-panel\" id=\"js-forms-basics-section\">\n    <div class=\"panel__heading\">User Task\n      <i class=\"fas fa-info-circle feedback-modal__help-icon\" title=\"Help: How to use a UserTask\" click.delegate=\"showUserTaskHelpModal()\"></i>\n    </div>\n    <div class=\"panel__content\">\n      <table class=\"props-table\">\n        <tr>\n          <th>Form Key</th>\n          <td>\n            <input type=\"text\" class=\"props-input\" value.bind=\"businessObjInPanel.formKey\" disabled.bind=\"!isEditable\">\n          </td>\n        </tr>\n      </table>\n    </div>\n  </div>\n  <div class=\"section-panel\">\n    <div class=\"panel__heading\">\n      Form Fields\n      <button class=\"button remove-context-button\" class.bind=\"isFormSelected ? '' : 'button--disabled'\" disabled.bind=\"!isFormSelected || !isEditable\" click.delegate=\"removeSelectedForm()\">\n        <i class=\"fas fa-trash\"></i>\n      </button>\n      <button class=\"button add-context-button\" click.delegate=\"addForm()\" disabled.bind=\"!isEditable\">\n        <i class=\"fas fa-plus\"></i>\n      </button>\n    </div>\n    <div class=\"panel__content\">\n      <select class=\"form-control forms-list\" value.bind=\"selectedForm\" change.delegate=\"selectForm()\" size=\"5\">\n        <option repeat.for=\"form of forms\" model.bind=\"form\">${form.id}</option>\n      </select>\n    </div>\n  </div>\n  <div class=\"section-panel\" show.bind=\"isFormSelected\">\n    <div class=\"panel__heading\">Form Field</div>\n    <div class=\"panel__content\">\n      <table class=\"props-table\">\n        <tr>\n          <th>ID</th>\n          <td>\n            <input type=\"text\" class=\"props-input\" id=\"formId\" value.bind=\"selectedForm.id & validateOnChange\" placeholder=\"ID\" change.delegate=\"updateId()\" disabled.bind=\"!isEditable\">\n          </td>\n          <td>\n            <div show.bind=\"isFormSelected\">\n              <template if.bind=\"validationError\">\n                <i class=\"fas fa-times validation_error\"></i>\n              </template>\n            </div>\n          </td>\n        </tr>\n        <tr>\n          <th>Type</th>\n          <td>\n            <select class=\"props-input props-select\" value.bind=\"selectedType\" change.delegate=\"updateType()\" disabled.bind=\"!isEditable\">\n              <option model.bind=\"null\">-Choose Type-</option>\n              <option model.bind=\"FormfieldTypes.string\">Text</option>\n              <option model.bind=\"FormfieldTypes.long\">Integer</option>\n              <option model.bind=\"FormfieldTypes.number\">Decimal</option>\n              <option model.bind=\"FormfieldTypes.boolean\">Truth Value</option>\n              <option model.bind=\"FormfieldTypes.date\">Date</option>\n              <option model.bind=\"FormfieldTypes.enum\">Enumeration</option>\n              <option model.bind=\"FormfieldTypes.customType\">Custom</option>\n            </select>\n          </td>\n        </tr>\n        <tr if.bind=\"selectedType === FormfieldTypes.customType\">\n          <th>Custom Type</th>\n          <td>\n            <input type=\"text\" class=\"props-input\" value.bind=\"customType\" placeholder=\"Custom Type\" change.delegate=\"updateType()\" disabled.bind=\"!isEditable\">\n          </td>\n        </tr>\n        <tr>\n          <th>Label</th>\n          <td>\n            <input type=\"text\" class=\"props-input\" value.bind=\"selectedForm.label\"  placeholder=\"Label\" change.delegate=\"updateLabel()\" disabled.bind=\"!isEditable\">\n          </td>\n        </tr>\n        <tr>\n          <th>Default Value</th>\n          <td>\n            <div if.bind=\"selectedType === FormfieldTypes.boolean\" class=\"checkbox-input\">\n              <input type=\"checkbox\" class=\"checkbox-input__checkbox\" checked.bind=\"booleanDefaultValue\" change.delegate=\"updateBooleanDefaultValue()\" disabled.bind=\"!isEditable\">\n              <input type=\"text\" class=\"props-input checkbox-input__input\" value.bind=\"booleanDefaultValueString\" change.delegate=\"updateBooleanDefaultValueString()\" disabled.bind=\"!isEditable\">\n             </div>\n            <input else type=\"text\" class=\"props-input\" value.bind=\"selectedForm.defaultValue\"  placeholder=\"Default Value\" change.delegate=\"updateDefaultValue()\" disabled.bind=\"!isEditable\">\n          </td>\n        </tr>\n      </table>\n    </div>\n  </div>\n  <div class=\"section-panel\" if.bind=\"isFormSelected && selectedType === FormfieldTypes.enum\">\n    <div class=\"panel__heading\">\n      <span>Values</span>\n      <button class=\"button add-context-button\" click.delegate=\"addEnumValue()\" disabled.bind=\"!isEditable\">\n        <i class=\"fas fa-plus\"></i>\n      </button>\n    </div>\n    <div class=\"panel__content\">\n      <table>\n        <tr repeat.for=\"value of enumValues\" index.bind=\"$index\">\n          <td class=\"key-value-column-left\">\n            <input type=\"text\" class=\"key-value-input\" value.bind=\"newEnumValueIds[$index]\" placeholder=\"ID\" change.delegate=\"changeEnumValueId($index)\" disabled.bind=\"!isEditable\">\n          </td>\n          <td class=\"key-value-column-right\">\n            <input type=\"text\" class=\"key-value-input\" value.bind=\"newEnumValueNames[$index]\" placeholder=\"Name\" change.delegate=\"changeEnumValueName($index)\" disabled.bind=\"!isEditable\">\n          </td>\n          <td>\n            <button class=\"button key-value-delete-button\" click.delegate=\"removeEnumValue($index)\" disabled.bind=\"!isEditable\">\n              <i class=\"fas fa-times\"></i>\n            </button>\n          </td>\n        </tr>\n      </table>\n    </div>\n  </div>\n</template>\n";});;
define('modules/design/property-panel/indextabs/general/general',["require", "exports", "./sections/basics/basics", "./sections/call-activity/call-activity", "./sections/conditional-event/conditional-event", "./sections/error-event/error-event", "./sections/escalation-event/escalation-event", "./sections/flow/flow", "./sections/message-event/message-event", "./sections/message-task/message-task", "./sections/pool/pool", "./sections/process/process", "./sections/script-task/script-task", "./sections/service-task/service-task", "./sections/signal-event/signal-event", "./sections/timer-event/timer-event", "./sections/link-event/link-event"], function (require, exports, basics_1, call_activity_1, conditional_event_1, error_event_1, escalation_event_1, flow_1, message_event_1, message_task_1, pool_1, process_1, script_task_1, service_task_1, signal_event_1, timer_event_1, link_event_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var General = (function () {
        function General() {
            this.title = 'General';
            this.path = '/indextabs/general/general';
            this.basicsSection = new basics_1.BasicsSection();
            this.poolSection = new pool_1.PoolSection();
            this.messageEventSection = new message_event_1.MessageEventSection();
            this.messageTaskSection = new message_task_1.MessageTaskSection();
            this.signalEventSection = new signal_event_1.SignalEventSection();
            this.scriptTaskSection = new script_task_1.ScriptTaskSection();
            this.callActivitySection = new call_activity_1.CallActivitySection();
            this.flowSection = new flow_1.FlowSection();
            this.errorEventSection = new error_event_1.ErrorEventSection();
            this.escalationEventSection = new escalation_event_1.EscalationEventSection();
            this.timerEventSection = new timer_event_1.TimerEventSection();
            this.conditionalEventSection = new conditional_event_1.ConditionalEventSection();
            this.processSection = new process_1.ProcessSection();
            this.serviceTaskSection = new service_task_1.ServiceTaskSection();
            this.linkEventSection = new link_event_1.LinkEventSection();
            this.sections = [
                this.basicsSection,
                this.poolSection,
                this.messageEventSection,
                this.messageTaskSection,
                this.signalEventSection,
                this.scriptTaskSection,
                this.callActivitySection,
                this.flowSection,
                this.errorEventSection,
                this.escalationEventSection,
                this.timerEventSection,
                this.conditionalEventSection,
                this.processSection,
                this.serviceTaskSection,
                this.linkEventSection,
            ];
            this.canHandleElement = true;
        }
        General.prototype.isSuitableForElement = function (element) {
            this.sections.forEach(function (section) {
                section.canHandleElement = section.isSuitableForElement(element);
            });
            return this.sections.some(function (section) {
                return section.canHandleElement;
            });
        };
        return General;
    }());
    exports.General = General;
});


;
define('text!modules/design/property-panel/indextabs/general/general.css',[],function(){return "";});;
define('text!modules/design/property-panel/indextabs/general/general.html',[],function(){return "<template>\n  <require from=\"./general.css\"></require>\n  <require from=\"../../styles/registers.css\"></require>\n  <div class=\"index-tab\">\n    <template repeat.for=\"section of sections\">\n      <compose\n        view-model=\".${section.path}\"\n        view=\".${section.path}.html\"\n        model.bind=\"{modeler: modeler, elementInPanel: elementInPanel, isEditable: isEditable}\"\n        if.bind=\"section.isSuitableForElement(elementInPanel)\"\n        containerless>\n      </compose>\n    </template>\n  </div>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
define('modules/design/property-panel/indextabs/general/repository/general.repository',["require", "exports", "aurelia-framework", "aurelia-router", "@process-engine/bpmn-js-custom-bundle"], function (require, exports, aurelia_framework_1, aurelia_router_1, bundle) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    bundle = __importStar(bundle);
    var GeneralRepository = (function () {
        function GeneralRepository(solutionService, router) {
            this.solutionService = solutionService;
            this.router = router;
        }
        GeneralRepository.prototype.getAllDiagrams = function () {
            return __awaiter(this, void 0, void 0, function () {
                var currentSolutionUri, solutionEntry, solution, allDiagramsInSolution;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            currentSolutionUri = this.router.currentInstruction.queryParams.solutionUri;
                            return [4, this.solutionService.getSolutionEntryForUri(currentSolutionUri)];
                        case 1:
                            solutionEntry = _a.sent();
                            return [4, solutionEntry.service.loadSolution()];
                        case 2:
                            solution = _a.sent();
                            allDiagramsInSolution = solution.diagrams;
                            return [2, allDiagramsInSolution];
                    }
                });
            });
        };
        GeneralRepository.prototype.getAllStartEventsForDiagram = function (diagram) {
            return __awaiter(this, void 0, void 0, function () {
                var modeler, elementRegistry, startEvents;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            modeler = new bundle.modeler({
                                moddleExtensions: {
                                    camunda: bundle.camundaModdleDescriptor,
                                },
                            });
                            return [4, this.importXmlIntoModeler(modeler, diagram.xml)];
                        case 1:
                            _a.sent();
                            elementRegistry = modeler.get('elementRegistry');
                            startEvents = elementRegistry.filter(function (element) { return element.type === 'bpmn:StartEvent'; });
                            return [2, startEvents];
                    }
                });
            });
        };
        GeneralRepository.prototype.importXmlIntoModeler = function (modeler, xml) {
            return new Promise(function (resolve, reject) {
                modeler.importXML(xml, function (error) {
                    var errorOccured = error !== undefined;
                    if (errorOccured) {
                        reject();
                        return;
                    }
                    resolve();
                });
            });
        };
        GeneralRepository = __decorate([
            aurelia_framework_1.inject('SolutionService', aurelia_router_1.Router),
            __metadata("design:paramtypes", [Object, aurelia_router_1.Router])
        ], GeneralRepository);
        return GeneralRepository;
    }());
    exports.GeneralRepository = GeneralRepository;
});


;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/design/property-panel/indextabs/general/sections/basics/basics',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "aurelia-validation", "../../../../../../../contracts/index", "../../../../../../../environment"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, aurelia_validation_1, index_1, environment_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var BasicsSection = (function () {
        function BasicsSection(controller, eventAggregator, bindingEngine) {
            var _this = this;
            this.path = '/sections/basics/basics';
            this.canHandleElement = true;
            this.validationError = false;
            this.showModal = false;
            this.showUnsupportedFlag = false;
            this.saveInputHeightOnMouseUp = function () {
                var resizeListenerFunction = function () {
                    localStorage.setItem('docsInputHeight', _this.docsInput.clientHeight.toString());
                    window.removeEventListener('mouseup', resizeListenerFunction);
                };
                window.addEventListener('mouseup', resizeListenerFunction);
            };
            this.validationController = controller;
            this.eventAggregator = eventAggregator;
            this.bindingEngine = bindingEngine;
        }
        BasicsSection.prototype.activate = function (model) {
            var _this = this;
            if (this.validationError) {
                this.businessObjInPanelId = this.previousProcessRefId;
                this.validationController.validate();
            }
            this.elementInPanel = model.elementInPanel;
            this.businessObjInPanel = model.elementInPanel.businessObject;
            this.businessObjInPanelId = this.businessObjInPanel.id;
            this.previousProcessRefId = model.elementInPanel.businessObject.id;
            if (this.businessObjInPanelIdObserver !== undefined) {
                this.businessObjInPanelIdObserver.dispose();
                this.businessObjInPanelIdObserver = undefined;
            }
            this.businessObjInPanelIdObserver = this.bindingEngine
                .propertyObserver(this.businessObjInPanel, 'id')
                .subscribe(function (newId) {
                _this.businessObjInPanelId = newId;
            });
            this.modeling = model.modeler.get('modeling');
            this.bpmnModdle = model.modeler.get('moddle');
            this.modeler = model.modeler;
            this.validationController.subscribe(function (event) {
                _this.validateFormId(event);
            });
            this.init();
            this.setValidationRules();
        };
        BasicsSection.prototype.attached = function () {
            this.recoverInputHeight();
            this.saveInputHeightOnChange();
        };
        BasicsSection.prototype.detached = function () {
            this.docsInput.removeEventListener('mousedown', this.saveInputHeightOnMouseUp);
            if (!this.validationError) {
                return;
            }
            this.businessObjInPanelId = this.previousProcessRefId;
            this.validationController.validate();
        };
        BasicsSection.prototype.isSuitableForElement = function (element) {
            if (element === undefined || element === null) {
                return false;
            }
            return true;
        };
        BasicsSection.prototype.updateDocumentation = function () {
            this.elementInPanel.documentation = [];
            var documentationPropertyObject = { text: this.elementDocumentation };
            var documentation = this.bpmnModdle.create('bpmn:Documentation', documentationPropertyObject);
            this.elementInPanel.documentation.push(documentation);
            var elementInPanelDocumentation = { documentation: this.elementInPanel.documentation };
            this.modeling.updateProperties(this.elementInPanel, elementInPanelDocumentation);
            this.publishDiagramChange();
        };
        BasicsSection.prototype.updateName = function () {
            this.modeling.updateLabel(this.elementInPanel, this.businessObjInPanel.name);
            this.publishDiagramChange();
        };
        BasicsSection.prototype.updateId = function () {
            this.validationController.validate();
            if (this.validationController.errors.length > 0) {
                return;
            }
            var updateProperty = { id: this.businessObjInPanelId };
            this.modeling.updateProperties(this.elementInPanel, updateProperty);
            this.publishDiagramChange();
        };
        BasicsSection.prototype.init = function () {
            if (!this.businessObjInPanel) {
                return;
            }
            var typeOfSelectedElement = this.businessObjInPanel.$type;
            this.elementType = this.humanizeElementType(typeOfSelectedElement);
            this.showUnsupportedFlag = !this.isCurrentBPMNElementSupported();
            var documentationExists = this.businessObjInPanel.documentation !== undefined &&
                this.businessObjInPanel.documentation !== null &&
                this.businessObjInPanel.documentation.length > 0;
            if (documentationExists) {
                this.elementDocumentation = this.businessObjInPanel.documentation[0].text;
            }
            else {
                this.elementDocumentation = '';
            }
        };
        BasicsSection.prototype.isCurrentBPMNElementSupported = function () {
            var _this = this;
            var typeOfSelectedElement = this.businessObjInPanel.$type;
            return index_1.SupportedBPMNElements.some(function (supportedBPMNElement) {
                if (typeOfSelectedElement !== supportedBPMNElement.type) {
                    return false;
                }
                var currentElementHasUnsupportedVariable = supportedBPMNElement.unsupportedVariables.some(function (unsupportedVariable) {
                    return Object.keys(_this.elementInPanel.businessObject).includes(unsupportedVariable);
                });
                if (currentElementHasUnsupportedVariable) {
                    return false;
                }
                if (_this.businessObjInPanel.eventDefinitions === undefined) {
                    return supportedBPMNElement.supportedEventDefinitions.some(function (supportedEventDefinition) {
                        return supportedEventDefinition === '';
                    });
                }
                var eventDefinition = _this.businessObjInPanel.eventDefinitions[0].$type;
                return supportedBPMNElement.supportedEventDefinitions.some(function (supportedEventDefinition) {
                    return supportedEventDefinition === eventDefinition;
                });
            });
        };
        BasicsSection.prototype.humanizeElementType = function (type) {
            var rawType = type.replace(/^bpmn:/, '');
            var humanizedType = rawType.replace(/([a-z])([A-Z])/, '$1 $2');
            return humanizedType;
        };
        BasicsSection.prototype.validateFormId = function (event) {
            if (event.type !== 'validate') {
                return;
            }
            this.validationError = false;
            for (var _i = 0, _a = event.results; _i < _a.length; _i++) {
                var result = _a[_i];
                if (result.rule.property.displayName !== 'elementId') {
                    continue;
                }
                if (result.valid === false) {
                    this.validationError = true;
                    document.querySelector('[data-test-property-panel-element-id]').style.border =
                        '2px solid red';
                }
                else {
                    document.querySelector('[data-test-property-panel-element-id]').style.border = '';
                }
            }
        };
        BasicsSection.prototype.formIdIsUnique = function (id) {
            var _this = this;
            var elementRegistry = this.modeler.get('elementRegistry');
            var elementsWithSameId = elementRegistry.filter(function (element) {
                var elementIsBusinessObjectInPanel = element.businessObject === _this.businessObjInPanel;
                if (elementIsBusinessObjectInPanel) {
                    return false;
                }
                var elementIsOfTypeLabel = element.type === 'label';
                if (elementIsOfTypeLabel) {
                    return false;
                }
                var elementHasSameId = element.businessObject.id === id;
                return elementHasSameId;
            });
            return elementsWithSameId.length === 0;
        };
        BasicsSection.prototype.areRootElementIdsUnique = function (id) {
            var elementIds = this.modeler._definitions.rootElements.map(function (rootElement) {
                return rootElement.id;
            });
            var currentElementIdIndex = elementIds.indexOf(this.businessObjInPanel.id);
            if (currentElementIdIndex >= 0) {
                elementIds.splice(currentElementIdIndex, 1);
            }
            return !elementIds.includes(id);
        };
        BasicsSection.prototype.isDefinitionIdUnique = function (id) {
            return this.modeler._definitions.id !== id;
        };
        BasicsSection.prototype.setValidationRules = function () {
            var _this = this;
            aurelia_validation_1.ValidationRules.ensure(function (basicsSection) { return basicsSection.businessObjInPanelId; })
                .displayName('elementId')
                .required()
                .withMessage('ID cannot be blank.')
                .satisfies(function (id) { return !id.includes(' '); })
                .withMessage('ID must not contain spaces.')
                .then()
                .satisfies(function (id) { return _this.formIdIsUnique(id) && _this.areRootElementIdsUnique(id) && _this.isDefinitionIdUnique(id); })
                .withMessage('ID already exists.')
                .on(this);
        };
        BasicsSection.prototype.saveInputHeightOnChange = function () {
            this.docsInput.addEventListener('mousedown', this.saveInputHeightOnMouseUp);
        };
        BasicsSection.prototype.recoverInputHeight = function () {
            this.docsInput.style.height = localStorage.getItem('docsInputHeight') + "px";
        };
        BasicsSection.prototype.publishDiagramChange = function () {
            this.eventAggregator.publish(environment_1.default.events.diagramChange);
        };
        BasicsSection = __decorate([
            aurelia_framework_1.inject(aurelia_validation_1.ValidationController, aurelia_event_aggregator_1.EventAggregator, aurelia_framework_1.BindingEngine),
            __metadata("design:paramtypes", [aurelia_validation_1.ValidationController, aurelia_event_aggregator_1.EventAggregator, aurelia_framework_1.BindingEngine])
        ], BasicsSection);
        return BasicsSection;
    }());
    exports.BasicsSection = BasicsSection;
});


;
define('text!modules/design/property-panel/indextabs/general/sections/basics/basics.css',[],function(){return ".validation_error {\n  position: relative;\n  display: inline-block;\n  margin-left: 5px;\n  margin-top: 5px;\n  z-index: 0;\n  opacity: 1;\n  color: red;\n  font-size: 16px; }\n\n.panel--general {\n  flex: 1 100%;\n  margin-top: 0; }\n\n.docs {\n  min-height: 55px;\n  max-height: 400px; }\n\n.props-input-textarea {\n  width: 100%;\n  height: 25px;\n  max-height: 200px;\n  min-height: 25px;\n  padding-bottom: 5px;\n  margin-top: 5px;\n  background: transparent;\n  border: none;\n  outline: none;\n  border-bottom: 1px solid #e9e9e9;\n  font-weight: 400;\n  color: #5c5c5c;\n  text-overflow: ellipsis; }\n\n.props-input-textarea:disabled {\n  pointer-events: none;\n  opacity: 0.5; }\n\n.props-table-docs {\n  width: 100%; }\n\n.props-table-docs td {\n  width: 100%;\n  padding: 5px 0;\n  color: #a5a5a5; }\n\n.docs-enlarge-link {\n  display: block;\n  color: #007bff !important; }\n\n.docs-enlarge-text:hover {\n  text-decoration: underline; }\n\n.hint-unsupported-bpmn-element {\n  display: inline-block;\n  margin: 0 10px;\n  padding: 0 2px;\n  font-size: 12px;\n  background: #FFEB3B;\n  border-bottom: 1px solid #FDD835; }\n";});;
define('text!modules/design/property-panel/indextabs/general/sections/basics/basics.html',[],function(){return "<template>\n  <require from=\"./basics.css\"></require>\n  <require from=\"../../../../styles/sections.css\"></require>\n  <div class=\"section-panel panel--general\" id=\"js-general-basics-section\">\n    <div class=\"panel__heading\">${elementType}</div>\n    <div if.bind=\"showUnsupportedFlag\" class=\"hint-unsupported-bpmn-element\">Not supported by internal ProcessEngine</div>\n    <div class=\"panel__content\">\n      <table class=\"props-table\">\n        <tr>\n          <th>ID</th>\n          <td>\n            <input type=\"text\" class=\"props-input\" value.bind=\"businessObjInPanelId & validateOnChange\" change.delegate=\"updateId()\" disabled.bind=\"!isEditable\" data-test-property-panel-element-id>\n          </td>\n          <td>\n            <template if.bind=\"validationError\">\n              <i class=\"fas fa-times validation_error\"></i>\n            </template>\n          </td>\n        </tr>\n        <tr>\n          <th>Name</th>\n          <td>\n            <input type=\"text\" class=\"props-input\" value.bind=\"businessObjInPanel.name\" change.delegate=\"updateName()\" disabled.bind=\"!isEditable\" data-test-property-panel-element-name>\n          </td>\n        </tr>\n        <tr>\n          <th>Docs <a class=\"docs-enlarge-link\" click.delegate=\"showModal = true\"><small class=\"docs-enlarge-text\">Enlarge</small></a></th>\n          <td>\n            <textarea type=\"text\" ref=\"docsInput\" class=\"props-input-textarea\" value.bind=\"elementDocumentation\" change.delegate=\"updateDocumentation()\" disabled.bind=\"!isEditable\" aria-multiline=\"true\"></textarea>\n          </td>\n        </tr>\n      </table>\n    </div>\n  </div>\n\n  <modal show.bind=\"showModal\"\n         header-text=\"Editing: Docs\">\n    <template replace-part=\"modal-body\" autofocus>\n      <textarea class=\"form-control docs\" value.bind=\"elementDocumentation\" change.delegate=\"updateDocumentation()\" rows=\"10\" aria-multiline=\"true\" autofocus wrap=\"soft\" disabled.bind=\"!isEditable\"></textarea>\n    </template>\n    <template replace-part=\"modal-footer\">\n      <button type=\"button\" class=\"btn btn-primary\" data-dismiss=\"modal\" click.delegate=\"showModal = false\">Okay</button>\n    </template>\n  </modal>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/design/property-panel/indextabs/general/sections/call-activity/call-activity',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "aurelia-router", "../../../../../../../environment", "../../service/general.service"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, aurelia_router_1, environment_1, general_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var ProcessIdRegex = /(?<=process id=").*?(?=")/;
    var CallActivitySection = (function () {
        function CallActivitySection(generalService, router, eventAggregator) {
            var _this = this;
            this.path = '/sections/call-activity/call-activity';
            this.canHandleElement = false;
            this.diagramNamesWithProcessIds = [];
            this.callActivitySection = this;
            this.saveInputHeightOnMouseUp = function () {
                var resizeListenerFunction = function () {
                    localStorage.setItem('scriptTaskInputHeight', _this.payloadInput.clientHeight.toString());
                    window.removeEventListener('mouseup', resizeListenerFunction);
                };
                window.addEventListener('mouseup', resizeListenerFunction);
            };
            this.generalService = generalService;
            this.router = router;
            this.eventAggregator = eventAggregator;
        }
        CallActivitySection.prototype.activate = function (model) {
            return __awaiter(this, void 0, void 0, function () {
                var processIdIsSelected, _a, error_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.moddle = model.modeler.get('moddle');
                            this.activeSolutionUri = this.router.currentInstruction.queryParams.solutionUri;
                            this.businessObjInPanel = model.elementInPanel.businessObject;
                            return [4, this.getAllDiagrams()];
                        case 1:
                            _b.sent();
                            this.previouslySelectedDiagram = this.businessObjInPanel.calledElement;
                            this.selectedProcessId = this.businessObjInPanel.calledElement;
                            processIdIsSelected = this.selectedProcessId !== undefined;
                            if (!processIdIsSelected) return [3, 6];
                            _b.label = 2;
                        case 2:
                            _b.trys.push([2, 4, , 5]);
                            _a = this;
                            return [4, this.getAllStartEventsForProcessId(this.selectedProcessId)];
                        case 3:
                            _a.startEventIdsWithDiagramNames = _b.sent();
                            return [3, 5];
                        case 4:
                            error_1 = _b.sent();
                            this.startEventIdsWithDiagramNames = [];
                            return [3, 5];
                        case 5:
                            this.selectedStartEvent = this.getSelectedStartEvent();
                            if (this.selectedStartEvent === undefined && this.startEventIdsWithDiagramNames.length > 0) {
                                this.selectedStartEvent = this.startEventIdsWithDiagramNames[0].startEventId;
                            }
                            this.payload = this.getPayload();
                            _b.label = 6;
                        case 6: return [2];
                    }
                });
            });
        };
        CallActivitySection.prototype.attached = function () {
            this.recoverInputHeight();
            this.saveInputHeightOnChange();
        };
        CallActivitySection.prototype.detached = function () {
            this.payloadInput.removeEventListener('mousedown', this.saveInputHeightOnMouseUp);
        };
        CallActivitySection.prototype.isSuitableForElement = function (element) {
            var elementIsCallActivity = element !== undefined &&
                element.businessObject !== undefined &&
                element.businessObject.$type === 'bpmn:CallActivity';
            return elementIsCallActivity;
        };
        CallActivitySection.prototype.navigateToCalledDiagram = function () {
            return __awaiter(this, void 0, void 0, function () {
                var diagramNamesForGivenProcessId, diagramName, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            diagramNamesForGivenProcessId = this.getAllDiagramNamesForProcessId(this.selectedProcessId);
                            if (!(diagramNamesForGivenProcessId.length === 1)) return [3, 1];
                            diagramName = diagramNamesForGivenProcessId[0];
                            return [3, 4];
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            return [4, this.handleDiagramSelection(diagramNamesForGivenProcessId)];
                        case 2:
                            diagramName = _b.sent();
                            return [3, 4];
                        case 3:
                            _a = _b.sent();
                            return [2];
                        case 4:
                            this.router.navigateToRoute('design', {
                                diagramName: diagramName,
                                solutionUri: this.activeSolutionUri,
                                view: 'detail',
                            });
                            return [2];
                    }
                });
            });
        };
        CallActivitySection.prototype.isPartOfAllDiagrams = function (processId) {
            return this.diagramNamesWithProcessIds.some(function (diagramNameWithProcessId) {
                return diagramNameWithProcessId.processId === processId;
            });
        };
        CallActivitySection.prototype.allDiagramsChanged = function () {
            var _this = this;
            this.diagramNamesWithProcessIds = this.allDiagrams.map(function (diagram) {
                var diagramNameWithProcessId = {
                    diagramName: diagram.name,
                    processId: _this.getProcessIdByDiagramName(diagram.name),
                };
                return diagramNameWithProcessId;
            });
        };
        CallActivitySection.prototype.selectedStartEventChanged = function (newValue, oldValue) {
            if (newValue === undefined || oldValue === undefined) {
                return;
            }
            this.publishDiagramChange();
            var noExtensionsElements = this.businessObjInPanel.extensionElements === undefined ||
                this.businessObjInPanel.extensionElements.values === undefined ||
                this.businessObjInPanel.extensionElements.values.length === 0;
            if (noExtensionsElements) {
                this.createExtensionElement();
            }
            var bpmnPropertyProperties = {
                name: 'startEventId',
                value: newValue,
            };
            var bpmnProperty = this.moddle.create('camunda:Property', bpmnPropertyProperties);
            var propertiesElement = this.getPropertiesElement();
            var propertiesElementDoesNotExist = propertiesElement === undefined;
            if (propertiesElementDoesNotExist) {
                this.createPropertiesElement();
                propertiesElement = this.getPropertiesElement();
            }
            var startEventProperty = propertiesElement.values.findIndex(function (value) { return value.name === 'startEventId'; });
            if (startEventProperty >= 0) {
                propertiesElement.values.splice(startEventProperty, 1);
            }
            if (newValue === undefined || newValue.trim() === '') {
                return;
            }
            propertiesElement.values.push(bpmnProperty);
        };
        CallActivitySection.prototype.payloadChanged = function (newValue, oldValue) {
            return __awaiter(this, void 0, void 0, function () {
                var propertiesElement, payloadProperty, bpmnPropertyProperties, bpmnProperty;
                return __generator(this, function (_a) {
                    if (!newValue.trim() && !oldValue.trim()) {
                        return [2];
                    }
                    this.publishDiagramChange();
                    propertiesElement = this.getPropertiesElement();
                    if (propertiesElement === undefined) {
                        this.createPropertiesElement();
                        propertiesElement = this.getPropertiesElement();
                    }
                    payloadProperty = propertiesElement.values.findIndex(function (value) { return value.name === 'payload'; });
                    if (!newValue.trim()) {
                        propertiesElement.values.splice(payloadProperty, 1);
                        return [2];
                    }
                    bpmnPropertyProperties = {
                        name: 'payload',
                        value: newValue,
                    };
                    bpmnProperty = this.moddle.create('camunda:Property', bpmnPropertyProperties);
                    if (payloadProperty >= 0) {
                        propertiesElement.values.splice(payloadProperty, 1);
                    }
                    propertiesElement.values.push(bpmnProperty);
                    return [2];
                });
            });
        };
        CallActivitySection.prototype.updateCalledDiagram = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, error_2;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _b.trys.push([0, 2, , 3]);
                            _a = this;
                            return [4, this.getAllStartEventsForProcessId(this.selectedProcessId)];
                        case 1:
                            _a.startEventIdsWithDiagramNames = _b.sent();
                            return [3, 3];
                        case 2:
                            error_2 = _b.sent();
                            this.startEventIdsWithDiagramNames = [];
                            return [3, 3];
                        case 3:
                            this.businessObjInPanel.calledElement = this.selectedProcessId;
                            this.publishDiagramChange();
                            return [2];
                    }
                });
            });
        };
        CallActivitySection.prototype.getProcessIdByDiagramName = function (diagramName) {
            var diagram = this.getDiagramByName(diagramName);
            var processId = diagram.xml.match(ProcessIdRegex)[0];
            return processId;
        };
        CallActivitySection.prototype.getDiagramByName = function (name) {
            return this.allDiagrams.find(function (diagram) {
                return diagram.name === name;
            });
        };
        CallActivitySection.prototype.getPropertiesElement = function () {
            if (this.businessObjInPanel === undefined || this.businessObjInPanel.extensionElements === undefined) {
                return undefined;
            }
            var propertiesElement = this.businessObjInPanel.extensionElements.values.find(function (extensionValue) {
                if (!extensionValue) {
                    return undefined;
                }
                var extensionIsPropertiesElement = extensionValue.$type === 'camunda:Properties' &&
                    extensionValue.values !== undefined &&
                    extensionValue.values !== null;
                return extensionIsPropertiesElement;
            });
            return propertiesElement;
        };
        CallActivitySection.prototype.createExtensionElement = function () {
            var extensionValues = [];
            var properties = [];
            var propertiesElement = this.moddle.create('camunda:Properties', { values: properties });
            extensionValues.push(propertiesElement);
            var extensionElements = this.moddle.create('bpmn:ExtensionElements', {
                values: extensionValues,
            });
            this.businessObjInPanel.extensionElements = extensionElements;
        };
        CallActivitySection.prototype.createPropertiesElement = function () {
            var properties = [];
            var propertiesElement = this.moddle.create('camunda:Properties', { values: properties });
            if (this.businessObjInPanel.extensionElements === undefined) {
                this.createExtensionElement();
            }
            var extensionElementValuesExists = this.businessObjInPanel.extensionElements.values !== undefined;
            if (extensionElementValuesExists) {
                this.businessObjInPanel.extensionElements.values.push(propertiesElement);
            }
            else {
                this.businessObjInPanel.extensionElements.values = [propertiesElement];
            }
        };
        CallActivitySection.prototype.getSelectedStartEvent = function () {
            var extensionElementAndPropertiesExist = this.businessObjInPanel.extensionElements !== undefined &&
                this.businessObjInPanel.extensionElements.values !== undefined &&
                this.businessObjInPanel.extensionElements.values.length !== 0;
            if (!extensionElementAndPropertiesExist) {
                return undefined;
            }
            var propertiesElement = this.getPropertiesElement();
            var propertiesElementExists = propertiesElement !== undefined;
            if (!propertiesElementExists) {
                return undefined;
            }
            var startEventIdProperty = propertiesElement.values.find(function (value) { return value.name === 'startEventId'; });
            var startEventIdIsConfigured = startEventIdProperty !== undefined;
            return startEventIdIsConfigured ? startEventIdProperty.value : undefined;
        };
        CallActivitySection.prototype.getPayload = function () {
            var extensionElementAndPropertiesExist = this.businessObjInPanel.extensionElements !== undefined &&
                this.businessObjInPanel.extensionElements.values !== undefined &&
                this.businessObjInPanel.extensionElements.values.length !== 0;
            if (!extensionElementAndPropertiesExist) {
                return undefined;
            }
            var propertiesElement = this.getPropertiesElement();
            var propertiesElementExists = propertiesElement !== undefined;
            if (!propertiesElementExists) {
                return undefined;
            }
            var payloadProperty = propertiesElement.values.find(function (value) { return value.name === 'payload'; });
            return payloadProperty ? payloadProperty.value : undefined;
        };
        CallActivitySection.prototype.getAllDiagrams = function () {
            return __awaiter(this, void 0, void 0, function () {
                var allDiagramsInSolution, currentDiagramName, allDiagramWithoutCurrentOne;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.generalService.getAllDiagrams()];
                        case 1:
                            allDiagramsInSolution = _a.sent();
                            currentDiagramName = this.router.currentInstruction.params.diagramName;
                            allDiagramWithoutCurrentOne = allDiagramsInSolution.filter(function (diagram) {
                                return diagram.name !== currentDiagramName;
                            });
                            this.allDiagrams = allDiagramWithoutCurrentOne;
                            return [2];
                    }
                });
            });
        };
        CallActivitySection.prototype.publishDiagramChange = function () {
            this.eventAggregator.publish(environment_1.default.events.diagramChange);
        };
        CallActivitySection.prototype.saveInputHeightOnChange = function () {
            this.payloadInput.addEventListener('mousedown', this.saveInputHeightOnMouseUp);
        };
        CallActivitySection.prototype.recoverInputHeight = function () {
            var persistedInputHeight = localStorage.getItem('scriptTaskInputHeight');
            if (persistedInputHeight) {
                this.payloadInput.style.height = persistedInputHeight + "px";
            }
        };
        CallActivitySection.prototype.getAllStartEventsForProcessId = function (processId) {
            return __awaiter(this, void 0, void 0, function () {
                var diagramNamesForGivenProcessId, startEventIdsWithDiagramNames, _loop_1, this_1, _i, diagramNamesForGivenProcessId_1, diagramName;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            diagramNamesForGivenProcessId = this.getAllDiagramNamesForProcessId(processId);
                            startEventIdsWithDiagramNames = [];
                            _loop_1 = function (diagramName) {
                                var startEventsForDiagram, startEventIdsForDiagramWithDiagramName;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4, this_1.generalService.getAllStartEventsForDiagram(diagramName)];
                                        case 1:
                                            startEventsForDiagram = _a.sent();
                                            startEventIdsForDiagramWithDiagramName = startEventsForDiagram.map(function (startEvent) {
                                                return {
                                                    diagramName: diagramName,
                                                    startEventId: startEvent.id,
                                                };
                                            });
                                            startEventIdsWithDiagramNames.push.apply(startEventIdsWithDiagramNames, startEventIdsForDiagramWithDiagramName);
                                            return [2];
                                    }
                                });
                            };
                            this_1 = this;
                            _i = 0, diagramNamesForGivenProcessId_1 = diagramNamesForGivenProcessId;
                            _a.label = 1;
                        case 1:
                            if (!(_i < diagramNamesForGivenProcessId_1.length)) return [3, 4];
                            diagramName = diagramNamesForGivenProcessId_1[_i];
                            return [5, _loop_1(diagramName)];
                        case 2:
                            _a.sent();
                            _a.label = 3;
                        case 3:
                            _i++;
                            return [3, 1];
                        case 4: return [2, startEventIdsWithDiagramNames];
                    }
                });
            });
        };
        CallActivitySection.prototype.getAllDiagramNamesForProcessId = function (processId) {
            var diagramNamesForGivenProcessId = this.diagramNamesWithProcessIds
                .filter(function (diagramNameWithProcessId) {
                return diagramNameWithProcessId.processId === processId;
            })
                .map(function (diagramNameWithProcessId) {
                return diagramNameWithProcessId.diagramName;
            });
            return diagramNamesForGivenProcessId;
        };
        CallActivitySection.prototype.handleDiagramSelection = function (diagramNames) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2, new Promise(function (resolve, reject) {
                            _this.diagramNamesToSelectFrom = diagramNames;
                            _this.showChooseDiagramModal = true;
                            var cancelNavigation = function () {
                                _this.showChooseDiagramModal = false;
                                reject();
                                document.getElementById('confirmNavigationModal').removeEventListener('click', confirmNavigation);
                            };
                            var confirmNavigation = function () { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    this.showChooseDiagramModal = false;
                                    resolve(this.selectedDiagramName);
                                    document.getElementById('cancelNavigationModal').removeEventListener('click', cancelNavigation);
                                    return [2];
                                });
                            }); };
                            setTimeout(function () {
                                document.getElementById('cancelNavigationModal').addEventListener('click', cancelNavigation, { once: true });
                                document.getElementById('confirmNavigationModal').addEventListener('click', confirmNavigation, { once: true });
                            }, 0);
                        })];
                });
            });
        };
        __decorate([
            aurelia_framework_1.observable,
            __metadata("design:type", Array)
        ], CallActivitySection.prototype, "allDiagrams", void 0);
        __decorate([
            aurelia_framework_1.observable,
            __metadata("design:type", String)
        ], CallActivitySection.prototype, "selectedStartEvent", void 0);
        __decorate([
            aurelia_framework_1.observable,
            __metadata("design:type", String)
        ], CallActivitySection.prototype, "payload", void 0);
        CallActivitySection = __decorate([
            aurelia_framework_1.inject(general_service_1.GeneralService, aurelia_router_1.Router, aurelia_event_aggregator_1.EventAggregator),
            __metadata("design:paramtypes", [general_service_1.GeneralService, aurelia_router_1.Router, aurelia_event_aggregator_1.EventAggregator])
        ], CallActivitySection);
        return CallActivitySection;
    }());
    exports.CallActivitySection = CallActivitySection;
});


;
define('text!modules/design/property-panel/indextabs/general/sections/call-activity/call-activity.css',[],function(){return ".navigation-button {\n  width: 100%;\n  margin-top: 10px;\n  background: #f7f7f7; }\n\n.navigation-button:disabled {\n  opacity: 0.5;\n  background: #d6d6d6; }\n\n.called-process-selection {\n  position: relative;\n  width: 100%;\n  height: 25px;\n  padding: 0;\n  margin: 0;\n  border: 0; }\n\n.called-process-selection__input {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  width: 100%;\n  height: 25px;\n  padding: 0;\n  margin: 0;\n  line-height: 20px; }\n\n.payload-enlarge-link {\n  display: block;\n  color: #007bff !important; }\n\n.payload-enlarge-text:hover {\n  text-decoration: underline; }\n";});;
define('text!modules/design/property-panel/indextabs/general/sections/call-activity/call-activity.html',[],function(){return "<template>\n  <require from=\"./call-activity.css\"></require>\n  <require from=\"../../../../styles/sections.css\"></require>\n  <div class=\"section-panel\" id=\"js-general-callActivity-section\">\n    <div class=\"panel__heading\">Call Activity</div>\n    <div class=\"panel__content\">\n      <table class=\"props-table\">\n        <tr>\n          <th>Process ID</th>\n          <td>\n            <div class=\"called-process-selection\">\n              <input class=\"called-process-selection__input props-input\" type=\"text\" list=\"diagrams\" value.bind=\"selectedProcessId\" change.delegate=\"updateCalledDiagram()\" disabled.bind=\"!isEditable\"}>\n              <datalist id=\"diagrams\">\n                <option repeat.for=\"diagramNameWithProcessId of diagramNamesWithProcessIds\" value=\"${diagramNameWithProcessId.processId}\">Filename: ${diagramNameWithProcessId.diagramName}</option>\n              </datalist>\n            </div>\n          </td>\n        </tr>\n        <tr>\n          <th>StartEvent</th>\n          <td>\n            <div class=\"called-process-selection\">\n            <input class=\"called-process-selection__input props-input\" type=\"text\" list=\"start-events\" value.bind=\"selectedStartEvent\" change.delegate=\"selectedStartEventChanged\" disabled.bind=\"!isEditable\">\n              <datalist id=\"start-events\">\n                <option repeat.for=\"startEventIdWithDiagramName of startEventIdsWithDiagramNames\" value=\"${startEventIdWithDiagramName.startEventId}\">Filename: ${startEventIdWithDiagramName.diagramName}</option>\n              </datalist>\n            </div>\n          </td>\n        </tr>\n        <tr show.bind=\"selectedStartEvent\">\n          <th>Payload\n            <a class=\"payload-enlarge-link\" click.delegate=\"showPayloadModal = true\"><small class=\"payload-enlarge-link\">Enlarge</small>\n          </th>\n          <td>\n            <textarea ref=\"payloadInput\" class=\"props-input-textarea name-input\" value.bind=\"payload\" disabled.bind=\"!isEditable\"></textarea>\n          </td>\n        </tr>\n      </table>\n\n      <button class=\"btn btn-default btn-sm navigation-button\" title.bind=\"!selectedProcessId || !isPartOfAllDiagrams(selectedProcessId) ? 'The called process could not be found.' : ''\" disabled.bind=\"!selectedProcessId || !isPartOfAllDiagrams(selectedProcessId)\" click.delegate=\"navigateToCalledDiagram()\">Navigate to called process</button>\n    </div>\n  </div>\n\n  <modal show.bind=\"showPayloadModal\"\n         header-text=\"Editing: Payload\">\n    <template replace-part=\"modal-body\" autofocus>\n      <textarea class=\"form-control script-task\" value.bind=\"payload\" rows=\"10\" aria-multiline=\"true\" autofocus wrap=\"soft\" disabled.bind=\"!isEditable\"></textarea>\n    </template>\n    <template replace-part=\"modal-footer\">\n      <button type=\"button\" class=\"btn btn-primary\" data-dismiss=\"modal\" click.delegate=\"showPayloadModal = false\">Okay</button>\n    </template>\n  </modal>\n\n\n  <modal if.bind=\"showChooseDiagramModal\" header-text=\"Choose Diagram\">\n    <template replace-part=\"modal-body\">\n      Multiple diagrams were found with that Process ID.\n      Which diagram would you like to see?\n      <select class=\"props-input props-select\" value.bind=\"callActivitySection.selectedDiagramName\">\n          <option model.bind=\"null\">-Choose Diagram-</option>\n          <option repeat.for=\"diagramName of diagramNamesToSelectFrom\"\n                  model=\"${diagramName}\">\n            ${diagramName}\n          </option>\n        </select>\n    </template>\n    <template replace-part=\"modal-footer\">\n      <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" id=\"cancelNavigationModal\">Cancel</button>\n      <button type=\"button\" class=\"btn btn-primary\" data-dismiss=\"modal\" id=\"confirmNavigationModal\" disabled.bind=\"!callActivitySection.selectedDiagramName\">Navigate</button>\n    </template>\n  </modal>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/design/property-panel/indextabs/general/sections/conditional-event/conditional-event',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "../../../../../../../environment"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, environment_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var ConditionalEventSection = (function () {
        function ConditionalEventSection(eventAggregator) {
            this.path = '/sections/conditional-event/conditional-event';
            this.canHandleElement = false;
            this.eventAggregator = eventAggregator;
        }
        ConditionalEventSection.prototype.activate = function (model) {
            this.moddle = model.modeler.get('moddle');
            this.linter = model.modeler.get('linting');
            this.businessObjInPanel = model.elementInPanel.businessObject;
            var _a = this.businessObjInPanel.eventDefinitions[0], variableName = _a.variableName, variableEvent = _a.variableEvent, condition = _a.condition;
            this.variableEvent = variableEvent === undefined ? '' : variableEvent;
            this.variableName = variableName === undefined ? '' : variableName;
            this.conditionBody = condition === undefined ? '' : condition.body;
            this.conditionObject = this.moddle.create('bpmn:FormalExpression', { body: this.conditionBody });
            this.businessObjInPanel.eventDefinitions[0].condition = this.conditionObject;
        };
        ConditionalEventSection.prototype.isSuitableForElement = function (element) {
            var elementHasNoBusinessObject = element === undefined || element.businessObject === undefined;
            if (elementHasNoBusinessObject) {
                return false;
            }
            var eventElement = element.businessObject;
            var elementIsConditionalEvent = eventElement.eventDefinitions !== undefined &&
                eventElement.eventDefinitions[0] !== undefined &&
                eventElement.eventDefinitions[0].$type === 'bpmn:ConditionalEventDefinition';
            return elementIsConditionalEvent;
        };
        ConditionalEventSection.prototype.updateCondition = function () {
            this.businessObjInPanel.eventDefinitions[0].condition.body = this.conditionBody;
            this.publishDiagramChange();
            if (this.linter.lintingActive()) {
                this.linter.update();
            }
        };
        ConditionalEventSection.prototype.updateVariableName = function () {
            this.businessObjInPanel.eventDefinitions[0].variableName = this.variableName;
            this.publishDiagramChange();
        };
        ConditionalEventSection.prototype.updateVariableEvent = function () {
            this.businessObjInPanel.eventDefinitions[0].variableEvent = this.variableEvent;
            this.publishDiagramChange();
        };
        ConditionalEventSection.prototype.publishDiagramChange = function () {
            this.eventAggregator.publish(environment_1.default.events.diagramChange);
        };
        ConditionalEventSection = __decorate([
            aurelia_framework_1.inject(aurelia_event_aggregator_1.EventAggregator),
            __metadata("design:paramtypes", [aurelia_event_aggregator_1.EventAggregator])
        ], ConditionalEventSection);
        return ConditionalEventSection;
    }());
    exports.ConditionalEventSection = ConditionalEventSection;
});


;
define('text!modules/design/property-panel/indextabs/general/sections/conditional-event/conditional-event.css',[],function(){return "";});;
define('text!modules/design/property-panel/indextabs/general/sections/conditional-event/conditional-event.html',[],function(){return "<template>\n  <require from=\"./conditional-event.css\"></require>\n  <require from=\"../../../../styles/sections.css\"></require>\n  <div class=\"section-panel\" id=\"js-general-conditionalEvent-section\">\n    <div class=\"panel__heading\">\n      Conditional Event\n    </div>\n    <div class=\"panel__content\">\n      <table class=\"props-table\">\n        <tr>\n          <th>Condition</th>\n          <td>\n            <input type=\"text\" class=\"props-input\" value.bind=\"conditionBody\" change.delegate=\"updateCondition()\" disabled.bind=\"!isEditable\">\n          </td>\n        </tr>\n        <tr>\n          <th>Variable Name</th>\n          <td>\n            <input type=\"text\" class=\"props-input\" value.bind=\"variableName\" change.delegate=\"updateVariableName()\" disabled.bind=\"!isEditable\">\n          </td>\n        </tr>\n        <tr>\n          <th>Variable Event</th>\n          <td>\n            <input type=\"text\" class=\"props-input\" value.bind=\"variableEvent\" change.delegate=\"updateVariableEvent()\" disabled.bind=\"!isEditable\">\n          </td>\n        </tr>\n      </table>\n    </div>\n  </div>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/design/property-panel/indextabs/general/sections/error-event/error-event',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "../../../../../../../environment", "../../service/general.service"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, environment_1, general_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var ErrorEventSection = (function () {
        function ErrorEventSection(generalService, eventAggregator) {
            this.path = '/sections/error-event/error-event';
            this.canHandleElement = false;
            this.isEndEvent = false;
            this.generalService = generalService;
            this.eventAggregator = eventAggregator;
        }
        ErrorEventSection.prototype.activate = function (model) {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.businessObjInPanel = model.elementInPanel.businessObject;
                            this.moddle = model.modeler.get('moddle');
                            this.modeler = model.modeler;
                            this.linter = model.modeler.get('linting');
                            this.isEndEvent = this.elementIsEndEvent(model.elementInPanel);
                            _a = this;
                            return [4, this.getErrors()];
                        case 1:
                            _a.errors = _b.sent();
                            this.init();
                            return [2];
                    }
                });
            });
        };
        ErrorEventSection.prototype.isSuitableForElement = function (element) {
            if (this.elementIsErrorEvent(element)) {
                return true;
            }
            return false;
        };
        ErrorEventSection.prototype.updateError = function () {
            var _this = this;
            if (this.selectedId === undefined || this.selectedId === null) {
                this.selectedError = null;
                return;
            }
            this.selectedError = this.errors.find(function (error) {
                return error.id === _this.selectedId;
            });
            var errorElement = this.businessObjInPanel.eventDefinitions[0];
            errorElement.errorRef = this.selectedError;
            if (!this.isEndEvent) {
                this.errorMessageVariable = errorElement.errorMessageVariable;
            }
            this.publishDiagramChange();
            if (this.linter.lintingActive()) {
                this.linter.update();
            }
        };
        ErrorEventSection.prototype.updateErrorName = function () {
            var selectedError = this.getSlectedError();
            selectedError.name = this.selectedError.name;
            this.publishDiagramChange();
        };
        ErrorEventSection.prototype.updateErrorCode = function () {
            var selectedError = this.getSlectedError();
            selectedError.errorCode = this.selectedError.errorCode;
            this.publishDiagramChange();
        };
        ErrorEventSection.prototype.updateErrorMessage = function () {
            var errorElement = this.businessObjInPanel.eventDefinitions[0];
            errorElement.errorMessageVariable = this.errorMessageVariable;
            this.publishDiagramChange();
        };
        ErrorEventSection.prototype.addError = function () {
            return __awaiter(this, void 0, void 0, function () {
                var bpmnErrorObject, bpmnError;
                var _this = this;
                return __generator(this, function (_a) {
                    bpmnErrorObject = {
                        id: "Error_" + this.generalService.generateRandomId(),
                        name: 'Error Name',
                    };
                    bpmnError = this.moddle.create('bpmn:Error', bpmnErrorObject);
                    this.modeler._definitions.rootElements.push(bpmnError);
                    this.moddle.toXML(this.modeler._definitions, function (toXMLError, xmlStrUpdated) {
                        _this.modeler.importXML(xmlStrUpdated, function (importXMLError) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4, this.refreshErrors()];
                                    case 1:
                                        _a.sent();
                                        return [4, this.setBusinessObject()];
                                    case 2:
                                        _a.sent();
                                        this.selectedId = bpmnError.id;
                                        this.selectedError = bpmnError;
                                        this.updateError();
                                        return [2];
                                }
                            });
                        }); });
                    });
                    this.publishDiagramChange();
                    return [2];
                });
            });
        };
        ErrorEventSection.prototype.removeSelectedError = function () {
            var _this = this;
            var noErrorIsSelected = !this.selectedId;
            if (noErrorIsSelected) {
                return;
            }
            var errorIndex = this.errors.findIndex(function (error) {
                return error.id === _this.selectedId;
            });
            this.errors.splice(errorIndex, 1);
            this.modeler._definitions.rootElements.splice(this.getRootElementsIndex(this.selectedId), 1);
            this.updateError();
            this.publishDiagramChange();
        };
        ErrorEventSection.prototype.getRootElementsIndex = function (elementId) {
            var rootElements = this.modeler._definitions.rootElements;
            var rootElementsIndex = rootElements.findIndex(function (element) {
                return element.id === elementId;
            });
            return rootElementsIndex;
        };
        ErrorEventSection.prototype.init = function () {
            var _this = this;
            var eventDefinitions = this.businessObjInPanel.eventDefinitions;
            var businessObjecthasNoErrorEvents = eventDefinitions === undefined ||
                eventDefinitions === null ||
                eventDefinitions[0].$type !== 'bpmn:ErrorEventDefinition';
            if (businessObjecthasNoErrorEvents) {
                return;
            }
            var errorElement = this.businessObjInPanel.eventDefinitions[0];
            var elementHasNoErrorRef = errorElement.errorRef === undefined;
            if (elementHasNoErrorRef) {
                this.selectedError = null;
                this.selectedId = null;
                return;
            }
            var errorId = errorElement.errorRef.id;
            var elementReferencesError = this.getErrorById(errorId) !== undefined;
            if (elementReferencesError) {
                this.selectedId = errorId;
                this.selectedError = this.errors.find(function (error) {
                    return error.id === _this.selectedId;
                });
                this.errorMessageVariable = errorElement.errorMessageVariable;
            }
            else {
                this.selectedError = null;
                this.selectedId = null;
            }
        };
        ErrorEventSection.prototype.getErrorById = function (errorId) {
            var errors = this.getErrors();
            var error = errors.find(function (errorElement) {
                return errorId === errorElement.id;
            });
            return error;
        };
        ErrorEventSection.prototype.elementIsErrorEvent = function (element) {
            var elementHasNoBusinessObject = element === undefined || element.businessObject === undefined;
            if (elementHasNoBusinessObject) {
                return false;
            }
            var eventElement = element.businessObject;
            var elementIsErrorEvent = eventElement.eventDefinitions !== undefined &&
                eventElement.eventDefinitions[0] !== undefined &&
                eventElement.eventDefinitions[0].$type === 'bpmn:ErrorEventDefinition';
            return elementIsErrorEvent;
        };
        ErrorEventSection.prototype.elementIsEndEvent = function (element) {
            return (element !== undefined && element.businessObject !== undefined && element.businessObject.$type === 'bpmn:EndEvent');
        };
        ErrorEventSection.prototype.getErrors = function () {
            var rootElements = this.modeler._definitions.rootElements;
            var errors = rootElements.filter(function (element) {
                return element.$type === 'bpmn:Error';
            });
            return errors;
        };
        ErrorEventSection.prototype.getSlectedError = function () {
            var _this = this;
            var rootElements = this.modeler._definitions.rootElements;
            var selectedError = rootElements.find(function (element) {
                var isSelectedError = element.$type === 'bpmn:Error' && element.id === _this.selectedId;
                return isSelectedError;
            });
            return selectedError;
        };
        ErrorEventSection.prototype.setBusinessObject = function () {
            var elementRegistry = this.modeler.get('elementRegistry');
            var elementInPanel = elementRegistry.get(this.businessObjInPanel.id);
            this.businessObjInPanel = elementInPanel.businessObject;
        };
        ErrorEventSection.prototype.refreshErrors = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4, this.getErrors()];
                        case 1:
                            _a.errors = _b.sent();
                            return [2];
                    }
                });
            });
        };
        ErrorEventSection.prototype.publishDiagramChange = function () {
            this.eventAggregator.publish(environment_1.default.events.diagramChange);
        };
        ErrorEventSection = __decorate([
            aurelia_framework_1.inject(general_service_1.GeneralService, aurelia_event_aggregator_1.EventAggregator),
            __metadata("design:paramtypes", [general_service_1.GeneralService, aurelia_event_aggregator_1.EventAggregator])
        ], ErrorEventSection);
        return ErrorEventSection;
    }());
    exports.ErrorEventSection = ErrorEventSection;
});


;
define('text!modules/design/property-panel/indextabs/general/sections/error-event/error-event.css',[],function(){return "";});;
define('text!modules/design/property-panel/indextabs/general/sections/error-event/error-event.html',[],function(){return "<template>\n  <require from=\"./error-event.css\"></require>\n  <require from=\"../../../../styles/sections.css\"></require>\n  <div class=\"section-panel\" id=\"js-general-errorEvent-section\">\n    <div class=\"panel__heading\">\n      Error Event\n      <button class=\"button remove-context-button\" class.bind=\"selectedId ? '' : 'button--disabled'\" disabled.bind=\"!selectedId || !isEditable\" click.delegate=\"removeSelectedError()\">\n        <i class=\"fas fa-trash\"></i>\n      </button>\n      <button class=\"button add-context-button\" click.delegate=\"addError()\" disabled.bind=\"!isEditable\">\n        <i class=\"fas fa-plus\"></i>\n      </button>\n    </div>\n    <div class=\"panel__content\">\n      <table class=\"props-table\">\n        <tr>\n          <th>Error</th>\n          <td>\n            <select class=\"props-input props-select\" value.bind=\"selectedId\" change.delegate=\"updateError()\" disabled.bind=\"!isEditable\">\n              <option model.bind=\"null\">-Choose Error-</option>\n              <option repeat.for=\"error of errors\"\n                      model.bind=\"error.id\" value=\"${error.id}\">${error.name} (id: ${error.id})</option>\n            </select>\n          </td>\n        </tr>\n      </table>\n      <table show.bind=\"selectedId\" class=\"props-table\">\n        <tr>\n          <th>Name</th>\n          <td>\n            <input type=\"text\" class=\"props-input\" value.bind=\"selectedError.name\" change.delegate=\"updateErrorName()\" disabled.bind=\"!isEditable\">\n          </td>\n        </tr>\n        <tr>\n          <th>Code</th>\n          <td>\n            <input type=\"text\" class=\"props-input\" value.bind=\"selectedError.errorCode\" change.delegate=\"updateErrorCode()\" disabled.bind=\"!isEditable\">\n            <small if.bind=\"isEndEvent\">The code the error should have.</small>\n            <small else>Optional. If set, only errors with a matching code are caught.</small>\n          </td>\n        </tr>\n        <tr>\n          <th>Message</th>\n          <td>\n            <input type=\"text\" class=\"props-input\" value.bind=\"errorMessageVariable\" change.delegate=\"updateErrorMessage()\" disabled.bind=\"!isEditable\">\n            <small if.bind=\"isEndEvent\">Optional: The message the error should have.</small>\n            <small else>Optional. If set, only errors with a matching message are caught.</small>\n          </td>\n        </tr>\n      </table>\n    </div>\n  </div>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/design/property-panel/indextabs/general/sections/escalation-event/escalation-event',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "../../../../../../../environment", "../../service/general.service"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, environment_1, general_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var EscalationEventSection = (function () {
        function EscalationEventSection(generalService, eventAggregator) {
            this.path = '/sections/escalation-event/escalation-event';
            this.canHandleElement = false;
            this.isBoundaryEvent = true;
            this.generalService = generalService;
            this.eventAggregator = eventAggregator;
        }
        EscalationEventSection.prototype.activate = function (model) {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.businessObjInPanel = model.elementInPanel.businessObject;
                            this.moddle = model.modeler.get('moddle');
                            this.modeler = model.modeler;
                            _a = this;
                            return [4, this.getEscalations()];
                        case 1:
                            _a.escalations = _b.sent();
                            this.init();
                            return [2];
                    }
                });
            });
        };
        EscalationEventSection.prototype.isSuitableForElement = function (element) {
            if (this.elementIsEscalationEvent(element)) {
                this.isBoundaryEvent = this.elementIsBoundaryEvent(element);
                return true;
            }
            return false;
        };
        EscalationEventSection.prototype.updateEscalation = function () {
            var _this = this;
            if (this.selectedId === undefined || this.selectedId === null) {
                this.selectedEscalation = null;
                return;
            }
            this.selectedEscalation = this.escalations.find(function (escalation) {
                return escalation.id === _this.selectedId;
            });
            var escalationEventDefinition = this.businessObjInPanel.eventDefinitions[0];
            this.escalationCodeVariable = escalationEventDefinition.escalationCodeVariable;
            escalationEventDefinition.escalationRef = this.selectedEscalation;
            this.publishDiagramChange();
        };
        EscalationEventSection.prototype.updateEscalationName = function () {
            var selectedEscalation = this.getSelectedEscalation();
            selectedEscalation.name = this.selectedEscalation.name;
            this.publishDiagramChange();
        };
        EscalationEventSection.prototype.updateEscalationCode = function () {
            var selectedEscalation = this.getSelectedEscalation();
            selectedEscalation.escalationCode = this.selectedEscalation.escalationCode;
            this.publishDiagramChange();
        };
        EscalationEventSection.prototype.updateEscalationCodeVariable = function () {
            var escalationEventDefinition = this.businessObjInPanel.eventDefinitions[0];
            escalationEventDefinition.escalationCodeVariable = this.escalationCodeVariable;
            this.publishDiagramChange();
        };
        EscalationEventSection.prototype.addEscalation = function () {
            var _this = this;
            var bpmnEscalationProperty = {
                id: "Escalation_" + this.generalService.generateRandomId(),
                name: 'Escalation Name',
            };
            var bpmnEscalation = this.moddle.create('bpmn:Escalation', bpmnEscalationProperty);
            this.modeler._definitions.rootElements.push(bpmnEscalation);
            this.moddle.toXML(this.modeler._definitions.rootElements, function (toXMLError, xmlStrUpdated) {
                _this.modeler.importXML(xmlStrUpdated, function (importXMLError) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4, this.refreshEscalations()];
                            case 1:
                                _a.sent();
                                return [4, this.setBusinessObject()];
                            case 2:
                                _a.sent();
                                this.selectedId = bpmnEscalation.id;
                                this.selectedEscalation = bpmnEscalation;
                                this.updateEscalation();
                                return [2];
                        }
                    });
                }); });
            });
            this.publishDiagramChange();
        };
        EscalationEventSection.prototype.removeSelectedEscalation = function () {
            var _this = this;
            var noEscalationIsSelected = !this.selectedId;
            if (noEscalationIsSelected) {
                return;
            }
            var escalationIndex = this.escalations.findIndex(function (escalation) {
                return escalation.id === _this.selectedId;
            });
            this.escalations.splice(escalationIndex, 1);
            this.modeler._definitions.rootElements.splice(this.getRootElementsIndex(this.selectedId), 1);
            this.updateEscalation();
            this.publishDiagramChange();
        };
        EscalationEventSection.prototype.getRootElementsIndex = function (elementId) {
            var rootElements = this.modeler._definitions.rootElements;
            var rootElementsIndex = rootElements.findIndex(function (element) {
                return element.id === elementId;
            });
            return rootElementsIndex;
        };
        EscalationEventSection.prototype.refreshEscalations = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4, this.getEscalations()];
                        case 1:
                            _a.escalations = _b.sent();
                            return [2];
                    }
                });
            });
        };
        EscalationEventSection.prototype.setBusinessObject = function () {
            var elementRegistry = this.modeler.get('elementRegistry');
            var elementInPanel = elementRegistry.get(this.businessObjInPanel.id);
            this.businessObjInPanel = elementInPanel.businessObject;
        };
        EscalationEventSection.prototype.elementIsEscalationEvent = function (element) {
            var elementHasNoBusinessObject = element === undefined || element.businessObject === undefined;
            if (elementHasNoBusinessObject) {
                return false;
            }
            var eventElement = element.businessObject;
            var elementIsEscalationEvent = eventElement.eventDefinitions !== undefined &&
                eventElement.eventDefinitions[0] !== undefined &&
                eventElement.eventDefinitions[0].$type === 'bpmn:EscalationEventDefinition';
            return elementIsEscalationEvent;
        };
        EscalationEventSection.prototype.elementIsBoundaryEvent = function (element) {
            return (element !== undefined &&
                element.businessObject !== undefined &&
                element.businessObject.$type === 'bpmn:BoundaryEvent');
        };
        EscalationEventSection.prototype.init = function () {
            var _this = this;
            var eventDefinitions = this.businessObjInPanel.eventDefinitions;
            var businessObjectHasNoEscalationEvents = eventDefinitions === undefined ||
                eventDefinitions === null ||
                eventDefinitions[0].$type !== 'bpmn:EscalationEventDefinition';
            if (businessObjectHasNoEscalationEvents) {
                return;
            }
            var escalationEventDefinition = this.businessObjInPanel.eventDefinitions[0];
            var elementHasNoEscalationRef = escalationEventDefinition.escalationRef === undefined;
            if (elementHasNoEscalationRef) {
                this.selectedEscalation = null;
                this.selectedId = null;
                return;
            }
            var escalationId = escalationEventDefinition.escalationRef.id;
            var elementReferencesEscalation = this.getEscalationsById(escalationId) !== undefined;
            if (elementReferencesEscalation) {
                this.selectedId = escalationId;
                this.selectedEscalation = this.escalations.find(function (escalation) {
                    return escalation.id === _this.selectedId;
                });
            }
            else {
                this.selectedEscalation = null;
                this.selectedId = null;
            }
        };
        EscalationEventSection.prototype.getEscalationsById = function (escalationId) {
            var escalations = this.getEscalations();
            var escalation = escalations.find(function (escalationElement) {
                return escalationElement.id === escalationId;
            });
            return escalation;
        };
        EscalationEventSection.prototype.getEscalations = function () {
            var rootElements = this.modeler._definitions.rootElements;
            var escalations = rootElements.filter(function (element) {
                return element.$type === 'bpmn:Escalation';
            });
            return escalations;
        };
        EscalationEventSection.prototype.getSelectedEscalation = function () {
            var _this = this;
            var rootElements = this.modeler._definitions.rootElements;
            var selectedEscalation = rootElements.find(function (element) {
                var isSelectedEscalation = element.$type === 'bpmn:Escalation' && element.id === _this.selectedId;
                return isSelectedEscalation;
            });
            return selectedEscalation;
        };
        EscalationEventSection.prototype.publishDiagramChange = function () {
            this.eventAggregator.publish(environment_1.default.events.diagramChange);
        };
        EscalationEventSection = __decorate([
            aurelia_framework_1.inject(general_service_1.GeneralService, aurelia_event_aggregator_1.EventAggregator),
            __metadata("design:paramtypes", [general_service_1.GeneralService, aurelia_event_aggregator_1.EventAggregator])
        ], EscalationEventSection);
        return EscalationEventSection;
    }());
    exports.EscalationEventSection = EscalationEventSection;
});


;
define('text!modules/design/property-panel/indextabs/general/sections/escalation-event/escalation-event.css',[],function(){return "";});;
define('text!modules/design/property-panel/indextabs/general/sections/escalation-event/escalation-event.html',[],function(){return "<template>\n  <require from=\"./escalation-event.css\"></require>\n  <require from=\"../../../../styles/sections.css\"></require>\n  <div class=\"section-panel\" id=\"js-general-escalationEvent-section\">\n    <div class=\"panel__heading\">\n      Escalation Event\n      <button class=\"button remove-context-button\" class.bind=\"selectedId ? '' : 'button--disabled'\" disabled.bind=\"!selectedId || !isEditable\" click.delegate=\"removeSelectedEscalation()\">\n        <i class=\"fas fa-trash\"></i>\n      </button>\n      <button class=\"button add-context-button\" click.delegate=\"addEscalation()\" disabled.bind=\"!isEditable\">\n        <i class=\"fas fa-plus\"></i>\n      </button>\n    </div>\n    <div class=\"panel__content\">\n      <table class=\"props-table\">\n        <tr>\n          <th>Escalation</th>\n          <td>\n            <select class=\"props-input props-select\" value.bind=\"selectedId\" change.delegate=\"updateEscalation()\" disabled.bind=\"!isEditable\">\n              <option model.bind=\"null\">-Choose Escalation-</option>\n              <option repeat.for=\"escalation of escalations\"\n                      model.bind=\"escalation.id\" value=\"${escalation.id}\">${escalation.name} (id: ${escalation.id})</option>\n            </select>\n          </td>\n        </tr>\n      </table>\n      <table show.bind=\"selectedId\" class=\"props-table\">\n        <tr>\n          <th>Name</th>\n          <td>\n            <input type=\"text\" class=\"props-input\" value.bind=\"selectedEscalation.name\" change.delegate=\"updateEscalationName()\" disabled.bind=\"!isEditable\">\n          </td>\n        </tr>\n        <tr>\n          <th>Code</th>\n          <td>\n            <input type=\"text\" class=\"props-input\" value.bind=\"selectedEscalation.escalationCode\" change.delegate=\"updateEscalationCode()\" disabled.bind=\"!isEditable\">\n          </td>\n        </tr>\n        <tr>\n          <th>Variable</th>\n          <td>\n            <input type=\"text\" class=\"props-input\" value.bind=\"escalationCodeVariable\" change.delegate=\"updateEscalationCodeVariable()\" disabled.bind=\"!isEditable\">\n          </td>\n        </tr>\n      </table>\n    </div>\n  </div>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/design/property-panel/indextabs/general/sections/flow/flow',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "../../../../../../../environment"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, environment_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var FlowSection = (function () {
        function FlowSection(eventAggregator) {
            this.path = '/sections/flow/flow';
            this.canHandleElement = false;
            this.eventAggregator = eventAggregator;
        }
        FlowSection.prototype.activate = function (model) {
            this.businessObjInPanel = model.elementInPanel.businessObject;
            this.moddle = model.modeler.get('moddle');
            this.init();
        };
        FlowSection.prototype.isSuitableForElement = function (elementShape) {
            if (elementShape !== undefined && elementShape !== null) {
                var element = elementShape.businessObject;
                if (!this.elementIsFlow(element)) {
                    return false;
                }
                var isDefaultFlow = element.sourceRef !== null && element.sourceRef.default && element.sourceRef.default.id === element.id;
                if (isDefaultFlow) {
                    return false;
                }
                var flowPointsAtExclusiveGateway = element.targetRef !== null && element.targetRef.$type === 'bpmn:ExclusiveGateway';
                var flowStartsAtExclusiveGateway = element.sourceRef !== null && element.sourceRef.$type === 'bpmn:ExclusiveGateway';
                var flowHasCondition = flowPointsAtExclusiveGateway || flowStartsAtExclusiveGateway;
                return flowHasCondition;
            }
            return false;
        };
        FlowSection.prototype.updateCondition = function () {
            var objectHasNoConditionExpression = this.businessObjInPanel.conditionExpression === undefined || this.businessObjInPanel.conditionExpression === null;
            if (objectHasNoConditionExpression) {
                this.createConditionExpression();
            }
            this.businessObjInPanel.conditionExpression.body = this.condition;
            this.publishDiagramChange();
        };
        FlowSection.prototype.createConditionExpression = function () {
            var conditionExpression = this.moddle.create('bpmn:FormalExpression', {});
            this.businessObjInPanel.conditionExpression = conditionExpression;
        };
        FlowSection.prototype.elementIsFlow = function (element) {
            return element !== undefined && element !== null && element.$type === 'bpmn:SequenceFlow';
        };
        FlowSection.prototype.init = function () {
            if (this.businessObjInPanel.conditionExpression && this.businessObjInPanel.conditionExpression.body !== undefined) {
                this.condition = this.businessObjInPanel.conditionExpression.body;
            }
            else {
                this.condition = '';
            }
        };
        FlowSection.prototype.publishDiagramChange = function () {
            this.eventAggregator.publish(environment_1.default.events.diagramChange);
        };
        FlowSection = __decorate([
            aurelia_framework_1.inject(aurelia_event_aggregator_1.EventAggregator),
            __metadata("design:paramtypes", [aurelia_event_aggregator_1.EventAggregator])
        ], FlowSection);
        return FlowSection;
    }());
    exports.FlowSection = FlowSection;
});


;
define('text!modules/design/property-panel/indextabs/general/sections/flow/flow.css',[],function(){return "";});;
define('text!modules/design/property-panel/indextabs/general/sections/flow/flow.html',[],function(){return "<template>\n  <require from=\"./flow.css\"></require>\n  <require from=\"../../../../styles/sections.css\"></require>\n  <div class=\"section-panel\" id=\"js-general-flow-section\">\n    <div class=\"panel__heading\">Flow</div>\n    <div class=\"panel__content\">\n      <table class=\"props-table\">\n        <tr>\n          <th>Condition</th>\n          <td>\n            <input type=\"text\" class=\"props-input\" value.bind=\"condition\" change.delegate=\"updateCondition()\" disabled.bind=\"!isEditable\">\n          </td>\n        </tr>\n      </table>\n    </div>\n  </div>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/design/property-panel/indextabs/general/sections/link-event/link-event',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "../../../../../../../environment"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, environment_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var LinkEventSection = (function () {
        function LinkEventSection(eventAggregator) {
            this.path = '/sections/link-event/link-event';
            this.canHandleElement = false;
            this.linkEventName = '';
            this.eventAggregator = eventAggregator;
        }
        LinkEventSection.prototype.activate = function (model) {
            this.businessObjInPanel = model.elementInPanel.businessObject;
            this.linkEventName = this.businessObjInPanel.eventDefinitions[0].name || '';
        };
        LinkEventSection.prototype.isSuitableForElement = function (elementShape) {
            var elementHasNoBusinessObject = elementShape === undefined || elementShape.businessObject === undefined;
            if (elementHasNoBusinessObject) {
                return false;
            }
            var eventElement = elementShape.businessObject;
            var elementIsLinkEvent = eventElement.eventDefinitions !== undefined &&
                eventElement.eventDefinitions[0] !== undefined &&
                eventElement.eventDefinitions[0].$type === 'bpmn:LinkEventDefinition';
            return elementIsLinkEvent;
        };
        LinkEventSection.prototype.linkEventNameChanged = function (newValue, oldValue) {
            if (oldValue === undefined) {
                return;
            }
            this.businessObjInPanel.eventDefinitions[0].name = newValue;
            this.publishDiagramChange();
        };
        LinkEventSection.prototype.publishDiagramChange = function () {
            this.eventAggregator.publish(environment_1.default.events.diagramChange);
        };
        __decorate([
            aurelia_framework_1.observable,
            __metadata("design:type", String)
        ], LinkEventSection.prototype, "linkEventName", void 0);
        LinkEventSection = __decorate([
            aurelia_framework_1.inject(aurelia_event_aggregator_1.EventAggregator),
            __metadata("design:paramtypes", [aurelia_event_aggregator_1.EventAggregator])
        ], LinkEventSection);
        return LinkEventSection;
    }());
    exports.LinkEventSection = LinkEventSection;
});


;
define('text!modules/design/property-panel/indextabs/general/sections/link-event/link-event.css',[],function(){return "";});;
define('text!modules/design/property-panel/indextabs/general/sections/link-event/link-event.html',[],function(){return "<template>\n  <require from=\"./link-event.css\"></require>\n  <require from=\"../../../../styles/sections.css\"></require>\n  <div class=\"section-panel\">\n    <div class=\"panel__heading\">Link Event</div>\n    <div class=\"panel__content\">\n      <table class=\"props-table\">\n        <tr>\n          <th>Link Name</th>\n          <td>\n            <input type=\"text\" class=\"props-input\" value.bind=\"linkEventName & updateTrigger:'blur':'paste'\" disabled.bind=\"!isEditable\">\n          </td>\n        </tr>\n      </table>\n    </div>\n  </div>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/design/property-panel/indextabs/general/sections/message-event/message-event',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "../../../../../../../environment", "../../service/general.service"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, environment_1, general_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var MessageEventSection = (function () {
        function MessageEventSection(generalService, eventAggregator) {
            this.path = '/sections/message-event/message-event';
            this.canHandleElement = false;
            this.generalService = generalService;
            this.eventAggregator = eventAggregator;
        }
        MessageEventSection.prototype.activate = function (model) {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.businessObjInPanel = model.elementInPanel.businessObject;
                            this.moddle = model.modeler.get('moddle');
                            this.modeler = model.modeler;
                            this.linter = model.modeler.get('linting');
                            _a = this;
                            return [4, this.getMessages()];
                        case 1:
                            _a.messages = _b.sent();
                            this.init();
                            return [2];
                    }
                });
            });
        };
        MessageEventSection.prototype.isSuitableForElement = function (element) {
            return this.elementIsMessageEvent(element);
        };
        MessageEventSection.prototype.updateMessage = function () {
            var _this = this;
            this.selectedMessage = this.messages.find(function (message) {
                return message.id === _this.selectedId;
            });
            var messageEventDefinition = this.businessObjInPanel
                .eventDefinitions[0];
            messageEventDefinition.messageRef = this.selectedMessage;
            this.publishDiagramChange();
            if (this.linter.lintingActive()) {
                this.linter.update();
            }
        };
        MessageEventSection.prototype.updateName = function () {
            var _this = this;
            var rootElements = this.modeler._definitions.rootElements;
            var selectedMessage = rootElements.find(function (element) {
                var elementIsSelectedMessage = element.$type === 'bpmn:Message' && element.id === _this.selectedId;
                return elementIsSelectedMessage;
            });
            selectedMessage.name = this.selectedMessage.name;
            this.publishDiagramChange();
        };
        MessageEventSection.prototype.addMessage = function () {
            var _this = this;
            var bpmnMessageProperty = {
                id: "Message_" + this.generalService.generateRandomId(),
                name: 'Message Name',
            };
            var bpmnMessage = this.moddle.create('bpmn:Message', bpmnMessageProperty);
            this.modeler._definitions.rootElements.push(bpmnMessage);
            this.moddle.toXML(this.modeler._definitions.rootElements, function (toXMLError, xmlStrUpdated) {
                _this.modeler.importXML(xmlStrUpdated, function (importXMLError) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4, this.refreshMessages()];
                            case 1:
                                _a.sent();
                                return [4, this.setBusinessObj()];
                            case 2:
                                _a.sent();
                                this.selectedId = bpmnMessage.id;
                                this.updateMessage();
                                return [2];
                        }
                    });
                }); });
            });
            this.publishDiagramChange();
        };
        MessageEventSection.prototype.removeSelectedMessage = function () {
            var _this = this;
            var noMessageIsSelected = !this.selectedId;
            if (noMessageIsSelected) {
                return;
            }
            var messageIndex = this.messages.findIndex(function (message) {
                return message.id === _this.selectedId;
            });
            this.messages.splice(messageIndex, 1);
            this.modeler._definitions.rootElements.splice(this.getRootElementsIndex(this.selectedId), 1);
            this.updateMessage();
            this.publishDiagramChange();
        };
        MessageEventSection.prototype.getRootElementsIndex = function (elementId) {
            var rootElements = this.modeler._definitions.rootElements;
            var rootElementsIndex = rootElements.findIndex(function (element) {
                return element.id === elementId;
            });
            return rootElementsIndex;
        };
        MessageEventSection.prototype.elementIsMessageEvent = function (element) {
            var elementHasNoBusinessObject = element === undefined || element.businessObject === undefined;
            if (elementHasNoBusinessObject) {
                return false;
            }
            var eventElement = element.businessObject;
            var elementIsMessageEvent = eventElement.eventDefinitions !== undefined &&
                eventElement.eventDefinitions[0] !== undefined &&
                eventElement.eventDefinitions[0].$type === 'bpmn:MessageEventDefinition';
            return elementIsMessageEvent;
        };
        MessageEventSection.prototype.init = function () {
            var _this = this;
            var eventDefinitions = this.businessObjInPanel.eventDefinitions;
            var businessObjectHasNoMessageEvents = eventDefinitions === undefined ||
                eventDefinitions === null ||
                eventDefinitions[0].$type !== 'bpmn:MessageEventDefinition';
            if (businessObjectHasNoMessageEvents) {
                return;
            }
            var messageEventDefinition = this.businessObjInPanel.eventDefinitions[0];
            var elementHasNoMessageRef = messageEventDefinition.messageRef === undefined;
            if (elementHasNoMessageRef) {
                this.selectedMessage = null;
                this.selectedId = null;
                return;
            }
            var messageRefId = messageEventDefinition.messageRef.id;
            var elementReferencesMessage = this.getMessageById(messageRefId) !== undefined;
            if (elementReferencesMessage) {
                this.selectedId = messageRefId;
                this.selectedMessage = this.messages.find(function (message) {
                    return message.id === _this.selectedId;
                });
            }
            else {
                this.selectedMessage = undefined;
                this.selectedId = undefined;
            }
        };
        MessageEventSection.prototype.getMessageById = function (messageId) {
            var messages = this.getMessages();
            var message = messages.find(function (messageElement) {
                return messageElement.id === messageId;
            });
            return message;
        };
        MessageEventSection.prototype.getMessages = function () {
            var rootElements = this.modeler._definitions.rootElements;
            var messages = rootElements.filter(function (element) {
                return element.$type === 'bpmn:Message';
            });
            return messages;
        };
        MessageEventSection.prototype.refreshMessages = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4, this.getMessages()];
                        case 1:
                            _a.messages = _b.sent();
                            return [2];
                    }
                });
            });
        };
        MessageEventSection.prototype.setBusinessObj = function () {
            var elementRegistry = this.modeler.get('elementRegistry');
            var elementInPanel = elementRegistry.get(this.businessObjInPanel.id);
            this.businessObjInPanel = elementInPanel.businessObject;
        };
        MessageEventSection.prototype.publishDiagramChange = function () {
            this.eventAggregator.publish(environment_1.default.events.diagramChange);
        };
        MessageEventSection = __decorate([
            aurelia_framework_1.inject(general_service_1.GeneralService, aurelia_event_aggregator_1.EventAggregator),
            __metadata("design:paramtypes", [general_service_1.GeneralService, aurelia_event_aggregator_1.EventAggregator])
        ], MessageEventSection);
        return MessageEventSection;
    }());
    exports.MessageEventSection = MessageEventSection;
});


;
define('text!modules/design/property-panel/indextabs/general/sections/message-event/message-event.css',[],function(){return "";});;
define('text!modules/design/property-panel/indextabs/general/sections/message-event/message-event.html',[],function(){return "<template>\n  <require from=\"./message-event.css\"></require>\n  <require from=\"../../../../styles/sections.css\"></require>\n  <div class=\"panel\" id=\"js-general-messageEvent-section\">\n    <div class=\"panel__heading\">\n      Message Event\n      <button class=\"button remove-context-button\" class.bind=\"selectedId ? '' : 'button--disabled'\" disabled.bind=\"!selectedId || !isEditable\" click.delegate=\"removeSelectedMessage()\">\n        <i class=\"fas fa-trash\"></i>\n      </button>\n      <button class=\"button add-context-button\" click.delegate=\"addMessage()\" disabled.bind=\"!isEditable\">\n        <i class=\"fas fa-plus\"></i>\n      </button>\n    </div>\n    <div class=\"panel__content\">\n      <table class=\"props-table\">\n        <tr>\n          <th>Message</th>\n          <td>\n            <select class=\"props-input props-select\" value.bind=\"selectedId\" change.delegate=\"updateMessage()\" disabled.bind=\"!isEditable\">\n              <option model.bind=\"null\">-Choose Message-</option>\n              <option repeat.for=\"message of messages\"\n                      model.bind=\"message.id\" value=\"${message.id}\">${message.name} (id: ${message.id})</option>\n            </select>\n          </td>\n        </tr>\n        <tr show.bind=\"selectedId\">\n          <th>Name</th>\n          <td>\n            <input type=\"text\" class=\"props-input\" value.bind=\"selectedMessage.name\" change.delegate=\"updateName()\" disabled.bind=\"!isEditable\">\n          </td>\n        </tr>\n      </table>\n    </div>\n  </div>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/design/property-panel/indextabs/general/sections/message-task/message-task',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "../../../../../../../environment", "../../service/general.service"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, environment_1, general_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var MessageTaskSection = (function () {
        function MessageTaskSection(generalService, eventAggregator) {
            this.path = '/sections/message-task/message-task';
            this.canHandleElement = false;
            this.generalService = generalService;
            this.eventAggregator = eventAggregator;
        }
        MessageTaskSection.prototype.activate = function (model) {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.businessObjInPanel = model.elementInPanel.businessObject;
                            this.moddle = model.modeler.get('moddle');
                            this.modeler = model.modeler;
                            this.linter = model.modeler.get('linting');
                            _a = this;
                            return [4, this.getMessages()];
                        case 1:
                            _a.messages = _b.sent();
                            this.init();
                            return [2];
                    }
                });
            });
        };
        MessageTaskSection.prototype.isSuitableForElement = function (element) {
            return this.elementIsMessageTask(element);
        };
        MessageTaskSection.prototype.updateMessage = function () {
            var _this = this;
            this.selectedMessage = this.messages.find(function (message) {
                return message.id === _this.selectedId;
            });
            this.businessObjInPanel.messageRef = this.selectedMessage;
            this.publishDiagramChange();
            if (this.linter.lintingActive()) {
                this.linter.update();
            }
        };
        MessageTaskSection.prototype.updateName = function () {
            var _this = this;
            var rootElements = this.modeler._definitions.rootElements;
            var selectedMessage = rootElements.find(function (element) {
                var elementIsSelectedMessage = element.$type === 'bpmn:Message' && element.id === _this.selectedId;
                return elementIsSelectedMessage;
            });
            selectedMessage.name = this.selectedMessage.name;
            this.publishDiagramChange();
        };
        MessageTaskSection.prototype.addMessage = function () {
            var _this = this;
            var bpmnMessageProperty = {
                id: "Message_" + this.generalService.generateRandomId(),
                name: 'Message Name',
            };
            var bpmnMessage = this.moddle.create('bpmn:Message', bpmnMessageProperty);
            this.modeler._definitions.rootElements.push(bpmnMessage);
            this.moddle.toXML(this.modeler._definitions.rootElements, function (toXMLError, xmlStrUpdated) {
                _this.modeler.importXML(xmlStrUpdated, function (importXMLError) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4, this.refreshMessages()];
                            case 1:
                                _a.sent();
                                return [4, this.setBusinessObj()];
                            case 2:
                                _a.sent();
                                this.selectedId = bpmnMessage.id;
                                this.updateMessage();
                                return [2];
                        }
                    });
                }); });
            });
            this.publishDiagramChange();
        };
        MessageTaskSection.prototype.removeSelectedMessage = function () {
            var _this = this;
            var noMessageIsSelected = !this.selectedId;
            if (noMessageIsSelected) {
                return;
            }
            var messageIndex = this.messages.findIndex(function (message) {
                return message.id === _this.selectedId;
            });
            this.messages.splice(messageIndex, 1);
            this.modeler._definitions.rootElements.splice(this.getRootElementsIndex(this.selectedId), 1);
            this.updateMessage();
            this.publishDiagramChange();
        };
        MessageTaskSection.prototype.getRootElementsIndex = function (elementId) {
            var rootElements = this.modeler._definitions.rootElements;
            var rootElementsIndex = rootElements.findIndex(function (element) {
                return element.id === elementId;
            });
            return rootElementsIndex;
        };
        MessageTaskSection.prototype.elementIsMessageTask = function (element) {
            return element !== undefined && (element.type === 'bpmn:SendTask' || element.type === 'bpmn:ReceiveTask');
        };
        MessageTaskSection.prototype.init = function () {
            var businessObjectHasNoMessageEvents = this.businessObjInPanel === undefined || this.businessObjInPanel.messageRef === undefined;
            if (businessObjectHasNoMessageEvents) {
                this.selectedMessage = undefined;
                this.selectedId = undefined;
                return;
            }
            var messageRef = this.businessObjInPanel.messageRef;
            var messageId = messageRef.id;
            var elementReferencesMessage = this.getMessageById(messageId) !== undefined;
            if (elementReferencesMessage) {
                this.selectedId = messageId;
                this.updateMessage();
            }
            else {
                this.selectedMessage = undefined;
                this.selectedId = undefined;
            }
        };
        MessageTaskSection.prototype.getMessageById = function (messageId) {
            var messages = this.getMessages();
            var message = messages.find(function (messageElement) {
                return messageElement.id === messageId;
            });
            return message;
        };
        MessageTaskSection.prototype.getMessages = function () {
            var rootElements = this.modeler._definitions.rootElements;
            var messages = rootElements.filter(function (element) {
                return element.$type === 'bpmn:Message';
            });
            return messages;
        };
        MessageTaskSection.prototype.refreshMessages = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4, this.getMessages()];
                        case 1:
                            _a.messages = _b.sent();
                            return [2];
                    }
                });
            });
        };
        MessageTaskSection.prototype.setBusinessObj = function () {
            var elementRegistry = this.modeler.get('elementRegistry');
            var elementInPanel = elementRegistry.get(this.businessObjInPanel.id);
            this.businessObjInPanel = elementInPanel.businessObject;
        };
        MessageTaskSection.prototype.publishDiagramChange = function () {
            this.eventAggregator.publish(environment_1.default.events.diagramChange);
        };
        MessageTaskSection = __decorate([
            aurelia_framework_1.inject(general_service_1.GeneralService, aurelia_event_aggregator_1.EventAggregator),
            __metadata("design:paramtypes", [general_service_1.GeneralService, aurelia_event_aggregator_1.EventAggregator])
        ], MessageTaskSection);
        return MessageTaskSection;
    }());
    exports.MessageTaskSection = MessageTaskSection;
});


;
define('text!modules/design/property-panel/indextabs/general/sections/message-task/message-task.css',[],function(){return "";});;
define('text!modules/design/property-panel/indextabs/general/sections/message-task/message-task.html',[],function(){return "<template>\n  <require from=\"./message-task.css\"></require>\n  <require from=\"../../../../styles/sections.css\"></require>\n  <div class=\"panel\" id=\"js-general-messageTask-section\">\n    <div class=\"panel__heading\">\n      Message\n      <button class=\"button remove-context-button\" class.bind=\"selectedId ? '' : 'button--disabled'\" disabled.bind=\"!selectedId || !isEditable\" click.delegate=\"removeSelectedMessage()\">\n        <i class=\"fas fa-trash\"></i>\n      </button>\n      <button class=\"button add-context-button\" click.delegate=\"addMessage()\" disabled.bind=\"!isEditable\">\n        <i class=\"fas fa-plus\"></i>\n      </button>\n    </div>\n    <div class=\"panel__content\">\n      <table class=\"props-table\">\n        <tr>\n          <th>Message</th>\n          <td>\n            <select class=\"props-input props-select\" value.bind=\"selectedId\" change.delegate=\"updateMessage()\" disabled.bind=\"!isEditable\">\n              <option model.bind=\"null\">-Choose Message-</option>\n              <option repeat.for=\"message of messages\"\n                      model.bind=\"message.id\" value=\"${message.id}\">${message.name} (id: ${message.id})</option>\n            </select>\n          </td>\n        </tr>\n      </table>\n      <table show.bind=\"selectedId\" class=\"props-table\">\n        <tr>\n          <th>Name</th>\n          <td>\n            <input type=\"text\" class=\"props-input\" value.bind=\"selectedMessage.name\" change.delegate=\"updateName()\" disabled.bind=\"!isEditable\">\n          </td>\n        </tr>\n      </table>\n    </div>\n  </div>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/design/property-panel/indextabs/general/sections/pool/pool',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "aurelia-validation", "../../../../../../../environment"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, aurelia_validation_1, environment_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var PoolSection = (function () {
        function PoolSection(controller, eventAggregator, bindingEngine) {
            this.path = '/sections/pool/pool';
            this.canHandleElement = false;
            this.validationError = false;
            this.processIdCheckboxChecked = false;
            this.showModal = false;
            this.showProcessIdWarningModal = false;
            this.validationController = controller;
            this.eventAggregator = eventAggregator;
            this.bindingEngine = bindingEngine;
        }
        PoolSection.prototype.activate = function (model) {
            var _this = this;
            var noProcessReferencePresent = model.elementInPanel.businessObject.processRef === undefined;
            if (noProcessReferencePresent) {
                return;
            }
            if (this.validationError) {
                this.processRefId = this.previousProcessRefId;
                this.validationController.validate();
            }
            this.businessObjInPanel = model.elementInPanel.businessObject;
            this.processRefId = this.businessObjInPanel.processRef.id;
            this.previousProcessRefId = this.businessObjInPanel.processRef.id;
            this.modeler = model.modeler;
            if (this.processRefIdObserver !== undefined) {
                this.processRefIdObserver.dispose();
                this.processRefIdObserver = undefined;
            }
            this.processRefIdObserver = this.bindingEngine
                .propertyObserver(this.businessObjInPanel.processRef, 'id')
                .subscribe(function (newId) {
                _this.processRefId = newId;
            });
            this.validationController.subscribe(function (event) {
                _this.validateId(event);
            });
            this.setValidationRules();
            this.showProcessIdWarningModal = Boolean(window.localStorage.getItem('showProcessIdWarningModal'));
        };
        PoolSection.prototype.detached = function () {
            if (this.validationError) {
                this.processRefId = this.previousProcessRefId;
                this.validationController.validate();
            }
        };
        PoolSection.prototype.processIdCheckboxCheckedChanged = function (newValue) {
            if (!newValue || this.showProcessIdWarningModal) {
                return;
            }
            this.showModal = true;
        };
        PoolSection.prototype.closeModal = function () {
            this.showModal = false;
            this.persistModalOptionToLocalStorage();
        };
        PoolSection.prototype.isSuitableForElement = function (element) {
            return this.elementIsParticipant(element);
        };
        PoolSection.prototype.publishDiagramChange = function () {
            this.eventAggregator.publish(environment_1.default.events.diagramChange);
        };
        PoolSection.prototype.elementIsParticipant = function (element) {
            return (element !== undefined &&
                element.businessObject !== undefined &&
                element.businessObject.$type === 'bpmn:Participant');
        };
        PoolSection.prototype.validateId = function (event) {
            if (event.type !== 'validate') {
                return;
            }
            this.validationError = false;
            for (var _i = 0, _a = event.results; _i < _a.length; _i++) {
                var result = _a[_i];
                if (result.rule.property.displayName !== 'processId') {
                    continue;
                }
                if (result.valid === false) {
                    this.validationError = true;
                    document.getElementById(result.rule.property.displayName).style.border = '2px solid red';
                }
                else {
                    document.getElementById(result.rule.property.displayName).style.border = '';
                }
            }
        };
        PoolSection.prototype.updateId = function () {
            this.validationController.validate();
            if (this.validationController.errors.length > 0) {
                return;
            }
            this.businessObjInPanel.processRef.id = this.processRefId;
            this.publishDiagramChange();
        };
        PoolSection.prototype.formIdIsUnique = function (id) {
            var elementRegistry = this.modeler.get('elementRegistry');
            var elementsWithSameId = elementRegistry.filter(function (element) {
                return element.businessObject.id === id;
            });
            return elementsWithSameId.length === 0;
        };
        PoolSection.prototype.areRootElementIdsUnique = function (id) {
            var elementIds = this.modeler._definitions.rootElements.map(function (rootElement) {
                return rootElement.id;
            });
            var currentId = elementIds.indexOf(this.businessObjInPanel.processRef.id);
            elementIds.splice(currentId, 1);
            return !elementIds.includes(id);
        };
        PoolSection.prototype.isDefinitionIdUnique = function (id) {
            return this.modeler._definitions.id !== id;
        };
        PoolSection.prototype.setValidationRules = function () {
            var _this = this;
            aurelia_validation_1.ValidationRules.ensure(function (poolSection) { return poolSection.processRefId; })
                .displayName('processId')
                .required()
                .withMessage('Process-ID cannot be blank.')
                .then()
                .satisfies(function (id) { return _this.formIdIsUnique(id) && _this.areRootElementIdsUnique(id) && _this.isDefinitionIdUnique(id); })
                .withMessage('Process-ID already exists.')
                .on(this);
        };
        PoolSection.prototype.persistModalOptionToLocalStorage = function () {
            window.localStorage.setItem('showProcessIdWarningModal', this.showProcessIdWarningModal.toString());
        };
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Boolean)
        ], PoolSection.prototype, "processIdCheckboxChecked", void 0);
        PoolSection = __decorate([
            aurelia_framework_1.inject(aurelia_validation_1.ValidationController, aurelia_event_aggregator_1.EventAggregator, aurelia_framework_1.BindingEngine),
            __metadata("design:paramtypes", [aurelia_validation_1.ValidationController, aurelia_event_aggregator_1.EventAggregator, aurelia_framework_1.BindingEngine])
        ], PoolSection);
        return PoolSection;
    }());
    exports.PoolSection = PoolSection;
});


;
define('text!modules/design/property-panel/indextabs/general/sections/pool/pool.css',[],function(){return ".process-id-checkbox {\n  margin-left: 10px; }\n";});;
define('text!modules/design/property-panel/indextabs/general/sections/pool/pool.html',[],function(){return "<template>\n  <require from=\"./pool.css\"></require>\n  <require from=\"../../../../styles/sections.css\"></require>\n  <div class=\"section-panel\" id=\"js-general-pool-section\">\n    <div class=\"panel__heading\">Pool</div>\n    <div class=\"panel__content\">\n      <table class=\"props-table\">\n        <tr>\n          <th>Version</th>\n          <td>\n            <input type=\"text\" class=\"props-input\" value.bind=\"businessObjInPanel.processRef.versionTag\" change.delegate=\"publishDiagramChange()\" disabled.bind=\"!isEditable\">\n          </td>\n        </tr>\n        <tr>\n          <th>ID\n            <input class=\"process-id-checkbox\" type=\"checkbox\" checked.bind=\"processIdCheckboxChecked\" disabled.bind=\"!isEditable\" title=\"Allow editing process ID\">\n          </th>\n          <td>\n            <input type=\"text\" id=\"processId\" class=\"props-input\" value.bind=\"processRefId & validateOnChange\" change.delegate=\"updateId()\"  disabled.bind=\"!isEditable || !processIdCheckboxChecked\">\n          </td>\n          <td>\n            <template if.bind=\"validationError\">\n              <i class=\"fas fa-times validation_error\"></i>\n            </template>\n          </td>\n        </tr>\n        <tr>\n          <th>Name</th>\n          <td>\n            <input type=\"text\" class=\"props-input\" value.bind=\"businessObjInPanel.processRef.name\" change.delegate=\"publishDiagramChange()\" disabled.bind=\"!isEditable\">\n          </td>\n        </tr>\n      </table>\n    </div>\n  </div>\n\n  <modal show.bind=\"showModal\"\n         header-text=\"Warning: Editing Process ID\">\n    <template replace-part=\"modal-body\">\n      Changing a process ID can potentially break your deployments! Only perform this action if you know what you are doing!\n    </template>\n    <template replace-part=\"modal-footer\">\n      <label><input type=\"checkbox\" checked.bind=\"showProcessIdWarningModal\"> Don't show again</label>\n      <button type=\"button\" class=\"btn btn-primary\" data-dismiss=\"modal\" click.delegate=\"closeModal()\">Okay</button>\n    </template>\n  </modal>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/design/property-panel/indextabs/general/sections/process/process',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "../../../../../../../environment"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, environment_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var ProcessSection = (function () {
        function ProcessSection(eventAggregator) {
            this.path = '/sections/process/process';
            this.canHandleElement = false;
            this.eventAggregator = eventAggregator;
        }
        ProcessSection.prototype.activate = function (model) {
            this.businessObjInPanel = model.modeler._definitions.rootElements.find(function (rootElement) {
                return rootElement.$type === 'bpmn:Process';
            });
        };
        ProcessSection.prototype.isSuitableForElement = function (element) {
            var elementHasNoBusinessObject = element === undefined || element.businessObject === undefined;
            if (elementHasNoBusinessObject) {
                return false;
            }
            var elementIsRoot = element.businessObject.$type === 'bpmn:Collaboration';
            return elementIsRoot;
        };
        ProcessSection.prototype.toggleExecutable = function () {
            this.publishDiagramChange();
        };
        ProcessSection.prototype.publishDiagramChange = function () {
            this.eventAggregator.publish(environment_1.default.events.diagramChange);
        };
        ProcessSection = __decorate([
            aurelia_framework_1.inject(aurelia_event_aggregator_1.EventAggregator),
            __metadata("design:paramtypes", [aurelia_event_aggregator_1.EventAggregator])
        ], ProcessSection);
        return ProcessSection;
    }());
    exports.ProcessSection = ProcessSection;
});


;
define('text!modules/design/property-panel/indextabs/general/sections/process/process.css',[],function(){return "";});;
define('text!modules/design/property-panel/indextabs/general/sections/process/process.html',[],function(){return "<template>\n    <require from=\"./process.css\"></require>\n    <require from=\"../../../../styles/sections.css\"></require>\n    <div class=\"section-panel\" id=\"js-general-process-section\">\n      <div class=\"panel__heading\">Process</div>\n      <div class=\"panel__content\">\n        <table class=\"props-table\">\n          <tr>\n            <th>Executable</th>\n            <td>\n              <input type=\"checkbox\" class=\"props-input\" checked.bind=\"businessObjInPanel.isExecutable\" change.delegate=\"toggleExecutable()\" disabled.bind=\"!isEditable\">\n            </td>\n          </tr>\n        </table>\n      </div>\n    </div>\n  </template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/design/property-panel/indextabs/general/sections/script-task/script-task',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "../../../../../../../contracts/index", "../../../../../../../environment", "../../../../../../../services/help-modal-service/help-modal-service"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, index_1, environment_1, help_modal_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var ScriptTaskSection = (function () {
        function ScriptTaskSection(eventAggregator, helpModalService) {
            var _this = this;
            this.path = '/sections/script-task/script-task';
            this.canHandleElement = false;
            this.showModal = false;
            this.saveInputHeightOnMouseUp = function () {
                var resizeListenerFunction = function () {
                    localStorage.setItem('scriptTaskInputHeight', _this.scriptInput.clientHeight.toString());
                    window.removeEventListener('mouseup', resizeListenerFunction);
                };
                window.addEventListener('mouseup', resizeListenerFunction);
            };
            this.eventAggregator = eventAggregator;
            this.helpModalService = helpModalService;
        }
        ScriptTaskSection.prototype.activate = function (model) {
            this.businessObjInPanel = model.elementInPanel.businessObject;
        };
        ScriptTaskSection.prototype.attached = function () {
            this.recoverInputHeight();
            this.saveInputHeightOnChange();
        };
        ScriptTaskSection.prototype.detached = function () {
            this.scriptInput.removeEventListener('mousedown', this.saveInputHeightOnMouseUp);
        };
        ScriptTaskSection.prototype.isSuitableForElement = function (element) {
            return this.elementIsScriptTask(element);
        };
        ScriptTaskSection.prototype.updateScript = function () {
            this.publishDiagramChange();
        };
        ScriptTaskSection.prototype.showTokenHelpModal = function () {
            this.helpModalService.showHelpModal(index_1.HelpTextId.ScriptTaskTokenUsage);
        };
        ScriptTaskSection.prototype.elementIsScriptTask = function (element) {
            return (element !== undefined &&
                element.businessObject !== undefined &&
                element.businessObject.$type === 'bpmn:ScriptTask');
        };
        ScriptTaskSection.prototype.saveInputHeightOnChange = function () {
            this.scriptInput.addEventListener('mousedown', this.saveInputHeightOnMouseUp);
        };
        ScriptTaskSection.prototype.recoverInputHeight = function () {
            this.scriptInput.style.height = localStorage.getItem('scriptTaskInputHeight') + "px";
        };
        ScriptTaskSection.prototype.publishDiagramChange = function () {
            this.eventAggregator.publish(environment_1.default.events.diagramChange);
        };
        ScriptTaskSection = __decorate([
            aurelia_framework_1.inject(aurelia_event_aggregator_1.EventAggregator, help_modal_service_1.HelpModalService),
            __metadata("design:paramtypes", [aurelia_event_aggregator_1.EventAggregator, help_modal_service_1.HelpModalService])
        ], ScriptTaskSection);
        return ScriptTaskSection;
    }());
    exports.ScriptTaskSection = ScriptTaskSection;
});


;
define('text!modules/design/property-panel/indextabs/general/sections/script-task/script-task.css',[],function(){return ".script-task-enlarge-link {\n  display: block;\n  color: #007bff !important; }\n\n.script-task-enlarge-text:hover {\n  text-decoration: underline; }\n\n.script-task {\n  min-height: 55px;\n  max-height: 400px; }\n";});;
define('text!modules/design/property-panel/indextabs/general/sections/script-task/script-task.html',[],function(){return "<template>\n  <require from=\"./script-task.css\"></require>\n  <require from=\"../../../../styles/sections.css\"></require>\n  <div class=\"section-panel\" id=\"js-general-scriptTask-section\">\n    <div class=\"panel__heading\">Script Task\n      <i class=\"fas fa-info-circle feedback-modal__help-icon\" title=\"Help: How to use the token\" click.delegate=\"showTokenHelpModal()\"></i>\n    </div>\n    <div class=\"panel__content\">\n      <table class=\"props-table\">\n        <tr>\n          <th>Script\n            <a class=\"script-task-enlarge-link\" click.delegate=\"showModal = true\"><small class=\"script-task-enlarge-text\">Enlarge</small></a>\n          </th>\n          <td>\n            <textarea class=\"props-input-textarea name-input\" ref=\"scriptInput\" value.bind=\"businessObjInPanel.script\" change.delegate=\"updateScript()\" disabled.bind=\"!isEditable\"></textarea>\n          </td>\n        </tr>\n      </table>\n    </div>\n  </div>\n\n  <modal show.bind=\"showModal\"\n         header-text=\"Editing: Script Task\">\n    <template replace-part=\"modal-body\" autofocus>\n      <textarea class=\"form-control script-task\" value.bind=\"businessObjInPanel.script\" change.delegate=\"updateScript()\" rows=\"10\" aria-multiline=\"true\" autofocus wrap=\"soft\" disabled.bind=\"!isEditable\"></textarea>\n    </template>\n    <template replace-part=\"modal-footer\">\n      <button type=\"button\" class=\"btn btn-primary\" data-dismiss=\"modal\" click.delegate=\"showModal = false\">Okay</button>\n    </template>\n  </modal>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/design/property-panel/indextabs/general/sections/service-task/components/external-task/external-task',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "../../../../../../../../../contracts/index", "../../../../../../../../../environment", "../service-task-service/service-task.service", "../../../../../../../../../services/help-modal-service/help-modal-service"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, index_1, environment_1, service_task_service_1, help_modal_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var ExternalTask = (function () {
        function ExternalTask(eventAggregator, helpModalService) {
            var _this = this;
            this.showModal = false;
            this.saveInputHeightOnMouseUp = function () {
                var resizeListenerFunction = function () {
                    localStorage.setItem('externalTaskPayloadInputHeight', _this.payloadInput.clientHeight.toString());
                    window.removeEventListener('mouseup', resizeListenerFunction);
                };
                window.addEventListener('mouseup', resizeListenerFunction);
            };
            this.eventAggregator = eventAggregator;
            this.helpModalService = helpModalService;
        }
        ExternalTask.prototype.attached = function () {
            this.recoverInputHeight();
            this.saveInputHeightOnChange();
        };
        ExternalTask.prototype.detached = function () {
            this.payloadInput.removeEventListener('mousedown', this.saveInputHeightOnMouseUp);
        };
        ExternalTask.prototype.modelChanged = function () {
            this.serviceTaskService = new service_task_service_1.ServiceTaskService(this.model);
            this.businessObjInPanel = this.model.elementInPanel.businessObject;
            this.selectedTopic = this.businessObjInPanel.topic;
            this.selectedPayload = this.getPayloadFromModel();
        };
        ExternalTask.prototype.topicChanged = function () {
            this.businessObjInPanel.topic = this.selectedTopic;
            this.publishDiagramChange();
        };
        ExternalTask.prototype.payloadChanged = function () {
            this.setPayloadToModel(this.selectedPayload);
            this.publishDiagramChange();
        };
        ExternalTask.prototype.showTokenHelpModal = function () {
            this.helpModalService.showHelpModal(index_1.HelpTextId.ExternalTaskTokenUsage);
        };
        ExternalTask.prototype.getPayloadFromModel = function () {
            var payloadProperty = this.serviceTaskService.getProperty('payload');
            var payloadPropertyExists = payloadProperty !== undefined;
            if (payloadPropertyExists) {
                return payloadProperty.value;
            }
            return undefined;
        };
        ExternalTask.prototype.setPayloadToModel = function (value) {
            var payloadProperty = this.serviceTaskService.getProperty('payload');
            var payloadPropertyNotExists = payloadProperty === undefined;
            if (payloadPropertyNotExists) {
                payloadProperty = this.serviceTaskService.createProperty('payload');
            }
            payloadProperty.value = value;
        };
        ExternalTask.prototype.saveInputHeightOnChange = function () {
            this.payloadInput.addEventListener('mousedown', this.saveInputHeightOnMouseUp);
        };
        ExternalTask.prototype.recoverInputHeight = function () {
            this.payloadInput.style.height = localStorage.getItem('externalTaskPayloadInputHeight') + "px";
        };
        ExternalTask.prototype.publishDiagramChange = function () {
            this.eventAggregator.publish(environment_1.default.events.diagramChange);
        };
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", Object)
        ], ExternalTask.prototype, "model", void 0);
        ExternalTask = __decorate([
            aurelia_framework_1.inject(aurelia_event_aggregator_1.EventAggregator, help_modal_service_1.HelpModalService),
            __metadata("design:paramtypes", [aurelia_event_aggregator_1.EventAggregator, help_modal_service_1.HelpModalService])
        ], ExternalTask);
        return ExternalTask;
    }());
    exports.ExternalTask = ExternalTask;
});


;
define('text!modules/design/property-panel/indextabs/general/sections/service-task/components/external-task/external-task.css',[],function(){return ".payload-enlarge-link {\n  display: block;\n  color: #007bff !important; }\n\n.payload-enlarge-text:hover {\n  text-decoration: underline; }\n\n.payload {\n  min-height: 55px;\n  max-height: 400px; }\n";});;
define('text!modules/design/property-panel/indextabs/general/sections/service-task/components/external-task/external-task.html',[],function(){return "<template>\n  <require from=\"./external-task.css\"></require>\n  <require from=\"../../../../../../styles/sections.css\"></require>\n  <div class=\"section-panel\">\n    <div class=\"panel__heading\">External Task\n      <i class=\"fas fa-info-circle feedback-modal__help-icon\" title=\"Help: How to use the token in ExternalTasks\" click.delegate=\"showTokenHelpModal()\"></i>\n    </div>\n    <div class=\"panel__content\">\n      <table class=\"props-table\">\n        <tr>\n          <th>Topic</th>\n          <td>\n            <input type=\"text\" class=\"props-input name-input\" value.bind=\"selectedTopic\" change.delegate=\"topicChanged()\" disabled.bind=\"!model.isEditable\">\n          </td>\n        </tr>\n        <tr>\n          <th>Payload<a class=\"payload-enlarge-link\" click.delegate=\"showModal = true\"><small class=\"payload-enlarge-text\">Enlarge</small></a></th>\n          <td>\n            <textarea class=\"props-input-textarea name-input\" ref=\"payloadInput\" value.bind=\"selectedPayload\" change.delegate=\"payloadChanged()\" disabled.bind=\"!model.isEditable\"></textarea>\n          </td>\n        </tr>\n    </div>\n  </div>\n\n  <modal show.bind=\"showModal\"\n         header-text=\"Editing: Payload\">\n    <template replace-part=\"modal-body\" autofocus>\n      <textarea class=\"form-control payload\" value.bind=\"selectedPayload\" change.delegate=\"payloadChanged()\" rows=\"10\" aria-multiline=\"true\" autofocus wrap=\"soft\" disabled.bind=\"!model.isEditable\"></textarea>\n    </template>\n    <template replace-part=\"modal-footer\">\n      <button type=\"button\" class=\"btn btn-primary\" data-dismiss=\"modal\" click.delegate=\"showModal = false\">Okay</button>\n    </template>\n  </modal>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/design/property-panel/indextabs/general/sections/service-task/components/http-service-task/http-service-task',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "../../../../../../../../../environment", "../service-task-service/service-task.service"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, environment_1, service_task_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var HttpServiceTask = (function () {
        function HttpServiceTask(eventAggregator) {
            this.eventAggregator = eventAggregator;
        }
        HttpServiceTask.prototype.modelChanged = function () {
            this.serviceTaskService = new service_task_service_1.ServiceTaskService(this.model);
            this.businessObjInPanel = this.model.elementInPanel.businessObject;
            this.initHttpServiceTask();
        };
        HttpServiceTask.prototype.selectedHttpParamsChanged = function () {
            var noHttpBodySelected = this.selectedHttpBody === undefined;
            if (noHttpBodySelected) {
                this.selectedHttpAuth = undefined;
                this.selectedHttpContentType = undefined;
            }
            var noHttpUrlSelected = this.selectedHttpUrl === undefined;
            if (noHttpUrlSelected) {
                this.selectedHttpBody = undefined;
                this.selectedHttpAuth = undefined;
                this.selectedHttpContentType = undefined;
            }
            this.serviceTaskService.getProperty('params').value = this.getParamsFromInput();
            this.publishDiagramChange();
        };
        HttpServiceTask.prototype.httpMethodChanged = function () {
            var property = this.serviceTaskService.getProperty('method');
            property.value = this.selectedHttpMethod;
            this.getParamsFromInput();
            this.publishDiagramChange();
        };
        HttpServiceTask.prototype.initHttpServiceTask = function () {
            var methodPropertyExists = this.serviceTaskService.getProperty('method') !== undefined;
            var paramPropertyExists = this.serviceTaskService.getProperty('params') !== undefined;
            if (methodPropertyExists) {
                this.selectedHttpMethod = this.serviceTaskService.getProperty('method').value;
            }
            else {
                this.serviceTaskService.createProperty('method');
            }
            if (paramPropertyExists) {
                this.fillVariablesFromParam(this.serviceTaskService.getProperty('params').value);
            }
            else {
                this.serviceTaskService.createProperty('params');
            }
        };
        HttpServiceTask.prototype.publishDiagramChange = function () {
            this.eventAggregator.publish(environment_1.default.events.diagramChange);
        };
        HttpServiceTask.prototype.getParamsFromInput = function () {
            var params = '';
            params = params + "\"" + this.selectedHttpUrl + "\"";
            var httpBodySelected = this.selectedHttpBody !== undefined;
            if (httpBodySelected) {
                params = params + ", " + this.selectedHttpBody;
            }
            var header;
            var httpContentTypeSelected = this.selectedHttpContentType !== undefined;
            var httpAuthorizationSelected = this.selectedHttpAuth !== undefined;
            var noHttpAuthorizationSelected = this.selectedHttpAuth === undefined;
            var noHttpContentTypeSelected = this.selectedHttpContentType === undefined;
            if (httpContentTypeSelected && noHttpAuthorizationSelected) {
                header = {
                    headers: {
                        'Content-Type': this.selectedHttpContentType,
                    },
                };
                var stringifiedHeader = JSON.stringify(header);
                params = params + ", " + stringifiedHeader;
            }
            if (httpAuthorizationSelected && noHttpContentTypeSelected) {
                header = {
                    headers: {
                        Authorization: this.selectedHttpAuth,
                    },
                };
                var stringifiedHeader = JSON.stringify(header);
                params = params + ", " + stringifiedHeader;
            }
            if (httpContentTypeSelected && httpAuthorizationSelected) {
                header = {
                    headers: {
                        Authorization: this.selectedHttpAuth,
                        'Content-Type': this.selectedHttpContentType,
                    },
                };
                var stringifiedHeader = JSON.stringify(header);
                params = params + ", " + stringifiedHeader;
            }
            params = "[" + params + "]";
            return params;
        };
        HttpServiceTask.prototype.fillVariablesFromParam = function (params) {
            var regex = new RegExp(',(?=[^}]*(?:{|$))');
            var splittedParamString = params.split(regex);
            var urlParamsGiven = splittedParamString.length > 0;
            if (urlParamsGiven) {
                var hasDoubleQuotationMarks = splittedParamString[0].search('"') > 0;
                var hasSingleQuotationMarks = splittedParamString[0].search("'") > 0;
                var urlParam = void 0;
                if (hasDoubleQuotationMarks) {
                    urlParam = splittedParamString[0].slice(splittedParamString[0].search('"') + 1, splittedParamString[0].lastIndexOf('"'));
                }
                else if (hasSingleQuotationMarks) {
                    urlParam = splittedParamString[0].slice(splittedParamString[0].search("'") + 1, splittedParamString[0].lastIndexOf("'"));
                }
                this.selectedHttpUrl = urlParam;
            }
            var bodyParamsGiven = splittedParamString.length > 1;
            if (bodyParamsGiven) {
                var bodyParam = splittedParamString[1].slice(1, splittedParamString[1].length);
                var bodyIsLastParameter = bodyParam.endsWith(']');
                if (bodyIsLastParameter) {
                    bodyParam = bodyParam.substring(0, bodyParam.length - 1);
                }
                this.selectedHttpBody = bodyParam;
            }
            var headerParamsPosition = 2;
            var headerParamsGiven = splittedParamString.length > headerParamsPosition;
            if (headerParamsGiven) {
                var headerParam = splittedParamString[headerParamsPosition];
                var headerIsLastParameter = headerParam.endsWith(']');
                if (headerIsLastParameter) {
                    headerParam = headerParam.substring(0, splittedParamString[headerParamsPosition].length - 1);
                }
                var headerParamDoubleQuoted = headerParam.replace(/(\s*?{\s*?|\s*?,\s*?)(['"])?([a-zA-Z0-9]+)(['"])?:/g, '$1"$3":');
                var headerObject = JSON.parse(headerParamDoubleQuoted);
                this.selectedHttpContentType = headerObject.headers['Content-Type'];
                this.selectedHttpAuth = headerObject.headers['Authorization'];
            }
        };
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", Object)
        ], HttpServiceTask.prototype, "model", void 0);
        HttpServiceTask = __decorate([
            aurelia_framework_1.inject(aurelia_event_aggregator_1.EventAggregator),
            __metadata("design:paramtypes", [aurelia_event_aggregator_1.EventAggregator])
        ], HttpServiceTask);
        return HttpServiceTask;
    }());
    exports.HttpServiceTask = HttpServiceTask;
});


;
define('text!modules/design/property-panel/indextabs/general/sections/service-task/components/http-service-task/http-service-task.css',[],function(){return "";});;
define('text!modules/design/property-panel/indextabs/general/sections/service-task/components/http-service-task/http-service-task.html',[],function(){return "<template>\n  <require from=\"../../../../../../styles/sections.css\"></require>\n  <div class=\"section-panel\">\n    <div class=\"panel__heading\">HTTP REST Service</div>\n    <div class=\"panel__content\">\n      <table class=\"props-table\">\n        <tr>\n          <th>Method</th>\n          <td>\n            <select class=\"props-input props-select\" value.bind=\"selectedHttpMethod\" change.delegate=\"httpMethodChanged()\" disabled.bind=\"!model.isEditable\">\n              <option value=\"null\">-Choose Method-</option>\n              <option value=\"get\">GET</option>\n              <option value=\"post\">POST</option>\n              <option value=\"put\">UPDATE</option>\n              <option value=\"delete\">DELETE</option>\n            </select>\n          </td>\n        </tr>\n        <tr>\n          <th>Url</th>\n          <td>\n            <input\n              type=\"text\"\n              class=\"props-input name-input\"\n              value.bind=\"selectedHttpUrl\"\n              change.delegate=\"selectedHttpParamsChanged()\"\n              disabled.bind=\"!model.isEditable\">\n          </td>\n        </tr>\n        <tr class.bind=\"!selectedHttpUrl ? 'props-table__row--disabled' : ''\">\n          <th>Body</th>\n          <td>\n            <textarea\n              class=\"props-input-textarea name-input\"\n              value.bind=\"selectedHttpBody\"\n              change.delegate=\"selectedHttpParamsChanged()\"\n              disabled.bind=\"!selectedHttpUrl || !model.isEditable\"></textarea>\n          </td>\n        </tr>\n        <tr class.bind=\"!selectedHttpBody ? 'props-table__row--disabled' : ''\">\n          <th>Content Type</th>\n          <td>\n            <input\n              type=\"text\"\n              class=\"props-input name-input\"\n              value.bind=\"selectedHttpContentType\"\n              change.delegate=\"selectedHttpParamsChanged()\"\n              disabled.bind=\"!selectedHttpBody || !model.isEditable\">\n          </td>\n        </tr>\n        <tr class.bind=\"!selectedHttpBody ? 'props-table__row--disabled' : ''\">\n          <th>Authorization</th>\n          <td>\n            <input\n              type=\"text\"\n              class=\"props-input name-input\"\n              value.bind=\"selectedHttpAuth\"\n              change.delegate=\"selectedHttpParamsChanged()\"\n              disabled.bind=\"!selectedHttpBody || !model.isEditable\">\n          </td>\n        </tr>\n      </table>\n    </div>\n  </div>\n</template>\n";});;
define('modules/design/property-panel/indextabs/general/sections/service-task/components/service-task-service/service-task.service',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ServiceTaskService = (function () {
        function ServiceTaskService(model) {
            this.model = model;
            this.businessObjInPanel = model.elementInPanel.businessObject;
            this.moddle = this.model.modeler.get('moddle');
        }
        ServiceTaskService.prototype.createExtensionElement = function () {
            var extensionValues = [];
            var extensionElements = this.moddle.create('bpmn:ExtensionElements', {
                values: extensionValues,
            });
            this.businessObjInPanel.extensionElements = extensionElements;
        };
        ServiceTaskService.prototype.createPropertiesElement = function () {
            var extensionElement = this.businessObjInPanel.extensionElements;
            var properties = [];
            var propertiesElement = this.moddle.create('camunda:Properties', { values: properties });
            extensionElement.values.push(propertiesElement);
        };
        ServiceTaskService.prototype.createProperty = function (propertyName) {
            if (this.extensionElementDoesNotExist) {
                this.createExtensionElement();
            }
            var noPropertiesElement = this.getPropertiesElement() === undefined;
            if (noPropertiesElement) {
                this.createPropertiesElement();
            }
            var propertiesElement = this.getPropertiesElement();
            var propertyObject = {
                name: propertyName,
                value: '',
            };
            var property = this.moddle.create('camunda:Property', propertyObject);
            propertiesElement.values.push(property);
            return property;
        };
        ServiceTaskService.prototype.getProperty = function (propertyName) {
            var propertiesElement = this.getPropertiesElement();
            if (!propertiesElement) {
                return undefined;
            }
            var property = propertiesElement.values.find(function (element) {
                return element.name === propertyName;
            });
            return property;
        };
        ServiceTaskService.prototype.getPropertiesElement = function () {
            if (this.extensionElementDoesNotExist) {
                return undefined;
            }
            var propertiesElement = this.businessObjInPanel.extensionElements.values.find(function (element) {
                if (!element) {
                    return undefined;
                }
                return element.$type === 'camunda:Properties';
            });
            var noPropertyElementFound = propertiesElement === undefined;
            if (noPropertyElementFound) {
                return undefined;
            }
            var noValuesDefined = propertiesElement.values === undefined;
            if (noValuesDefined) {
                propertiesElement.values = [];
            }
            return propertiesElement;
        };
        Object.defineProperty(ServiceTaskService.prototype, "extensionElementDoesNotExist", {
            get: function () {
                return (this.businessObjInPanel.extensionElements === undefined ||
                    this.businessObjInPanel.extensionElements.values === undefined);
            },
            enumerable: true,
            configurable: true
        });
        return ServiceTaskService;
    }());
    exports.ServiceTaskService = ServiceTaskService;
});


;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/design/property-panel/indextabs/general/sections/service-task/service-task',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "../../../../../../../environment", "./components/service-task-service/service-task.service"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, environment_1, service_task_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var ServiceKind;
    (function (ServiceKind) {
        ServiceKind["None"] = "null";
        ServiceKind["HttpClient"] = "HttpClient";
        ServiceKind["External"] = "external";
    })(ServiceKind || (ServiceKind = {}));
    var ServiceTaskSection = (function () {
        function ServiceTaskSection(eventAggregator) {
            this.path = '/sections/service-task/service-task';
            this.ServiceKind = ServiceKind;
            this.canHandleElement = false;
            this.eventAggregator = eventAggregator;
        }
        ServiceTaskSection.prototype.activate = function (model) {
            this.serviceTaskService = new service_task_service_1.ServiceTaskService(model);
            this.businessObjInPanel = model.elementInPanel.businessObject;
            this.model = model;
            this.moddle = model.modeler.get('moddle');
            this.initServiceTask();
        };
        ServiceTaskSection.prototype.isSuitableForElement = function (element) {
            return this.elementIsServiceTask(element);
        };
        ServiceTaskSection.prototype.kindChanged = function () {
            var selectedKindIsHttpService = this.selectedKind === ServiceKind.HttpClient;
            var selectedKindIsExternalTask = this.selectedKind === ServiceKind.External;
            if (selectedKindIsHttpService) {
                var moduleProperty = this.serviceTaskService.getProperty('module');
                var modulePropertyDoesNotExist = moduleProperty === undefined;
                if (modulePropertyDoesNotExist) {
                    this.createModuleProperty();
                }
                moduleProperty = this.serviceTaskService.getProperty('module');
                moduleProperty.value = this.selectedKind;
                this.deleteExternalTaskProperties();
            }
            else if (selectedKindIsExternalTask) {
                this.businessObjInPanel.type = this.selectedKind;
                this.deleteHttpProperties();
            }
            else {
                this.deleteExternalTaskProperties();
                this.deleteHttpProperties();
            }
            this.publishDiagramChange();
        };
        ServiceTaskSection.prototype.elementIsServiceTask = function (element) {
            return (element !== undefined &&
                element.businessObject !== undefined &&
                element.businessObject.$type === 'bpmn:ServiceTask');
        };
        ServiceTaskSection.prototype.publishDiagramChange = function () {
            this.eventAggregator.publish(environment_1.default.events.diagramChange);
        };
        ServiceTaskSection.prototype.createModuleProperty = function () {
            if (this.serviceTaskService.extensionElementDoesNotExist) {
                this.serviceTaskService.createExtensionElement();
            }
            var noPropertiesElement = this.serviceTaskService.getPropertiesElement() === undefined;
            if (noPropertiesElement) {
                this.serviceTaskService.createPropertiesElement();
            }
            var propertiesElement = this.serviceTaskService.getPropertiesElement();
            var modulePropertyObject = {
                name: 'module',
                value: 'HttpClient',
            };
            var moduleProperty = this.moddle.create('camunda:Property', modulePropertyObject);
            propertiesElement.values.push(moduleProperty);
        };
        ServiceTaskSection.prototype.initServiceTask = function () {
            var taskIsExternalTask = this.businessObjInPanel.type === 'external';
            if (taskIsExternalTask) {
                this.selectedKind = ServiceKind.External;
                return;
            }
            var modulePropertyExists = this.serviceTaskService.getProperty('module') !== undefined;
            if (modulePropertyExists) {
                this.selectedKind = ServiceKind[this.serviceTaskService.getProperty('module').value];
            }
            else {
                this.selectedKind = ServiceKind.None;
            }
        };
        ServiceTaskSection.prototype.deleteHttpProperties = function () {
            var propertiesElement = this.serviceTaskService.getPropertiesElement();
            var propertiesElementExists = propertiesElement !== undefined;
            if (propertiesElementExists) {
                propertiesElement.values = propertiesElement.values.filter(function (element) {
                    return element.name !== 'method' && element.name !== 'params' && element.name !== 'module';
                });
                var emptyProperties = propertiesElement.values.length === 0;
                if (emptyProperties) {
                    this.deletePropertiesElementAndExtensionElements();
                }
            }
        };
        ServiceTaskSection.prototype.deleteExternalTaskProperties = function () {
            delete this.businessObjInPanel.type;
            delete this.businessObjInPanel.topic;
            var propertiesElement = this.serviceTaskService.getPropertiesElement();
            if (propertiesElement) {
                propertiesElement.values = propertiesElement.values.filter(function (element) {
                    return element.name !== 'payload';
                });
                var emptyProperties = propertiesElement.values.length === 0;
                if (emptyProperties) {
                    this.deletePropertiesElementAndExtensionElements();
                }
            }
        };
        ServiceTaskSection.prototype.deletePropertiesElementAndExtensionElements = function () {
            var indexOfPropertiesElement = this.businessObjInPanel.extensionElements.values.findIndex(function (element) {
                if (!element) {
                    return;
                }
                return element.$type === 'camunda:Properties';
            });
            delete this.businessObjInPanel.extensionElements.values[indexOfPropertiesElement];
            var emptyExtensionElements = this.businessObjInPanel.extensionElements.values.length < 2;
            if (emptyExtensionElements) {
                delete this.businessObjInPanel.extensionElements;
            }
        };
        ServiceTaskSection = __decorate([
            aurelia_framework_1.inject(aurelia_event_aggregator_1.EventAggregator),
            __metadata("design:paramtypes", [aurelia_event_aggregator_1.EventAggregator])
        ], ServiceTaskSection);
        return ServiceTaskSection;
    }());
    exports.ServiceTaskSection = ServiceTaskSection;
});


;
define('text!modules/design/property-panel/indextabs/general/sections/service-task/service-task.css',[],function(){return ".props-table__row--disabled {\n  opacity: 0.5; }\n";});;
define('text!modules/design/property-panel/indextabs/general/sections/service-task/service-task.html',[],function(){return "<template>\n  <require from=\"./service-task.css\"></require>\n  <require from=\"../../../../styles/sections.css\"></require>\n  <require from=\"./components/http-service-task/http-service-task\"></require>\n  <require from=\"./components/external-task/external-task\"></require>\n  <div class=\"section-panel\" id=\"js-general-serviceTask-section\">\n    <div class=\"panel__heading\">Service Task</div>\n    <div class=\"panel__content\">\n      <table class=\"props-table\">\n        <tr>\n          <th>Kind</th>\n          <td>\n            <select class=\"props-input props-select\" value.bind=\"selectedKind\" change.delegate=\"kindChanged()\" disabled.bind=\"!isEditable\">\n              <option value.one-time=ServiceKind.None>-Choose Kind-</option>\n              <option value.one-time=ServiceKind.HttpClient>HTTP REST Service</option>\n              <option value.one-time=ServiceKind.External>External Task</option>\n            </select>\n          </td>\n        </tr>\n      </table>\n    </div>\n  </div>\n  <http-service-task if.bind=\"selectedKind === 'HttpClient'\" model.bind=\"model\"></http-service-task>\n  <external-task if.bind=\"selectedKind === 'external'\" model.bind=\"model\"></external-task>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/design/property-panel/indextabs/general/sections/signal-event/signal-event',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "../../../../../../../environment", "../../service/general.service"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, environment_1, general_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var SignalEventSection = (function () {
        function SignalEventSection(generalService, eventAggregator) {
            this.path = '/sections/signal-event/signal-event';
            this.canHandleElement = false;
            this.generalService = generalService;
            this.eventAggregator = eventAggregator;
        }
        SignalEventSection.prototype.activate = function (model) {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.businessObjInPanel = model.elementInPanel.businessObject;
                            this.moddle = model.modeler.get('moddle');
                            this.modeler = model.modeler;
                            this.linter = this.modeler.get('linting');
                            _a = this;
                            return [4, this.getSignals()];
                        case 1:
                            _a.signals = _b.sent();
                            this.init();
                            return [2];
                    }
                });
            });
        };
        SignalEventSection.prototype.isSuitableForElement = function (element) {
            return this.elementIsSignalEvent(element);
        };
        SignalEventSection.prototype.updateSignal = function () {
            var _this = this;
            this.selectedSignal = this.signals.find(function (signal) {
                return signal.id === _this.selectedId;
            });
            var signalElement = this.businessObjInPanel.eventDefinitions[0];
            var eventDefinitionSet = signalElement.signalRef !== undefined;
            var signalGotSelected = this.selectedSignal !== undefined;
            if (eventDefinitionSet && signalGotSelected) {
                var signalIsAlreadySet = signalElement.signalRef.id === this.selectedSignal.id;
                if (signalIsAlreadySet) {
                    return;
                }
            }
            signalElement.signalRef = this.selectedSignal;
            this.publishDiagramChange();
            if (this.linter.lintingActive()) {
                this.linter.update();
            }
        };
        SignalEventSection.prototype.updateName = function () {
            var _this = this;
            var rootElements = this.modeler._definitions.rootElements;
            var signal = rootElements.find(function (element) {
                var elementIsSelectedSignal = element.$type === 'bpmn:Signal' && element.id === _this.selectedId;
                return elementIsSelectedSignal;
            });
            signal.name = this.selectedSignal.name;
            this.publishDiagramChange();
        };
        SignalEventSection.prototype.addSignal = function () {
            var _this = this;
            var bpmnSignalProperty = {
                id: "Signal_" + this.generalService.generateRandomId(),
                name: 'Signal Name',
            };
            var bpmnSignal = this.moddle.create('bpmn:Signal', bpmnSignalProperty);
            this.modeler._definitions.rootElements.push(bpmnSignal);
            this.moddle.toXML(this.modeler._definitions.rootElements, function (toXMLError, xmlStrUpdated) {
                _this.modeler.importXML(xmlStrUpdated, function (importXMLError) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4, this.refreshSignals()];
                            case 1:
                                _a.sent();
                                return [4, this.setBusinessObj()];
                            case 2:
                                _a.sent();
                                this.selectedId = bpmnSignal.id;
                                this.selectedSignal = bpmnSignal;
                                this.updateSignal();
                                return [2];
                        }
                    });
                }); });
            });
            this.publishDiagramChange();
        };
        SignalEventSection.prototype.removeSelectedSignal = function () {
            var _this = this;
            var noSignalIsSelected = !this.selectedId;
            if (noSignalIsSelected) {
                return;
            }
            var signalIndex = this.signals.findIndex(function (signal) {
                return signal.id === _this.selectedId;
            });
            this.signals.splice(signalIndex, 1);
            this.modeler._definitions.rootElements.splice(this.getRootElementsIndex(this.selectedId), 1);
            this.updateSignal();
        };
        SignalEventSection.prototype.getRootElementsIndex = function (elementId) {
            var rootElements = this.modeler._definitions.rootElements;
            var rootElementsIndex = rootElements.findIndex(function (element) {
                return element.id === elementId;
            });
            return rootElementsIndex;
        };
        SignalEventSection.prototype.elementIsSignalEvent = function (element) {
            var elementHasNoBusinessObject = element === undefined || element.businessObject === undefined;
            if (elementHasNoBusinessObject) {
                return false;
            }
            var eventElement = element.businessObject;
            var elementIsSignalEvent = eventElement.eventDefinitions !== undefined &&
                eventElement.eventDefinitions[0] !== undefined &&
                eventElement.eventDefinitions[0].$type === 'bpmn:SignalEventDefinition';
            return elementIsSignalEvent;
        };
        SignalEventSection.prototype.init = function () {
            var _this = this;
            var eventDefinitions = this.businessObjInPanel.eventDefinitions;
            var businessObjectHasNoSignalEvents = eventDefinitions === undefined ||
                eventDefinitions === null ||
                eventDefinitions[0].$type !== 'bpmn:SignalEventDefinition';
            if (businessObjectHasNoSignalEvents) {
                return;
            }
            var signalElement = this.businessObjInPanel.eventDefinitions[0];
            var elementHasNoSignalRef = signalElement.signalRef === undefined;
            if (elementHasNoSignalRef) {
                this.selectedSignal = null;
                this.selectedId = null;
                return;
            }
            var signalId = signalElement.signalRef.id;
            var elementReferencesSignal = this.getSignalById(signalId) !== undefined;
            if (elementReferencesSignal) {
                this.selectedId = signalId;
                this.selectedSignal = this.signals.find(function (signal) {
                    return signal.id === _this.selectedId;
                });
            }
            else {
                this.selectedSignal = null;
                this.selectedId = null;
            }
        };
        SignalEventSection.prototype.getSignalById = function (signalId) {
            var signals = this.getSignals();
            var signal = signals.find(function (signalElement) {
                return signalElement.id === signalId;
            });
            return signal;
        };
        SignalEventSection.prototype.getSignals = function () {
            var rootElements = this.modeler._definitions.rootElements;
            var signals = rootElements.filter(function (element) {
                return element.$type === 'bpmn:Signal';
            });
            return signals;
        };
        SignalEventSection.prototype.refreshSignals = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4, this.getSignals()];
                        case 1:
                            _a.signals = _b.sent();
                            return [2];
                    }
                });
            });
        };
        SignalEventSection.prototype.setBusinessObj = function () {
            var elementRegistry = this.modeler.get('elementRegistry');
            var elementInPanel = elementRegistry.get(this.businessObjInPanel.id);
            this.businessObjInPanel = elementInPanel.businessObject;
        };
        SignalEventSection.prototype.publishDiagramChange = function () {
            this.eventAggregator.publish(environment_1.default.events.diagramChange);
        };
        SignalEventSection = __decorate([
            aurelia_framework_1.inject(general_service_1.GeneralService, aurelia_event_aggregator_1.EventAggregator),
            __metadata("design:paramtypes", [general_service_1.GeneralService, aurelia_event_aggregator_1.EventAggregator])
        ], SignalEventSection);
        return SignalEventSection;
    }());
    exports.SignalEventSection = SignalEventSection;
});


;
define('text!modules/design/property-panel/indextabs/general/sections/signal-event/signal-event.css',[],function(){return "";});;
define('text!modules/design/property-panel/indextabs/general/sections/signal-event/signal-event.html',[],function(){return "<template>\n  <require from=\"./signal-event.css\"></require>\n  <require from=\"../../../../styles/sections.css\"></require>\n  <div class=\"section-panel\" id=\"js-general-signalEvent-section\">\n    <div class=\"panel__heading\">\n      Signal Event\n      <button class=\"button remove-context-button\" class.bind=\"selectedId ? '' : 'button--disabled'\" disabled.bind=\"!selectedId || !isEditable\" click.delegate=\"removeSelectedSignal()\">\n        <i class=\"fas fa-trash\"></i>\n      </button>\n      <button class=\"button add-context-button\" click.delegate=\"addSignal()\" disabled.bind=\"!isEditable\">\n        <i class=\"fas fa-plus\"></i>\n      </button>\n    </div>\n    <div class=\"panel__content\">\n      <table class=\"props-table\">\n        <tr>\n          <th>Signal</th>\n          <td>\n            <select class=\"props-input props-select\" value.bind=\"selectedId\" change.delegate=\"updateSignal()\" disabled.bind=\"!isEditable\">\n              <option model.bind=\"null\">-Choose Signal-</option>\n              <option repeat.for=\"signal of signals\"\n                      model.bind=\"signal.id\" value=\"${signal.id}\">${signal.name} (id: ${signal.id})</option>\n            </select>\n          </td>\n        </tr>\n        <tr show.bind=\"selectedId\">\n          <th>Name</th>\n          <td>\n            <input type=\"text\" class=\"props-input\" value.bind=\"selectedSignal.name\" change.delegate=\"updateName()\" disabled.bind=\"!isEditable\">\n          </td>\n        </tr>\n      </table>\n    </div>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/design/property-panel/indextabs/general/sections/timer-event/timer-event',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "../../../../../../../environment"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, environment_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var TimerType;
    (function (TimerType) {
        TimerType[TimerType["Date"] = 0] = "Date";
        TimerType[TimerType["Duration"] = 1] = "Duration";
        TimerType[TimerType["Cycle"] = 2] = "Cycle";
    })(TimerType || (TimerType = {}));
    var TimerEventSection = (function () {
        function TimerEventSection(eventAggregator) {
            this.path = '/sections/timer-event/timer-event';
            this.canHandleElement = false;
            this.TimerType = TimerType;
            this.isTimerStartEvent = false;
            this.isEnabled = true;
            this.eventAggregator = eventAggregator;
        }
        TimerEventSection.prototype.activate = function (model) {
            this.businessObjInPanel = model.elementInPanel.businessObject;
            this.moddle = model.modeler.get('moddle');
            this.linter = model.modeler.get('linting');
            this.isTimerStartEvent = this.businessObjInPanel.$type === 'bpmn:StartEvent';
            this.timerElement = this.getTimerElement();
            this.init();
        };
        TimerEventSection.prototype.isSuitableForElement = function (element) {
            var elementHasNoBusinessObject = element === undefined || element.businessObject === undefined;
            if (elementHasNoBusinessObject) {
                return false;
            }
            var eventElement = element.businessObject;
            var elementIsTimerEvent = eventElement.eventDefinitions !== undefined &&
                eventElement.eventDefinitions[0] !== undefined &&
                eventElement.eventDefinitions[0].$type === 'bpmn:TimerEventDefinition';
            return elementIsTimerEvent;
        };
        TimerEventSection.prototype.updateTimerType = function () {
            var moddleElement = this.moddle.create('bpmn:FormalExpression', {
                body: this.timerElement.body,
            });
            var timerTypeObject;
            switch (this.timerType) {
                case TimerType.Date: {
                    timerTypeObject = {
                        timeDate: moddleElement,
                    };
                    break;
                }
                case TimerType.Duration: {
                    timerTypeObject = {
                        timeDuration: moddleElement,
                    };
                    break;
                }
                case TimerType.Cycle: {
                    timerTypeObject = this.isTimerStartEvent ? { timeCycle: moddleElement } : {};
                    break;
                }
                default: {
                    timerTypeObject = {};
                }
            }
            delete this.businessObjInPanel.eventDefinitions[0].timeCycle;
            delete this.businessObjInPanel.eventDefinitions[0].timeDuration;
            delete this.businessObjInPanel.eventDefinitions[0].timeDate;
            Object.assign(this.businessObjInPanel.eventDefinitions[0], timerTypeObject);
            this.timerElement.body = '';
            this.publishDiagramChange();
            this.updateLinterWhenActive();
        };
        TimerEventSection.prototype.updateTimerDefinition = function () {
            var timerElement = this.getTimerElement();
            timerElement.body = this.timerElement.body;
            this.publishDiagramChange();
            this.updateLinterWhenActive();
        };
        TimerEventSection.prototype.isEnabledChanged = function () {
            var enabledProperty = this.getProperty('enabled');
            enabledProperty.value = this.isEnabled.toString();
            this.publishDiagramChange();
        };
        TimerEventSection.prototype.init = function () {
            if (this.isTimerStartEvent) {
                var extensionElementDoesNotExist = this.businessObjInPanel.extensionElements === undefined;
                if (extensionElementDoesNotExist) {
                    this.createExtensionElement();
                }
                var propertyElementDoesNotExists = this.getPropertiesElement() === undefined;
                if (propertyElementDoesNotExists) {
                    this.createPropertiesElement();
                }
                var enabledProperty = this.getProperty('enabled');
                var enabledPropertyExists = enabledProperty !== undefined;
                if (enabledPropertyExists) {
                    this.isEnabled = enabledProperty.value === 'true';
                }
                else {
                    this.createProperty('enabled');
                    this.getProperty('enabled').value = 'true';
                }
            }
            var _a = this.businessObjInPanel.eventDefinitions[0], timeDate = _a.timeDate, timeDuration = _a.timeDuration, timeCycle = _a.timeCycle;
            if (timeCycle !== undefined && this.isTimerStartEvent) {
                this.timerType = TimerType.Cycle;
                return;
            }
            if (timeDuration !== undefined) {
                this.timerType = TimerType.Duration;
                return;
            }
            if (timeDate !== undefined) {
                this.timerType = TimerType.Date;
            }
        };
        TimerEventSection.prototype.getTimerElement = function () {
            var _a = this.businessObjInPanel.eventDefinitions[0], timeDuration = _a.timeDuration, timeDate = _a.timeDate, timeCycle = _a.timeCycle;
            if (timeDuration !== undefined) {
                return timeDuration;
            }
            if (timeDate !== undefined) {
                return timeDate;
            }
            if (timeCycle !== undefined && this.isTimerStartEvent) {
                return timeCycle;
            }
            var timerEventDefinition = this.moddle.create('bpmn:FormalExpression', { body: '' });
            return timerEventDefinition;
        };
        TimerEventSection.prototype.publishDiagramChange = function () {
            this.eventAggregator.publish(environment_1.default.events.diagramChange);
        };
        TimerEventSection.prototype.updateLinterWhenActive = function () {
            if (this.linter.lintingActive()) {
                this.linter.update();
            }
        };
        TimerEventSection.prototype.createExtensionElement = function () {
            var extensionValues = [];
            var extensionElements = this.moddle.create('bpmn:ExtensionElements', {
                values: extensionValues,
            });
            this.businessObjInPanel.extensionElements = extensionElements;
        };
        TimerEventSection.prototype.createPropertiesElement = function () {
            var extensionElement = this.businessObjInPanel.extensionElements;
            var properties = [];
            var propertiesElement = this.moddle.create('camunda:Properties', { values: properties });
            extensionElement.values.push(propertiesElement);
        };
        TimerEventSection.prototype.createProperty = function (propertyName) {
            var propertiesElement = this.getPropertiesElement();
            var propertyObject = {
                name: propertyName,
                value: '',
            };
            var property = this.moddle.create('camunda:Property', propertyObject);
            propertiesElement.values.push(property);
        };
        TimerEventSection.prototype.getProperty = function (propertyName) {
            var propertiesElement = this.getPropertiesElement();
            var property = propertiesElement.values.find(function (element) {
                return element.name === propertyName;
            });
            return property;
        };
        TimerEventSection.prototype.getPropertiesElement = function () {
            var propertiesElement = this.businessObjInPanel.extensionElements.values.find(function (element) {
                return element.$type === 'camunda:Properties' && element.values !== undefined;
            });
            return propertiesElement;
        };
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Boolean)
        ], TimerEventSection.prototype, "isEnabled", void 0);
        TimerEventSection = __decorate([
            aurelia_framework_1.inject(aurelia_event_aggregator_1.EventAggregator),
            __metadata("design:paramtypes", [aurelia_event_aggregator_1.EventAggregator])
        ], TimerEventSection);
        return TimerEventSection;
    }());
    exports.TimerEventSection = TimerEventSection;
});


;
define('text!modules/design/property-panel/indextabs/general/sections/timer-event/timer-event.css',[],function(){return "";});;
define('text!modules/design/property-panel/indextabs/general/sections/timer-event/timer-event.html',[],function(){return "<template>\n  <require from=\"./timer-event.css\"></require>\n  <require from=\"../../../../styles/sections.css\"></require>\n  <div class=\"section-panel\" id=\"js-general-timerEvent-section\">\n    <div class=\"panel__heading\">\n      Timer Event\n    </div>\n    <div class=\"panel__content\">\n      <table class=\"props-table\">\n        <tr>\n          <td>\n            <select class=\"props-input props-select\" value.bind=\"timerType\" change.delegate=\"updateTimerType()\" disabled.bind=\"!isEditable\">\n              <option model.bind=\"undefined\">-Choose Option-</option>\n              <option model.bind=\"TimerType.Date\">Date</option>\n              <option model.bind=\"TimerType.Duration\">Duration</option>\n              <option if.bind=\"isTimerStartEvent === true\" model.bind=\"TimerType.Cycle\">Cycle</option>\n            </select>\n          </td>\n        </tr>\n      </table>\n      <table show.bind=\"timerType !== undefined\" class=\"props-table\">\n        <tr>\n          <th>Timer Definition</th>\n          <td>\n            <input type=\"text\" class=\"props-input\" value.bind=\"timerElement.body\" change.delegate=\"updateTimerDefinition()\" disabled.bind=\"!isEditable\">\n          </td>\n        </tr>\n        <tr if.bind=\"timerType === TimerType.Cycle\">\n          <th>Enabled</th>\n          <td>\n            <input type=\"checkbox\" class=\"props-input\" checked.bind=\"isEnabled\" disabled.bind=\"!isEditable\">\n          </td>\n        </tr>\n      </table>\n    </div>\n  </div>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define('modules/design/property-panel/indextabs/general/service/general.service',["require", "exports", "aurelia-framework", "../repository/general.repository"], function (require, exports, aurelia_framework_1, general_repository_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var GeneralService = (function () {
        function GeneralService(generalRepository) {
            this.generalRepository = generalRepository;
        }
        GeneralService.prototype.generateRandomId = function () {
            var randomId = '';
            var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
            var randomIdLength = 8;
            for (var i = 0; i < randomIdLength; i++) {
                randomId += possible.charAt(Math.floor(Math.random() * possible.length));
            }
            return randomId;
        };
        GeneralService.prototype.getAllDiagrams = function () {
            return this.generalRepository.getAllDiagrams();
        };
        GeneralService.prototype.getAllStartEventsForDiagram = function (diagramName) {
            return __awaiter(this, void 0, void 0, function () {
                var allDiagrams, diagramForStartEvents;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.getAllDiagrams()];
                        case 1:
                            allDiagrams = _a.sent();
                            diagramForStartEvents = allDiagrams.find(function (diagram) { return diagram.name === diagramName; });
                            if (!diagramForStartEvents) {
                                throw new Error("Diagram with name '" + diagramName + "' not found.");
                            }
                            return [2, this.generalRepository.getAllStartEventsForDiagram(diagramForStartEvents)];
                    }
                });
            });
        };
        GeneralService = __decorate([
            aurelia_framework_1.inject(general_repository_1.GeneralRepository),
            __metadata("design:paramtypes", [general_repository_1.GeneralRepository])
        ], GeneralService);
        return GeneralService;
    }());
    exports.GeneralService = GeneralService;
});


;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
define('modules/design/property-panel/property-panel',["require", "exports", "aurelia-framework", "./indextabs/extensions/extensions", "./indextabs/forms/forms", "./indextabs/general/general", "../../../services/solution-explorer-services/open-diagram-state.service"], function (require, exports, aurelia_framework_1, extensions_1, forms_1, general_1, open_diagram_state_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PropertyPanel = (function () {
        function PropertyPanel(openDiagramStateService) {
            this.generalIndextab = new general_1.General();
            this.formsIndextab = new forms_1.Forms();
            this.extensionsIndextab = new extensions_1.Extensions();
            this.openDiagramStateService = openDiagramStateService;
        }
        PropertyPanel.prototype.attached = function () {
            var _this = this;
            this.moddle = this.modeler.get('moddle');
            this.eventBus = this.modeler.get('eventBus');
            this.indextabs = [this.generalIndextab, this.formsIndextab, this.extensionsIndextab];
            this.updateIndexTabsSuitability();
            this.eventBus.on(['element.click', 'shape.changed', 'selection.changed'], function (event) {
                var elementWasClickedOn = event.type === 'element.click';
                var elementIsValidShape = event.type === 'shape.changed' && event.element.type !== 'label';
                var elementIsShapeInPanel = elementIsValidShape && event.element.id === _this.elementInPanel.id;
                if (elementWasClickedOn || elementIsShapeInPanel) {
                    _this.elementInPanel = event.element;
                }
                var selectedElementChanged = event.type === 'selection.changed' && event.newSelection.length !== 0;
                if (selectedElementChanged) {
                    _this.elementInPanel = event.newSelection[0];
                }
                _this.updateIndexTabsSuitability();
            });
            setTimeout(function () {
                _this.selectPreviouslySelectedOrFirstElement();
            }, 0);
        };
        PropertyPanel.prototype.xmlWasChanged = function () {
            this.selectPreviouslySelectedOrFirstElement();
        };
        PropertyPanel.prototype.selectPreviouslySelectedOrFirstElement = function () {
            var diagramState = this.openDiagramStateService.loadDiagramState(this.diagramUri);
            var noSelectedElementState = diagramState === null ||
                diagramState.metadata.selectedElements === undefined ||
                diagramState.metadata.selectedElements.length === 0;
            if (noSelectedElementState) {
                this.setFirstElement();
                return;
            }
            var selectedElementId = diagramState.metadata.selectedElements[0].id;
            this.selectElementById(selectedElementId);
        };
        PropertyPanel.prototype.setFirstElement = function () {
            var _this = this;
            var firstElement;
            this.moddle.fromXML(this.xml, function (err, definitions) {
                var process = definitions.rootElements.find(function (element) {
                    return element.$type === 'bpmn:Process';
                });
                var processHasFlowElements = process.flowElements !== undefined && process.flowElements !== null;
                if (processHasFlowElements) {
                    firstElement = process.flowElements.find(function (element) {
                        return element.$type === 'bpmn:StartEvent';
                    });
                    if (firstElement === undefined || firstElement === null) {
                        firstElement = process.flowElements[0];
                    }
                }
                else if (_this.processHasLanes(process)) {
                    firstElement = process.laneSets[0].lanes[0];
                }
                if (!firstElement) {
                    firstElement = process;
                }
                _this.selectElementById(firstElement.id);
            });
        };
        PropertyPanel.prototype.selectElementById = function (elementId) {
            var elementRegistry = this.modeler.get('elementRegistry');
            var element = elementRegistry.get(elementId);
            if (this.viewer !== undefined) {
                this.viewer.get('selection').select(element);
            }
            else {
                this.modeler.get('selection').select(element);
            }
        };
        PropertyPanel.prototype.processHasLanes = function (process) {
            var processHasLaneSets = process.laneSets !== undefined && process.laneSets !== null;
            if (!processHasLaneSets) {
                return false;
            }
            var processHasLanes = process.laneSets[0].lanes !== undefined && process.laneSets[0].lanes !== null;
            return processHasLanes;
        };
        PropertyPanel.prototype.updateIndexTabsSuitability = function () {
            for (var _i = 0, _a = this.indextabs; _i < _a.length; _i++) {
                var indextab = _a[_i];
                indextab.canHandleElement = indextab.isSuitableForElement(this.elementInPanel);
            }
        };
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", Object)
        ], PropertyPanel.prototype, "modeler", void 0);
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", Object)
        ], PropertyPanel.prototype, "viewer", void 0);
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", String)
        ], PropertyPanel.prototype, "xml", void 0);
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", String)
        ], PropertyPanel.prototype, "diagramUri", void 0);
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", Boolean)
        ], PropertyPanel.prototype, "isEditable", void 0);
        PropertyPanel = __decorate([
            aurelia_framework_1.inject('OpenDiagramStateService'),
            __metadata("design:paramtypes", [open_diagram_state_service_1.OpenDiagramStateService])
        ], PropertyPanel);
        return PropertyPanel;
    }());
    exports.PropertyPanel = PropertyPanel;
});


;
define('text!modules/design/property-panel/property-panel.css',[],function(){return ".property-panel {\n  overflow-y: scroll;\n  border-left: 2px solid #dcdbdb; }\n";});;
define('text!modules/design/property-panel/property-panel.html',[],function(){return "<template>\n  <require from=\"./property-panel.css\"></require>\n  <div class=\"property-panel\">\n    <template repeat.for=\"indextab of indextabs\">\n      <compose view-model=\".${indextab.path}\"\n        view=\".${indextab.path}.html\"\n        model.bind=\"{modeler: modeler, elementInPanel: elementInPanel, isEditable: isEditable}\"\n        if.bind=\"indextab.canHandleElement\"\n        containerless></compose>\n    </template>\n  </div>\n</template>\n";});;
define('text!modules/design/property-panel/styles/registers.css',[],function(){return ".register_label_border {\n  border: 1px solid black; }\n\n.index-tab {\n  user-select: none; }\n";});;
define('text!modules/design/property-panel/styles/sections.css',[],function(){return ".section-panel {\n  margin-bottom: 2px;\n  background-color: #f7f7f7;\n  border-bottom: 1px solid #eee;\n  border-left: 1px solid #eee; }\n\n.panel:last-child {\n  margin-bottom: 2px;\n  border-bottom: none; }\n\n.panel__heading {\n  padding: 5px 10px;\n  font-weight: 400;\n  color: #a5a5a5;\n  user-select: none; }\n\n.panel__content {\n  padding: 5px 10px;\n  font-size: 12px; }\n\n.props-table {\n  width: 100%; }\n\n.props-table th {\n  width: 40px;\n  padding: 11px 10px 11px 0;\n  font-weight: normal;\n  color: #a5a5a5;\n  vertical-align: baseline; }\n\n.props-table td {\n  width: 100%;\n  padding: 5px 0;\n  color: #a5a5a5; }\n\n.props-input {\n  width: 100%;\n  padding-bottom: 5px;\n  margin-top: 5px;\n  background: transparent;\n  border: none;\n  border-bottom: 1px solid #e9e9e9;\n  font-weight: 400;\n  color: #5c5c5c;\n  text-overflow: ellipsis; }\n\n.props-input:disabled {\n  pointer-events: none;\n  opacity: 0.5; }\n\n.props-input::-webkit-calendar-picker-indicator {\n  opacity: 0.5; }\n\n.props-input::-webkit-calendar-picker-indicator:hover {\n  cursor: default;\n  opacity: 1;\n  background: inherit; }\n\n.props-select {\n  padding-right: 22px;\n  border-radius: 0;\n  -webkit-appearance: none;\n  -webkit-border-radius: 0px;\n  background-image: url(\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 448 512' width='14' height='14'><path d='M207.029 381.476L12.686 187.132c-9.373-9.373-9.373-24.569 0-33.941l22.667-22.667c9.357-9.357 24.522-9.375 33.901-.04L224 284.505l154.745-154.021c9.379-9.335 24.544-9.317 33.901.04l22.667 22.667c9.373 9.373 9.373 24.569 0 33.941L240.971 381.476c-9.373 9.372-24.569 9.372-33.942 0z'/></svg>\");\n  background-position: 100% 50%;\n  background-repeat: no-repeat;\n  outline: none; }\n\n.props-table--clear-button {\n  top: 2px;\n  right: 15px; }\n\n.add-context-button {\n  float: right;\n  padding: 2px 7px;\n  background-color: transparent;\n  border: none; }\n\n.add-context-button:disabled {\n  pointer-events: none;\n  opacity: 0.2;\n  color: inherit; }\n\n.remove-context-button:disabled {\n  pointer-events: none;\n  opacity: 0.2;\n  color: inherit; }\n\n.remove-context-button {\n  float: right;\n  padding: 2px 7px;\n  margin-left: 5px;\n  background-color: transparent;\n  border: none; }\n\n.key-value-delete-button {\n  padding-top: 2px;\n  background: transparent;\n  border: none; }\n\n.key-value-delete-button:disabled {\n  pointer-events: none;\n  opacity: 0.2; }\n\n.key-value-delete-button:hover:disabled {\n  pointer-events: none;\n  opacity: 0.2;\n  color: darkgrey; }\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
define('modules/dynamic-ui-checkbox-element/dynamic-ui-checkbox-element',["require", "exports", "aurelia-framework"], function (require, exports, aurelia_framework_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DynamicUiCheckboxElement = (function () {
        function DynamicUiCheckboxElement() {
        }
        DynamicUiCheckboxElement.prototype.activate = function (field) {
            this.field = field;
            var fieldHasNoValue = this.field.value === undefined;
            if (fieldHasNoValue) {
                this.field.value = this.field.defaultValue === 'true' || this.field.defaultValue === '1';
            }
        };
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", Object)
        ], DynamicUiCheckboxElement.prototype, "field", void 0);
        return DynamicUiCheckboxElement;
    }());
    exports.DynamicUiCheckboxElement = DynamicUiCheckboxElement;
});


;
define('text!modules/dynamic-ui-checkbox-element/dynamic-ui-checkbox-element.css',[],function(){return "";});;
define('text!modules/dynamic-ui-checkbox-element/dynamic-ui-checkbox-element.html',[],function(){return "<template>\n  <require from=\"./dynamic-ui-checkbox-element.css\"></require>\n  <div class=\"checkbox\">\n    <label for=\"dynamic-${field.id}\">\n      <input type=\"checkbox\" id=\"dynamic-${field.id}\" checked.bind=\"field.value\">\n      ${field.label}\n    </label>\n  </div>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
define('modules/dynamic-ui-dropdown-element/dynamic-ui-dropdown-element',["require", "exports", "aurelia-framework"], function (require, exports, aurelia_framework_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DynamicUiDropdownElement = (function () {
        function DynamicUiDropdownElement() {
        }
        DynamicUiDropdownElement.prototype.activate = function (field) {
            this.field = field;
            var fieldHasNoValue = this.field.value === undefined || this.field.value === '';
            if (fieldHasNoValue) {
                this.field.value = this.field.defaultValue;
            }
        };
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", Object)
        ], DynamicUiDropdownElement.prototype, "field", void 0);
        return DynamicUiDropdownElement;
    }());
    exports.DynamicUiDropdownElement = DynamicUiDropdownElement;
});


;
define('text!modules/dynamic-ui-dropdown-element/dynamic-ui-dropdown-element.css',[],function(){return "";});;
define('text!modules/dynamic-ui-dropdown-element/dynamic-ui-dropdown-element.html',[],function(){return "<template>\n  <require from=\"./dynamic-ui-dropdown-element.css\"></require>\n  <div class=\"form-group\">\n    <label for=\"dynamic-${field.id}\">${field.label}</label>\n    <select class=\"form-control\" id=\"dynamic-${field.id}\" value.bind=\"field.value\">\n      <option repeat.for=\"value of field.enumValues\" model.bind=\"value.name\">${value.name}</option>\n    </select>\n  </div>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
define('modules/dynamic-ui-number-element/dynamic-ui-number-element',["require", "exports", "aurelia-framework"], function (require, exports, aurelia_framework_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DynamicUiNumberElement = (function () {
        function DynamicUiNumberElement() {
        }
        DynamicUiNumberElement.prototype.activate = function (field) {
            this.field = field;
            var fieldHasNoValue = this.field.value === undefined || this.field.value === '';
            if (fieldHasNoValue) {
                this.field.value = this.field.defaultValue;
            }
        };
        DynamicUiNumberElement.prototype.fieldValueChanged = function (newValue) {
            var validPartsOfValue = /\d+/.exec("" + newValue);
            var valueHasNoValidPart = validPartsOfValue === null;
            this.fieldValue = valueHasNoValidPart ? undefined : validPartsOfValue[0];
            this.field.value = this.fieldValue;
        };
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", String)
        ], DynamicUiNumberElement.prototype, "fieldValue", void 0);
        return DynamicUiNumberElement;
    }());
    exports.DynamicUiNumberElement = DynamicUiNumberElement;
});


;
define('text!modules/dynamic-ui-number-element/dynamic-ui-number-element.css',[],function(){return "";});;
define('text!modules/dynamic-ui-number-element/dynamic-ui-number-element.html',[],function(){return "<template>\n  <require from=\"./dynamic-ui-number-element.css\"></require>\n  <div class=\"form-group\">\n    <label for=\"dynamic-${field.id}\">${field.label}</label>\n    <input type=\"text\" class=\"form-control\" placeholder.bind=\"field.defaultValue\" id=\"dynamic-${field.id}\" value.bind=\"fieldValue\">\n  </div>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
define('modules/dynamic-ui-radiobutton-element/dynamic-ui-radiobutton-element',["require", "exports", "aurelia-framework"], function (require, exports, aurelia_framework_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DynamicUiRadioButtonElement = (function () {
        function DynamicUiRadioButtonElement() {
        }
        DynamicUiRadioButtonElement.prototype.activate = function (field) {
            this.field = field;
            var fieldHasNoValues = this.field.value === undefined || this.field.value === '';
            if (fieldHasNoValues) {
                this.field.value = this.field.defaultValue;
            }
        };
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", Object)
        ], DynamicUiRadioButtonElement.prototype, "field", void 0);
        return DynamicUiRadioButtonElement;
    }());
    exports.DynamicUiRadioButtonElement = DynamicUiRadioButtonElement;
});


;
define('text!modules/dynamic-ui-radiobutton-element/dynamic-ui-radiobutton-element.css',[],function(){return "";});;
define('text!modules/dynamic-ui-radiobutton-element/dynamic-ui-radiobutton-element.html',[],function(){return "<template>\n  <require from=\"./dynamic-ui-radiobutton-element.css\"></require>\n  <label for=\"dynamic-${field.id}\">${field.label}</label>\n  <fieldset id=\"dynamic-${field.id}\">\n    <span repeat.for=\"value of field.enumValues\">\n      <input type=\"radio\" id=\"dynamic-radio-${value.value}\" name=\"${field.id}\" model.bind=\"value.value\" checked.bind=\"field.value\">\n      <label for=\"dynamic-radio-${value.value}\"> ${value.label}</label>\n    </span>\n  </fieldset>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
define('modules/dynamic-ui-textbox-element/dynamic-ui-textbox-element',["require", "exports", "aurelia-framework"], function (require, exports, aurelia_framework_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DynamicUiTextboxElement = (function () {
        function DynamicUiTextboxElement() {
        }
        DynamicUiTextboxElement.prototype.activate = function (field) {
            this.field = field;
            var fieldValueIsNotSet = this.field.value === undefined || this.field.value === '';
            if (fieldValueIsNotSet) {
                this.field.value = this.field.defaultValue;
            }
        };
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", Object)
        ], DynamicUiTextboxElement.prototype, "field", void 0);
        return DynamicUiTextboxElement;
    }());
    exports.DynamicUiTextboxElement = DynamicUiTextboxElement;
});


;
define('text!modules/dynamic-ui-textbox-element/dynamic-ui-textbox-element.css',[],function(){return ".input-label {\n  margin-top: 10px; }\n";});;
define('text!modules/dynamic-ui-textbox-element/dynamic-ui-textbox-element.html',[],function(){return "<template>\n  <require from=\"./dynamic-ui-textbox-element.css\"></require>\n  <div class=\"form-group\">\n    <label class=\"input-label\" for=\"dynamic-${field.id}\">${field.label}</label>\n    <input type=\"text\" class=\"form-control\" placeholder.bind=\"field.defaultValue\" id=\"dynamic-${field.id}\" value.bind=\"field.value\">\n  </div>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define('modules/dynamic-ui-wrapper/dynamic-ui-wrapper',["require", "exports", "aurelia-framework", "aurelia-router", "dom-event-dispatch", "@process-engine/management_api_contracts"], function (require, exports, aurelia_framework_1, aurelia_router_1, dom_event_dispatch_1, management_api_contracts_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ButtonClickActions;
    (function (ButtonClickActions) {
        ButtonClickActions["cancel"] = "cancel";
        ButtonClickActions["proceed"] = "proceed";
        ButtonClickActions["decline"] = "decline";
    })(ButtonClickActions || (ButtonClickActions = {}));
    var DynamicUiWrapper = (function () {
        function DynamicUiWrapper(dynamicUiService, router, element) {
            this.dynamicUiService = dynamicUiService;
            this.router = router;
            this.element = element;
            this.isModal = false;
        }
        DynamicUiWrapper.prototype.handleUserTaskButtonClick = function (action, userTask, results) {
            return __awaiter(this, void 0, void 0, function () {
                var actionCanceled;
                return __generator(this, function (_a) {
                    actionCanceled = action === ButtonClickActions.cancel;
                    if (actionCanceled) {
                        this.cancelTask();
                        return [2];
                    }
                    this.finishUserTask(action, userTask, results);
                    return [2];
                });
            });
        };
        DynamicUiWrapper.prototype.handleManualTaskButtonClick = function (action) {
            return __awaiter(this, void 0, void 0, function () {
                var actionCanceled;
                return __generator(this, function (_a) {
                    actionCanceled = action === ButtonClickActions.cancel;
                    if (actionCanceled) {
                        this.cancelTask();
                        return [2];
                    }
                    this.finishManualTask();
                    return [2];
                });
            });
        };
        Object.defineProperty(DynamicUiWrapper.prototype, "isHandlingManualTask", {
            get: function () {
                return this.currentManualTask !== undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicUiWrapper.prototype, "isHandlingUserTask", {
            get: function () {
                return this.currentUserTask !== undefined;
            },
            enumerable: true,
            configurable: true
        });
        DynamicUiWrapper.prototype.cancelTask = function () {
            if (this.isModal) {
                dom_event_dispatch_1.domEventDispatch.dispatchEvent(this.element, 'close-modal', { bubbles: true });
                return;
            }
            var correlationId = this.currentUserTask
                ? this.currentUserTask.correlationId
                : this.currentManualTask.correlationId;
            this.router.navigateToRoute('task-list-correlation', {
                correlationId: correlationId,
                solutionUri: this.activeSolutionEntry.uri,
            });
        };
        DynamicUiWrapper.prototype.finishUserTask = function (action, userTask, results) {
            var noUserTaskKnown = !this.isHandlingUserTask;
            if (noUserTaskKnown) {
                return;
            }
            var correlationId = userTask.correlationId, processInstanceId = userTask.processInstanceId, flowNodeInstanceId = userTask.flowNodeInstanceId;
            this.dynamicUiService.finishUserTask(this.identity, processInstanceId, correlationId, flowNodeInstanceId, results);
            this.currentUserTask = undefined;
            var buttonClickHandlerExists = this.onButtonClick !== undefined;
            if (buttonClickHandlerExists) {
                this.onButtonClick(action);
            }
        };
        DynamicUiWrapper.prototype.finishManualTask = function () {
            var noManualTaskKnown = !this.isHandlingManualTask;
            if (noManualTaskKnown) {
                return;
            }
            var correlationId = this.currentManualTask.correlationId;
            var processInstanceId = this.currentManualTask.processInstanceId;
            var manualTaskInstanceId = this.currentManualTask.flowNodeInstanceId;
            this.dynamicUiService.finishManualTask(this.identity, processInstanceId, correlationId, manualTaskInstanceId);
            this.currentManualTask = undefined;
            var buttonClickHandlerExists = this.onButtonClick !== undefined;
            if (buttonClickHandlerExists) {
                this.onButtonClick(ButtonClickActions.proceed);
            }
        };
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", management_api_contracts_1.DataModels.UserTasks.UserTask)
        ], DynamicUiWrapper.prototype, "currentUserTask", void 0);
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", management_api_contracts_1.DataModels.ManualTasks.ManualTask)
        ], DynamicUiWrapper.prototype, "currentManualTask", void 0);
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", Boolean)
        ], DynamicUiWrapper.prototype, "isModal", void 0);
        DynamicUiWrapper = __decorate([
            aurelia_framework_1.inject('DynamicUiService', aurelia_router_1.Router, Element),
            __metadata("design:paramtypes", [Object, aurelia_router_1.Router, Element])
        ], DynamicUiWrapper);
        return DynamicUiWrapper;
    }());
    exports.DynamicUiWrapper = DynamicUiWrapper;
});


;
define('text!modules/dynamic-ui-wrapper/dynamic-ui-wrapper.css',[],function(){return ".dynamic-ui__button--decline {\n  margin-left: -1px; }\n\ndynamic-usertask-component > .card {\n  border: none; }\n";});;
define('text!modules/dynamic-ui-wrapper/dynamic-ui-wrapper.html',[],function(){return "<template>\n  <require from=\"./dynamic-ui-wrapper.css\"></require>\n  <template if.bind=\"isHandlingUserTask\">\n    <dynamic-usertask-component submitted.delegate=\"handleUserTaskButtonClick('proceed', $event.detail, $event.detail.results)\"\n      canceled.delegate=\"handleUserTaskButtonClick('cancel')\"\n      usertask.bind=\"currentUserTask\">\n    </dynamic-usertask-component>\n  </template>\n  <template if.bind=\"isHandlingManualTask\">\n    <manualtask-component manualtask.bind=\"currentManualTask\"\n      continued.delegate=\"handleManualTaskButtonClick('proceed')\"\n      canceled.delegate=\"handleManualTaskButtonClick('cancel')\">\n    </manualtask-component>\n  </template>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define('modules/feedback-modal/feedback-modal',["require", "exports", "aurelia-framework", "../../services/solution-service/solution.service", "../../services/is-running-in-electron-module/is-running-in-electron.module", "../../services/solution-is-remote-solution-module/solution-is-remote-solution.module"], function (require, exports, aurelia_framework_1, solution_service_1, is_running_in_electron_module_1, solution_is_remote_solution_module_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var FeedbackModal = (function () {
        function FeedbackModal(solutionService) {
            var _this = this;
            this.bugs = '';
            this.suggestions = '';
            this.selectedDiagrams = {};
            this.additionalDiagramInformation = '';
            this.attachInternalDatabases = false;
            this.attachProcessEngineLogs = false;
            this.showSolutionList = {};
            this.sortSolutionFunction = function (solutionA, solutionB) {
                if (solutionA.uri === 'about:open-diagrams') {
                    return -1;
                }
                if (solutionB.uri === 'about:open-diagrams') {
                    return 1;
                }
                var solutionAIsRemoteSolution = solution_is_remote_solution_module_1.solutionIsRemoteSolution(solutionA.uri);
                var solutionBIsRemoteSolution = solution_is_remote_solution_module_1.solutionIsRemoteSolution(solutionB.uri);
                if (solutionAIsRemoteSolution !== solutionBIsRemoteSolution) {
                    return solutionAIsRemoteSolution ? 1 : -1;
                }
                return solutionA.name < solutionB.name ? -1 : 1;
            };
            this.solutionService = solutionService;
            if (is_running_in_electron_module_1.isRunningInElectron()) {
                this.ipcRenderer = window.nodeRequire('electron').ipcRenderer;
                this.ipcRenderer.on('show-feedback-modal', function () {
                    _this.showFeedbackModal = true;
                });
            }
        }
        Object.defineProperty(FeedbackModal.prototype, "disableCreateButton", {
            get: function () {
                return (this.bugs.trim() === '' &&
                    this.suggestions.trim() === '' &&
                    this.additionalDiagramInformation.trim() === '' &&
                    !this.attachInternalDatabases &&
                    !this.attachProcessEngineLogs &&
                    Object.keys(this.selectedDiagrams).length === 0);
            },
            enumerable: true,
            configurable: true
        });
        FeedbackModal.prototype.showFeedbackModalChanged = function () {
            if (this.showFeedbackModal) {
                this.updateSolutions();
            }
        };
        FeedbackModal.prototype.createFeedback = function () {
            var _this = this;
            var diagramsToAttach = Object.keys(this.selectedDiagrams)
                .filter(function (diagramUri) {
                return _this.selectedDiagrams[diagramUri];
            })
                .map(function (diagramUri) {
                for (var _i = 0, _a = _this.solutions; _i < _a.length; _i++) {
                    var solution = _a[_i];
                    var diagramSearchResult = solution.diagrams.find(function (diagram) {
                        return diagram.uri === diagramUri;
                    });
                    var diagramFound = diagramSearchResult !== undefined;
                    if (diagramFound) {
                        return diagramSearchResult;
                    }
                }
                return undefined;
            });
            var feedbackData = {
                bugs: this.bugs,
                suggestions: this.suggestions,
                diagrams: diagramsToAttach,
                additionalDiagramInformation: this.additionalDiagramInformation,
                attachInternalDatabases: this.attachInternalDatabases,
                attachProcessEngineLogs: this.attachProcessEngineLogs,
            };
            this.ipcRenderer.send('create-feedback-zip', feedbackData);
            this.showFeedbackModal = false;
            this.cleanupInputs();
        };
        FeedbackModal.prototype.abort = function () {
            this.showFeedbackModal = false;
            this.cleanupInputs();
        };
        FeedbackModal.prototype.toggleSolutionVisiblity = function (solutionName) {
            this.showSolutionList[solutionName] = !this.showSolutionList[solutionName];
        };
        FeedbackModal.prototype.updateSolutions = function () {
            return __awaiter(this, void 0, void 0, function () {
                var solutionEntries;
                var _this = this;
                return __generator(this, function (_a) {
                    solutionEntries = this.solutionService.getAllSolutionEntries();
                    this.solutions = [];
                    solutionEntries.forEach(function (solutionEntry) { return __awaiter(_this, void 0, void 0, function () {
                        var solution, solutionContainsDiagrams;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4, solutionEntry.service.loadSolution()];
                                case 1:
                                    solution = _a.sent();
                                    solution.cssIconClass = solutionEntry.cssIconClass;
                                    solutionContainsDiagrams = solution.diagrams.length > 0;
                                    if (solutionContainsDiagrams) {
                                        this.solutions.push(solution);
                                        this.solutions.sort(this.sortSolutionFunction);
                                        this.showSolutionList[solution.name] = true;
                                    }
                                    return [2];
                            }
                        });
                    }); });
                    return [2];
                });
            });
        };
        FeedbackModal.prototype.cleanupInputs = function () {
            this.attachInternalDatabases = false;
            this.suggestions = '';
            this.bugs = '';
            this.additionalDiagramInformation = '';
            this.selectedDiagrams = {};
            this.showSolutionList = {};
            this.showProcessModelSelection = false;
        };
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Boolean)
        ], FeedbackModal.prototype, "showFeedbackModal", void 0);
        FeedbackModal = __decorate([
            aurelia_framework_1.inject('SolutionService'),
            __metadata("design:paramtypes", [solution_service_1.SolutionService])
        ], FeedbackModal);
        return FeedbackModal;
    }());
    exports.FeedbackModal = FeedbackModal;
});


;
define('text!modules/feedback-modal/feedback-modal.css',[],function(){return ".feedback-modal__checkbox-label {\n  margin-left: 5px; }\n\n.feedback-modal__solution-title {\n  user-select: none; }\n\n.feedback-modal__text-input {\n  margin-top: 0px;\n  margin-bottom: 5px; }\n\n.feedback-modal__input-label {\n  display: inline-block;\n  margin-top: 5px; }\n\n.feedback-modal__solution {\n  margin-bottom: 5px; }\n\n.feedback-modal__solution-diagram-list {\n  margin-left: 10px; }\n\n.feedback-modal__diagram-selection {\n  margin: 5px 20px; }\n\n.feedback-modal__diagram {\n  position: relative;\n  height: 20px; }\n\n.feedback-modal__diagram-checkbox {\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%); }\n\n.feedback-modal__diagram-name {\n  position: absolute;\n  top: 50%;\n  left: 20px;\n  transform: translateY(-50%);\n  line-height: 14px; }\n\n.feedback-modal__solution-hide-icon {\n  width: 10px; }\n";});;
define('text!modules/feedback-modal/feedback-modal.html',[],function(){return "<template>\n  <require from=\"./feedback-modal.css\"></require>\n\n  <modal if.bind=\"showFeedbackModal\"\n         header-text=\"Feedback\"\n         modal-style=\"top: 10%; height: 80%;\"\n         content-style=\"height: unset;\"\n         body-style=\"max-height: 80%; overflow: scroll;\">\n  <template replace-part=\"modal-body\">\n    <div>\n      <span class=\"feedback-modal__input-label\">What problems did you experience while working with the BPMN Studio?</span>\n      <textarea type=\"text\" class=\"form-control input-field feedback-modal__text-input\" aria-multiline=\"true\" value.bind=\"bugs\"></textarea>\n    </div>\n    <div>\n      <span class=\"feedback-modal__input-label\">Do you have any suggestions for improving the BPMN Studio?</span>\n      <textarea type=\"text\" class=\"form-control input-field feedback-modal__text-input\" aria-multiline=\"true\" value.bind=\"suggestions\"></textarea>\n    </div>\n    <div>\n      <input type=\"checkbox\" class=\"feedback-modal__checkbox\" checked.bind=\"attachInternalDatabases\"/>\n      <span class=\"feedback-modal__checkbox-label\">Attach the databases of the internal ProcessEngine</span>\n      <i class=\"fas fa-info-circle feedback-modal__help-icon\" title=\"If you have a problem with deployed diagrams, attaching the databases is probably helpful.\"></i>\n    </div>\n    <div>\n      <input type=\"checkbox\" class=\"feedback-modal__checkbox\" checked.bind=\"attachProcessEngineLogs\"/>\n      <span class=\"feedback-modal__checkbox-label\">Attach the logs of the internal ProcessEngine</span>\n      <i class=\"fas fa-info-circle feedback-modal__help-icon\" title=\"If you have a problem with the internal ProcessEngine, attaching its logs is probable helpful.\"></i>\n    </div>\n    <div>\n      <input type=\"checkbox\" class=\"feedback-modal__checkbox\" checked.bind=\"showProcessModelSelection\"/>\n      <span class=\"feedback-modal__checkbox-label\">Attach diagrams</span>\n      <div if.bind=\"showProcessModelSelection\" class=\"feedback-modal__diagram-selection\">\n        <div repeat.for=\"solution of solutions\" class=\"feedback-modal__solution\">\n          <div class=\"feedback-modal__solution-title\" click.delegate=\"toggleSolutionVisiblity(solution.name)\">\n            <i class=\"fas feedback-modal__solution-hide-icon\" class.bind=\"showSolutionList[solution.name] ? 'fa-angle-down' : 'fa-angle-right'\"></i> <i class.bind=\"solution.cssIconClass\"></i> ${solution.name}\n          </div>\n          <div class=\"feedback-modal__solution-diagram-list\">\n            <div show.bind=\"showSolutionList[solution.name]\" repeat.for=\"diagram of solution.diagrams\" class=\"feedback-modal__diagram\">\n              <input type=\"checkbox\" class=\"feedback-modal__checkbox feedback-modal__diagram-checkbox\" checked.bind=\"selectedDiagrams[diagram.uri]\"/><span class=\"feedback-modal__diagram-name\">${diagram.name}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div show.bind=\"showProcessModelSelection\">\n        <span class=\"feedback-modal__input-label\">Is additional information required for the attached diagrams?</span>\n        <textarea type=\"text\" class=\"form-control input-field feedback-modal__textarea\" aria-multiline=\"true\" value.bind=\"additionalDiagramInformation\"></textarea>\n      </div>\n    </div>\n  </template>\n  <template replace-part=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" click.delegate=\"abort()\">Cancel</button>\n    <button type=\"button\" class=\"btn btn-primary\" data-dismiss=\"modal\" click.delegate=\"createFeedback()\" disabled.bind=\"disableCreateButton\">Create</button>\n  </template>\n  </modal>\n</template>\n";});;
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
define('modules/fetch-http-client/http-fetch-client',["require", "exports", "@essential-projects/errors_ts"], function (require, exports, EssentialProjectErrors) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    EssentialProjectErrors = __importStar(EssentialProjectErrors);
    var HttpFetchClient = (function () {
        function HttpFetchClient() {
            this.httpSuccessResponseCode = 200;
            this.httpRedirectResponseCode = 300;
        }
        HttpFetchClient.prototype.get = function (url, options) {
            return __awaiter(this, void 0, void 0, function () {
                var headers, request, response, parsedResponse;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            headers = this.buildHeaders(options);
                            request = new Request(url, {
                                method: 'GET',
                                mode: 'cors',
                                referrer: 'no-referrer',
                                headers: headers,
                            });
                            return [4, fetch(request)];
                        case 1:
                            response = _a.sent();
                            return [4, this.evaluateResponse(response)];
                        case 2:
                            parsedResponse = _a.sent();
                            return [2, parsedResponse];
                    }
                });
            });
        };
        HttpFetchClient.prototype.post = function (url, data, options) {
            return __awaiter(this, void 0, void 0, function () {
                var headers, request, response, parsedResponse;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            headers = this.buildHeaders(options);
                            request = new Request(url, {
                                method: 'POST',
                                mode: 'cors',
                                referrer: 'no-referrer',
                                headers: headers,
                                body: JSON.stringify(data),
                            });
                            return [4, fetch(request)];
                        case 1:
                            response = _a.sent();
                            return [4, this.evaluateResponse(response)];
                        case 2:
                            parsedResponse = _a.sent();
                            return [2, parsedResponse];
                    }
                });
            });
        };
        HttpFetchClient.prototype.put = function (url, data, options) {
            return __awaiter(this, void 0, void 0, function () {
                var headers, request, response, parsedResponse;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            headers = this.buildHeaders(options);
                            request = new Request(url, {
                                method: 'PUT',
                                mode: 'cors',
                                referrer: 'no-referrer',
                                headers: headers,
                                body: JSON.stringify(data),
                            });
                            return [4, fetch(request)];
                        case 1:
                            response = _a.sent();
                            return [4, this.evaluateResponse(response)];
                        case 2:
                            parsedResponse = _a.sent();
                            return [2, parsedResponse];
                    }
                });
            });
        };
        HttpFetchClient.prototype.delete = function (url, options) {
            return __awaiter(this, void 0, void 0, function () {
                var headers, request, response, parsedResponse;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            headers = this.buildHeaders(options);
                            request = new Request(url, {
                                method: 'DELETE',
                                mode: 'cors',
                                referrer: 'no-referrer',
                                headers: headers,
                            });
                            return [4, fetch(request)];
                        case 1:
                            response = _a.sent();
                            return [4, this.evaluateResponse(response)];
                        case 2:
                            parsedResponse = _a.sent();
                            return [2, parsedResponse];
                    }
                });
            });
        };
        HttpFetchClient.prototype.buildHeaders = function (options) {
            var _a;
            var headers = {
                'Access-Control-Allow-Origin': '*',
                'Content-Type': 'application/json',
            };
            if (((_a = options) === null || _a === void 0 ? void 0 : _a.headers) != undefined) {
                var optionHeaders = Object.keys(options.headers);
                for (var _i = 0, optionHeaders_1 = optionHeaders; _i < optionHeaders_1.length; _i++) {
                    var header = optionHeaders_1[_i];
                    headers[header] = options.headers[header];
                }
            }
            return headers;
        };
        HttpFetchClient.prototype.evaluateResponse = function (response) {
            return __awaiter(this, void 0, void 0, function () {
                var body, parsedResponse;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, response.text()];
                        case 1:
                            body = _a.sent();
                            if (this.responseIsAnError(response)) {
                                this.createAndThrowError(response.status, body);
                            }
                            parsedResponse = {
                                result: this.tryParseStringtoJson(body),
                                status: response.status,
                            };
                            return [2, parsedResponse];
                    }
                });
            });
        };
        HttpFetchClient.prototype.responseIsAnError = function (response) {
            return response.status < this.httpSuccessResponseCode || response.status >= this.httpRedirectResponseCode;
        };
        HttpFetchClient.prototype.createAndThrowError = function (statusCode, body) {
            var errorName = EssentialProjectErrors.ErrorCodes[statusCode];
            var errorInfo = this.tryParseStringtoJson(body);
            if (typeof errorInfo === 'string') {
                this.throwErrorFromString(errorName, errorInfo);
            }
            this.throwErrorFromObject(errorName, errorInfo);
        };
        HttpFetchClient.prototype.tryParseStringtoJson = function (result) {
            try {
                return JSON.parse(result);
            }
            catch (error) {
                return result;
            }
        };
        HttpFetchClient.prototype.throwErrorFromString = function (errorName, message) {
            throw this.isEssentialProjectsError(errorName)
                ? new EssentialProjectErrors[errorName](message)
                : new EssentialProjectErrors.InternalServerError(message);
        };
        HttpFetchClient.prototype.throwErrorFromObject = function (errorName, errorInfo) {
            if (this.isEssentialProjectsError(errorName)) {
                this.throwEssentialProjectsError(errorName, errorInfo);
            }
            this.throwNonEssentialProjectsError(errorInfo);
        };
        HttpFetchClient.prototype.throwEssentialProjectsError = function (errorName, errorInfo) {
            var essentialProjectsError = new EssentialProjectErrors[errorName](errorInfo.message);
            essentialProjectsError.additionalInformation = errorInfo.additionalInformation;
            throw essentialProjectsError;
        };
        HttpFetchClient.prototype.throwNonEssentialProjectsError = function (error) {
            throw new Error(error.message);
        };
        HttpFetchClient.prototype.isEssentialProjectsError = function (errorName) {
            return errorName in EssentialProjectErrors;
        };
        return HttpFetchClient;
    }());
    exports.HttpFetchClient = HttpFetchClient;
});


;
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define('modules/fetch-http-client/index',["require", "exports", "./http-fetch-client"], function (require, exports, http_fetch_client_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function configure(config) {
        return __awaiter(this, void 0, void 0, function () {
            var httpFetchClient;
            return __generator(this, function (_a) {
                httpFetchClient = new http_fetch_client_1.HttpFetchClient();
                config.container.registerInstance('HttpFetchClient', httpFetchClient);
                return [2];
            });
        });
    }
    exports.configure = configure;
});


;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
define('modules/form-widget/form-widget',["require", "exports", "@process-engine/management_api_contracts", "aurelia-framework", "../../contracts/index", "../../services/notification-service/notification.service"], function (require, exports, management_api_contracts_1, aurelia_framework_1, index_1, notification_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var FormWidget = (function () {
        function FormWidget(notificationService) {
            this.notificationService = notificationService;
        }
        FormWidget.prototype.getFieldControl = function (field) {
            switch (field.type) {
                case management_api_contracts_1.DataModels.UserTasks.UserTaskFormFieldType.enum:
                    return 'dropdown';
                case management_api_contracts_1.DataModels.UserTasks.UserTaskFormFieldType.string:
                    return 'textbox';
                case management_api_contracts_1.DataModels.UserTasks.UserTaskFormFieldType.boolean:
                    return 'checkbox';
                case management_api_contracts_1.DataModels.UserTasks.UserTaskFormFieldType.long:
                    return 'number';
                default:
                    this.showNotSupportedMessage(field);
                    return null;
            }
        };
        FormWidget.prototype.showNotSupportedMessage = function (field) {
            var formFieldHasCustomType = field.type === undefined;
            var notSupportedType = formFieldHasCustomType ? 'Custom Type' : field.type;
            var errorMessage = "Not supported form field type: " + notSupportedType + "." +
                ("</br>Please change the form field type with id \"" + field.id + "\".");
            this.notificationService.showNotification(index_1.NotificationType.ERROR, errorMessage);
        };
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", management_api_contracts_1.DataModels.UserTasks.UserTaskConfig)
        ], FormWidget.prototype, "userTaskConfig", void 0);
        FormWidget = __decorate([
            aurelia_framework_1.inject('NotificationService'),
            __metadata("design:paramtypes", [notification_service_1.NotificationService])
        ], FormWidget);
        return FormWidget;
    }());
    exports.FormWidget = FormWidget;
});


;
define('text!modules/form-widget/form-widget.css',[],function(){return "";});;
define('text!modules/form-widget/form-widget.html',[],function(){return "<template>\n  <require from=\"./form-widget.css\"></require>\n  <template if.bind=\"userTaskConfig\">\n    <template repeat.for=\"field of userTaskConfig.formFields\">\n      <compose view-model=\"../dynamic-ui-${getFieldControl(field)}-element/dynamic-ui-${getFieldControl(field)}-element\" model.bind=\"field\"></compose>\n    </template>  \n  </template>          \n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/inspect/cronjob-list/cronjob-list',["require", "exports", "aurelia-framework", "bluebird", "@essential-projects/errors_ts", "../../../contracts/index", "../../../environment", "../../../services/date-service/date.service", "../../../services/process-engine-version-module/process-engine-version.module", "../../../services/solution-is-remote-solution-module/solution-is-remote-solution.module"], function (require, exports, aurelia_framework_1, Bluebird, errors_ts_1, index_1, environment_1, date_service_1, process_engine_version_module_1, solution_is_remote_solution_module_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    Bluebird = __importStar(Bluebird);
    environment_1 = __importDefault(environment_1);
    var CronjobList = (function () {
        function CronjobList(dashboardService, solutionService) {
            this.initialLoadingFinished = false;
            this.currentPage = 1;
            this.pageSize = 10;
            this.paginationSize = 10;
            this.dashboardServiceSubscriptions = [];
            this.cronjobsToDisplay = [];
            this.dashboardService = dashboardService;
            this.solutionService = solutionService;
        }
        CronjobList.prototype.activeSolutionEntryChanged = function (newSolutionEntry, previousActiveSolutionEntry) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!newSolutionEntry.uri.includes('http')) {
                                return [2];
                            }
                            if (!this.isAttached) {
                                return [2];
                            }
                            if (this.updatePromise) {
                                this.updatePromise.cancel();
                            }
                            this.removeRuntimeSubscriptions();
                            if (process_engine_version_module_1.processEngineSupportsCronjobEvents(this.activeSolutionEntry.processEngineVersion)) {
                                clearTimeout(this.pollingTimeout);
                                this.setRuntimeSubscriptions();
                            }
                            else {
                                this.startPolling();
                            }
                            if (this.solutionEventListenerId !== undefined) {
                                previousActiveSolutionEntry.service.unwatchSolution(this.solutionEventListenerId);
                            }
                            this.solutionEventListenerId = this.activeSolutionEntry.service.watchSolution(function () {
                                _this.updateCronjobs();
                            });
                            this.cronjobsToDisplay = [];
                            this.initialLoadingFinished = false;
                            this.showError = false;
                            this.dashboardService.eventAggregator.publish(environment_1.default.events.configPanel.solutionEntryChanged, newSolutionEntry);
                            return [4, this.updateCronjobs()];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        CronjobList.prototype.attached = function () {
            return __awaiter(this, void 0, void 0, function () {
                var activeSolutionUriIsNotSet, activeSolutionUriIsNotRemote, activeSolutionUri, subscriptionNeedsToBeSet;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.isAttached = true;
                            activeSolutionUriIsNotSet = this.activeSolutionEntry === undefined || this.activeSolutionEntry.uri === undefined;
                            activeSolutionUriIsNotRemote = !solution_is_remote_solution_module_1.solutionIsRemoteSolution(this.activeSolutionEntry.uri);
                            if (activeSolutionUriIsNotSet || activeSolutionUriIsNotRemote) {
                                activeSolutionUri = window.localStorage.getItem('InternalProcessEngineRoute');
                                this.activeSolutionEntry = this.solutionService.getSolutionEntryForUri(activeSolutionUri);
                            }
                            return [4, this.updateCronjobs()];
                        case 1:
                            _a.sent();
                            if (process_engine_version_module_1.processEngineSupportsCronjobEvents(this.activeSolutionEntry.processEngineVersion)) {
                                subscriptionNeedsToBeSet = this.dashboardServiceSubscriptions.length === 0;
                                if (subscriptionNeedsToBeSet) {
                                    this.setRuntimeSubscriptions();
                                }
                            }
                            else {
                                this.startPolling();
                            }
                            this.subscriptions = [
                                this.dashboardService.eventAggregator.subscribe(index_1.AuthenticationStateEvent.LOGIN, function () { return __awaiter(_this, void 0, void 0, function () {
                                    var needsToRenewSubscriptions;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                needsToRenewSubscriptions = process_engine_version_module_1.processEngineSupportsCronjobEvents(this.activeSolutionEntry.processEngineVersion);
                                                if (needsToRenewSubscriptions) {
                                                    this.removeRuntimeSubscriptions();
                                                }
                                                return [4, this.updateCronjobs()];
                                            case 1:
                                                _a.sent();
                                                if (needsToRenewSubscriptions) {
                                                    this.setRuntimeSubscriptions();
                                                }
                                                return [2];
                                        }
                                    });
                                }); }),
                            ];
                            if (this.solutionEventListenerId === undefined) {
                                this.solutionEventListenerId = this.activeSolutionEntry.service.watchSolution(function () {
                                    _this.updateCronjobs();
                                });
                            }
                            return [2];
                    }
                });
            });
        };
        CronjobList.prototype.detached = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _i, _a, subscription;
                return __generator(this, function (_b) {
                    for (_i = 0, _a = this.subscriptions; _i < _a.length; _i++) {
                        subscription = _a[_i];
                        subscription.dispose();
                    }
                    this.isAttached = false;
                    this.stopPolling();
                    if (this.solutionEventListenerId !== undefined && !this.activeSolutionEntry.isOpenDiagram) {
                        this.activeSolutionEntry.service.unwatchSolution(this.solutionEventListenerId);
                    }
                    this.removeRuntimeSubscriptions();
                    return [2];
                });
            });
        };
        CronjobList.prototype.currentPageChanged = function (newValue, oldValue) {
            var paginationIsInitialized = oldValue === undefined;
            if (!this.isAttached || paginationIsInitialized) {
                return;
            }
            if (this.updatePromise) {
                this.updatePromise.cancel();
            }
            this.updateCronjobs();
        };
        Object.defineProperty(CronjobList.prototype, "showCronjobList", {
            get: function () {
                return this.cronjobsToDisplay !== undefined && this.cronjobsToDisplay.length > 0;
            },
            enumerable: true,
            configurable: true
        });
        CronjobList.prototype.getBeautifiedDate = function (date) {
            var beautifiedDate = date_service_1.getBeautifiedDate(date);
            return beautifiedDate;
        };
        CronjobList.prototype.updateCronjobs = function () {
            return __awaiter(this, void 0, void 0, function () {
                var cronjobList, error_1, errorIsForbiddenError, errorIsUnauthorizedError, errorIsAuthenticationRelated;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            this.updatePromise = this.getCronjobList();
                            return [4, this.updatePromise];
                        case 1:
                            cronjobList = _a.sent();
                            this.cronjobsToDisplay = cronjobList.cronjobs.sort(this.sortCronjobs);
                            this.totalItems = cronjobList.totalCount;
                            this.initialLoadingFinished = true;
                            this.paginationShowsLoading = false;
                            return [3, 3];
                        case 2:
                            error_1 = _a.sent();
                            this.initialLoadingFinished = true;
                            errorIsForbiddenError = errors_ts_1.isError(error_1, errors_ts_1.ForbiddenError);
                            errorIsUnauthorizedError = errors_ts_1.isError(error_1, errors_ts_1.UnauthorizedError);
                            errorIsAuthenticationRelated = errorIsForbiddenError || errorIsUnauthorizedError;
                            if (!errorIsAuthenticationRelated) {
                                this.cronjobsToDisplay = [];
                                this.totalItems = 0;
                                this.showError = true;
                            }
                            return [3, 3];
                        case 3: return [2];
                    }
                });
            });
        };
        CronjobList.prototype.getCronjobList = function () {
            var _this = this;
            return new Bluebird.Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                var paginationGetsDisplayed, pageIndex, cronjobOffset, cronjobList, error_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            paginationGetsDisplayed = this.totalItems > this.pageSize;
                            pageIndex = paginationGetsDisplayed ? this.currentPage - 1 : 0;
                            cronjobOffset = pageIndex * this.pageSize;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4, this.dashboardService.getAllActiveCronjobs(this.activeSolutionEntry.identity, cronjobOffset, this.pageSize)];
                        case 2:
                            cronjobList = _a.sent();
                            resolve(cronjobList);
                            return [3, 4];
                        case 3:
                            error_2 = _a.sent();
                            reject(error_2);
                            return [3, 4];
                        case 4: return [2];
                    }
                });
            }); });
        };
        CronjobList.prototype.stopPolling = function () {
            clearTimeout(this.pollingTimeout);
        };
        CronjobList.prototype.sortCronjobs = function (firstCronjob, secondCronjob) {
            return firstCronjob.nextExecution.getTime() - secondCronjob.nextExecution.getTime();
        };
        CronjobList.prototype.startPolling = function () {
            var _this = this;
            this.pollingTimeout = setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.updateCronjobs()];
                        case 1:
                            _a.sent();
                            if (this.isAttached) {
                                this.startPolling();
                            }
                            return [2];
                    }
                });
            }); }, environment_1.default.processengine.dashboardPollingIntervalInMs);
        };
        CronjobList.prototype.setRuntimeSubscriptions = function () {
            return __awaiter(this, void 0, void 0, function () {
                var subscriptionsExist, _a, _b;
                var _this = this;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            subscriptionsExist = this.dashboardServiceSubscriptions.length > 0;
                            if (subscriptionsExist) {
                                this.removeRuntimeSubscriptions();
                            }
                            this.identitiyUsedForSubscriptions = this.activeSolutionEntry.identity;
                            _a = this;
                            return [4, this.dashboardService.onCronjobCreated(this.activeSolutionEntry.identity, function (message) { return __awaiter(_this, void 0, void 0, function () {
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4, this.updateCronjobs()];
                                            case 1:
                                                _a.sent();
                                                return [2];
                                        }
                                    });
                                }); })];
                        case 1:
                            _b = [
                                _c.sent()
                            ];
                            return [4, this.dashboardService.onCronjobExecuted(this.activeSolutionEntry.identity, function (message) { return __awaiter(_this, void 0, void 0, function () {
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4, this.updateCronjobs()];
                                            case 1:
                                                _a.sent();
                                                return [2];
                                        }
                                    });
                                }); })];
                        case 2:
                            _b = _b.concat([
                                _c.sent()
                            ]);
                            return [4, this.dashboardService.onCronjobStopped(this.activeSolutionEntry.identity, function (message) { return __awaiter(_this, void 0, void 0, function () {
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4, this.updateCronjobs()];
                                            case 1:
                                                _a.sent();
                                                return [2];
                                        }
                                    });
                                }); })];
                        case 3:
                            _b = _b.concat([
                                _c.sent()
                            ]);
                            return [4, this.dashboardService.onCronjobUpdated(this.activeSolutionEntry.identity, function (message) { return __awaiter(_this, void 0, void 0, function () {
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4, this.updateCronjobs()];
                                            case 1:
                                                _a.sent();
                                                return [2];
                                        }
                                    });
                                }); })];
                        case 4:
                            _b = _b.concat([
                                _c.sent()
                            ]);
                            return [4, this.dashboardService.onCronjobRemoved(this.activeSolutionEntry.identity, function (message) { return __awaiter(_this, void 0, void 0, function () {
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4, this.updateCronjobs()];
                                            case 1:
                                                _a.sent();
                                                return [2];
                                        }
                                    });
                                }); })];
                        case 5:
                            _a.dashboardServiceSubscriptions = _b.concat([
                                _c.sent()
                            ]);
                            return [2];
                    }
                });
            });
        };
        CronjobList.prototype.removeRuntimeSubscriptions = function () {
            for (var _i = 0, _a = this.dashboardServiceSubscriptions; _i < _a.length; _i++) {
                var subscription = _a[_i];
                this.dashboardService.removeSubscription(this.identitiyUsedForSubscriptions, subscription);
            }
            this.dashboardServiceSubscriptions = [];
        };
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Object)
        ], CronjobList.prototype, "activeSolutionEntry", void 0);
        __decorate([
            aurelia_framework_1.observable,
            __metadata("design:type", Number)
        ], CronjobList.prototype, "currentPage", void 0);
        __decorate([
            aurelia_framework_1.computedFrom('cronjobsToDisplay.length'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [])
        ], CronjobList.prototype, "showCronjobList", null);
        CronjobList = __decorate([
            aurelia_framework_1.inject('DashboardService', 'SolutionService'),
            __metadata("design:paramtypes", [Object, Object])
        ], CronjobList);
        return CronjobList;
    }());
    exports.CronjobList = CronjobList;
});


;
define('text!modules/inspect/cronjob-list/cronjob-list.css',[],function(){return ".cronjob-list__last-table-cell {\n  width: 1%;\n  white-space: nowrap; }\n\n.pagination {\n  padding-right: 0px;\n  justify-content: center; }\n\n.loading-spinner {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 100px; }\n\n.cronjob-list-container {\n  flex: 1; }\n\n.cronjob-list-item-modelname {\n  color: inherit;\n  cursor: default; }\n\n.cronjob-list-header {\n  margin-top: 10px;\n  margin-bottom: 10px; }\n\n.cronjob-list-total-count {\n  float: right; }\n\n.cronjob-list__no-cronjobs-text--error {\n  color: darkred; }\n";});;
define('text!modules/inspect/cronjob-list/cronjob-list.html',[],function(){return "<template>\n  <require from=\"./cronjob-list.css\"></require>\n  <require from=\"../../pagination/pagination\"></require>\n  <div class=\"cronhob-list-container\" id=\"cronhobListContainer\">\n    <h4 class=\"cronjob-list-header\">Cronjobs</h4>\n    <div if.bind=\"showCronjobList && initialLoadingFinished\">\n      <h6 class=\"cronjob-list-total-count\">Total: ${totalItems}</h6>\n      <table class=\"table table-striped table-bordered\">\n        <tr>\n          <th>Process Model ID</th>\n          <th>Start Event ID</th>\n          <th>Crontab</th>\n          <th>Next Execution</th>\n        </tr>\n        <tr repeat.for=\"cronjob of cronjobsToDisplay\" class=\"cronjob-list-item\" id=\"cronjobList-${cronjob.processModelId}\">\n          <td>\n            <a route-href=\"route: design; params.bind: { view: 'detail', diagramName: cronjob.processModelId, solutionUri: activeSolutionEntry.uri }\" class=\"cronjob-list-item-modelname\">${cronjob.processModelId}</a>\n          </td>\n          <td>\n            <a>${cronjob.startEventId}</a>\n          </td>\n          <td>\n            <a>${cronjob.crontab}</a>\n          </td>\n          <td>\n            <a>${getBeautifiedDate(cronjob.nextExecution)}</a>\n          </td>\n        </tr>\n      </table>\n      <div class=\"col-md-12 col-xs-12 pagination\">\n        <pagination show.bind=\"totalItems > pageSize\" view-model.ref=\"pagination\" current-page.two-way=\"currentPage\" per-page.to-view=\"pageSize\" items.to-view=\"totalItems\" max-pages-to-display.to-view=\"paginationSize\" content-is-async.bind=\"true\" is-loading.two-way=\"paginationShowsLoading\"></pagination>\n      </div>\n    </div>\n    <template if.bind=\"initialLoadingFinished && !showCronjobList\">\n      <span if.bind=\"showError\" class=\"cronjob-list__no-cronjobs-text cronjob-list__no-cronjobs-text--error\">There was an error while receiving the cronjobs.</span>\n      <span else class=\"cronjob-list__no-cronjobs-text\">No active cronjobs found for this user.</span>\n    </template>\n    <div if.bind=\"!initialLoadingFinished\" class=\"container\">\n      <img src=\"src/resources/images/gears.svg\" class=\"loading-spinner\">\n    </div>\n  </div>\n</template>\n";});;
define('modules/inspect/dashboard/contracts/IDashboardRepository',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('modules/inspect/dashboard/contracts/IDashboardService',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('modules/inspect/dashboard/contracts/TaskList',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('modules/inspect/dashboard/contracts/TaskListEntry',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('modules/inspect/dashboard/contracts/TaskSource',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('modules/inspect/dashboard/contracts/constants',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TaskType;
    (function (TaskType) {
        TaskType["UserTask"] = "UserTask";
        TaskType["ManualTask"] = "ManualTask";
        TaskType["EmptyActivity"] = "EmptyActivity";
    })(TaskType = exports.TaskType || (exports.TaskType = {}));
});


;
define('modules/inspect/dashboard/contracts/index',["require", "exports", "./constants"], function (require, exports, constants_1) {
    "use strict";
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(constants_1);
});


;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
define('modules/inspect/dashboard/dashboard',["require", "exports", "aurelia-framework", "../../../services/process-engine-version-module/process-engine-version.module", "../../../services/solution-is-remote-solution-module/solution-is-remote-solution.module"], function (require, exports, aurelia_framework_1, process_engine_version_module_1, solution_is_remote_solution_module_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Dashboard = (function () {
        function Dashboard() {
            this.showCronjobList = false;
        }
        Dashboard.prototype.attached = function () {
            var isRemoteSolution = solution_is_remote_solution_module_1.solutionIsRemoteSolution(this.activeSolutionEntry.uri);
            var internalProcessEngineVersion = localStorage.getItem('InternalProcessEngineVersion');
            var processEngineVersion = isRemoteSolution
                ? this.activeSolutionEntry.processEngineVersion
                : internalProcessEngineVersion;
            var activeSolutionHasVersion = processEngineVersion !== undefined;
            this.showCronjobList = activeSolutionHasVersion ? process_engine_version_module_1.processEngineSupportsCronjobs(processEngineVersion) : false;
        };
        Dashboard.prototype.activeSolutionEntryChanged = function () {
            if (!solution_is_remote_solution_module_1.solutionIsRemoteSolution(this.activeSolutionEntry.uri)) {
                return;
            }
            var processEngineVersion = this.activeSolutionEntry.processEngineVersion;
            var activeSolutionHasVersion = processEngineVersion !== undefined;
            this.showCronjobList = activeSolutionHasVersion ? process_engine_version_module_1.processEngineSupportsCronjobs(processEngineVersion) : false;
        };
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", Object)
        ], Dashboard.prototype, "activeSolutionEntry", void 0);
        return Dashboard;
    }());
    exports.Dashboard = Dashboard;
});


;
define('text!modules/inspect/dashboard/dashboard.css',[],function(){return ".dashboard-container {\n  overflow: auto;\n  height: 100%;\n  padding: 20px 60px; }\n\n.dashboard__last-table-cell {\n  width: 1%;\n  white-space: nowrap; }\n\n.loading-spinner {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 100px; }\n\n.task-list-container {\n  flex: 1; }\n\n.task-list {\n  display: flex;\n  align-items: stretch; }\n";});;
define('text!modules/inspect/dashboard/dashboard.html',[],function(){return "<template>\n  <require from=\"./dashboard.css\"></require>\n  <require from=\"../task-list/task-list\"></require>\n  <require from=\"../process-list/process-list\"></require>\n  <require from=\"../cronjob-list/cronjob-list\"></require>\n\n  <div class=\"dashboard-container\" id=\"dashboardContainer\">\n    <process-list active-solution-entry.bind=\"activeSolutionEntry\"></process-list>\n    <task-list active-solution-entry.bind=\"activeSolutionEntry\"></task-list>\n    <cronjob-list active-solution-entry.to-view=\"activeSolutionEntry\" if.bind=\"showCronjobList\"></cronjob-list>\n  </div>\n\n</template>\n";});;
define('modules/inspect/dashboard/index',["require", "exports", "aurelia-event-aggregator", "./services/dashboard.service"], function (require, exports, aurelia_event_aggregator_1, dashboard_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function configure(config) {
        var eventAggregator = config.container.get(aurelia_event_aggregator_1.EventAggregator);
        var managementApiClient = config.container.get('ManagementApiClientService');
        var dashboardService = new dashboard_service_1.DashboardService(eventAggregator, managementApiClient);
        config.container.registerInstance('DashboardService', dashboardService);
    }
    exports.configure = configure;
});


;
define('modules/inspect/dashboard/repositories/dashboard-repository-factory',["require", "exports", "../../../../services/process-engine-version-module/process-engine-version.module", "./dashboard.pagination-repository", "./dashboard.repository"], function (require, exports, process_engine_version_module_1, dashboard_pagination_repository_1, dashboard_repository_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function createDashboardRepository(managementApiClient, runtimeVersion) {
        if (process_engine_version_module_1.processEngineSupportsPagination(runtimeVersion)) {
            return new dashboard_pagination_repository_1.DashboardPaginationRepository(managementApiClient);
        }
        return new dashboard_repository_1.DashboardRepository(managementApiClient);
    }
    exports.createDashboardRepository = createDashboardRepository;
});


;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define('modules/inspect/dashboard/repositories/dashboard.pagination-repository',["require", "exports", "@process-engine/management_api_contracts", "./dashboard.repository", "../contracts/index"], function (require, exports, management_api_contracts_1, dashboard_repository_1, index_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DashboardPaginationRepository = (function (_super) {
        __extends(DashboardPaginationRepository, _super);
        function DashboardPaginationRepository() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DashboardPaginationRepository.prototype.getAllActiveProcessInstances = function (identity, offset, limit) {
            return this.managementApiClient.getProcessInstancesByState(identity, management_api_contracts_1.DataModels.Correlations.CorrelationState.running, offset, limit);
        };
        DashboardPaginationRepository.prototype.getProcessModels = function (identity) {
            return this.managementApiClient.getProcessModels(identity);
        };
        DashboardPaginationRepository.prototype.getAllActiveCronjobs = function (identity, offset, limit) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, this.managementApiClient.getAllActiveCronjobs(identity, offset, limit)];
                });
            });
        };
        DashboardPaginationRepository.prototype.getActiveCorrelations = function (identity, offset, limit) {
            return this.managementApiClient.getActiveCorrelations(identity, offset, limit);
        };
        DashboardPaginationRepository.prototype.getManualTasksForProcessModel = function (identity, processModelId) {
            return this.managementApiClient.getManualTasksForProcessModel(identity, processModelId);
        };
        DashboardPaginationRepository.prototype.getEmptyActivitiesForProcessModel = function (identity, processModelId) {
            return this.managementApiClient.getEmptyActivitiesForProcessModel(identity, processModelId);
        };
        DashboardPaginationRepository.prototype.getUserTasksForProcessModel = function (identity, processModelId) {
            return this.managementApiClient.getUserTasksForProcessModel(identity, processModelId);
        };
        DashboardPaginationRepository.prototype.getManualTasksForCorrelation = function (identity, correlationId) {
            return this.managementApiClient.getManualTasksForCorrelation(identity, correlationId);
        };
        DashboardPaginationRepository.prototype.getEmptyActivitiesForCorrelation = function (identity, correlationId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, this.managementApiClient.getEmptyActivitiesForCorrelation(identity, correlationId)];
                });
            });
        };
        DashboardPaginationRepository.prototype.getUserTasksForCorrelation = function (identity, correlationId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, this.managementApiClient.getUserTasksForCorrelation(identity, correlationId)];
                });
            });
        };
        DashboardPaginationRepository.prototype.getManualTasksForProcessInstance = function (identity, correlationId) {
            return this.managementApiClient.getManualTasksForProcessInstance(identity, correlationId);
        };
        DashboardPaginationRepository.prototype.getEmptyActivitiesForProcessInstance = function (identity, correlationId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, this.managementApiClient.getEmptyActivitiesForProcessInstance(identity, correlationId)];
                });
            });
        };
        DashboardPaginationRepository.prototype.getUserTasksForProcessInstance = function (identity, correlationId) {
            return this.managementApiClient.getUserTasksForProcessInstance(identity, correlationId);
        };
        DashboardPaginationRepository.prototype.getAllSuspendedTasks = function (identity, offset, limit) {
            return __awaiter(this, void 0, void 0, function () {
                var tasks, taskListEntries, taskList;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.managementApiClient.getAllSuspendedTasks(identity, offset, limit)];
                        case 1:
                            tasks = _a.sent();
                            taskListEntries = this.mapTaskListToTaskListEntry(tasks);
                            taskList = {
                                taskListEntries: taskListEntries,
                                totalCount: tasks.totalCount,
                            };
                            return [2, taskList];
                    }
                });
            });
        };
        DashboardPaginationRepository.prototype.getSuspendedTasksForProcessInstance = function (identity, processInstanceId, offset, limit) {
            return __awaiter(this, void 0, void 0, function () {
                var tasks, taskListEntries, taskList;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.managementApiClient.getSuspendedTasksForProcessInstance(identity, processInstanceId, offset, limit)];
                        case 1:
                            tasks = _a.sent();
                            taskListEntries = this.mapTaskListToTaskListEntry(tasks);
                            taskList = {
                                taskListEntries: taskListEntries,
                                totalCount: tasks.totalCount,
                            };
                            return [2, taskList];
                    }
                });
            });
        };
        DashboardPaginationRepository.prototype.getSuspendedTasksForCorrelation = function (identity, correlationId, offset, limit) {
            return __awaiter(this, void 0, void 0, function () {
                var tasks, taskListEntries, taskList;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.managementApiClient.getSuspendedTasksForCorrelation(identity, correlationId, offset, limit)];
                        case 1:
                            tasks = _a.sent();
                            taskListEntries = this.mapTaskListToTaskListEntry(tasks);
                            taskList = {
                                taskListEntries: taskListEntries,
                                totalCount: tasks.totalCount,
                            };
                            return [2, taskList];
                    }
                });
            });
        };
        DashboardPaginationRepository.prototype.getSuspendedTasksForProcessModel = function (identity, processModelId, offset, limit) {
            return __awaiter(this, void 0, void 0, function () {
                var tasks, taskListEntries, taskList;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.managementApiClient.getSuspendedTasksForProcessModel(identity, processModelId, offset, limit)];
                        case 1:
                            tasks = _a.sent();
                            taskListEntries = this.mapTaskListToTaskListEntry(tasks);
                            taskList = {
                                taskListEntries: taskListEntries,
                                totalCount: tasks.totalCount,
                            };
                            return [2, taskList];
                    }
                });
            });
        };
        DashboardPaginationRepository.prototype.mapTaskListToTaskListEntry = function (taskList) {
            var _this = this;
            var taskListEntries = taskList.tasks.map(function (task) {
                return {
                    correlationId: task.correlationId,
                    id: task.id,
                    flowNodeInstanceId: task.flowNodeInstanceId,
                    processInstanceId: task.processInstanceId,
                    processModelId: task.processModelId,
                    name: task.name,
                    taskType: _this.getTaskTypeByFlowNodeType(task.flowNodeType),
                };
            });
            return taskListEntries;
        };
        DashboardPaginationRepository.prototype.getTaskTypeByFlowNodeType = function (flowNodeType) {
            var isUserTask = flowNodeType === 'bpmn:UserTask';
            var isManualTask = flowNodeType === 'bpmn:ManualTask';
            var isEmptyActivity = flowNodeType === 'bpmn:Task';
            if (isUserTask) {
                return index_1.TaskType.UserTask;
            }
            if (isManualTask) {
                return index_1.TaskType.ManualTask;
            }
            if (isEmptyActivity) {
                return index_1.TaskType.EmptyActivity;
            }
            return undefined;
        };
        return DashboardPaginationRepository;
    }(dashboard_repository_1.DashboardRepository));
    exports.DashboardPaginationRepository = DashboardPaginationRepository;
});


;
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define('modules/inspect/dashboard/repositories/dashboard.repository',["require", "exports", "@essential-projects/errors_ts", "../contracts/index", "../../../../services/pagination-module/pagination.module"], function (require, exports, errors_ts_1, index_1, pagination_module_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DashboardRepository = (function () {
        function DashboardRepository(managementApiClient) {
            this.managementApiClient = managementApiClient;
        }
        DashboardRepository.prototype.getAllActiveCronjobs = function (identity, offset, limit) {
            if (offset === void 0) { offset = 0; }
            if (limit === void 0) { limit = 0; }
            return __awaiter(this, void 0, void 0, function () {
                var cronjobs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.managementApiClient.getAllActiveCronjobs(identity)];
                        case 1:
                            cronjobs = (_a.sent());
                            return [2, {
                                    cronjobs: pagination_module_1.applyPagination(cronjobs, offset, limit),
                                    totalCount: cronjobs.length,
                                }];
                    }
                });
            });
        };
        DashboardRepository.prototype.getAllActiveProcessInstances = function (identity, offset, limit) {
            if (offset === void 0) { offset = 0; }
            if (limit === void 0) { limit = 0; }
            return __awaiter(this, void 0, void 0, function () {
                var activeCorrelations, processInstancesForCorrelations, processInstances;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.getActiveCorrelations(identity)];
                        case 1:
                            activeCorrelations = (_a.sent())
                                .correlations;
                            processInstancesForCorrelations = activeCorrelations.map(function (correlation) {
                                var processInstances = correlation.processInstances.map(function (processInstance) {
                                    processInstance.correlationId = correlation.id;
                                    return processInstance;
                                });
                                return processInstances;
                            });
                            processInstances = [].concat.apply([], processInstancesForCorrelations);
                            return [2, { processInstances: pagination_module_1.applyPagination(processInstances, offset, limit), totalCount: processInstances.length }];
                    }
                });
            });
        };
        DashboardRepository.prototype.getProcessModels = function (identity) {
            return __awaiter(this, void 0, void 0, function () {
                var result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.managementApiClient.getProcessModels(identity)];
                        case 1:
                            result = _a.sent();
                            return [2, { processModels: result.processModels, totalCount: result.processModels.length }];
                    }
                });
            });
        };
        DashboardRepository.prototype.getActiveCorrelations = function (identity, offset, limit) {
            if (offset === void 0) { offset = 0; }
            if (limit === void 0) { limit = 0; }
            return __awaiter(this, void 0, void 0, function () {
                var result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.managementApiClient.getActiveCorrelations(identity, offset, limit)];
                        case 1:
                            result = (_a.sent());
                            return [2, { correlations: result, totalCount: result.length }];
                    }
                });
            });
        };
        DashboardRepository.prototype.getManualTasksForProcessModel = function (identity, processModelId) {
            return __awaiter(this, void 0, void 0, function () {
                var result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.managementApiClient.getManualTasksForProcessModel(identity, processModelId)];
                        case 1:
                            result = _a.sent();
                            return [2, { manualTasks: result.manualTasks, totalCount: result.manualTasks.length }];
                    }
                });
            });
        };
        DashboardRepository.prototype.getEmptyActivitiesForProcessModel = function (identity, processModelId) {
            return __awaiter(this, void 0, void 0, function () {
                var result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.managementApiClient.getEmptyActivitiesForProcessModel(identity, processModelId)];
                        case 1:
                            result = _a.sent();
                            return [2, { emptyActivities: result.emptyActivities, totalCount: result.emptyActivities.length }];
                    }
                });
            });
        };
        DashboardRepository.prototype.getUserTasksForProcessModel = function (identity, processModelId) {
            return __awaiter(this, void 0, void 0, function () {
                var result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.managementApiClient.getUserTasksForProcessModel(identity, processModelId)];
                        case 1:
                            result = _a.sent();
                            return [2, { userTasks: result.userTasks, totalCount: result.userTasks.length }];
                    }
                });
            });
        };
        DashboardRepository.prototype.getManualTasksForCorrelation = function (identity, correlationId) {
            return __awaiter(this, void 0, void 0, function () {
                var result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.managementApiClient.getManualTasksForCorrelation(identity, correlationId)];
                        case 1:
                            result = _a.sent();
                            return [2, { manualTasks: result.manualTasks, totalCount: result.manualTasks.length }];
                    }
                });
            });
        };
        DashboardRepository.prototype.getEmptyActivitiesForCorrelation = function (identity, correlationId) {
            return __awaiter(this, void 0, void 0, function () {
                var result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.managementApiClient.getEmptyActivitiesForCorrelation(identity, correlationId)];
                        case 1:
                            result = _a.sent();
                            return [2, { emptyActivities: result.emptyActivities, totalCount: result.emptyActivities.length }];
                    }
                });
            });
        };
        DashboardRepository.prototype.getUserTasksForCorrelation = function (identity, correlationId) {
            return __awaiter(this, void 0, void 0, function () {
                var result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.managementApiClient.getUserTasksForCorrelation(identity, correlationId)];
                        case 1:
                            result = _a.sent();
                            return [2, { userTasks: result.userTasks, totalCount: result.userTasks.length }];
                    }
                });
            });
        };
        DashboardRepository.prototype.getManualTasksForProcessInstance = function (identity, correlationId) {
            return __awaiter(this, void 0, void 0, function () {
                var result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.managementApiClient.getManualTasksForProcessInstance(identity, correlationId)];
                        case 1:
                            result = _a.sent();
                            return [2, { manualTasks: result.manualTasks, totalCount: result.manualTasks.length }];
                    }
                });
            });
        };
        DashboardRepository.prototype.getEmptyActivitiesForProcessInstance = function (identity, correlationId) {
            return __awaiter(this, void 0, void 0, function () {
                var result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.managementApiClient.getEmptyActivitiesForProcessInstance(identity, correlationId)];
                        case 1:
                            result = _a.sent();
                            return [2, { emptyActivities: result.emptyActivities, totalCount: result.emptyActivities.length }];
                    }
                });
            });
        };
        DashboardRepository.prototype.getUserTasksForProcessInstance = function (identity, correlationId) {
            return __awaiter(this, void 0, void 0, function () {
                var result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.managementApiClient.getUserTasksForProcessInstance(identity, correlationId)];
                        case 1:
                            result = _a.sent();
                            return [2, { userTasks: result.userTasks, totalCount: result.userTasks.length }];
                    }
                });
            });
        };
        DashboardRepository.prototype.terminateProcessInstance = function (identity, processInstanceId) {
            return this.managementApiClient.terminateProcessInstance(identity, processInstanceId);
        };
        DashboardRepository.prototype.onProcessEnded = function (identity, callback) {
            return this.managementApiClient.onProcessEnded(identity, function (message) {
                callback();
            });
        };
        DashboardRepository.prototype.onProcessStarted = function (identity, callback) {
            return this.managementApiClient.onProcessStarted(identity, function (processStarted) {
                callback(processStarted);
            });
        };
        DashboardRepository.prototype.onProcessError = function (identity, callback) {
            return this.managementApiClient.onProcessError(identity, function (processErrorMessage) {
                callback(processErrorMessage);
            });
        };
        DashboardRepository.prototype.onProcessTerminated = function (identity, callback) {
            return this.managementApiClient.onProcessTerminated(identity, function (processErrorMessage) {
                callback(processErrorMessage);
            });
        };
        DashboardRepository.prototype.onEmptyActivityFinished = function (identity, callback) {
            return this.managementApiClient.onEmptyActivityFinished(identity, function (emptyActivityFinishedMessage) {
                callback(emptyActivityFinishedMessage);
            });
        };
        DashboardRepository.prototype.onEmptyActivityWaiting = function (identity, callback) {
            return this.managementApiClient.onEmptyActivityWaiting(identity, function (emptyActivityReachedMessage) {
                callback(emptyActivityReachedMessage);
            });
        };
        DashboardRepository.prototype.onManualTaskFinished = function (identity, callback) {
            return this.managementApiClient.onManualTaskFinished(identity, function (manualTaskFinishedMessage) {
                callback(manualTaskFinishedMessage);
            });
        };
        DashboardRepository.prototype.onManualTaskWaiting = function (identity, callback) {
            return this.managementApiClient.onManualTaskWaiting(identity, function (manualTaskReachedMessage) {
                callback(manualTaskReachedMessage);
            });
        };
        DashboardRepository.prototype.onUserTaskFinished = function (identity, callback) {
            return this.managementApiClient.onUserTaskFinished(identity, function (userTaskFinishedMessage) {
                callback(userTaskFinishedMessage);
            });
        };
        DashboardRepository.prototype.onUserTaskWaiting = function (identity, callback) {
            return this.managementApiClient.onUserTaskWaiting(identity, function (userTaskReachedMessage) {
                callback(userTaskReachedMessage);
            });
        };
        DashboardRepository.prototype.onCronjobCreated = function (identity, callback) {
            return this.managementApiClient.onCronjobCreated(identity, function (message) {
                callback(message);
            });
        };
        DashboardRepository.prototype.onCronjobExecuted = function (identity, callback) {
            return this.managementApiClient.onCronjobExecuted(identity, function (message) {
                callback(message);
            });
        };
        DashboardRepository.prototype.onCronjobRemoved = function (identity, callback) {
            return this.managementApiClient.onCronjobRemoved(identity, function (message) {
                callback(message);
            });
        };
        DashboardRepository.prototype.onCronjobStopped = function (identity, callback) {
            return this.managementApiClient.onCronjobStopped(identity, function (message) {
                callback(message);
            });
        };
        DashboardRepository.prototype.onCronjobUpdated = function (identity, callback) {
            return this.managementApiClient.onCronjobUpdated(identity, function (message) {
                callback(message);
            });
        };
        DashboardRepository.prototype.finishManualTask = function (identity, processInstanceId, correlationId, manualTaskInstanceId) {
            return this.managementApiClient.finishManualTask(identity, processInstanceId, correlationId, manualTaskInstanceId);
        };
        DashboardRepository.prototype.finishUserTask = function (identity, processInstanceId, correlationId, userTaskInstanceId, userTaskResult) {
            return this.managementApiClient.finishUserTask(identity, processInstanceId, correlationId, userTaskInstanceId, userTaskResult);
        };
        DashboardRepository.prototype.finishEmptyActivity = function (identity, processInstanceId, correlationId, emptyActivityInstanceId) {
            return this.managementApiClient.finishEmptyActivity(identity, processInstanceId, correlationId, emptyActivityInstanceId);
        };
        DashboardRepository.prototype.removeSubscription = function (identity, subscription) {
            return this.managementApiClient.removeSubscription(identity, subscription);
        };
        DashboardRepository.prototype.getAllSuspendedTasks = function (identity, offset, limit) {
            if (offset === void 0) { offset = 0; }
            if (limit === void 0) { limit = 0; }
            return __awaiter(this, void 0, void 0, function () {
                var allProcessModels, promisesForAllUserTasks, promisesForAllManualTasks, promisesForAllEmptyActivities, promisesForAllTasksForAllProcessModels, allTasksForAllProcessModels, allTasks, taskList;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.getProcessModels(identity)];
                        case 1:
                            allProcessModels = _a.sent();
                            promisesForAllUserTasks = allProcessModels.processModels.map(function (processModel) { return __awaiter(_this, void 0, void 0, function () {
                                var userTaskList;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4, this.getUserTasksForProcessModel(identity, processModel.id)];
                                        case 1:
                                            userTaskList = _a.sent();
                                            return [2, this.mapTasksToTaskListEntry(userTaskList.userTasks, index_1.TaskType.UserTask)];
                                    }
                                });
                            }); });
                            promisesForAllManualTasks = allProcessModels.processModels.map(function (processModel) { return __awaiter(_this, void 0, void 0, function () {
                                var manualTaskList;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4, this.getManualTasksForProcessModel(identity, processModel.id)];
                                        case 1:
                                            manualTaskList = _a.sent();
                                            return [2, this.mapTasksToTaskListEntry(manualTaskList.manualTasks, index_1.TaskType.ManualTask)];
                                    }
                                });
                            }); });
                            promisesForAllEmptyActivities = allProcessModels.processModels.map(function (processModel) { return __awaiter(_this, void 0, void 0, function () {
                                var emptyActivityList;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4, this.getEmptyActivitiesForProcessModel(identity, processModel.id)];
                                        case 1:
                                            emptyActivityList = _a.sent();
                                            return [2, this.mapTasksToTaskListEntry(emptyActivityList.emptyActivities, index_1.TaskType.EmptyActivity)];
                                    }
                                });
                            }); });
                            promisesForAllTasksForAllProcessModels = [].concat(promisesForAllUserTasks, promisesForAllManualTasks, promisesForAllEmptyActivities);
                            return [4, Promise.all(promisesForAllTasksForAllProcessModels)];
                        case 2:
                            allTasksForAllProcessModels = _a.sent();
                            allTasks = [].concat.apply([], allTasksForAllProcessModels);
                            taskList = {
                                taskListEntries: pagination_module_1.applyPagination(allTasks, offset, limit),
                                totalCount: allTasks.length,
                            };
                            return [2, taskList];
                    }
                });
            });
        };
        DashboardRepository.prototype.getSuspendedTasksForProcessInstance = function (identity, processInstanceId, offset, limit) {
            if (offset === void 0) { offset = 0; }
            if (limit === void 0) { limit = 0; }
            return __awaiter(this, void 0, void 0, function () {
                var userTaskList, manualTaskList, emptyActivityList, userTasks, manualTasks, emptyActivities, taskListEntries, taskList;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.getUserTasksForProcessInstance(identity, processInstanceId)];
                        case 1:
                            userTaskList = _a.sent();
                            return [4, this.getManualTasksForProcessInstance(identity, processInstanceId)];
                        case 2:
                            manualTaskList = _a.sent();
                            return [4, this.getEmptyActivitiesForProcessInstance(identity, processInstanceId)];
                        case 3:
                            emptyActivityList = _a.sent();
                            userTasks = this.mapTasksToTaskListEntry(userTaskList.userTasks, index_1.TaskType.UserTask);
                            manualTasks = this.mapTasksToTaskListEntry(manualTaskList.manualTasks, index_1.TaskType.ManualTask);
                            emptyActivities = this.mapTasksToTaskListEntry(emptyActivityList.emptyActivities, index_1.TaskType.EmptyActivity);
                            taskListEntries = [].concat(userTasks, manualTasks, emptyActivities);
                            taskList = {
                                taskListEntries: pagination_module_1.applyPagination(taskListEntries, offset, limit),
                                totalCount: taskListEntries.length,
                            };
                            return [2, taskList];
                    }
                });
            });
        };
        DashboardRepository.prototype.getSuspendedTasksForCorrelation = function (identity, correlationId, offset, limit) {
            if (offset === void 0) { offset = 0; }
            if (limit === void 0) { limit = 0; }
            return __awaiter(this, void 0, void 0, function () {
                var runningCorrelations, correlation, correlationWasNotFound, userTaskList, manualTaskList, emptyActivityList, userTasks, manualTasks, emptyActivities, taskListEntries, taskList;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.getActiveCorrelations(identity)];
                        case 1:
                            runningCorrelations = _a.sent();
                            correlation = runningCorrelations.correlations.find(function (otherCorrelation) {
                                return otherCorrelation.id === correlationId;
                            });
                            correlationWasNotFound = correlation === undefined;
                            if (correlationWasNotFound) {
                                throw new errors_ts_1.NotFoundError("No correlation found with id " + correlationId + ".");
                            }
                            return [4, this.getUserTasksForCorrelation(identity, correlationId)];
                        case 2:
                            userTaskList = _a.sent();
                            return [4, this.getManualTasksForCorrelation(identity, correlationId)];
                        case 3:
                            manualTaskList = _a.sent();
                            return [4, this.getEmptyActivitiesForCorrelation(identity, correlationId)];
                        case 4:
                            emptyActivityList = _a.sent();
                            userTasks = this.mapTasksToTaskListEntry(userTaskList.userTasks, index_1.TaskType.UserTask);
                            manualTasks = this.mapTasksToTaskListEntry(manualTaskList.manualTasks, index_1.TaskType.ManualTask);
                            emptyActivities = this.mapTasksToTaskListEntry(emptyActivityList.emptyActivities, index_1.TaskType.EmptyActivity);
                            taskListEntries = [].concat(userTasks, manualTasks, emptyActivities);
                            taskList = {
                                taskListEntries: pagination_module_1.applyPagination(taskListEntries, offset, limit),
                                totalCount: taskListEntries.length,
                            };
                            return [2, taskList];
                    }
                });
            });
        };
        DashboardRepository.prototype.getSuspendedTasksForProcessModel = function (identity, processModelId, offset, limit) {
            if (offset === void 0) { offset = 0; }
            if (limit === void 0) { limit = 0; }
            return __awaiter(this, void 0, void 0, function () {
                var userTaskList, manualTaskList, emptyActivityList, userTasks, manualTasks, emptyActivities, taskListEntries, taskList;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.getUserTasksForProcessModel(identity, processModelId)];
                        case 1:
                            userTaskList = _a.sent();
                            return [4, this.getManualTasksForProcessModel(identity, processModelId)];
                        case 2:
                            manualTaskList = _a.sent();
                            return [4, this.getEmptyActivitiesForProcessModel(identity, processModelId)];
                        case 3:
                            emptyActivityList = _a.sent();
                            userTasks = this.mapTasksToTaskListEntry(userTaskList.userTasks, index_1.TaskType.UserTask);
                            manualTasks = this.mapTasksToTaskListEntry(manualTaskList.manualTasks, index_1.TaskType.ManualTask);
                            emptyActivities = this.mapTasksToTaskListEntry(emptyActivityList.emptyActivities, index_1.TaskType.EmptyActivity);
                            taskListEntries = [].concat(userTasks, manualTasks, emptyActivities);
                            taskList = {
                                taskListEntries: pagination_module_1.applyPagination(taskListEntries, offset, limit),
                                totalCount: taskListEntries.length,
                            };
                            return [2, taskList];
                    }
                });
            });
        };
        DashboardRepository.prototype.getCorrelationById = function (identity, correlationId) {
            return this.managementApiClient.getCorrelationById(identity, correlationId);
        };
        DashboardRepository.prototype.mapTasksToTaskListEntry = function (tasks, targetType) {
            var mappedTasks = tasks.map(function (task) {
                return {
                    correlationId: task.correlationId,
                    id: task.id,
                    flowNodeInstanceId: task.flowNodeInstanceId,
                    processInstanceId: task.processInstanceId,
                    processModelId: task.processModelId,
                    name: task.name,
                    taskType: targetType,
                };
            });
            return mappedTasks;
        };
        return DashboardRepository;
    }());
    exports.DashboardRepository = DashboardRepository;
});


;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/inspect/dashboard/services/dashboard.service',["require", "exports", "aurelia-framework", "aurelia-event-aggregator", "../../../../environment", "../repositories/dashboard-repository-factory"], function (require, exports, aurelia_framework_1, aurelia_event_aggregator_1, environment_1, dashboard_repository_factory_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var DashboardService = (function () {
        function DashboardService(eventAggregator, managementApiClient) {
            var _this = this;
            this.eventAggregator = eventAggregator;
            this.managementApiClient = managementApiClient;
            this.eventAggregator.subscribe(environment_1.default.events.configPanel.solutionEntryChanged, function (solutionEntry) {
                if (_this.activeSolutionEntry !== solutionEntry) {
                    _this.dashboardRepository = dashboard_repository_factory_1.createDashboardRepository(managementApiClient, solutionEntry.processEngineVersion);
                    _this.activeSolutionEntry = solutionEntry;
                }
            });
        }
        DashboardService.prototype.getAllSuspendedTasks = function (identity, offset, limit) {
            return this.dashboardRepository.getAllSuspendedTasks(identity, offset, limit);
        };
        DashboardService.prototype.getAllActiveProcessInstances = function (identity, offset, limit) {
            return this.dashboardRepository.getAllActiveProcessInstances(identity, offset, limit);
        };
        DashboardService.prototype.getSuspendedTasksForProcessInstance = function (identity, processInstanceId, offset, limit) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, this.dashboardRepository.getSuspendedTasksForProcessInstance(identity, processInstanceId, offset, limit)];
                });
            });
        };
        DashboardService.prototype.getSuspendedTasksForCorrelation = function (identity, correlationId, offset, limit) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, this.dashboardRepository.getSuspendedTasksForCorrelation(identity, correlationId, offset, limit)];
                });
            });
        };
        DashboardService.prototype.getSuspendedTasksForProcessModel = function (identity, processModelId, offset, limit) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, this.dashboardRepository.getSuspendedTasksForProcessModel(identity, processModelId, offset, limit)];
                });
            });
        };
        DashboardService.prototype.getAllActiveCronjobs = function (identity, offset, limit) {
            return this.dashboardRepository.getAllActiveCronjobs(identity, offset, limit);
        };
        DashboardService.prototype.getProcessModels = function (identity) {
            return this.dashboardRepository.getProcessModels(identity);
        };
        DashboardService.prototype.getActiveCorrelations = function (identity) {
            return this.dashboardRepository.getActiveCorrelations(identity);
        };
        DashboardService.prototype.getManualTasksForProcessModel = function (identity, processModelId) {
            return this.dashboardRepository.getManualTasksForProcessModel(identity, processModelId);
        };
        DashboardService.prototype.getEmptyActivitiesForProcessModel = function (identity, processModelId) {
            return this.dashboardRepository.getEmptyActivitiesForProcessModel(identity, processModelId);
        };
        DashboardService.prototype.getUserTasksForProcessModel = function (identity, processModelId) {
            return this.dashboardRepository.getUserTasksForProcessModel(identity, processModelId);
        };
        DashboardService.prototype.getManualTasksForCorrelation = function (identity, correlationId) {
            return this.dashboardRepository.getManualTasksForCorrelation(identity, correlationId);
        };
        DashboardService.prototype.getEmptyActivitiesForCorrelation = function (identity, correlationId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, this.dashboardRepository.getEmptyActivitiesForCorrelation(identity, correlationId)];
                });
            });
        };
        DashboardService.prototype.getUserTasksForCorrelation = function (identity, correlationId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, this.dashboardRepository.getUserTasksForCorrelation(identity, correlationId)];
                });
            });
        };
        DashboardService.prototype.getManualTasksForProcessInstance = function (identity, correlationId) {
            return this.dashboardRepository.getManualTasksForProcessInstance(identity, correlationId);
        };
        DashboardService.prototype.getEmptyActivitiesForProcessInstance = function (identity, correlationId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, this.dashboardRepository.getEmptyActivitiesForProcessInstance(identity, correlationId)];
                });
            });
        };
        DashboardService.prototype.getUserTasksForProcessInstance = function (identity, correlationId) {
            return this.dashboardRepository.getUserTasksForProcessInstance(identity, correlationId);
        };
        DashboardService.prototype.terminateProcessInstance = function (identity, processInstanceId) {
            return this.dashboardRepository.terminateProcessInstance(identity, processInstanceId);
        };
        DashboardService.prototype.onProcessEnded = function (identity, callback) {
            return this.dashboardRepository.onProcessEnded(identity, callback);
        };
        DashboardService.prototype.onProcessStarted = function (identity, callback) {
            return this.dashboardRepository.onProcessStarted(identity, callback);
        };
        DashboardService.prototype.onProcessError = function (identity, callback) {
            return this.dashboardRepository.onProcessError(identity, callback);
        };
        DashboardService.prototype.onProcessTerminated = function (identity, callback) {
            return this.dashboardRepository.onProcessTerminated(identity, callback);
        };
        DashboardService.prototype.onEmptyActivityFinished = function (identity, callback) {
            return this.dashboardRepository.onEmptyActivityFinished(identity, callback);
        };
        DashboardService.prototype.onEmptyActivityWaiting = function (identity, callback) {
            return this.dashboardRepository.onEmptyActivityWaiting(identity, callback);
        };
        DashboardService.prototype.onUserTaskFinished = function (identity, callback) {
            return this.dashboardRepository.onUserTaskFinished(identity, callback);
        };
        DashboardService.prototype.onUserTaskWaiting = function (identity, callback) {
            return this.dashboardRepository.onUserTaskWaiting(identity, callback);
        };
        DashboardService.prototype.onManualTaskFinished = function (identity, callback) {
            return this.dashboardRepository.onManualTaskFinished(identity, callback);
        };
        DashboardService.prototype.onManualTaskWaiting = function (identity, callback) {
            return this.dashboardRepository.onManualTaskWaiting(identity, callback);
        };
        DashboardService.prototype.finishManualTask = function (identity, processInstanceId, correlationId, manualTaskInstanceId) {
            return this.dashboardRepository.finishManualTask(identity, processInstanceId, correlationId, manualTaskInstanceId);
        };
        DashboardService.prototype.finishUserTask = function (identity, processInstanceId, correlationId, userTaskInstanceId, userTaskResult) {
            return this.dashboardRepository.finishUserTask(identity, processInstanceId, correlationId, userTaskInstanceId, userTaskResult);
        };
        DashboardService.prototype.finishEmptyActivity = function (identity, processInstanceId, correlationId, emptyActivityInstanceId) {
            return this.dashboardRepository.finishEmptyActivity(identity, processInstanceId, correlationId, emptyActivityInstanceId);
        };
        DashboardService.prototype.removeSubscription = function (identity, subscription) {
            return this.dashboardRepository.removeSubscription(identity, subscription);
        };
        DashboardService.prototype.onCronjobCreated = function (identity, callback) {
            return this.dashboardRepository.onCronjobCreated(identity, callback);
        };
        DashboardService.prototype.onCronjobUpdated = function (identity, callback) {
            return this.dashboardRepository.onCronjobUpdated(identity, callback);
        };
        DashboardService.prototype.onCronjobStopped = function (identity, callback) {
            return this.dashboardRepository.onCronjobStopped(identity, callback);
        };
        DashboardService.prototype.onCronjobRemoved = function (identity, callback) {
            return this.dashboardRepository.onCronjobRemoved(identity, callback);
        };
        DashboardService.prototype.onCronjobExecuted = function (identity, callback) {
            return this.dashboardRepository.onCronjobExecuted(identity, callback);
        };
        DashboardService.prototype.getCorrelationById = function (identity, correlationId) {
            return this.dashboardRepository.getCorrelationById(identity, correlationId);
        };
        DashboardService = __decorate([
            aurelia_framework_1.inject(aurelia_event_aggregator_1.EventAggregator, 'ManagementApiClientService'),
            __metadata("design:paramtypes", [aurelia_event_aggregator_1.EventAggregator, Object])
        ], DashboardService);
        return DashboardService;
    }());
    exports.DashboardService = DashboardService;
});


;
define('modules/inspect/heatmap/contracts/IFlowNodeAssociation',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('modules/inspect/heatmap/contracts/IHeatmap.Service',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('modules/inspect/heatmap/contracts/IHeatmapRepository',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('modules/inspect/heatmap/contracts/ITokenPositionAndCount',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('modules/inspect/heatmap/contracts/constants',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultOverlayPositions = {
        tasks: {
            left: 80,
            top: -15,
        },
        gateways: {
            left: 31,
            top: -15,
        },
        events: {
            left: 23,
            top: -24,
        },
        participants: {
            left: 18,
            top: 20,
        },
    };
});


;
define('modules/inspect/heatmap/contracts/index',["require", "exports", "./constants"], function (require, exports, constants_1) {
    "use strict";
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(constants_1);
});


;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
define('modules/inspect/heatmap/heatmap',["require", "exports", "aurelia-framework", "@process-engine/bpmn-js-custom-bundle", "../../../services/solution-is-remote-solution-module/solution-is-remote-solution.module"], function (require, exports, aurelia_framework_1, bundle, solution_is_remote_solution_module_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    bundle = __importStar(bundle);
    var Heatmap = (function () {
        function Heatmap(heatmapService) {
            this.noRuntimeInformation = false;
            this.heatmapService = heatmapService;
        }
        Heatmap.prototype.activeDiagramChanged = function () {
            this.noRuntimeInformation = false;
            var attachedViewer = document.getElementsByClassName('bjs-container')[0];
            var viewerContainerIsAttached = this.viewerContainer !== undefined &&
                this.viewerContainer !== null &&
                this.viewerContainer.childElementCount > 1 &&
                attachedViewer !== undefined &&
                attachedViewer !== null;
            if (viewerContainerIsAttached) {
                this.viewerContainer.removeChild(attachedViewer);
            }
            var viewerIsInitialized = this.viewer !== undefined;
            if (viewerIsInitialized) {
                this.viewer.detach();
                this.viewer.destroy();
            }
            this.initialize();
        };
        Heatmap.prototype.initialize = function () {
            return __awaiter(this, void 0, void 0, function () {
                var noActiveDiagram, diagramIsNoRemoteDiagram, elementRegistry, associations, flowNodeRuntimeInformationList, xml, overlays, containerIsPresent;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            noActiveDiagram = this.activeDiagram === undefined;
                            if (noActiveDiagram) {
                                return [2];
                            }
                            diagramIsNoRemoteDiagram = !solution_is_remote_solution_module_1.solutionIsRemoteSolution(this.activeDiagram.uri);
                            if (diagramIsNoRemoteDiagram) {
                                this.noRuntimeInformation = true;
                                return [2];
                            }
                            this.modeler = new bundle.modeler({
                                moddleExtensions: {
                                    camunda: bundle.camundaModdleDescriptor,
                                },
                            });
                            return [4, this.pushXmlToBpmnModeler(this.activeDiagram.xml, this.modeler)];
                        case 1:
                            _a.sent();
                            elementRegistry = this.modeler.get('elementRegistry');
                            return [4, this.heatmapService.getFlowNodeAssociations(elementRegistry)];
                        case 2:
                            associations = _a.sent();
                            return [4, this.heatmapService.getRuntimeInformationForProcessModel(this.activeSolutionEntry.identity, this.activeDiagram.id)];
                        case 3:
                            flowNodeRuntimeInformationList = _a.sent();
                            return [4, this.heatmapService.getColoredXML(associations, flowNodeRuntimeInformationList.flowNodeRuntimeInformation, this.modeler)];
                        case 4:
                            xml = _a.sent();
                            this.viewer = new bundle.viewer({
                                additionalModules: [bundle.ZoomScrollModule, bundle.MoveCanvasModule, bundle.MiniMap],
                            });
                            return [4, this.pushXmlToBpmnModeler(xml, this.viewer)];
                        case 5:
                            _a.sent();
                            overlays = this.viewer.get('overlays');
                            this.heatmapService.addOverlays(this.activeSolutionEntry.identity, overlays, elementRegistry, this.activeDiagram.id);
                            containerIsPresent = this.viewerContainer !== null;
                            if (containerIsPresent) {
                                this.viewer.attachTo(this.viewerContainer);
                            }
                            this.fitDiagramToViewport();
                            return [2];
                    }
                });
            });
        };
        Heatmap.prototype.pushXmlToBpmnModeler = function (xml, modeler) {
            return new Promise(function (resolve, reject) {
                modeler.importXML(xml, function (importXmlError) {
                    if (importXmlError) {
                        reject(importXmlError);
                        return;
                    }
                    resolve();
                });
            });
        };
        Heatmap.prototype.fitDiagramToViewport = function () {
            var canvas = this.viewer.get('canvas');
            var viewbox = canvas.viewbox();
            var diagramIsVisible = viewbox.height > 0 && viewbox.width > 0;
            if (diagramIsVisible) {
                canvas.zoom('fit-viewport', 'auto');
            }
        };
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", Object)
        ], Heatmap.prototype, "activeDiagram", void 0);
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", Object)
        ], Heatmap.prototype, "activeSolutionEntry", void 0);
        Heatmap = __decorate([
            aurelia_framework_1.inject('HeatmapService'),
            __metadata("design:paramtypes", [Object])
        ], Heatmap);
        return Heatmap;
    }());
    exports.Heatmap = Heatmap;
});


;
define('text!modules/inspect/heatmap/heatmap.css',[],function(){return ".heatmap {\n  display: flex;\n  position: relative;\n  width: 100%;\n  height: 100%;\n  padding-right: 36px; }\n\n.heatmap__viewer-container {\n  height: 100%;\n  width: 100%; }\n\n.heatmap__legend {\n  position: absolute;\n  bottom: 20px;\n  left: 20px;\n  max-width: 155px;\n  background: whitesmoke;\n  user-select: none; }\n\n.heatmap__legend-entry {\n  display: block;\n  margin: 0 10px;\n  font-size: 14px; }\n\n.heatmap__legend-entry-first {\n  margin-top: 10px;\n  margin-bottom: 2px;\n  font-size: 14px;\n  font-weight: bold; }\n\n.heatmap__legend-entry-last {\n  margin-bottom: 10px; }\n\n.heatmap__overlay {\n  width: 35px;\n  height: 35px;\n  min-height: 16px;\n  padding: 7px;\n  background-color: black;\n  border-radius: 50%;\n  font-family: Arial;\n  font-size: 14px;\n  color: white;\n  text-align: center; }\n\n.red {\n  color: #E53935; }\n\n.green {\n  color: #43A047; }\n\n.black {\n  color: black; }\n\n.heatmap__empty-message {\n  width: 100%;\n  text-align: center;\n  transform: translateY(50%);\n  user-select: none; }\n";});;
define('text!modules/inspect/heatmap/heatmap.html',[],function(){return "<template>\n  <require from=\"@process-engine/bpmn-js-custom-bundle/bpmn-modeler-custom.css\"></require>\n  <require from=\"./heatmap.css\"></require>\n  <div class=\"heatmap\">\n    <h3 if.bind=\"!activeDiagram\" class=\"heatmap__empty-message\">No diagram selected.</h3>\n    <h3 if.bind=\"noRuntimeInformation\" class=\"heatmap__empty-message\">No runtime information found.</h3>\n    <div if.bind=\"activeDiagram && !noRuntimeInformation\"ref=\"viewerContainer\" class=\"heatmap__viewer-container\"></div>\n    <div class=\"heatmap__legend\">\n      <span class=\"heatmap__legend-entry heatmap__legend-entry-first\">Median runtime:</span>\n      <span class=\"heatmap__legend-entry\"><i class=\"fas fa-stop green\"></i> Ok</span>\n      <span class=\"heatmap__legend-entry\"><i class=\"fas fa-stop red\"></i> Not ok</span>\n      <span class=\"heatmap__legend-entry\"><i class=\"fas fa-stop black\"></i> No information</span>\n    </div>\n  </div>\n</template>\n";});;
define('modules/inspect/heatmap/index',["require", "exports", "aurelia-event-aggregator", "./services/heatmap.service"], function (require, exports, aurelia_event_aggregator_1, heatmap_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function configure(config) {
        var eventAggregator = config.container.get(aurelia_event_aggregator_1.EventAggregator);
        var managementApiClient = config.container.get('ManagementApiClientService');
        var heatmapService = new heatmap_service_1.HeatmapService(eventAggregator, managementApiClient);
        config.container.registerInstance('HeatmapService', heatmapService);
    }
    exports.configure = configure;
});


;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
define('modules/inspect/heatmap/repositories/heatmap.mock-repository',["require", "exports", "aurelia-framework"], function (require, exports, aurelia_framework_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var HeatmapMockRepository = (function () {
        function HeatmapMockRepository(manegementApiClient) {
            this.mockDataForHeatmapSampleProcess = [
                {
                    processModelId: 'heatmap_sample',
                    flowNodeId: 'Task_1sy1ibw',
                    arithmeticMeanRuntimeInMs: 10000.0,
                    firstQuartileRuntimeInMs: NaN,
                    medianRuntimeInMs: 10100.5,
                    thirdQuartileRuntimeInMs: NaN,
                    minRuntimeInMs: NaN,
                    maxRuntimeInMs: NaN,
                },
                {
                    processModelId: 'heatmap_sample',
                    flowNodeId: 'Task_0julnc5',
                    arithmeticMeanRuntimeInMs: 10000.0,
                    firstQuartileRuntimeInMs: NaN,
                    medianRuntimeInMs: 10100.5,
                    thirdQuartileRuntimeInMs: NaN,
                    minRuntimeInMs: NaN,
                    maxRuntimeInMs: NaN,
                },
                {
                    processModelId: 'heatmap_sample',
                    flowNodeId: 'Task_04fbo5q',
                    arithmeticMeanRuntimeInMs: 10000.0,
                    firstQuartileRuntimeInMs: NaN,
                    medianRuntimeInMs: 10100.5,
                    thirdQuartileRuntimeInMs: NaN,
                    minRuntimeInMs: NaN,
                    maxRuntimeInMs: NaN,
                },
                {
                    processModelId: 'heatmap_sample',
                    flowNodeId: 'ExclusiveGateway_0fi1ct7',
                    arithmeticMeanRuntimeInMs: 5000.0,
                    firstQuartileRuntimeInMs: NaN,
                    medianRuntimeInMs: 5100.5,
                    thirdQuartileRuntimeInMs: NaN,
                    minRuntimeInMs: NaN,
                    maxRuntimeInMs: NaN,
                },
                {
                    processModelId: 'heatmap_sample',
                    flowNodeId: 'ExclusiveGateway_134ybqm',
                    arithmeticMeanRuntimeInMs: 5100.0,
                    firstQuartileRuntimeInMs: NaN,
                    medianRuntimeInMs: 4900.5,
                    thirdQuartileRuntimeInMs: NaN,
                    minRuntimeInMs: NaN,
                    maxRuntimeInMs: NaN,
                },
                {
                    processModelId: 'heatmap_sample',
                    flowNodeId: 'SequenceFlow_1jdocur',
                    arithmeticMeanRuntimeInMs: 1000.0,
                    firstQuartileRuntimeInMs: NaN,
                    medianRuntimeInMs: 10100.5,
                    thirdQuartileRuntimeInMs: NaN,
                    minRuntimeInMs: NaN,
                    maxRuntimeInMs: NaN,
                },
                {
                    processModelId: 'heatmap_sample',
                    flowNodeId: 'SequenceFlow_1g8yhyu',
                    arithmeticMeanRuntimeInMs: 1000.0,
                    firstQuartileRuntimeInMs: NaN,
                    medianRuntimeInMs: 10100.5,
                    thirdQuartileRuntimeInMs: NaN,
                    minRuntimeInMs: NaN,
                    maxRuntimeInMs: NaN,
                },
                {
                    processModelId: 'heatmap_sample',
                    flowNodeId: 'SequenceFlow_0szygwm',
                    arithmeticMeanRuntimeInMs: 1000.0,
                    firstQuartileRuntimeInMs: NaN,
                    medianRuntimeInMs: 10100.5,
                    thirdQuartileRuntimeInMs: NaN,
                    minRuntimeInMs: NaN,
                    maxRuntimeInMs: NaN,
                },
                {
                    processModelId: 'heatmap_sample',
                    flowNodeId: 'SequenceFlow_17fbkvc',
                    arithmeticMeanRuntimeInMs: 1000.0,
                    firstQuartileRuntimeInMs: NaN,
                    medianRuntimeInMs: 10100.5,
                    thirdQuartileRuntimeInMs: NaN,
                    minRuntimeInMs: NaN,
                    maxRuntimeInMs: NaN,
                },
                {
                    processModelId: 'heatmap_sample',
                    flowNodeId: 'SequenceFlow_027yae2',
                    arithmeticMeanRuntimeInMs: 1000.0,
                    firstQuartileRuntimeInMs: NaN,
                    medianRuntimeInMs: 10100.5,
                    thirdQuartileRuntimeInMs: NaN,
                    minRuntimeInMs: NaN,
                    maxRuntimeInMs: NaN,
                },
                {
                    processModelId: 'heatmap_sample',
                    flowNodeId: 'SequenceFlow_0nqcs3t',
                    arithmeticMeanRuntimeInMs: 1000.0,
                    firstQuartileRuntimeInMs: NaN,
                    medianRuntimeInMs: 10100.5,
                    thirdQuartileRuntimeInMs: NaN,
                    minRuntimeInMs: NaN,
                    maxRuntimeInMs: NaN,
                },
            ];
            this.mockDataForActiveTokens = [
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_1sy1ibw',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_0julnc5',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_0julnc5',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_0julnc5',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_0julnc5',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_0julnc5',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'Task_04fbo5q',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'EndEvent_0eie6q6',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'EndEvent_0eie6q6',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
                {
                    processInstanceId: 'test',
                    processModelId: 'heatmap_sample',
                    correlationId: 'test',
                    identity: {
                        token: 'test',
                        userId: 'test',
                    },
                    createdAt: new Date(),
                    flowNodeId: 'EndEvent_0eie6q6',
                    flowNodeInstanceId: '<flownodeinstanceidhere>',
                    payload: '',
                },
            ];
            this.managementApiClient = manegementApiClient;
        }
        HeatmapMockRepository.prototype.setIdentity = function (identity) {
            this.identity = identity;
        };
        HeatmapMockRepository.prototype.getRuntimeInformationForProcessModel = function (identity, processModelId) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                resolve(_this.mockDataForHeatmapSampleProcess);
            });
        };
        HeatmapMockRepository.prototype.getActiveTokensForFlowNode = function (identity, flowNodeId) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                var newArray = _this.mockDataForActiveTokens.filter(function (element) {
                    var elementIs = element.flowNodeId === flowNodeId;
                    return elementIs;
                });
                resolve(newArray);
            });
        };
        HeatmapMockRepository.prototype.getProcess = function (identity, processModelId) {
            return this.managementApiClient.getProcessModelById(identity, processModelId);
        };
        HeatmapMockRepository = __decorate([
            aurelia_framework_1.inject('ManagementApiClientService'),
            __metadata("design:paramtypes", [Object])
        ], HeatmapMockRepository);
        return HeatmapMockRepository;
    }());
    exports.HeatmapMockRepository = HeatmapMockRepository;
});


;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define('modules/inspect/heatmap/repositories/heatmap.pagination-repository',["require", "exports", "./heatmap.repository"], function (require, exports, heatmap_repository_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var HeatmapPaginationRepository = (function (_super) {
        __extends(HeatmapPaginationRepository, _super);
        function HeatmapPaginationRepository() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        HeatmapPaginationRepository.prototype.getRuntimeInformationForProcessModel = function (identity, processModelId) {
            return this.managementApiClientService.getRuntimeInformationForProcessModel(identity, processModelId);
        };
        HeatmapPaginationRepository.prototype.getActiveTokensForFlowNode = function (identity, flowNodeId) {
            return this.managementApiClientService.getActiveTokensForFlowNode(identity, flowNodeId);
        };
        return HeatmapPaginationRepository;
    }(heatmap_repository_1.HeatmapRepository));
    exports.HeatmapPaginationRepository = HeatmapPaginationRepository;
});


;
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define('modules/inspect/heatmap/repositories/heatmap.repository',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var HeatmapRepository = (function () {
        function HeatmapRepository(managementApiClientService) {
            this.managementApiClientService = managementApiClientService;
        }
        HeatmapRepository.prototype.getRuntimeInformationForProcessModel = function (identity, processModelId) {
            return __awaiter(this, void 0, void 0, function () {
                var result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.managementApiClientService.getRuntimeInformationForProcessModel(identity, processModelId)];
                        case 1:
                            result = (_a.sent());
                            return [2, { flowNodeRuntimeInformation: result, totalCount: result.length }];
                    }
                });
            });
        };
        HeatmapRepository.prototype.getProcess = function (identity, processModelId) {
            return this.managementApiClientService.getProcessModelById(identity, processModelId);
        };
        HeatmapRepository.prototype.getActiveTokensForFlowNode = function (identity, flowNodeId) {
            return __awaiter(this, void 0, void 0, function () {
                var result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.managementApiClientService.getActiveTokensForFlowNode(identity, flowNodeId)];
                        case 1:
                            result = (_a.sent());
                            return [2, { activeTokens: result, totalCount: result.length }];
                    }
                });
            });
        };
        return HeatmapRepository;
    }());
    exports.HeatmapRepository = HeatmapRepository;
});


;
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/inspect/heatmap/services/heatmap.service',["require", "exports", "../../../../contracts/index", "../contracts/index", "../../../../environment", "../../../../services/process-engine-version-module/process-engine-version.module", "../repositories/heatmap.pagination-repository", "../repositories/heatmap.repository"], function (require, exports, index_1, index_2, environment_1, process_engine_version_module_1, heatmap_pagination_repository_1, heatmap_repository_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var maximalTokenCount = 100;
    var HeatmapService = (function () {
        function HeatmapService(eventAggregator, managementApiClient) {
            var _this = this;
            this.eventAggregator = eventAggregator;
            this.managementApiClient = managementApiClient;
            this.eventAggregator.subscribe(environment_1.default.events.configPanel.solutionEntryChanged, function (solutionEntry) {
                if (process_engine_version_module_1.processEngineSupportsPagination(solutionEntry.processEngineVersion)) {
                    _this.heatmapRepository = new heatmap_pagination_repository_1.HeatmapPaginationRepository(_this.managementApiClient);
                }
                else {
                    _this.heatmapRepository = new heatmap_repository_1.HeatmapRepository(_this.managementApiClient);
                }
            });
        }
        HeatmapService.prototype.getRuntimeInformationForProcessModel = function (identity, processModelId) {
            return this.heatmapRepository.getRuntimeInformationForProcessModel(identity, processModelId);
        };
        HeatmapService.prototype.getActiveTokensForFlowNode = function (identity, flowNodeId) {
            return this.heatmapRepository.getActiveTokensForFlowNode(identity, flowNodeId);
        };
        HeatmapService.prototype.addOverlays = function (identity, overlays, elementRegistry, processModelId) {
            return __awaiter(this, void 0, void 0, function () {
                var participantsTokenCount, addOverlay, elementsForOverlays, activeTokenListArray, elementsWithoutToken, participantShape;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            participantsTokenCount = 0;
                            addOverlay = function (elementId, count, position) {
                                var countIsTooHigh = count >= maximalTokenCount;
                                overlays.add(elementId, {
                                    position: {
                                        left: position.left,
                                        top: position.top,
                                    },
                                    html: "<div class=\"heatmap__overlay\" title=\"This element has actual " + count + " token.\">" + (countIsTooHigh ? '99+' : count) + "</div>",
                                });
                            };
                            elementsForOverlays = this.getElementsForOverlays(elementRegistry);
                            return [4, this.getActiveTokenListArray(identity, elementsForOverlays, processModelId)];
                        case 1:
                            activeTokenListArray = _a.sent();
                            this.addShapeTypeToActiveToken(activeTokenListArray, elementsForOverlays);
                            elementsWithoutToken = this.getElementsWithoutToken(elementsForOverlays, activeTokenListArray);
                            activeTokenListArray.forEach(function (activeTokenList) {
                                var activeTokenArray = activeTokenList.activeTokens;
                                var elementIsEvent = _this.elementIsEvent(activeTokenArray[0].type);
                                var elementIsGateway = _this.elementIsGateway(activeTokenArray[0].type);
                                var elementIsTask = _this.elementIsTask(activeTokenArray[0].type);
                                if (elementIsGateway) {
                                    addOverlay(activeTokenArray[0].flowNodeId, activeTokenArray.length, index_2.defaultOverlayPositions.gateways);
                                }
                                else if (elementIsEvent) {
                                    addOverlay(activeTokenArray[0].flowNodeId, activeTokenArray.length, index_2.defaultOverlayPositions.events);
                                }
                                else if (elementIsTask) {
                                    addOverlay(activeTokenArray[0].flowNodeId, activeTokenArray.length, index_2.defaultOverlayPositions.tasks);
                                }
                                participantsTokenCount += activeTokenArray.length;
                            });
                            elementsWithoutToken.forEach(function (element) {
                                var elementIsEvent = _this.elementIsEvent(element.type);
                                var elementIsGateway = _this.elementIsGateway(element.type);
                                var elementIsTask = _this.elementIsTask(element.type);
                                if (elementIsGateway) {
                                    addOverlay(element.id, 0, index_2.defaultOverlayPositions.gateways);
                                }
                                else if (elementIsEvent) {
                                    addOverlay(element.id, 0, index_2.defaultOverlayPositions.events);
                                }
                                else if (elementIsTask) {
                                    addOverlay(element.id, 0, index_2.defaultOverlayPositions.tasks);
                                }
                            });
                            participantShape = this.getParticipantShape(elementRegistry);
                            addOverlay(participantShape.id, participantsTokenCount, {
                                left: participantShape.width - index_2.defaultOverlayPositions.participants.left,
                                top: participantShape.height - index_2.defaultOverlayPositions.participants.top,
                            });
                            return [2];
                    }
                });
            });
        };
        HeatmapService.prototype.getProcess = function (identity, processModelId) {
            return this.heatmapRepository.getProcess(identity, processModelId);
        };
        HeatmapService.prototype.getFlowNodeAssociations = function (elementRegistry) {
            var _this = this;
            var flowNodeAssociations = [];
            var associations = elementRegistry.filter(function (element) {
                var elementIsNoValidAssociation = element.target === undefined ||
                    element.target.businessObject === undefined ||
                    element.target.businessObject.text === undefined;
                if (elementIsNoValidAssociation) {
                    return false;
                }
                var elementIsAssociation = element.type === 'bpmn:Association';
                var annotationHasRuntime = element.target.businessObject.text.includes('RT:');
                return elementIsAssociation && annotationHasRuntime;
            });
            associations.forEach(function (association) {
                var medianRunTime = _this.getMedianRunTimeForAssociation(association);
                var flowNodeAssociation = {
                    associationId: association.id,
                    sourceId: association.source.id,
                    runtime_medianInMs: medianRunTime,
                };
                flowNodeAssociations.push(flowNodeAssociation);
            });
            return flowNodeAssociations;
        };
        HeatmapService.prototype.getColoredXML = function (associations, flowNodeRuntimeInformation, modeler) {
            return __awaiter(this, void 0, void 0, function () {
                var elementRegistry, modeling, elementsToColor, xml;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            elementRegistry = modeler.get('elementRegistry');
                            modeling = modeler.get('modeling');
                            elementsToColor = this.getElementsToColor(associations, flowNodeRuntimeInformation);
                            associations.forEach(function (association) {
                                var elementToColor = elementsToColor.find(function (element) {
                                    return element.flowNodeId === association.sourceId;
                                });
                                var elementToColorIsUndefined = elementToColor === undefined;
                                if (elementToColorIsUndefined) {
                                    return;
                                }
                                var shapeToColor = _this.getShape(elementRegistry, elementToColor);
                                var flowNodeRuntimeIsGreaterThanExpected = elementToColor.medianRuntimeInMs > association.runtime_medianInMs;
                                if (flowNodeRuntimeIsGreaterThanExpected) {
                                    _this.colorElement(modeling, shapeToColor, index_1.defaultBpmnColors.red);
                                }
                                else {
                                    _this.colorElement(modeling, shapeToColor, index_1.defaultBpmnColors.green);
                                }
                            });
                            return [4, this.getXmlFromModeler(modeler)];
                        case 1:
                            xml = _a.sent();
                            return [2, xml];
                    }
                });
            });
        };
        HeatmapService.prototype.colorElement = function (modeling, shapeToColor, color) {
            modeling.setColor(shapeToColor, {
                stroke: color.border,
                fill: color.fill,
            });
        };
        HeatmapService.prototype.getElementsToColor = function (associations, flowNodeRuntimeInformation) {
            var elementsToColor = flowNodeRuntimeInformation.filter(function (information) {
                var associationWithSameId = associations.find(function (association) {
                    return association.sourceId === information.flowNodeId;
                });
                return associationWithSameId;
            });
            return elementsToColor;
        };
        HeatmapService.prototype.getShape = function (elementRegistry, elementToColor) {
            var elementShape = elementRegistry.get(elementToColor.flowNodeId);
            return elementShape;
        };
        HeatmapService.prototype.getParticipantShape = function (elementRegistry) {
            var allElements = elementRegistry.getAll();
            var participantShape = allElements.find(function (element) {
                var elementIsParticipant = element.type === 'bpmn:Participant';
                return elementIsParticipant;
            });
            return participantShape;
        };
        HeatmapService.prototype.getElementsForOverlays = function (elementRegistry) {
            var allElements = elementRegistry.getAll();
            var filteredElements = allElements.filter(function (element) {
                var condition = element.type !== 'bpmn:Association' &&
                    element.type !== 'bpmn:SequenceFlow' &&
                    element.type !== 'bpmn:TextAnnotation' &&
                    element.type !== 'bpmn:Participant' &&
                    element.type !== 'bpmn:Collaboration' &&
                    element.type !== 'bpmn:Lane' &&
                    element.type !== 'label';
                return condition;
            });
            return filteredElements;
        };
        HeatmapService.prototype.getXmlFromModeler = function (modeler) {
            return __awaiter(this, void 0, void 0, function () {
                var saveXmlPromise;
                var _this = this;
                return __generator(this, function (_a) {
                    saveXmlPromise = new Promise(function (resolve, reject) {
                        modeler.saveXML({ format: true }, function (saveXmlError, xml) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                if (saveXmlError) {
                                    reject(saveXmlError);
                                    return [2];
                                }
                                resolve(xml);
                                return [2];
                            });
                        }); });
                    });
                    return [2, saveXmlPromise];
                });
            });
        };
        HeatmapService.prototype.getMedianRunTimeForAssociation = function (association) {
            var annotationText = association.target.businessObject.text;
            var lengthOfRTStamp = 4;
            var startRunTimeText = annotationText.search('RT:') + lengthOfRTStamp;
            var lengthOfRunTimeText = 12;
            var runTimeTimeStamp = annotationText.substr(startRunTimeText, lengthOfRunTimeText);
            var date = new Date("1970-01-01T" + runTimeTimeStamp + "Z");
            var medianRunTimeInMs = date.getTime();
            return medianRunTimeInMs;
        };
        HeatmapService.prototype.getActiveTokenListArray = function (identity, elementsForOverlays, processModelId) {
            return __awaiter(this, void 0, void 0, function () {
                var promisesForElements, activeTokenListArrayForAllElements, filteredActiveTokenListArray;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            promisesForElements = elementsForOverlays.map(function (element) { return __awaiter(_this, void 0, void 0, function () {
                                var activeTokenList, elementActiveTokensForProcessModel;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4, this.getActiveTokensForFlowNode(identity, element.id)];
                                        case 1:
                                            activeTokenList = _a.sent();
                                            elementActiveTokensForProcessModel = activeTokenList.activeTokens.filter(function (token) {
                                                var tokenIsInProcessModel = token.processModelId === processModelId;
                                                return tokenIsInProcessModel;
                                            });
                                            return [2, {
                                                    activeTokens: elementActiveTokensForProcessModel,
                                                    totalCount: elementActiveTokensForProcessModel.length,
                                                }];
                                    }
                                });
                            }); });
                            return [4, Promise.all(promisesForElements)];
                        case 1:
                            activeTokenListArrayForAllElements = _a.sent();
                            filteredActiveTokenListArray = activeTokenListArrayForAllElements.filter(function (element) {
                                var arrayIsNotEmpty = element.totalCount !== 0;
                                return arrayIsNotEmpty;
                            });
                            return [2, filteredActiveTokenListArray];
                    }
                });
            });
        };
        HeatmapService.prototype.addShapeTypeToActiveToken = function (activeTokenListArray, elementsForOverlays) {
            activeTokenListArray.forEach(function (activeTokenList) {
                var elementOfActiveToken = elementsForOverlays.find(function (element) {
                    var isCorrectElement = element.id === activeTokenList.activeTokens[0].flowNodeId;
                    return isCorrectElement;
                });
                activeTokenList.activeTokens[0].type = elementOfActiveToken.type;
            });
        };
        HeatmapService.prototype.getElementsWithoutToken = function (elementsForOverlays, activeTokenListArray) {
            var elementsWithoutToken = elementsForOverlays.filter(function (element) {
                var activeTokenForElement = activeTokenListArray.find(function (activeTokenList) {
                    return activeTokenList.activeTokens[0].flowNodeId === element.id;
                });
                var noActiveTokenForElement = activeTokenForElement === undefined;
                return noActiveTokenForElement;
            });
            return elementsWithoutToken;
        };
        HeatmapService.prototype.elementIsEvent = function (type) {
            var elementTypeIsEvent = type === 'bpmn:StartEvent' ||
                type === 'bpmn:EndEvent' ||
                type === 'bpmn:IntermediateThrowEvent' ||
                type === 'bpmn:IntermediateCatchEvent' ||
                type === 'bpmn:BoundaryEvent';
            return elementTypeIsEvent;
        };
        HeatmapService.prototype.elementIsGateway = function (type) {
            var elementTypeIsGateway = type === 'bpmn:ExclusiveGateway' ||
                type === 'bpmn:ParallelGateway' ||
                type === 'bpmn:InclusiveGateway' ||
                type === 'bpmn:ComplexGateway' ||
                type === 'bpmn:EventBasedGateway';
            return elementTypeIsGateway;
        };
        HeatmapService.prototype.elementIsTask = function (type) {
            var elementTypeIsTask = type === 'bpmn:UserTask' ||
                type === 'bpmn:ScriptTask' ||
                type === 'bpmn:ServiceTask' ||
                type === 'bpmn:Task' ||
                type === 'bpmn:SendTask' ||
                type === 'bpmn:ReceiveTask' ||
                type === 'bpmn:ManualTask' ||
                type === 'bpmn:BusinessRuleTask' ||
                type === 'bpmn:CallActivity' ||
                type === 'bpmn:SubProcess';
            return elementTypeIsTask;
        };
        return HeatmapService;
    }());
    exports.HeatmapService = HeatmapService;
});


;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/inspect/inspect',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "aurelia-router", "../../contracts/index", "../../environment", "../../services/notification-service/notification.service", "../../services/solution-is-remote-solution-module/solution-is-remote-solution.module"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, aurelia_router_1, index_1, environment_1, notification_service_1, solution_is_remote_solution_module_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var Inspect = (function () {
        function Inspect(eventAggregator, solutionService, notificationService) {
            this.showDashboard = true;
            this.showHeatmap = false;
            this.showInspectProcessInstance = false;
            this.showTokenViewer = false;
            this.tokenViewerButtonDisabled = false;
            this.eventAggregator = eventAggregator;
            this.solutionService = solutionService;
            this.notificationService = notificationService;
        }
        Inspect.prototype.determineActivationStrategy = function () {
            return aurelia_router_1.activationStrategy.invokeLifecycle;
        };
        Inspect.prototype.canActivate = function (routeParameters) {
            var solutionUri = routeParameters.solutionUri
                ? routeParameters.solutionUri
                : window.localStorage.getItem('InternalProcessEngineRoute');
            if (solutionUri === 'about:open-diagrams') {
                this.activeSolutionEntry = this.solutionService.getSolutionEntryForUri(window.localStorage.getItem('InternalProcessEngineRoute'));
                return true;
            }
            this.activeSolutionEntry = this.solutionService.getSolutionEntryForUri(solutionUri);
            var noSolutionEntry = this.activeSolutionEntry === undefined;
            if (noSolutionEntry) {
                this.notificationService.showNotification(index_1.NotificationType.INFO, 'Please open a solution first.');
                return false;
            }
            return true;
        };
        Inspect.prototype.activate = function (routeParameters) {
            return __awaiter(this, void 0, void 0, function () {
                var solutionUri, diagramName, routeViewIsDashboard, routeViewIsHeatmap, routeViewIsInspectProcessInstance;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            solutionUri = routeParameters.solutionUri;
                            diagramName = routeParameters.diagramName;
                            return [4, this.updateInspectView(diagramName, solutionUri)];
                        case 1:
                            _a.sent();
                            routeViewIsDashboard = routeParameters.view === 'dashboard';
                            routeViewIsHeatmap = routeParameters.view === 'heatmap';
                            routeViewIsInspectProcessInstance = routeParameters.view === 'inspect-process-instance';
                            this.processInstanceToSelect = routeParameters.processInstanceToSelect;
                            this.flowNodeToSelect = routeParameters.flowNodeToSelect;
                            this.inspectPanelTabToShow = routeParameters.inspectPanelTabToShow;
                            if (routeViewIsDashboard) {
                                this.showHeatmap = false;
                                this.showDashboard = true;
                                this.showInspectProcessInstance = false;
                                this.eventAggregator.publish(environment_1.default.events.navBar.toggleDashboardView);
                            }
                            else if (routeViewIsHeatmap) {
                                this.eventAggregator.publish(environment_1.default.events.navBar.toggleHeatmapView);
                                this.showDashboard = false;
                                this.showHeatmap = true;
                                this.showInspectProcessInstance = false;
                            }
                            else if (routeViewIsInspectProcessInstance) {
                                this.eventAggregator.publish(environment_1.default.events.navBar.toggleInspectProcessInstanceView);
                                this.showDashboard = false;
                                this.showHeatmap = false;
                                this.showInspectProcessInstance = true;
                            }
                            return [2];
                    }
                });
            });
        };
        Inspect.prototype.attached = function () {
            var _this = this;
            this.subscriptions = [
                this.eventAggregator.subscribe(environment_1.default.events.inspect.shouldDisableTokenViewerButton, function (tokenViewerButtonDisabled) {
                    _this.tokenViewerButtonDisabled = tokenViewerButtonDisabled;
                }),
            ];
            var previousTokenViewerState = JSON.parse(window.localStorage.getItem('tokenViewerInspectCollapseState'));
            this.showTokenViewer = previousTokenViewerState || false;
        };
        Inspect.prototype.detached = function () {
            this.eventAggregator.publish(environment_1.default.events.navBar.inspectNavigateToDashboard);
            for (var _i = 0, _a = this.subscriptions; _i < _a.length; _i++) {
                var subscription = _a[_i];
                subscription.dispose();
            }
        };
        Inspect.prototype.toggleShowTokenViewer = function () {
            if (this.tokenViewerButtonDisabled) {
                return;
            }
            this.showTokenViewer = !this.showTokenViewer;
            this.eventAggregator.publish(environment_1.default.events.inspectProcessInstance.showTokenViewer, this.showTokenViewer);
            window.localStorage.setItem('tokenViewerInspectCollapseState', JSON.stringify(this.showTokenViewer));
        };
        Inspect.prototype.updateInspectView = function (diagramName, solutionUri) {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var solutionUriIsSet, solutionUriToUse, solutionIsRemote, diagramIsSet, newActiveDiagram, activeSolutionIsOpenSolution, persistedDiagrams, _b, activeDiagramChanged;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            solutionUriIsSet = solutionUri !== undefined;
                            solutionUriToUse = solutionUriIsSet
                                ? solutionUri
                                : window.localStorage.getItem('InternalProcessEngineRoute');
                            this.activeSolutionEntry = this.solutionService.getSolutionEntryForUri(solutionUriToUse);
                            return [4, this.activeSolutionEntry.service.openSolution(this.activeSolutionEntry.uri, this.activeSolutionEntry.identity)];
                        case 1:
                            _c.sent();
                            solutionIsRemote = solution_is_remote_solution_module_1.solutionIsRemoteSolution(solutionUriToUse);
                            if (solutionIsRemote) {
                                this.eventAggregator.publish(environment_1.default.events.configPanel.solutionEntryChanged, this.solutionService.getSolutionEntryForUri(solutionUriToUse));
                            }
                            diagramIsSet = diagramName !== undefined;
                            if (!diagramIsSet) return [3, 6];
                            newActiveDiagram = void 0;
                            activeSolutionIsOpenSolution = solutionUriToUse === 'about:open-diagrams';
                            if (!activeSolutionIsOpenSolution) return [3, 2];
                            persistedDiagrams = this.solutionService.getOpenDiagrams();
                            newActiveDiagram = persistedDiagrams.find(function (diagram) {
                                return diagram.name === diagramName;
                            });
                            return [3, 5];
                        case 2:
                            _c.trys.push([2, 4, , 5]);
                            return [4, this.activeSolutionEntry.service.loadDiagram(diagramName)];
                        case 3:
                            newActiveDiagram = _c.sent();
                            return [3, 5];
                        case 4:
                            _b = _c.sent();
                            return [3, 5];
                        case 5:
                            activeDiagramChanged = ((_a = this.activeDiagram) === null || _a === void 0 ? void 0 : _a.uri) !== newActiveDiagram.uri;
                            if (activeDiagramChanged) {
                                this.activeDiagram = newActiveDiagram;
                            }
                            _c.label = 6;
                        case 6: return [2];
                    }
                });
            });
        };
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", Boolean)
        ], Inspect.prototype, "showDashboard", void 0);
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", Object)
        ], Inspect.prototype, "activeDiagram", void 0);
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", Object)
        ], Inspect.prototype, "activeSolutionEntry", void 0);
        Inspect = __decorate([
            aurelia_framework_1.inject(aurelia_event_aggregator_1.EventAggregator, 'SolutionService', 'NotificationService'),
            __metadata("design:paramtypes", [aurelia_event_aggregator_1.EventAggregator, Object, notification_service_1.NotificationService])
        ], Inspect);
        return Inspect;
    }());
    exports.Inspect = Inspect;
});


;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/inspect/inspect-process-instance/components/diagram-viewer/diagram-viewer',["require", "exports", "aurelia-framework", "@process-engine/bpmn-js-custom-bundle", "@process-engine/management_api_contracts", "aurelia-event-aggregator", "../../../../../contracts/index", "../../../../../environment", "../../../../../services/notification-service/notification.service", "../../../../design/bpmn-io/services/index"], function (require, exports, aurelia_framework_1, bundle, management_api_contracts_1, aurelia_event_aggregator_1, index_1, environment_1, notification_service_1, index_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    bundle = __importStar(bundle);
    environment_1 = __importDefault(environment_1);
    var DiagramViewer = (function () {
        function DiagramViewer(notificationService, eventAggregator, liveExecutionTrackerService) {
            var _this = this;
            this.xmlIsNotSelected = true;
            this.handleArrowKeyInput = function (event) {
                var noElementSelected = _this.selectedFlowNode === undefined;
                if (noElementSelected) {
                    return;
                }
                var leftKeyPressed = event.code === 'ArrowLeft';
                var rightKeyPressed = event.code === 'ArrowRight';
                var topKeyPressed = event.code === 'ArrowUp';
                var bottomKeyPressed = event.code === 'ArrowDown';
                var elementToSelect;
                if (leftKeyPressed) {
                    elementToSelect = _this.getClosestElementOnTheLeftOfSelected();
                }
                else if (rightKeyPressed) {
                    elementToSelect = _this.getClosestElementOnTheRightOfSelected();
                }
                else if (topKeyPressed) {
                    elementToSelect = _this.getClosestElementAboveSelected();
                }
                else if (bottomKeyPressed) {
                    elementToSelect = _this.getClosestElementUnderSelected();
                }
                var elementToSelectNotFound = elementToSelect === undefined;
                if (elementToSelectNotFound) {
                    return;
                }
                _this.selectFlowNode(elementToSelect.id);
            };
            this.notificationService = notificationService;
            this.diagramExportService = new index_2.DiagramExportService();
            this.eventAggregator = eventAggregator;
            this.liveExecutionTrackerService = liveExecutionTrackerService;
        }
        DiagramViewer.prototype.attached = function () {
            var _this = this;
            if (!this.activeDiagram) {
                this.noCorrelationsFound = true;
            }
            this.diagramViewer = new bundle.viewer({
                additionalModules: [bundle.ZoomScrollModule, bundle.MoveCanvasModule],
            });
            this.elementRegistry = this.diagramViewer.get('elementRegistry');
            this.diagramViewer.attachTo(this.canvasModel);
            this.diagramViewer.on('element.click', function (event) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.selectFlowNode(event.element.id);
                    return [2];
                });
            }); });
            this.subscriptions = [
                this.eventAggregator.subscribe(environment_1.default.events.inspect.exportDiagramAs + ":BPMN", function () { return __awaiter(_this, void 0, void 0, function () {
                    var exportName, error_1;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                exportName = this.activeDiagram.name + ".bpmn";
                                return [4, this.diagramExportService
                                        .loadXML(this.xmlWithColorizedProgress)
                                        .asBpmn()
                                        .export(exportName)];
                            case 1:
                                _a.sent();
                                return [3, 3];
                            case 2:
                                error_1 = _a.sent();
                                this.notificationService.showNotification(index_1.NotificationType.ERROR, 'An error occurred while preparing the diagram for exporting');
                                return [3, 3];
                            case 3: return [2];
                        }
                    });
                }); }),
                this.eventAggregator.subscribe(environment_1.default.events.inspect.exportDiagramAs + ":SVG", function () { return __awaiter(_this, void 0, void 0, function () {
                    var exportName, error_2;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                exportName = this.activeDiagram.name + ".svg";
                                return [4, this.diagramExportService
                                        .loadSVG(this.uncoloredSVG)
                                        .asSVG()
                                        .export(exportName)];
                            case 1:
                                _a.sent();
                                return [3, 3];
                            case 2:
                                error_2 = _a.sent();
                                this.notificationService.showNotification(index_1.NotificationType.ERROR, 'An error occurred while preparing the diagram for exporting');
                                return [3, 3];
                            case 3: return [2];
                        }
                    });
                }); }),
                this.eventAggregator.subscribe(environment_1.default.events.inspect.exportDiagramAs + ":PNG", function () { return __awaiter(_this, void 0, void 0, function () {
                    var exportName, error_3;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                exportName = this.activeDiagram.name + ".png";
                                return [4, this.diagramExportService
                                        .loadSVG(this.uncoloredSVG)
                                        .asPNG()
                                        .export(exportName)];
                            case 1:
                                _a.sent();
                                return [3, 3];
                            case 2:
                                error_3 = _a.sent();
                                this.notificationService.showNotification(index_1.NotificationType.ERROR, 'An error occurred while preparing the diagram for exporting');
                                return [3, 3];
                            case 3: return [2];
                        }
                    });
                }); }),
                this.eventAggregator.subscribe(environment_1.default.events.inspect.exportDiagramAs + ":JPEG", function () { return __awaiter(_this, void 0, void 0, function () {
                    var exportName, error_4;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                exportName = this.activeDiagram.name + ".jpeg";
                                return [4, this.diagramExportService
                                        .loadSVG(this.uncoloredSVG)
                                        .asJPEG()
                                        .export(exportName)];
                            case 1:
                                _a.sent();
                                return [3, 3];
                            case 2:
                                error_4 = _a.sent();
                                this.notificationService.showNotification(index_1.NotificationType.ERROR, 'An error occurred while preparing the diagram for exporting');
                                return [3, 3];
                            case 3: return [2];
                        }
                    });
                }); }),
                this.eventAggregator.subscribe(environment_1.default.events.inspectProcessInstance.noCorrelationsFound, function (noCorrelationsFound) {
                    _this.noCorrelationsFound = noCorrelationsFound;
                }),
            ];
            document.addEventListener('keydown', this.handleArrowKeyInput);
        };
        DiagramViewer.prototype.selectFlowNode = function (flowNodeId) {
            if (this.processInstance === undefined) {
                this.flowNodeToSetAfterProcessInstanceIsSet = flowNodeId;
                return;
            }
            var element = this.elementRegistry.get(flowNodeId);
            this.selectedFlowNode = element;
            this.diagramViewer.get('selection').select(element);
        };
        DiagramViewer.prototype.detached = function () {
            document.removeEventListener('keydown', this.handleArrowKeyInput);
            var bjsContainer = this.canvasModel.getElementsByClassName('bjs-container')[0];
            var bjsContainerIsExisting = this.canvasModel !== undefined &&
                this.canvasModel !== null &&
                this.canvasModel.childElementCount > 1 &&
                bjsContainer !== undefined &&
                bjsContainer !== null;
            if (bjsContainerIsExisting) {
                this.canvasModel.removeChild(bjsContainer);
            }
            var diagramViewerIsExisting = this.diagramViewer !== undefined;
            if (diagramViewerIsExisting) {
                this.diagramViewer.detach();
                this.diagramViewer.destroy();
                this.diagramViewer = undefined;
                this.xml = undefined;
                this.xmlIsNotSelected = true;
            }
            this.subscriptions.forEach(function (subscription) { return subscription.dispose(); });
        };
        DiagramViewer.prototype.processInstanceChanged = function () {
            return __awaiter(this, void 0, void 0, function () {
                var noProcessInstanceSelected, uncoloredXml, _a, _b, elementSelected, previouslySelectedElementFound, flowNodeNeedsToBeSelected;
                var _this = this;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            noProcessInstanceSelected = this.processInstance === undefined;
                            if (noProcessInstanceSelected) {
                                return [2];
                            }
                            this.xml = this.processInstance.xml;
                            return [4, this.liveExecutionTrackerService.clearDiagramColors(this.xml)];
                        case 1:
                            uncoloredXml = _c.sent();
                            _a = this;
                            return [4, this.liveExecutionTrackerService.getColorizedDiagram(this.activeSolutionEntry.identity, uncoloredXml, this.processInstance.processInstanceId, true)];
                        case 2:
                            _a.xmlWithColorizedProgress = _c.sent();
                            return [4, this.importXml(this.xmlWithColorizedProgress)];
                        case 3:
                            _c.sent();
                            _b = this;
                            return [4, this.getSVG()];
                        case 4:
                            _b.uncoloredSVG = _c.sent();
                            elementSelected = this.selectedFlowNode !== undefined;
                            if (elementSelected) {
                                previouslySelectedElementFound = this.elementRegistry.getAll().some(function (element) {
                                    var isSelectedElement = element.id === _this.selectedFlowNode.id;
                                    return isSelectedElement;
                                });
                                if (previouslySelectedElementFound) {
                                    this.selectFlowNode(this.selectedFlowNode.id);
                                }
                                else {
                                    this.selectStartEvent();
                                }
                            }
                            else {
                                this.selectStartEvent();
                            }
                            this.fitDiagramToViewport();
                            flowNodeNeedsToBeSelected = this.flowNodeToSetAfterProcessInstanceIsSet !== undefined;
                            if (flowNodeNeedsToBeSelected) {
                                this.selectFlowNode(this.flowNodeToSetAfterProcessInstanceIsSet);
                                this.flowNodeToSetAfterProcessInstanceIsSet = undefined;
                            }
                            return [2];
                    }
                });
            });
        };
        DiagramViewer.prototype.activeDiagramChanged = function () {
            var diagramViewerIsNotSet = this.diagramViewer === undefined;
            if (diagramViewerIsNotSet) {
                return;
            }
            this.diagramViewer.clear();
            this.xmlIsNotSelected = true;
            this.noCorrelationsFound = false;
            this.xml = undefined;
            this.fitDiagramToViewport();
        };
        DiagramViewer.prototype.xmlChanged = function () {
            this.xmlIsNotSelected = this.xml === undefined;
        };
        DiagramViewer.prototype.selectStartEvent = function () {
            var startEvent = this.elementRegistry.filter(function (element) {
                return element.type === 'bpmn:StartEvent';
            })[0];
            this.selectFlowNode(startEvent.id);
        };
        DiagramViewer.prototype.fitDiagramToViewport = function () {
            var canvas = this.diagramViewer.get('canvas');
            canvas.zoom('fit-viewport', 'auto');
        };
        DiagramViewer.prototype.importXml = function (xml) {
            return __awaiter(this, void 0, void 0, function () {
                var xmlIsNotLoaded, notificationMessage, xmlImportPromise;
                var _this = this;
                return __generator(this, function (_a) {
                    xmlIsNotLoaded = xml === undefined || xml === null;
                    if (xmlIsNotLoaded) {
                        notificationMessage = 'The xml could not be loaded. Please try to reopen the Inspect Process Instance view.';
                        this.notificationService.showNotification(index_1.NotificationType.ERROR, notificationMessage);
                        return [2, undefined];
                    }
                    xmlImportPromise = new Promise(function (resolve, reject) {
                        _this.diagramViewer.importXML(xml, function (importXmlError) {
                            if (importXmlError) {
                                reject(importXmlError);
                                return;
                            }
                            resolve();
                        });
                    });
                    return [2, xmlImportPromise];
                });
            });
        };
        DiagramViewer.prototype.getSVG = function () {
            return __awaiter(this, void 0, void 0, function () {
                var returnPromise;
                var _this = this;
                return __generator(this, function (_a) {
                    returnPromise = new Promise(function (resolve, reject) {
                        _this.diagramViewer.saveSVG({ format: true }, function (error, result) {
                            if (error) {
                                reject(error);
                            }
                            resolve(result);
                        });
                    });
                    return [2, returnPromise];
                });
            });
        };
        DiagramViewer.prototype.getClosestElementOnTheLeftOfSelected = function () {
            var elementsOnTheLeft = this.getElementsOnTheLeftOfTheSelected();
            var noElementsAreOnTheLeftOfTheSelected = elementsOnTheLeft.length === 0;
            if (noElementsAreOnTheLeftOfTheSelected) {
                return undefined;
            }
            var elementsOnTheLeftOverlappingOnYAxis = this.filterElementsThatOverlapWithSelectedOnYAxis(elementsOnTheLeft);
            var elementsOnTheLeftOverlappingOnYAxisIsNotEmpty = elementsOnTheLeftOverlappingOnYAxis.length > 0;
            var elementsToWorkWith = elementsOnTheLeftOverlappingOnYAxisIsNotEmpty
                ? elementsOnTheLeftOverlappingOnYAxis
                : elementsOnTheLeft;
            return this.getClosestElementByX(elementsToWorkWith);
        };
        DiagramViewer.prototype.getClosestElementOnTheRightOfSelected = function () {
            var elementsOnTheRight = this.getElementsOnTheRightOfTheSelected();
            var noElementsAreOnTheRightOfTheSelected = elementsOnTheRight.length === 0;
            if (noElementsAreOnTheRightOfTheSelected) {
                return undefined;
            }
            var elementsOnTheRightOverlappingOnYAxis = this.filterElementsThatOverlapWithSelectedOnYAxis(elementsOnTheRight);
            var elementsOnTheRightOverlappingOnYAxisIsNotEmpty = elementsOnTheRightOverlappingOnYAxis.length > 0;
            var elementsToWorkWith = elementsOnTheRightOverlappingOnYAxisIsNotEmpty
                ? elementsOnTheRightOverlappingOnYAxis
                : elementsOnTheRight;
            return this.getClosestElementByX(elementsToWorkWith);
        };
        DiagramViewer.prototype.getClosestElementAboveSelected = function () {
            var elementsAboveSelected = this.getElementsAboveTheSelected();
            var noElementsAreAboveTheSelected = elementsAboveSelected.length === 0;
            if (noElementsAreAboveTheSelected) {
                return undefined;
            }
            var elementsAboveSelectedOverlappingOnXAxis = this.filterElementsThatOverlapWithSelectedOnXAxis(elementsAboveSelected);
            var elementsAboveSelectedOverlappingOnXAxisIsNotEmpty = elementsAboveSelectedOverlappingOnXAxis.length > 0;
            var elementsToWorkWith = elementsAboveSelectedOverlappingOnXAxisIsNotEmpty
                ? elementsAboveSelectedOverlappingOnXAxis
                : elementsAboveSelected;
            return this.getClosestElementByY(elementsToWorkWith);
        };
        DiagramViewer.prototype.getClosestElementUnderSelected = function () {
            var elementsUnderSelected = this.getElementsUnderTheSelected();
            var noElementsAreUnderTheSelected = elementsUnderSelected.length === 0;
            if (noElementsAreUnderTheSelected) {
                return undefined;
            }
            var elementsUnderSelectedOverlappingOnXAxis = this.filterElementsThatOverlapWithSelectedOnXAxis(elementsUnderSelected);
            var elementsUnderSelectedOverlappingOnXAxisIsNotEmpty = elementsUnderSelectedOverlappingOnXAxis.length > 0;
            var elementsToWorkWith = elementsUnderSelectedOverlappingOnXAxisIsNotEmpty
                ? elementsUnderSelectedOverlappingOnXAxis
                : elementsUnderSelected;
            return this.getClosestElementByY(elementsToWorkWith);
        };
        DiagramViewer.prototype.getClosestElementByX = function (elements) {
            var _this = this;
            return elements.reduce(function (previousElement, currentElement) {
                var noPreviousElementExists = previousElement === undefined;
                if (noPreviousElementExists) {
                    return currentElement;
                }
                var distancePreviousElement = Math.abs(_this.selectedFlowNode.x - previousElement.x);
                var distanceCurrentElement = Math.abs(_this.selectedFlowNode.x - currentElement.x);
                var currentElementIsCloser = distanceCurrentElement < distancePreviousElement;
                return currentElementIsCloser ? currentElement : previousElement;
            });
        };
        DiagramViewer.prototype.getClosestElementByY = function (elements) {
            var _this = this;
            return elements.reduce(function (previousElement, currentElement) {
                var noPreviousElementExists = previousElement === undefined;
                if (noPreviousElementExists) {
                    return currentElement;
                }
                var distancePreviousElement = Math.abs(_this.selectedFlowNode.y - previousElement.y);
                var distanceCurrentElement = Math.abs(_this.selectedFlowNode.y - currentElement.y);
                var currentElementIsCloser = distanceCurrentElement < distancePreviousElement;
                return currentElementIsCloser ? currentElement : previousElement;
            });
        };
        DiagramViewer.prototype.filterElementsThatOverlapWithSelectedOnYAxis = function (elementsToFilter) {
            var _this = this;
            return elementsToFilter.filter(function (element) {
                var elementStartsBetweenSelectedElement = element.y >= _this.selectedFlowNode.y && element.y <= _this.selectedFlowNode.y + _this.selectedFlowNode.height;
                var elementEndsBetweenSelectedElement = element.y + element.height >= _this.selectedFlowNode.y &&
                    element.y + element.height <= _this.selectedFlowNode.y + _this.selectedFlowNode.height;
                var elementStartsBeforeSelectedAndEndsAfterSelected = _this.selectedFlowNode.y > element.y &&
                    _this.selectedFlowNode.y + _this.selectedFlowNode.height < element.y + element.height;
                return (elementStartsBetweenSelectedElement ||
                    elementEndsBetweenSelectedElement ||
                    elementStartsBeforeSelectedAndEndsAfterSelected);
            });
        };
        DiagramViewer.prototype.filterElementsThatOverlapWithSelectedOnXAxis = function (elementsToFilter) {
            var _this = this;
            return elementsToFilter.filter(function (element) {
                var elementStartsBetweenSelectedElement = element.x >= _this.selectedFlowNode.x && element.x <= _this.selectedFlowNode.x + _this.selectedFlowNode.width;
                var elementEndsBetweenSelectedElement = element.x + element.width >= _this.selectedFlowNode.x &&
                    element.x + element.width <= _this.selectedFlowNode.x + _this.selectedFlowNode.width;
                var elementStartsBeforeSelectedAndEndsAfterSelected = _this.selectedFlowNode.x > element.x &&
                    _this.selectedFlowNode.x + _this.selectedFlowNode.width < element.x + element.width;
                return (elementStartsBetweenSelectedElement ||
                    elementEndsBetweenSelectedElement ||
                    elementStartsBeforeSelectedAndEndsAfterSelected);
            });
        };
        DiagramViewer.prototype.getElementsAboveTheSelected = function () {
            var _this = this;
            var elementsThatCanHaveAToken = this.getElementsThatCanHaveAToken();
            return elementsThatCanHaveAToken.filter(function (element) {
                var elementIsAboveTheSelectedFlowNode = _this.selectedFlowNode.y > element.y + element.height;
                return elementIsAboveTheSelectedFlowNode;
            });
        };
        DiagramViewer.prototype.getElementsUnderTheSelected = function () {
            var _this = this;
            var elementsThatCanHaveAToken = this.getElementsThatCanHaveAToken();
            return elementsThatCanHaveAToken.filter(function (element) {
                var elementIsUnderTheSelectedFlowNode = _this.selectedFlowNode.y + _this.selectedFlowNode.height < element.y;
                return elementIsUnderTheSelectedFlowNode;
            });
        };
        DiagramViewer.prototype.getElementsOnTheRightOfTheSelected = function () {
            var _this = this;
            var elementsThatCanHaveAToken = this.getElementsThatCanHaveAToken();
            return elementsThatCanHaveAToken.filter(function (element) {
                var elementIsOnTheRightOfTheSelectedFlowNode = _this.selectedFlowNode.x < element.x;
                return elementIsOnTheRightOfTheSelectedFlowNode;
            });
        };
        DiagramViewer.prototype.getElementsOnTheLeftOfTheSelected = function () {
            var _this = this;
            var elementsThatCanHaveAToken = this.getElementsThatCanHaveAToken();
            return elementsThatCanHaveAToken.filter(function (element) {
                var elementIsOnTheLeftOfTheSelectedFlowNode = _this.selectedFlowNode.x > element.x;
                return elementIsOnTheLeftOfTheSelectedFlowNode;
            });
        };
        DiagramViewer.prototype.getElementsThatCanHaveAToken = function () {
            return this.elementRegistry.filter(function (element) {
                var elementCanHaveAToken = element.type !== 'bpmn:Participant' &&
                    element.type !== 'bpmn:Collaboration' &&
                    element.type !== 'bpmn:Lane' &&
                    element.type !== 'bpmn:LaneSet' &&
                    element.type !== 'label' &&
                    element.type !== 'bpmn:TextAnnotation' &&
                    element.type !== 'bpmn:SequenceFlow';
                return elementCanHaveAToken;
            });
        };
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", management_api_contracts_1.DataModels.Correlations.ProcessInstance)
        ], DiagramViewer.prototype, "processInstance", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", String)
        ], DiagramViewer.prototype, "xml", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Object)
        ], DiagramViewer.prototype, "activeDiagram", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Object)
        ], DiagramViewer.prototype, "selectedFlowNode", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Object)
        ], DiagramViewer.prototype, "activeSolutionEntry", void 0);
        DiagramViewer = __decorate([
            aurelia_framework_1.inject('NotificationService', aurelia_event_aggregator_1.EventAggregator, 'LiveExecutionTrackerService'),
            __metadata("design:paramtypes", [notification_service_1.NotificationService,
                aurelia_event_aggregator_1.EventAggregator, Object])
        ], DiagramViewer);
        return DiagramViewer;
    }());
    exports.DiagramViewer = DiagramViewer;
});


;
define('text!modules/inspect/inspect-process-instance/components/diagram-viewer/diagram-viewer.css',[],function(){return ".diagram-viewer {\n  position: relative;\n  height: calc(50% - 14px);\n  margin-bottom: 21px;\n  overflow: hidden;\n  background: #f7f7f7;\n  border: 1px solid #ccc; }\n\n.diagram-viewer__body {\n  position: relative;\n  height: 100%; }\n\n.diagram-viewer__empty-message {\n  position: absolute;\n  left: 50%;\n  top: 60%;\n  white-space: nowrap;\n  transform: translate(-50%, -50%);\n  user-select: none; }\n\n.diagram-viewer__loading-spinner {\n  position: absolute;\n  top: 25%;\n  left: 50%;\n  display: inline-block;\n  transform: translate(-50%, -50%);\n  user-select: none;\n  white-space: nowrap; }\n";});;
define('text!modules/inspect/inspect-process-instance/components/diagram-viewer/diagram-viewer.html',[],function(){return "<template>\n  <require from=\"@process-engine/bpmn-js-custom-bundle/bpmn-modeler-custom.css\"></require>\n  <require from=\"./diagram-viewer.css\"></require>\n  <div ref=\"canvasModel\" class=\"diagram-viewer__body\">\n    <div if.bind=\"xmlIsNotSelected && !noCorrelationsFound\">\n      <img src=\"src/resources/images/gears.svg\" class=\"diagram-viewer__loading-spinner\">\n      <h3 class=\"diagram-viewer__empty-message\">Loading Correlations...</h3>\n    </div>\n    <h3 if.bind=\"noCorrelationsFound\" class=\"diagram-viewer__empty-message\">No correlations found.</h3>\n  </div>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/inspect/inspect-process-instance/components/inspect-panel/components/correlation-list/correlation-list',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "@process-engine/management_api_contracts", "../../../../../../../contracts/index", "../../../../../../../environment", "../../../../../../../services/date-service/date.service"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, management_api_contracts_1, index_1, environment_1, date_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var PAGE_SIZES = [20, 50, 100, 200];
    var MIN_PAGESIZE = PAGE_SIZES[0];
    exports.DEFAULT_PAGESIZE = PAGE_SIZES[1];
    var PAGINATION_SIZE = 10;
    var CorrelationList = (function () {
        function CorrelationList(eventAggregator) {
            this.currentPage = 1;
            this.pageSize = exports.DEFAULT_PAGESIZE;
            this.minPageSize = MIN_PAGESIZE;
            this.paginationSize = PAGINATION_SIZE;
            this.pageSizes = PAGE_SIZES;
            this.correlationListSortProperty = index_1.CorrelationListSortProperty;
            this.sortSettings = {
                ascending: false,
                sortProperty: index_1.CorrelationListSortProperty.StartedAt,
            };
            this.tableData = [];
            this.eventAggregator = eventAggregator;
        }
        CorrelationList.prototype.showProcessInstanceList = function () {
            this.eventAggregator.publish(environment_1.default.events.inspectProcessInstance.showProcessInstanceList);
        };
        CorrelationList.prototype.selectCorrelation = function (selectedTableEntry) {
            this.selectedCorrelation = this.getCorrelationForTableEntry(selectedTableEntry);
            this.selectedTableEntry = selectedTableEntry;
        };
        CorrelationList.prototype.activeDiagramChanged = function () {
            this.currentPage = 1;
            this.correlationToSelect = undefined;
            this.correlationToSelectTableEntry = undefined;
        };
        CorrelationList.prototype.correlationToSelectChanged = function () {
            if (this.correlationToSelect === undefined || this.sortedTableData === undefined) {
                return;
            }
            this.selectCorrelationToSelect();
        };
        CorrelationList.prototype.correlationsChanged = function () {
            if (!this.activeDiagram) {
                return;
            }
            this.tableData = this.convertCorrelationsIntoTableData(this.correlations);
            this.sortTableData();
            var tableDataIsExisiting = this.sortedTableData.length > 0;
            if (tableDataIsExisiting && this.correlationToSelect) {
                this.selectCorrelationToSelect();
            }
            else if (tableDataIsExisiting) {
                var firstTableEntry = this.sortedTableData[0];
                this.selectCorrelation(firstTableEntry);
            }
            this.paginationShowsLoading = false;
        };
        CorrelationList.prototype.pageSizeChanged = function (newValue, oldValue) {
            var isNotInitializedYet = oldValue === undefined;
            if (isNotInitializedYet) {
                return;
            }
            var showAllProcessInstances = this.pageSize === 0;
            if (showAllProcessInstances) {
                this.currentPage = 1;
            }
            else {
                this.sortSettings.ascending = false;
                this.sortSettings.sortProperty = index_1.CorrelationListSortProperty.StartedAt;
                this.sortTableData();
            }
            var isFirstPage = this.currentPage === 1;
            if (isFirstPage) {
                var payload = {
                    offset: 0,
                    limit: this.pageSize,
                };
                this.eventAggregator.publish(environment_1.default.events.inspectProcessInstance.updateCorrelations, payload);
                return;
            }
            var currentOffset = (this.currentPage - 1) * oldValue;
            this.currentPage = Math.floor(currentOffset / this.pageSize) + 1;
        };
        CorrelationList.prototype.currentPageChanged = function (newValue, oldValue) {
            var isNotInitializedYet = oldValue === undefined;
            if (isNotInitializedYet) {
                return;
            }
            var payload = {
                offset: this.currentPage === 1 || this.currentPage === 0 ? 0 : (this.currentPage - 1) * this.pageSize,
                limit: this.pageSize,
            };
            this.eventAggregator.publish(environment_1.default.events.inspectProcessInstance.updateCorrelations, payload);
        };
        Object.defineProperty(CorrelationList.prototype, "showSortOption", {
            get: function () {
                return this.pageSize == 0 || this.totalCount < this.minPageSize;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CorrelationList.prototype, "showCorrelationToSelect", {
            get: function () {
                var _this = this;
                var correlationToSelectExist = this.correlationToSelect != null;
                var correlationToSelectTableEntryExist = this.correlationToSelectTableEntry != null;
                if (this.sortedTableData == null || !correlationToSelectExist) {
                    return correlationToSelectExist && correlationToSelectTableEntryExist;
                }
                var correlationToSelectIsNotInTable = this.sortedTableData.find(function (entry) { return entry.correlationId === _this.correlationToSelect.id; }) == null;
                return correlationToSelectExist && correlationToSelectTableEntryExist && correlationToSelectIsNotInTable;
            },
            enumerable: true,
            configurable: true
        });
        CorrelationList.prototype.convertCorrelationsIntoTableData = function (correlations) {
            return correlations.map(this.convertCorrelationIntoTableData);
        };
        CorrelationList.prototype.convertCorrelationIntoTableData = function (correlation) {
            var tableEntry = {
                startedAt: date_service_1.getBeautifiedDate(correlation.createdAt),
                state: correlation.state,
                correlationId: correlation.id,
            };
            return tableEntry;
        };
        CorrelationList.prototype.changeSortSettings = function (property) {
            if (!this.showSortOption) {
                return;
            }
            var isSameSortPropertyAsBefore = this.sortSettings.sortProperty === property;
            var ascending = isSameSortPropertyAsBefore ? !this.sortSettings.ascending : true;
            this.sortSettings.ascending = ascending;
            this.sortSettings.sortProperty = property;
            this.sortTableData();
        };
        CorrelationList.prototype.selectCorrelationToSelect = function () {
            var _this = this;
            var correlationFromTableData = this.sortedTableData.find(function (correlation) {
                return correlation.correlationId === _this.correlationToSelect.id;
            });
            this.correlationToSelectTableEntry =
                correlationFromTableData || this.convertCorrelationIntoTableData(this.correlationToSelect);
            this.selectCorrelation(this.correlationToSelectTableEntry);
        };
        CorrelationList.prototype.sortTableData = function () {
            var sortByDate = this.sortSettings.sortProperty === index_1.CorrelationListSortProperty.StartedAt;
            var sortedTableData = sortByDate
                ? this.sortTableDataByStartDate()
                : this.sortTableDataByProperty(this.sortSettings.sortProperty);
            this.sortedTableData = this.sortSettings.ascending ? sortedTableData : sortedTableData.reverse();
        };
        CorrelationList.prototype.sortTableDataByProperty = function (property) {
            var copyOfTableData = this.tableData.slice();
            var sortedTableData = copyOfTableData.sort(function (firstEntry, secondEntry) {
                var firstEntryIsBigger = firstEntry[property] > secondEntry[property];
                if (firstEntryIsBigger) {
                    return 1;
                }
                var secondEntryIsBigger = firstEntry[property] < secondEntry[property];
                if (secondEntryIsBigger) {
                    return -1;
                }
                return 0;
            });
            return sortedTableData;
        };
        CorrelationList.prototype.sortTableDataByStartDate = function () {
            var copyOfTableData = this.tableData.slice();
            var sortedTableData = copyOfTableData.sort(function (firstEntry, secondEntry) {
                var firstProcessInstanceDate = new Date(firstEntry.startedAt);
                var secondProcessInstanceDate = new Date(secondEntry.startedAt);
                var firstEntryIsBigger = firstProcessInstanceDate.getTime() > secondProcessInstanceDate.getTime();
                if (firstEntryIsBigger) {
                    return 1;
                }
                var secondEntryIsBigger = firstProcessInstanceDate.getTime() < secondProcessInstanceDate.getTime();
                if (secondEntryIsBigger) {
                    return -1;
                }
                return 0;
            });
            return sortedTableData;
        };
        CorrelationList.prototype.getCorrelationForTableEntry = function (tableEntry) {
            var correlationForTableEntry = this.correlations.find(function (correlation) {
                return correlation.id === tableEntry.correlationId;
            });
            return correlationForTableEntry || this.correlationToSelect;
        };
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", management_api_contracts_1.DataModels.Correlations.Correlation)
        ], CorrelationList.prototype, "correlationToSelect", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Object)
        ], CorrelationList.prototype, "correlationToSelectTableEntry", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", management_api_contracts_1.DataModels.Correlations.Correlation)
        ], CorrelationList.prototype, "selectedCorrelation", void 0);
        __decorate([
            aurelia_framework_1.bindable, aurelia_framework_1.observable,
            __metadata("design:type", Array)
        ], CorrelationList.prototype, "correlations", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Object)
        ], CorrelationList.prototype, "activeDiagram", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Array)
        ], CorrelationList.prototype, "sortedTableData", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Boolean)
        ], CorrelationList.prototype, "paginationShowsLoading", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Object)
        ], CorrelationList.prototype, "selectedTableEntry", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Number)
        ], CorrelationList.prototype, "totalCount", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Number)
        ], CorrelationList.prototype, "currentPage", void 0);
        __decorate([
            aurelia_framework_1.observable,
            __metadata("design:type", Number)
        ], CorrelationList.prototype, "pageSize", void 0);
        __decorate([
            aurelia_framework_1.computedFrom('pageSize', 'totalCount'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [])
        ], CorrelationList.prototype, "showSortOption", null);
        __decorate([
            aurelia_framework_1.computedFrom('sortedTableData.length', 'pageSize'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [])
        ], CorrelationList.prototype, "showCorrelationToSelect", null);
        CorrelationList = __decorate([
            aurelia_framework_1.inject(aurelia_event_aggregator_1.EventAggregator),
            __metadata("design:paramtypes", [aurelia_event_aggregator_1.EventAggregator])
        ], CorrelationList);
        return CorrelationList;
    }());
    exports.CorrelationList = CorrelationList;
});


;
define('text!modules/inspect/inspect-process-instance/components/inspect-panel/components/correlation-list/correlation-list.css',[],function(){return ".correlation-container {\n  position: relative;\n  width: 100%;\n  height: 100%; }\n\n.correlation-table {\n  width: 100%;\n  height: 100%;\n  background: #f0f0f0;\n  user-select: text; }\n\n.correlation-table__headlines {\n  display: flex;\n  width: 100%; }\n\n.correlation-table__headline {\n  width: 34%;\n  padding: 8px;\n  overflow: hidden;\n  border-bottom: 2px solid #ccc !important;\n  font-size: 14px;\n  font-weight: 900;\n  text-overflow: ellipsis;\n  white-space: nowrap; }\n\n.correlation-table__headline--number {\n  width: 10%;\n  padding: 8px;\n  overflow: hidden;\n  border-bottom: 2px solid #ccc !important;\n  font-size: 14px;\n  font-weight: 900;\n  text-overflow: ellipsis;\n  white-space: nowrap; }\n\n.correlation-table__body {\n  display: block;\n  height: 100%;\n  overflow: auto; }\n\n.correlation-table__table-row {\n  display: flex;\n  width: 100%; }\n\n.correlation-table__table-row--instance-to-select {\n  border: 4px double; }\n\n.correlation-table__table-entry {\n  width: 34%;\n  padding: 8px;\n  overflow: hidden;\n  border-top: none !important;\n  border-bottom: 1px solid #ccc;\n  text-overflow: ellipsis; }\n\n.correlation-table__table-entry--state {\n  text-transform: uppercase; }\n\n.correlation-table__pagesize-entry {\n  float: left;\n  margin-top: 5px;\n  margin-right: 5px; }\n\n.correlation-table__pagesize-entry--select {\n  width: 70px;\n  margin: unset; }\n\n.correlation-table__pagination-entry {\n  width: 70%; }\n\n.correlation-table__selected-entry {\n  background-color: #d3d3d3 !important; }\n\n.correlation-table__empty-message {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  user-select: none; }\n";});;
define('text!modules/inspect/inspect-process-instance/components/inspect-panel/components/correlation-list/correlation-list.html',[],function(){return "<template>\n  <require from=\"./correlation-list.css\"></require>\n  <require from=\"../../../../../../pagination/pagination\"></require>\n  <div class=\"correlation-container\">\n    <h3 if.bind=\"correlations.length === 0\" class=\"correlation-table__empty-message\">No Correlations found.</h3>\n    <table else class=\"table table-striped table-hover correlation-table\">\n      <thead>\n        <tr class=\"correlation-table__headlines\">\n          <th class=\"correlation-table__headline\" click.delegate=\"changeSortSettings(correlationListSortProperty.StartedAt)\">\n            Started at <i if.bind=\"sortSettings.sortProperty === correlationListSortProperty.StartedAt && showSortOption\" class.bind=\"sortSettings.ascending ? 'fas fa-caret-up' : ' fas fa-caret-down'\"></i>\n          </th>\n          <th class=\"correlation-table__headline\" click.delegate=\"changeSortSettings(correlationListSortProperty.State)\">\n            State <i if.bind=\"sortSettings.sortProperty == correlationListSortProperty.State && showSortOption\" class.bind=\"sortSettings.ascending ? 'fas fa-caret-up' : ' fas fa-caret-down'\"></i>\n          </th>\n          <th class=\"correlation-table__headline\" click.delegate=\"changeSortSettings(correlationListSortProperty.CorrelationId)\">\n            Correlation ID <i if.bind=\"sortSettings.sortProperty === correlationListSortProperty.CorrelationId && showSortOption\" class.bind=\"sortSettings.ascending ? 'fas fa-caret-up' : ' fas fa-caret-down'\"></i>\n          </th>\n        </tr>\n      </thead>\n      <tbody class=\"correlation-table__body\">\n        <tr if.bind=\"showCorrelationToSelect\" dblclick.delegate=\"showProcessInstanceList()\" class=\"correlation-table__table-row correlation-table__table-row--instance-to-select\" class.bind=\"correlationToSelectTableEntry.correlationId === selectedTableEntry.correlationId ? 'correlation-table__selected-entry': ''\" click.delegate=\"selectCorrelation(correlationToSelectTableEntry)\">\n          <td class=\"correlation-table__table-entry\">${correlationToSelectTableEntry.startedAt}</td>\n          <td class=\"correlation-table__table-entry correlation-table__table-entry--state\">${correlationToSelectTableEntry.state}</td>\n          <td class=\"correlation-table__table-entry\">${correlationToSelectTableEntry.correlationId}</td>\n        </tr>\n        <tr dblclick.delegate=\"showProcessInstanceList()\" class=\"correlation-table__table-row\" repeat.for=\"tableEntry of sortedTableData\" class.bind=\"tableEntry.correlationId === selectedTableEntry.correlationId ? 'correlation-table__selected-entry': ''\" click.delegate=\"selectCorrelation(tableEntry)\">\n          <td class=\"correlation-table__table-entry\">${tableEntry.startedAt}</td>\n          <td class=\"correlation-table__table-entry correlation-table__table-entry--state\">${tableEntry.state}</td>\n          <td class=\"correlation-table__table-entry\">${tableEntry.correlationId}</td>\n        </tr>\n        <tr if.bind=\"totalCount > minPageSize\" class=\"correlation-table__table-row\">\n          <td>\n            <div class=\"correlation-table__pagesize-entry\">\n              Page size:\n            </div>\n            <select class=\"form-control correlation-table__pagesize-entry--select\" value.bind=\"pageSize\">\n              <option model.bind=\"size\" repeat.for=\"size of pageSizes\">${size}</option>\n              <option model.bind=\"0\">All</option>\n            </select>\n          </td>\n          <td class=\"correlation-table__pagination-entry\">\n            <pagination show.bind=\"pageSize < totalCount && pageSize > 0\" view-model.ref=\"pagination\" current-page.two-way=\"currentPage\" per-page.to-view=\"pageSize\" items.to-view=\"totalCount\" max-pages-to-display.to-view=\"paginationSize\" content-is-async.bind=\"true\" is-loading.two-way=\"paginationShowsLoading\"></pagination>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define('modules/inspect/inspect-process-instance/components/inspect-panel/components/log-viewer/log-viewer',["require", "exports", "aurelia-framework", "@process-engine/management_api_contracts", "../../../../../../../contracts/index", "../../../../../../../services/date-service/date.service", "../../../../../../../services/notification-service/notification.service"], function (require, exports, aurelia_framework_1, management_api_contracts_1, index_1, date_service_1, notification_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var LogViewer = (function () {
        function LogViewer(notificationService, inspectProcessInstanceService) {
            this.logSortProperty = index_1.LogSortProperty;
            this.sortSettings = {
                ascending: false,
                sortProperty: index_1.LogSortProperty.Time,
            };
            this.notificationService = notificationService;
            this.inspectProcessInstanceService = inspectProcessInstanceService;
        }
        LogViewer.prototype.processInstanceChanged = function () {
            return __awaiter(this, void 0, void 0, function () {
                var noProcessInstanceSet;
                var _this = this;
                return __generator(this, function (_a) {
                    noProcessInstanceSet = this.processInstance === undefined;
                    if (noProcessInstanceSet) {
                        return [2];
                    }
                    setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
                        var logList;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4, this.inspectProcessInstanceService.getLogsForProcessInstance(this.processInstance.processModelId, this.processInstance.processInstanceId, this.activeSolutionEntry.identity)];
                                case 1:
                                    logList = _a.sent();
                                    this.log = logList.logEntries;
                                    this.sortLogs();
                                    return [2];
                            }
                        });
                    }); }, 0);
                    return [2];
                });
            });
        };
        LogViewer.prototype.getDateStringFromTimestamp = function (timestamp) {
            var dateString = date_service_1.getBeautifiedDate(timestamp);
            return dateString;
        };
        LogViewer.prototype.changeSortProperty = function (property) {
            var isSamePropertyAsPrevious = this.sortSettings.sortProperty === property;
            var ascending = isSamePropertyAsPrevious ? !this.sortSettings.ascending : true;
            this.sortSettings.ascending = ascending;
            this.sortSettings.sortProperty = property;
            this.sortLogs();
        };
        LogViewer.prototype.sortLogs = function () {
            var sortPropertyIsTime = this.sortSettings.sortProperty === index_1.LogSortProperty.Time;
            var sortedLog = sortPropertyIsTime
                ? this.getSortedLogByDate()
                : this.getSortedLogByProperty(this.sortSettings.sortProperty);
            this.sortedLog = this.sortSettings.ascending ? sortedLog : sortedLog.reverse();
        };
        LogViewer.prototype.getSortedLogByProperty = function (property) {
            var sortedLog = this.log.sort(function (firstEntry, secondEntry) {
                var firstFieldIsUndefined = !firstEntry[property];
                if (firstFieldIsUndefined) {
                    return -1;
                }
                var secondFieldIsUndefined = !secondEntry[property];
                if (secondFieldIsUndefined) {
                    return 1;
                }
                var firstEntryIsBigger = firstEntry[property] > secondEntry[property];
                if (firstEntryIsBigger) {
                    return 1;
                }
                var secondEntryIsBigger = firstEntry[property] < secondEntry[property];
                if (secondEntryIsBigger) {
                    return -1;
                }
                return 0;
            });
            return sortedLog;
        };
        LogViewer.prototype.getSortedLogByDate = function () {
            var sortedLog = this.log.sort(function (firstEntry, secondEntry) {
                var firstCorrelationDate = new Date(firstEntry.timeStamp);
                var secondCorrelationDate = new Date(secondEntry.timeStamp);
                var firstEntryIsBigger = firstCorrelationDate.getTime() > secondCorrelationDate.getTime();
                if (firstEntryIsBigger) {
                    return 1;
                }
                var secondEntryIsBigger = firstCorrelationDate.getTime() < secondCorrelationDate.getTime();
                if (secondEntryIsBigger) {
                    return -1;
                }
                return 0;
            });
            return sortedLog;
        };
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Array)
        ], LogViewer.prototype, "log", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", management_api_contracts_1.DataModels.Correlations.ProcessInstance)
        ], LogViewer.prototype, "processInstance", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Object)
        ], LogViewer.prototype, "activeSolutionEntry", void 0);
        LogViewer = __decorate([
            aurelia_framework_1.inject('NotificationService', 'InspectProcessInstanceService'),
            __metadata("design:paramtypes", [notification_service_1.NotificationService, Object])
        ], LogViewer);
        return LogViewer;
    }());
    exports.LogViewer = LogViewer;
});


;
define('text!modules/inspect/inspect-process-instance/components/inspect-panel/components/log-viewer/log-viewer.css',[],function(){return ".log-viewer {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  overflow: hidden; }\n\n.log-table {\n  width: 100%;\n  height: 100%;\n  background: #f0f0f0;\n  user-select: text; }\n\n.log-table__headlines {\n  display: flex;\n  width: 100%; }\n\n.log-table__headline {\n  padding: 8px;\n  overflow: hidden;\n  border-bottom: 2px solid #ccc !important;\n  font-size: 14px;\n  font-weight: 900;\n  text-overflow: ellipsis;\n  white-space: nowrap; }\n\n.log-table__body {\n  display: block;\n  height: 100%;\n  overflow: auto; }\n\n.log-table__table-row {\n  display: flex;\n  width: 100%; }\n\n.log-table__table-entry {\n  padding: 8px;\n  overflow: hidden;\n  border-top: none !important;\n  border-bottom: 1px solid #ccc;\n  text-overflow: ellipsis; }\n\n.log-table__selected-entry {\n  background-color: #e6e6e6 !important; }\n\n.log-table__time-column {\n  width: 150px; }\n\n.log-table__log-level-column {\n  width: 100px; }\n\n.log-table__flow-node-id-column {\n  width: 150px; }\n\n.log-table__flow-node-instance-id-column {\n  width: 200px; }\n\n.log-table__message-column {\n  width: calc(100% - 600px); }\n\n.log-table__empty-message {\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  user-select: none; }\n";});;
define('text!modules/inspect/inspect-process-instance/components/inspect-panel/components/log-viewer/log-viewer.html',[],function(){return "<template>\n  <require from=\"./log-viewer.css\"></require>\n  <div class=\"log-viewer\">\n    <h3 if.bind=\"log.length === 0\" class=\"log-table__empty-message\">No logs for this correlation available.</h3>\n    <table else class=\"table table-striped table-hover log-table\">\n      <thead>\n        <tr class=\"log-table__headlines\">\n          <th class=\"log-table__headline log-table__time-column\" click.delegate=\"changeSortProperty(logSortProperty.Time)\">\n            Time <i if.bind=\"sortSettings.sortProperty === logSortProperty.Time\" class.bind=\"sortSettings.ascending ? 'fas fa-caret-up' : ' fas fa-caret-down'\"></i>\n          </th>\n          <th class=\"log-table__headline log-table__flow-node-id-column\" click.delegate=\"changeSortProperty(logSortProperty.FlowNodeId)\">\n            FlowNodeId <i if.bind=\"sortSettings.sortProperty === logSortProperty.FlowNodeId\" class.bind=\"sortSettings.ascending ? 'fas fa-caret-up' : ' fas fa-caret-down'\"></i>\n          </th>\n          <th class=\"log-table__headline log-table__flow-node-instance-id-column\" click.delegate=\"changeSortProperty(logSortProperty.FlowNodeInstanceId)\">\n            FlowNodeInstanceId <i if.bind=\"sortSettings.sortProperty === logSortProperty.FlowNodeInstanceId\" class.bind=\"sortSettings.ascending ? 'fas fa-caret-up' : ' fas fa-caret-down'\"></i>\n          </th>\n          <th class=\"log-table__headline log-table__log-level-column\" click.delegate=\"changeSortProperty(logSortProperty.LogLevel)\">\n            Level <i if.bind=\"sortSettings.sortProperty === logSortProperty.LogLevel\" class.bind=\"sortSettings.ascending ? 'fas fa-caret-up' : ' fas fa-caret-down'\"></i>\n          </th>\n          <th class=\"log-table__headline log-table__message-column\" click.delegate=\"changeSortProperty(logSortProperty.Message)\">\n            Message <i if.bind=\"sortSettings.sortProperty === logSortProperty.Message\" class.bind=\"sortSettings.ascending ? 'fas fa-caret-up' : ' fas fa-caret-down'\"></i>\n          </th>\n        </tr>\n      </thead class=\"log-table__header\">\n      <tbody class=\"log-table__body\">\n        <tr class=\"log-table__table-row\" repeat.for=\"logEntry of sortedLog\">\n          <td class=\"log-table__table-entry log-table__time-column\">${getDateStringFromTimestamp(logEntry.timeStamp)}</td>\n          <td class=\"log-table__table-entry log-table__flow-node-id-column\">${logEntry.flowNodeId || '-'}</td>\n          <td class=\"log-table__table-entry log-table__flow-node-instance-id-column\">${logEntry.flowNodeInstanceId || '-'}</td>\n          <td class=\"log-table__table-entry log-table__log-level-column\">${logEntry.logLevel.toUpperCase()}</td>\n          <td class=\"log-table__table-entry log-table__message-column\">${logEntry.message}</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/inspect/inspect-process-instance/components/inspect-panel/components/process-instance-list/process-instance-list',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "@process-engine/management_api_contracts", "../../../../../../../contracts/index", "../../../../../../../environment", "../../../../../../../services/date-service/date.service"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, management_api_contracts_1, index_1, environment_1, date_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var PAGE_SIZES = [20, 50, 100, 200];
    var MIN_PAGESIZE = PAGE_SIZES[0];
    exports.DEFAULT_PAGESIZE = PAGE_SIZES[1];
    var PAGINATION_SIZE = 10;
    var ProcessInstanceList = (function () {
        function ProcessInstanceList(eventAggregator) {
            this.currentPage = 1;
            this.pageSize = exports.DEFAULT_PAGESIZE;
            this.minPageSize = MIN_PAGESIZE;
            this.paginationSize = PAGINATION_SIZE;
            this.pageSizes = PAGE_SIZES;
            this.processInstanceListSortProperty = index_1.ProcessInstanceListSortProperty;
            this.sortSettings = {
                ascending: false,
                sortProperty: index_1.ProcessInstanceListSortProperty.StartedAt,
            };
            this.tableData = [];
            this.eventAggregator = eventAggregator;
        }
        ProcessInstanceList.prototype.showLogViewer = function () {
            this.eventAggregator.publish(environment_1.default.events.inspectProcessInstance.showLogViewer);
        };
        ProcessInstanceList.prototype.selectProcessInstance = function (selectedTableEntry) {
            this.selectedProcessInstance = this.getProcessInstanceForTableEntry(selectedTableEntry);
            this.selectedTableEntry = selectedTableEntry;
        };
        Object.defineProperty(ProcessInstanceList.prototype, "showProcessInstanceToSelect", {
            get: function () {
                var _this = this;
                var processInstanceToSelectExist = this.processInstanceToSelect != null;
                var processInstanceToSelectTableEntryExist = this.processInstanceToSelectTableEntry != null;
                var correlationIdIsSelectedCorrelationId = this.selectedCorrelation &&
                    processInstanceToSelectExist &&
                    this.selectedCorrelation.id === this.processInstanceToSelect.correlationId;
                if (this.sortedTableData == null || !processInstanceToSelectExist) {
                    return (processInstanceToSelectExist && processInstanceToSelectTableEntryExist && correlationIdIsSelectedCorrelationId);
                }
                var processInstanceToSelectIsNotInTable = this.sortedTableData.find(function (entry) { return entry.processInstanceId === _this.processInstanceToSelect.processInstanceId; }) == null;
                return (processInstanceToSelectExist &&
                    processInstanceToSelectTableEntryExist &&
                    processInstanceToSelectIsNotInTable &&
                    correlationIdIsSelectedCorrelationId);
            },
            enumerable: true,
            configurable: true
        });
        ProcessInstanceList.prototype.activeDiagramChanged = function () {
            this.currentPage = 1;
            this.processInstanceToSelect = undefined;
            this.processInstanceToSelectTableEntry = undefined;
        };
        ProcessInstanceList.prototype.processInstancesChanged = function () {
            var _this = this;
            if (!this.activeDiagram) {
                return;
            }
            this.tableData = this.convertProcessInstancesIntoTableData(this.processInstances);
            this.sortTableData();
            var tableDataIsExisiting = this.sortedTableData.length > 0;
            if (tableDataIsExisiting) {
                var firstProcessInstanceFromCorrectProcessModel = this.sortedTableData.find(function (processInstance) {
                    return processInstance.processModelId === _this.activeDiagram.id;
                });
                var firstTableEntry = this.sortedTableData[0];
                var processInstanceToSelect = firstProcessInstanceFromCorrectProcessModel || firstTableEntry;
                this.selectProcessInstance(processInstanceToSelect);
            }
            var processInstanceToSelectExists = this.processInstanceToSelect !== undefined;
            if (processInstanceToSelectExists) {
                var processInstanceFromTableData = this.sortedTableData.find(function (processInstance) {
                    return processInstance.processInstanceId === _this.processInstanceToSelect.processInstanceId;
                });
                this.processInstanceToSelectTableEntry =
                    processInstanceFromTableData || this.convertProcessInstanceIntoTableData(this.processInstanceToSelect);
                this.selectProcessInstance(this.processInstanceToSelectTableEntry);
            }
            this.paginationShowsLoading = false;
        };
        ProcessInstanceList.prototype.pageSizeChanged = function (newValue, oldValue) {
            var isNotInitializedYet = oldValue === undefined;
            if (isNotInitializedYet) {
                return;
            }
            var showAllProcessInstances = this.pageSize === 0;
            if (showAllProcessInstances) {
                this.currentPage = 1;
            }
            else {
                this.sortSettings.ascending = false;
                this.sortSettings.sortProperty = index_1.ProcessInstanceListSortProperty.StartedAt;
                this.sortTableData();
            }
            var isFirstPage = this.currentPage === 1;
            if (isFirstPage) {
                var payload = {
                    offset: 0,
                    limit: this.pageSize,
                };
                this.eventAggregator.publish(environment_1.default.events.inspectProcessInstance.updateProcessInstances, payload);
                return;
            }
            var currentOffset = (this.currentPage - 1) * oldValue;
            this.currentPage = Math.floor(currentOffset / this.pageSize) + 1;
        };
        ProcessInstanceList.prototype.currentPageChanged = function (newValue, oldValue) {
            var isNotInitializedYet = oldValue === undefined;
            if (isNotInitializedYet) {
                return;
            }
            var payload = {
                offset: this.currentPage === 1 || this.currentPage === 0 ? 0 : (this.currentPage - 1) * this.pageSize,
                limit: this.pageSize,
            };
            this.eventAggregator.publish(environment_1.default.events.inspectProcessInstance.updateProcessInstances, payload);
        };
        ProcessInstanceList.prototype.changeSortProperty = function (property) {
            if (!this.showSortOption) {
                return;
            }
            var isSameSortPropertyAsBefore = this.sortSettings.sortProperty === property;
            var ascending = isSameSortPropertyAsBefore ? !this.sortSettings.ascending : true;
            this.sortSettings.ascending = ascending;
            this.sortSettings.sortProperty = property;
            this.sortTableData();
        };
        Object.defineProperty(ProcessInstanceList.prototype, "showSortOption", {
            get: function () {
                return this.pageSize == 0 || this.totalCount < this.minPageSize;
            },
            enumerable: true,
            configurable: true
        });
        ProcessInstanceList.prototype.convertProcessInstancesIntoTableData = function (processInstances) {
            return processInstances.map(this.convertProcessInstanceIntoTableData);
        };
        ProcessInstanceList.prototype.convertProcessInstanceIntoTableData = function (processInstance) {
            var tableEntry = {
                startedAt: date_service_1.getBeautifiedDate(processInstance.createdAt),
                state: processInstance.state,
                user: processInstance.identity.userId,
                processModelId: processInstance.processModelId,
                processInstanceId: processInstance.processInstanceId,
            };
            return tableEntry;
        };
        ProcessInstanceList.prototype.sortTableData = function () {
            var sortByDate = this.sortSettings.sortProperty === index_1.ProcessInstanceListSortProperty.StartedAt;
            var sortedTableData = sortByDate
                ? this.sortTableDataByStartDate()
                : this.sortTableDataByProperty(this.sortSettings.sortProperty);
            this.sortedTableData = this.sortSettings.ascending ? sortedTableData : sortedTableData.reverse();
        };
        ProcessInstanceList.prototype.sortTableDataByProperty = function (property) {
            var copyOfTableData = this.tableData.slice();
            var sortedTableData = copyOfTableData.sort(function (firstEntry, secondEntry) {
                var firstEntryIsBigger = firstEntry[property] > secondEntry[property];
                if (firstEntryIsBigger) {
                    return 1;
                }
                var secondEntryIsBigger = firstEntry[property] < secondEntry[property];
                if (secondEntryIsBigger) {
                    return -1;
                }
                return 0;
            });
            return sortedTableData;
        };
        ProcessInstanceList.prototype.sortTableDataByStartDate = function () {
            var copyOfTableData = this.tableData.slice();
            var sortedTableData = copyOfTableData.sort(function (firstEntry, secondEntry) {
                var firstProcessInstanceDate = new Date(firstEntry.startedAt);
                var secondProcessInstanceDate = new Date(secondEntry.startedAt);
                var firstEntryIsBigger = firstProcessInstanceDate.getTime() > secondProcessInstanceDate.getTime();
                if (firstEntryIsBigger) {
                    return 1;
                }
                var secondEntryIsBigger = firstProcessInstanceDate.getTime() < secondProcessInstanceDate.getTime();
                if (secondEntryIsBigger) {
                    return -1;
                }
                return 0;
            });
            return sortedTableData;
        };
        ProcessInstanceList.prototype.getProcessInstanceForTableEntry = function (tableEntry) {
            var processInstanceForTableEntry = this.processInstances.find(function (processInstance) {
                return processInstance.processInstanceId === tableEntry.processInstanceId;
            });
            return processInstanceForTableEntry || this.processInstanceToSelect;
        };
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", management_api_contracts_1.DataModels.Correlations.ProcessInstance)
        ], ProcessInstanceList.prototype, "processInstanceToSelect", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Object)
        ], ProcessInstanceList.prototype, "processInstanceToSelectTableEntry", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", management_api_contracts_1.DataModels.Correlations.ProcessInstance)
        ], ProcessInstanceList.prototype, "selectedProcessInstance", void 0);
        __decorate([
            aurelia_framework_1.bindable, aurelia_framework_1.observable,
            __metadata("design:type", Array)
        ], ProcessInstanceList.prototype, "processInstances", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Object)
        ], ProcessInstanceList.prototype, "activeDiagram", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Array)
        ], ProcessInstanceList.prototype, "sortedTableData", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Boolean)
        ], ProcessInstanceList.prototype, "paginationShowsLoading", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", management_api_contracts_1.DataModels.Correlations.Correlation)
        ], ProcessInstanceList.prototype, "selectedCorrelation", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Number)
        ], ProcessInstanceList.prototype, "totalCount", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Number)
        ], ProcessInstanceList.prototype, "currentPage", void 0);
        __decorate([
            aurelia_framework_1.observable,
            __metadata("design:type", Number)
        ], ProcessInstanceList.prototype, "pageSize", void 0);
        __decorate([
            aurelia_framework_1.computedFrom('sortedTableData.length', 'pageSize'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [])
        ], ProcessInstanceList.prototype, "showProcessInstanceToSelect", null);
        __decorate([
            aurelia_framework_1.computedFrom('pageSize', 'totalCount'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [])
        ], ProcessInstanceList.prototype, "showSortOption", null);
        ProcessInstanceList = __decorate([
            aurelia_framework_1.inject(aurelia_event_aggregator_1.EventAggregator),
            __metadata("design:paramtypes", [aurelia_event_aggregator_1.EventAggregator])
        ], ProcessInstanceList);
        return ProcessInstanceList;
    }());
    exports.ProcessInstanceList = ProcessInstanceList;
});


;
define('text!modules/inspect/inspect-process-instance/components/inspect-panel/components/process-instance-list/process-instance-list.css',[],function(){return ".process-instance-container {\n  position: relative;\n  width: 100%;\n  height: 100%; }\n\n.process-instance-table {\n  width: 100%;\n  height: 100%;\n  background: #f0f0f0;\n  user-select: text; }\n\n.process-instance-table__headlines {\n  display: flex;\n  width: 100%; }\n\n.process-instance-table__headline {\n  width: 34%;\n  padding: 8px;\n  overflow: hidden;\n  border-bottom: 2px solid #ccc !important;\n  font-size: 14px;\n  font-weight: 900;\n  text-overflow: ellipsis;\n  white-space: nowrap; }\n\n.process-instance-table__headline--number {\n  width: 10%;\n  padding: 8px;\n  overflow: hidden;\n  border-bottom: 2px solid #ccc !important;\n  font-size: 14px;\n  font-weight: 900;\n  text-overflow: ellipsis;\n  white-space: nowrap; }\n\n.process-instance-table__body {\n  display: block;\n  height: 100%;\n  overflow: auto; }\n\n.process-instance-table__table-row {\n  display: flex;\n  width: 100%; }\n\n.process-instance-table__table-row--instance-to-select {\n  border: 4px double; }\n\n.process-instance-table__table-entry {\n  width: 34%;\n  padding: 8px;\n  overflow: hidden;\n  border-top: none !important;\n  border-bottom: 1px solid #ccc;\n  text-overflow: ellipsis; }\n\n.process-instance-table__table-entry--state {\n  text-transform: uppercase; }\n\n.process-instance-table__pagesize-entry {\n  float: left;\n  margin-top: 5px;\n  margin-right: 5px; }\n\n.process-instance-table__pagesize-entry--select {\n  width: 70px;\n  margin: unset; }\n\n.process-instance-table__pagination-entry {\n  width: 70%; }\n\n.process-instance-table__selected-entry {\n  background-color: #d3d3d3 !important; }\n\n.process-instance-table__empty-message {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  user-select: none; }\n";});;
define('text!modules/inspect/inspect-process-instance/components/inspect-panel/components/process-instance-list/process-instance-list.html',[],function(){return "<template>\n  <require from=\"./process-instance-list.css\"></require>\n  <require from=\"../../../../../../pagination/pagination\"></require>\n  <div class=\"process-instance-container\">\n    <h3 if.bind=\"processInstances.length === 0\" class=\"process-instance-table__empty-message\">No Process Instances found.</h3>\n     <table else class=\"table table-striped table-hover process-instance-table\">\n      <thead>\n        <tr class=\"process-instance-table__headlines\">\n          <th class=\"process-instance-table__headline\" click.delegate=\"changeSortProperty(processInstanceListSortProperty.StartedAt)\">\n            Started at <i if.bind=\"sortSettings.sortProperty === processInstanceListSortProperty.StartedAt && showSortOption\" class.bind=\"sortSettings.ascending ? 'fas fa-caret-up' : ' fas fa-caret-down'\"></i>\n          </th>\n          <th class=\"process-instance-table__headline\" click.delegate=\"changeSortProperty(processInstanceListSortProperty.State)\">\n            State <i if.bind=\"sortSettings.sortProperty == processInstanceListSortProperty.State && showSortOption\" class.bind=\"sortSettings.ascending ? 'fas fa-caret-up' : ' fas fa-caret-down'\"></i>\n          </th>\n          <th class=\"process-instance-table__headline\" click.delegate=\"changeSortProperty(processInstanceListSortProperty.User)\">\n            User <i if.bind=\"sortSettings.sortProperty === processInstanceListSortProperty.User && showSortOption\" class.bind=\"sortSettings.ascending ? 'fas fa-caret-up' : ' fas fa-caret-down'\"></i>\n          </th>\n          <th class=\"process-instance-table__headline\" click.delegate=\"changeSortProperty(processInstanceListSortProperty.ProcessModelId)\">\n            Process Model ID <i if.bind=\"sortSettings.sortProperty === processInstanceListSortProperty.ProcessModelId && showSortOption\" class.bind=\"sortSettings.ascending ? 'fas fa-caret-up' : ' fas fa-caret-down'\"></i>\n          </th>\n          <th class=\"process-instance-table__headline\" click.delegate=\"changeSortProperty(processInstanceListSortProperty.ProcessInstanceId)\">\n            Process Instance ID <i if.bind=\"sortSettings.sortProperty === processInstanceListSortProperty.ProcessInstanceId && showSortOption\" class.bind=\"sortSettings.ascending ? 'fas fa-caret-up' : ' fas fa-caret-down'\"></i>\n          </th>\n        </tr>\n      </thead>\n      <tbody class=\"process-instance-table__body\">\n        <tr if.bind=\"showProcessInstanceToSelect\" dblclick.delegate=\"showLogViewer()\" class=\"process-instance-table__table-row process-instance-table__table-row--instance-to-select\" class.bind=\"processInstanceToSelectTableEntry.processInstanceId === selectedTableEntry.processInstanceId ? 'process-instance-table__selected-entry': ''\" click.delegate=\"selectProcessInstance(processInstanceToSelectTableEntry)\">\n          <td class=\"process-instance-table__table-entry\">${processInstanceToSelectTableEntry.startedAt}</td>\n          <td class=\"process-instance-table__table-entry process-instance-table__table-entry--state\">${processInstanceToSelectTableEntry.state}</td>\n          <td class=\"process-instance-table__table-entry\">${processInstanceToSelectTableEntry.user}</td>\n          <td class=\"process-instance-table__table-entry\">${processInstanceToSelectTableEntry.processModelId}</td>\n          <td class=\"process-instance-table__table-entry\">${processInstanceToSelectTableEntry.processInstanceId}</td>\n        </tr>\n        <tr dblclick.delegate=\"showLogViewer()\" class=\"process-instance-table__table-row\" repeat.for=\"tableEntry of sortedTableData\" class.bind=\"tableEntry.processInstanceId === selectedTableEntry.processInstanceId ? 'process-instance-table__selected-entry': ''\" click.delegate=\"selectProcessInstance(tableEntry)\">\n          <td class=\"process-instance-table__table-entry\">${tableEntry.startedAt}</td>\n          <td class=\"process-instance-table__table-entry process-instance-table__table-entry--state\">${tableEntry.state}</td>\n          <td class=\"process-instance-table__table-entry\">${tableEntry.user}</td>\n          <td class=\"process-instance-table__table-entry\">${tableEntry.processModelId}</td>\n          <td class=\"process-instance-table__table-entry\">${tableEntry.processInstanceId}</td>\n        </tr>\n        <tr if.bind=\"totalCount > minPageSize\" class=\"process-instance-table__table-row\">\n          <td>\n            <div class=\"process-instance-table__pagesize-entry\">\n              Page size:\n            </div>\n            <select class=\"form-control process-instance-table__pagesize-entry--select\" value.bind=\"pageSize\">\n              <option model.bind=\"size\" repeat.for=\"size of pageSizes\">${size}</option>\n              <option model.bind=\"0\">All</option>\n            </select>\n          </td>\n          <td class=\"process-instance-table__pagination-entry\">\n            <pagination show.bind=\"pageSize < totalCount && pageSize > 0\" view-model.ref=\"pagination\" current-page.two-way=\"currentPage\" per-page.to-view=\"pageSize\" items.to-view=\"totalCount\" max-pages-to-display.to-view=\"paginationSize\" content-is-async.bind=\"true\" is-loading.two-way=\"paginationShowsLoading\"></pagination>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/inspect/inspect-process-instance/components/inspect-panel/inspect-panel',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "@process-engine/management_api_contracts", "../../../../../contracts/index", "../../../../../environment"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, management_api_contracts_1, index_1, environment_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var InspectPanel = (function () {
        function InspectPanel(eventAggregator) {
            this.fullscreen = false;
            this.inspectPanelTab = index_1.InspectPanelTab;
            this.showCorrelationList = true;
            this.showProcessInstanceList = true;
            this.showLogViewer = false;
            this.eventAggregator = eventAggregator;
        }
        InspectPanel.prototype.attached = function () {
            var _this = this;
            this.subscriptions = [
                this.eventAggregator.subscribe(environment_1.default.events.inspectProcessInstance.showLogViewer, function () {
                    _this.changeTab(index_1.InspectPanelTab.LogViewer);
                }),
                this.eventAggregator.subscribe(environment_1.default.events.inspectProcessInstance.showProcessInstanceList, function () {
                    _this.changeTab(index_1.InspectPanelTab.ProcessInstanceList);
                }),
            ];
        };
        InspectPanel.prototype.detached = function () {
            for (var _i = 0, _a = this.subscriptions; _i < _a.length; _i++) {
                var subscription = _a[_i];
                subscription.dispose();
            }
        };
        InspectPanel.prototype.toggleFullscreen = function () {
            this.fullscreen = !this.fullscreen;
            this.eventAggregator.publish(environment_1.default.events.inspect.shouldDisableTokenViewerButton, this.fullscreen);
        };
        InspectPanel.prototype.activeDiagramChanged = function () {
            this.selectedProcessInstance = undefined;
            this.processInstanceToSelect = undefined;
            this.selectedCorrelation = undefined;
            this.correlationToSelect = undefined;
            this.showLogViewer = false;
            this.showCorrelationList = true;
            this.showProcessInstanceList = false;
        };
        InspectPanel.prototype.changeTab = function (inspectPanelTab) {
            var shouldShowCorrelationList = inspectPanelTab === index_1.InspectPanelTab.CorrelationList;
            var shouldShowProcessInstanceList = inspectPanelTab === index_1.InspectPanelTab.ProcessInstanceList;
            var shouldShowLogViewer = inspectPanelTab === index_1.InspectPanelTab.LogViewer;
            this.showCorrelationList = shouldShowCorrelationList;
            this.showLogViewer = shouldShowLogViewer;
            this.showProcessInstanceList = shouldShowProcessInstanceList;
        };
        InspectPanel.prototype.processInstancesChanged = function (newProcessInstance, oldProcessInstance) {
            var firstProcessInstanceGotSelected = oldProcessInstance !== undefined;
            var shouldEnableTokenViewerButton = !(firstProcessInstanceGotSelected || this.fullscreen);
            if (shouldEnableTokenViewerButton) {
                this.eventAggregator.publish(environment_1.default.events.inspect.shouldDisableTokenViewerButton, false);
            }
        };
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", management_api_contracts_1.DataModels.Correlations.Correlation)
        ], InspectPanel.prototype, "correlationToSelect", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Array)
        ], InspectPanel.prototype, "correlations", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", management_api_contracts_1.DataModels.Correlations.Correlation)
        ], InspectPanel.prototype, "selectedCorrelation", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", management_api_contracts_1.DataModels.Correlations.ProcessInstance)
        ], InspectPanel.prototype, "processInstanceToSelect", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Array)
        ], InspectPanel.prototype, "processInstances", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", management_api_contracts_1.DataModels.Correlations.ProcessInstance)
        ], InspectPanel.prototype, "selectedProcessInstance", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Boolean)
        ], InspectPanel.prototype, "fullscreen", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Object)
        ], InspectPanel.prototype, "activeDiagram", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Object)
        ], InspectPanel.prototype, "activeSolutionEntry", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Number)
        ], InspectPanel.prototype, "totalCorrelationCount", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Number)
        ], InspectPanel.prototype, "totalProcessInstanceCount", void 0);
        InspectPanel = __decorate([
            aurelia_framework_1.inject(aurelia_event_aggregator_1.EventAggregator),
            __metadata("design:paramtypes", [aurelia_event_aggregator_1.EventAggregator])
        ], InspectPanel);
        return InspectPanel;
    }());
    exports.InspectPanel = InspectPanel;
});


;
define('text!modules/inspect/inspect-process-instance/components/inspect-panel/inspect-panel.css',[],function(){return ".inspect-panel {\n  width: 100%;\n  height: 100%;\n  background: whitesmoke; }\n\n.inspect-panel__control-bar {\n  width: 100%;\n  height: 40px;\n  border-top: 1px solid #ccc;\n  border-bottom: 1px solid #ccc; }\n\n.inspect-panel__tabs {\n  float: left;\n  width: calc(100% - 40px);\n  height: 100%;\n  overflow: hidden; }\n\n.inspect-panel__fullscreen-button {\n  display: flex;\n  height: 100%;\n  border-left: 1px solid #ccc; }\n\n.inspect-panel__fullscreen-button > i {\n  margin: auto;\n  font-size: 20px; }\n\n.inspect-panel__tab {\n  float: left;\n  height: 100%;\n  padding-right: 10px;\n  padding-left: 10px;\n  background: whitesmoke;\n  border: none; }\n\n.inspect-panel__tab:hover:enabled {\n  background: #eaeaea; }\n\n.inspect-panel__active-tab {\n  border-bottom: 1px solid black; }\n\n.inspect-panel__disabled-tab {\n  color: #ccc; }\n\n.inspect-panel__body {\n  height: calc(100% - 40px); }\n";});;
define('text!modules/inspect/inspect-process-instance/components/inspect-panel/inspect-panel.html',[],function(){return "<template>\n  <require from=\"./inspect-panel.css\"></require>\n  <require from=\"./components/log-viewer/log-viewer\"></require>\n  <require from=\"./components/correlation-list/correlation-list\"></require>\n  <require from=\"./components/process-instance-list/process-instance-list\"></require>\n  <div class=\"inspect-panel\">\n    <div class=\"inspect-panel__control-bar\">\n      <div class=\"inspect-panel__tabs\">\n        <button class=\"inspect-panel__tab\"\n                class.bind=\"showCorrelationList ? 'inspect-panel__active-tab' : ''\"\n                title=\"Show a list of all Correlations for this process model\"\n                click.delegate=\"changeTab(inspectPanelTab.CorrelationList)\">\n          Correlation List (${totalCorrelationCount})\n        </button>\n        <button class=\"inspect-panel__tab ${selectedCorrelation === undefined ? 'inspect-panel__disabled-tab' : ''} ${showProcessInstanceList ? 'inspect-panel__active-tab' : ''}\"\n                disabled.bind=\"selectedCorrelation === undefined\"\n                title.bind=\"selectedCorrelation !== undefined ? 'Show a list of all Process Instances for the selected Correlation' : 'Select a correlation in order to toggle the Process Instance table'\"\n                click.delegate=\"changeTab(inspectPanelTab.ProcessInstanceList)\">\n          Process Instance List (${totalProcessInstanceCount})\n        </button>\n        <button class=\"inspect-panel__tab ${showLogViewer ? 'inspect-panel__active-tab' : ''}\"\n                class.bind=\"selectedProcessInstance === undefined ? 'inspect-panel__disabled-tab' : ''\"\n                disabled.bind=\"selectedProcessInstance === undefined\"\n                title.bind=\"selectedProcessInstance !== undefined ? 'Show log of the selected Process Instaance' : 'Select a correlation in order to toggle the log viewer'\"\n                click.delegate=\"changeTab(inspectPanelTab.LogViewer)\">\n          Log Viewer\n        </button>\n      </div>\n      <div class=\"button inspect-panel__fullscreen-button\" click.delegate=\"toggleFullscreen()\" title.bind=\"fullscreen ? 'Close full screen' : 'Open full screen'\">\n        <i class.bind=\"fullscreen ? 'fas fa-arrow-down' : 'fas fa-arrow-up'\"></i>\n      </div>\n    </div>\n    <div class=\"inspect-panel__body\">\n      <correlation-list show.bind=\"showCorrelationList\" active-diagram.bind=\"activeDiagram\" correlations.to-view=\"correlations\"  selected-correlation.from-view=\"selectedCorrelation\" correlation-to-select.to-view=\"correlationToSelect\" total-count.bind=\"totalCorrelationCount\"></correlation-list>\n      <process-instance-list show.bind=\"showProcessInstanceList\" active-diagram.bind=\"activeDiagram\" process-instances.to-view=\"processInstances\" selected-correlation.to-view=\"selectedCorrelation\" selected-process-instance.from-view=\"selectedProcessInstance\" process-instance-to-select.to-view=\"processInstanceToSelect\" total-count.bind=\"totalProcessInstanceCount\"></process-instance-list>\n      <log-viewer if.bind=\"showLogViewer\" active-solution-entry.bind=\"activeSolutionEntry\" process-instance.to-view=\"selectedProcessInstance\"></log-viewer>\n    </div>\n  </div>\n</template>\n";});;
define('modules/inspect/inspect-process-instance/contracts/IInspect-process-instance.repository',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('modules/inspect/inspect-process-instance/contracts/IInspect-process-instance.service',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('modules/inspect/inspect-process-instance/contracts/IProcess-instance-with-correlation',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('modules/inspect/inspect-process-instance/contracts/index',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('modules/inspect/inspect-process-instance/index',["require", "exports", "aurelia-event-aggregator", "./services/inspect-process-instance.service"], function (require, exports, aurelia_event_aggregator_1, inspect_process_instance_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function configure(config) {
        var eventAggregator = config.container.get(aurelia_event_aggregator_1.EventAggregator);
        var managementApiClient = config.container.get('ManagementApiClientService');
        var inspectProcessInstanceService = new inspect_process_instance_service_1.InspectProcessInstanceService(eventAggregator, managementApiClient);
        config.container.registerInstance('InspectProcessInstanceService', inspectProcessInstanceService);
    }
    exports.configure = configure;
});


;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/inspect/inspect-process-instance/inspect-process-instance',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "bluebird", "@process-engine/management_api_contracts", "../../../contracts/index", "../../../environment", "./components/diagram-viewer/diagram-viewer", "./components/inspect-panel/inspect-panel", "./components/inspect-panel/components/process-instance-list/process-instance-list", "../../../services/notification-service/notification.service"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, Bluebird, management_api_contracts_1, index_1, environment_1, diagram_viewer_1, inspect_panel_1, process_instance_list_1, notification_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    Bluebird = __importStar(Bluebird);
    environment_1 = __importDefault(environment_1);
    var InspectProcessInstance = (function () {
        function InspectProcessInstance(InspectProcessInstanceService, eventAggregator, notificationService) {
            this.inspectPanelFullscreen = false;
            this.bottomPanelHeight = 250;
            this.tokenViewerWidth = 250;
            this.correlationOffset = 0;
            this.correlationLimit = process_instance_list_1.DEFAULT_PAGESIZE;
            this.processInstanceOffset = 0;
            this.processInstanceLimit = process_instance_list_1.DEFAULT_PAGESIZE;
            this.showInspectPanel = true;
            this.showTokenViewer = false;
            this.viewIsAttached = false;
            this.inspectProcessInstanceService = InspectProcessInstanceService;
            this.eventAggregator = eventAggregator;
            this.notificationService = notificationService;
        }
        InspectProcessInstance.prototype.attached = function () {
            return __awaiter(this, void 0, void 0, function () {
                var previousTokenViewerState, flowNodeToSelectExists, shouldDisplaySpecificInspectPanelTab, processInstanceToSelect, _a, error_1;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.updateProcessInstances();
                            this.updateCorrelations();
                            this.eventAggregator.publish(environment_1.default.events.statusBar.showInspectProcessInstanceButtons, true);
                            this.subscriptions = [
                                this.eventAggregator.subscribe(environment_1.default.events.inspectProcessInstance.showInspectPanel, function (showInspectPanel) {
                                    _this.showInspectPanel = showInspectPanel;
                                }),
                                this.eventAggregator.subscribe(environment_1.default.events.inspectProcessInstance.showTokenViewer, function (showTokenViewer) {
                                    _this.showTokenViewer = showTokenViewer;
                                }),
                                this.eventAggregator.subscribe(environment_1.default.events.inspectProcessInstance.updateProcessInstances, function (payload) { return __awaiter(_this, void 0, void 0, function () {
                                    var offset, limit;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                offset = payload.offset, limit = payload.limit;
                                                this.processInstanceOffset = offset;
                                                this.processInstanceLimit = limit;
                                                return [4, this.updateProcessInstances()];
                                            case 1:
                                                _a.sent();
                                                return [2];
                                        }
                                    });
                                }); }),
                                this.eventAggregator.subscribe(environment_1.default.events.inspectProcessInstance.updateCorrelations, function (payload) { return __awaiter(_this, void 0, void 0, function () {
                                    var offset, limit;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                offset = payload.offset, limit = payload.limit;
                                                this.correlationOffset = offset;
                                                this.correlationLimit = limit;
                                                return [4, this.updateCorrelations()];
                                            case 1:
                                                _a.sent();
                                                return [2];
                                        }
                                    });
                                }); }),
                            ];
                            this.bottomPanelResizeDiv.addEventListener('mousedown', function (mouseDownEvent) {
                                var windowEvent = mouseDownEvent || window.event;
                                windowEvent.cancelBubble = true;
                                var mousemoveFunction = function (mouseMoveEvent) {
                                    _this.resizeInspectPanel(mouseMoveEvent);
                                    document.getSelection().empty();
                                };
                                var mouseUpFunction = function () {
                                    document.removeEventListener('mousemove', mousemoveFunction);
                                    document.removeEventListener('mouseup', mouseUpFunction);
                                };
                                document.addEventListener('mousemove', mousemoveFunction);
                                document.addEventListener('mouseup', mouseUpFunction);
                            });
                            this.rightPanelResizeDiv.addEventListener('mousedown', function (mouseDownEvent) {
                                var windowEvent = mouseDownEvent || window.event;
                                windowEvent.cancelBubble = true;
                                var mousemoveFunction = function (mouseMoveEvent) {
                                    _this.resizeTokenViewer(mouseMoveEvent);
                                    document.getSelection().empty();
                                };
                                var mouseUpFunction = function () {
                                    document.removeEventListener('mousemove', mousemoveFunction);
                                    document.removeEventListener('mouseup', mouseUpFunction);
                                };
                                document.addEventListener('mousemove', mousemoveFunction);
                                document.addEventListener('mouseup', mouseUpFunction);
                            });
                            this.viewIsAttached = true;
                            previousTokenViewerState = JSON.parse(window.localStorage.getItem('tokenViewerInspectCollapseState'));
                            this.showTokenViewer = previousTokenViewerState || false;
                            flowNodeToSelectExists = this.flowNodeToSelect !== undefined;
                            if (flowNodeToSelectExists) {
                                this.diagramViewer.selectFlowNode(this.flowNodeToSelect);
                            }
                            shouldDisplaySpecificInspectPanelTab = this.inspectPanelTabToShow !== undefined;
                            if (shouldDisplaySpecificInspectPanelTab) {
                                this.inspectPanel.changeTab(this.inspectPanelTabToShow);
                            }
                            if (!this.processInstanceIdToSelect) return [3, 5];
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 4, , 5]);
                            return [4, this.inspectProcessInstanceService.getProcessInstanceById(this.activeSolutionEntry.identity, this.processInstanceIdToSelect, this.activeDiagram.id)];
                        case 2:
                            processInstanceToSelect = _b.sent();
                            _a = this;
                            return [4, this.inspectProcessInstanceService.getCorrelationById(this.activeSolutionEntry.identity, processInstanceToSelect.correlationId)];
                        case 3:
                            _a.correlationToSelect = _b.sent();
                            this.processInstanceToSelect = processInstanceToSelect;
                            return [3, 5];
                        case 4:
                            error_1 = _b.sent();
                            this.notificationService.showNotification(index_1.NotificationType.ERROR, 'The requested ProcessInstance to select could not be found.');
                            return [3, 5];
                        case 5: return [2];
                    }
                });
            });
        };
        InspectProcessInstance.prototype.updateCorrelations = function () {
            return __awaiter(this, void 0, void 0, function () {
                var correlationList, error_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4, this.getCorrelationsForProcessModel()];
                        case 1:
                            correlationList = _a.sent();
                            return [3, 3];
                        case 2:
                            error_2 = _a.sent();
                            this.eventAggregator.publish(environment_1.default.events.inspectProcessInstance.noCorrelationsFound, true);
                            this.correlations = [];
                            this.totalCorrelationCount = 0;
                            return [3, 3];
                        case 3:
                            if (correlationList && correlationList.totalCount === 0) {
                                this.eventAggregator.publish(environment_1.default.events.inspectProcessInstance.noCorrelationsFound, true);
                                this.correlations = [];
                                this.totalCorrelationCount = 0;
                            }
                            else if (correlationList) {
                                this.correlations = correlationList.correlations;
                                this.totalCorrelationCount = correlationList.totalCount;
                            }
                            return [2];
                    }
                });
            });
        };
        InspectProcessInstance.prototype.updateProcessInstances = function () {
            return __awaiter(this, void 0, void 0, function () {
                var processInstanceList, noCorrelationSelected, error_3;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            noCorrelationSelected = this.selectedCorrelation === undefined;
                            if (noCorrelationSelected) {
                                this.processInstances = [];
                                this.totalProcessInstanceCount = 0;
                                return [2];
                            }
                            return [4, this.getProcessInstancesForCorrelation()];
                        case 1:
                            processInstanceList = _a.sent();
                            return [3, 3];
                        case 2:
                            error_3 = _a.sent();
                            this.eventAggregator.publish(environment_1.default.events.inspectProcessInstance.noCorrelationsFound, true);
                            this.processInstances = [];
                            this.totalProcessInstanceCount = 0;
                            return [3, 3];
                        case 3:
                            if (processInstanceList && processInstanceList.totalCount === 0) {
                                this.eventAggregator.publish(environment_1.default.events.inspectProcessInstance.noCorrelationsFound, true);
                                this.processInstances = [];
                                this.totalProcessInstanceCount = 0;
                            }
                            else if (processInstanceList) {
                                this.processInstances = processInstanceList.processInstances;
                                this.totalProcessInstanceCount = processInstanceList.totalCount;
                            }
                            return [2];
                    }
                });
            });
        };
        InspectProcessInstance.prototype.getProcessInstancesForCorrelation = function () {
            var _this = this;
            if (this.updateProcessInstancePromise) {
                this.updateProcessInstancePromise.cancel();
            }
            this.updateProcessInstancePromise = new Bluebird.Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                var processInstances, error_4;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4, this.inspectProcessInstanceService.getProcessInstancesForCorrelation(this.activeSolutionEntry.identity, this.selectedCorrelation.id, this.processInstanceOffset, this.processInstanceLimit)];
                        case 1:
                            processInstances = _a.sent();
                            resolve(processInstances);
                            return [3, 3];
                        case 2:
                            error_4 = _a.sent();
                            reject(error_4);
                            return [3, 3];
                        case 3: return [2];
                    }
                });
            }); });
            return this.updateProcessInstancePromise;
        };
        InspectProcessInstance.prototype.getCorrelationsForProcessModel = function () {
            var _this = this;
            if (this.updateCorrelationPromise) {
                this.updateCorrelationPromise.cancel();
            }
            this.updateCorrelationPromise = new Bluebird.Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                var correlations, error_5;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4, this.inspectProcessInstanceService.getAllCorrelationsForProcessModelId(this.activeSolutionEntry.identity, this.activeDiagram.id, this.correlationOffset, this.correlationLimit)];
                        case 1:
                            correlations = _a.sent();
                            resolve(correlations);
                            return [3, 3];
                        case 2:
                            error_5 = _a.sent();
                            reject(error_5);
                            return [3, 3];
                        case 3: return [2];
                    }
                });
            }); });
            return this.updateCorrelationPromise;
        };
        InspectProcessInstance.prototype.detached = function () {
            this.eventAggregator.publish(environment_1.default.events.statusBar.showInspectProcessInstanceButtons, false);
            for (var _i = 0, _a = this.subscriptions; _i < _a.length; _i++) {
                var subscription = _a[_i];
                subscription.dispose();
            }
        };
        InspectProcessInstance.prototype.activeDiagramChanged = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (!this.viewIsAttached) {
                        return [2];
                    }
                    this.correlationOffset = 0;
                    this.processInstanceOffset = 0;
                    this.processInstanceIdToSelect = undefined;
                    this.processInstanceToSelect = undefined;
                    this.correlationToSelect = undefined;
                    this.selectedProcessInstance = undefined;
                    this.selectedCorrelation = undefined;
                    this.updateProcessInstances();
                    this.updateCorrelations();
                    return [2];
                });
            });
        };
        InspectProcessInstance.prototype.selectedCorrelationChanged = function () {
            if (this.viewIsAttached) {
                this.updateProcessInstances();
            }
        };
        InspectProcessInstance.prototype.resizeInspectPanel = function (mouseEvent) {
            var mouseYPosition = mouseEvent.clientY;
            var menuBarHeight = 40;
            var inspectProcessInstance = this.bottomPanelResizeDiv.parentElement.parentElement;
            var inspectPanelHeightWithStatusBar = inspectProcessInstance.clientHeight + menuBarHeight;
            var minInspectPanelHeight = 250;
            var newBottomPanelHeight = inspectPanelHeightWithStatusBar - mouseYPosition;
            this.bottomPanelHeight = Math.max(newBottomPanelHeight, minInspectPanelHeight);
        };
        InspectProcessInstance.prototype.resizeTokenViewer = function (mouseEvent) {
            var mouseXPosition = mouseEvent.clientX;
            var inspectProcessInstance = this.bottomPanelResizeDiv.parentElement.parentElement;
            var minSpaceForDiagramViewer = 300;
            var windowWidth = window.innerWidth;
            var rightToolbarWidth = 36;
            var minTokenViewerWidth = 250;
            var maxTokenViewerWidth = inspectProcessInstance.clientWidth - minSpaceForDiagramViewer;
            var newTokenViewerWidth = windowWidth - mouseXPosition - rightToolbarWidth;
            this.tokenViewerWidth = Math.min(maxTokenViewerWidth, Math.max(newTokenViewerWidth, minTokenViewerWidth));
        };
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Array)
        ], InspectProcessInstance.prototype, "correlations", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", management_api_contracts_1.DataModels.Correlations.Correlation)
        ], InspectProcessInstance.prototype, "correlationToSelect", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", String)
        ], InspectProcessInstance.prototype, "processInstanceIdToSelect", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", management_api_contracts_1.DataModels.Correlations.ProcessInstance)
        ], InspectProcessInstance.prototype, "processInstanceToSelect", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", String)
        ], InspectProcessInstance.prototype, "flowNodeToSelect", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Object)
        ], InspectProcessInstance.prototype, "activeDiagram", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Object)
        ], InspectProcessInstance.prototype, "activeSolutionEntry", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", management_api_contracts_1.DataModels.Correlations.Correlation)
        ], InspectProcessInstance.prototype, "selectedCorrelation", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", management_api_contracts_1.DataModels.Correlations.ProcessInstance)
        ], InspectProcessInstance.prototype, "selectedProcessInstance", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Boolean)
        ], InspectProcessInstance.prototype, "inspectPanelFullscreen", void 0);
        __decorate([
            aurelia_framework_1.observable,
            __metadata("design:type", Number)
        ], InspectProcessInstance.prototype, "bottomPanelHeight", void 0);
        __decorate([
            aurelia_framework_1.observable,
            __metadata("design:type", Number)
        ], InspectProcessInstance.prototype, "tokenViewerWidth", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", diagram_viewer_1.DiagramViewer)
        ], InspectProcessInstance.prototype, "diagramViewer", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", inspect_panel_1.InspectPanel)
        ], InspectProcessInstance.prototype, "inspectPanel", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", String)
        ], InspectProcessInstance.prototype, "inspectPanelTabToShow", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Number)
        ], InspectProcessInstance.prototype, "totalCorrelationCount", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Number)
        ], InspectProcessInstance.prototype, "totalProcessInstanceCount", void 0);
        InspectProcessInstance = __decorate([
            aurelia_framework_1.inject('InspectProcessInstanceService', aurelia_event_aggregator_1.EventAggregator, 'NotificationService'),
            __metadata("design:paramtypes", [Object, aurelia_event_aggregator_1.EventAggregator,
                notification_service_1.NotificationService])
        ], InspectProcessInstance);
        return InspectProcessInstance;
    }());
    exports.InspectProcessInstance = InspectProcessInstance;
});


;
define('text!modules/inspect/inspect-process-instance/inspect-process-instance.css',[],function(){return ".inspect-process-instance {\n  position: relative;\n  width: 100%;\n  height: 100%; }\n\n.inspect-process-instance__panels {\n  display: flex;\n  width: calc(100% - 72px);\n  height: 100%;\n  margin-right: 36px;\n  margin-left: 36px;\n  flex-direction: column; }\n\n.inspect-process-instance__correlation-selection {\n  position: relative;\n  height: 175px;\n  margin-top: 20px;\n  margin-right: 20px;\n  margin-left: 20px;\n  overflow: hidden;\n  background-color: #f7f7f7;\n  border: 1px solid #ccc;\n  user-select: none; }\n\n.inspect-process-instance__correlation-data {\n  height: calc(100% - 175px - 20px);\n  padding: 20px; }\n\n.inspect-process-instance__bottom-panel {\n  width: 100%;\n  max-height: calc(100% - 150px);\n  flex-shrink: 0; }\n\n.inspect-process-instance__bottom-panel--fullscreen {\n  height: 100% !important;\n  max-height: 100%; }\n\n.inspect-process-instance__bottom-resize-div {\n  z-index: 1;\n  height: 9px;\n  width: 100%;\n  margin-top: -4px;\n  margin-bottom: -4px;\n  cursor: row-resize;\n  flex-shrink: 0; }\n\n.inspect-process-instance__right-resize-div {\n  z-index: 1;\n  width: 6px;\n  margin-right: -4px;\n  cursor: col-resize;\n  flex-shrink: 0; }\n\n.inspect-process-instance__upper-panel {\n  height: 100%;\n  display: flex;\n  flex-grow: 1; }\n\n.inspect-process-instance__diagram-viewer {\n  flex-basis: 100%; }\n\n.inspect-process-instance__token-viewer {\n  height: 100%;\n  max-width: calc(100% - 300px);\n  flex-shrink: 0; }\n\n.inspect-process-instance__right-toolbar {\n  position: absolute;\n  z-index: 1;\n  top: 0px;\n  right: 0px;\n  width: 36px;\n  height: 100%;\n  padding-bottom: 22px; }\n\n.inspect-process-instance__left-toolbar {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  width: 36px;\n  height: 100%;\n  background-color: #f7f7f7;\n  border-right: 2px solid #ccc;\n  padding-bottom: 22px; }\n";});;
define('text!modules/inspect/inspect-process-instance/inspect-process-instance.html',[],function(){return "<template>\n  <require from=\"./inspect-process-instance.css\"></require>\n  <require from=\"./components/inspect-panel/inspect-panel\"></require>\n  <require from=\"./components/diagram-viewer/diagram-viewer\"></require>\n  <require from=\"../token-viewer/token-viewer\"></require>\n  <div class=\"inspect-process-instance\">\n    <div class=\"inspect-process-instance__left-toolbar\"></div>\n    <div class=\"inspect-process-instance__panels\">\n      <div class=\"inspect-process-instance__upper-panel\" show.bind=\"!inspectPanelFullscreen\" >\n        <diagram-viewer class=\"inspect-process-instance__diagram-viewer\" view-model.ref=\"diagramViewer\" active-solution-entry.bind=\"activeSolutionEntry\" selected-flow-node.two-way=\"selectedFlowNode\" active-diagram.bind=\"activeDiagram\" process-instance.to-view=\"selectedProcessInstance\"></diagram-viewer>\n        <div class=\"inspect-process-instance__right-resize-div\" ref=\"rightPanelResizeDiv\" show.bind=\"showTokenViewer\"></div>\n        <token-viewer class=\"inspect-process-instance__token-viewer\" css=\"width: ${tokenViewerWidth}px;\"\n          active-diagram.bind=\"activeDiagram\"\n          flow-node.bind=\"selectedFlowNode\"\n          active-solution-entry.bind=\"activeSolutionEntry\"\n          process-instance-id.bind=\"selectedProcessInstance.processInstanceId\"\n          correlation-id.bind=\"selectedProcessInstance.correlationId\"\n          show.bind=\"showTokenViewer\"></token-viewer>\n      </div>\n      <div class=\"inspect-process-instance__bottom-resize-div\" ref=\"bottomPanelResizeDiv\" if.bind=\"!inspectPanelFullscreen\"></div>\n      <div class=\"inspect-process-instance__bottom-panel\" css=\"height: ${bottomPanelHeight}px;\"\n            class.bind=\"inspectPanelFullscreen ? 'inspect-process-instance__bottom-panel--fullscreen' : ''\"\n            show.bind=\"showInspectPanel\">\n        <inspect-panel view-model.ref=\"inspectPanel\" active-solution-entry.bind=\"activeSolutionEntry\" active-diagram.bind=\"activeDiagram\" process-instances.bind=\"processInstances\" correlations.bind=\"correlations\" selected-process-instance.from-view=\"selectedProcessInstance\" selected-correlation.from-view=\"selectedCorrelation\" fullscreen.two-way=\"inspectPanelFullscreen\" log.bind=\"log\" process-instance-to-select.bind=\"processInstanceToSelect\" correlation-to-select.to-view=\"correlationToSelect\" total-process-instance-count.to-view=\"totalProcessInstanceCount\"  total-correlation-count.bind=\"totalCorrelationCount\"></inspect-panel>\n      </div>\n    </div>\n</template>\n";});;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define('modules/inspect/inspect-process-instance/repositories/inspect-process-instance.pagination-repository',["require", "exports", "./inspect-process-instance.repository"], function (require, exports, inspect_process_instance_repository_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var InspectProcessInstancePaginationRepository = (function (_super) {
        __extends(InspectProcessInstancePaginationRepository, _super);
        function InspectProcessInstancePaginationRepository() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        InspectProcessInstancePaginationRepository.prototype.getAllCorrelationsForProcessModelId = function (identity, processModelId, offset, limit) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, this.managementApiClient.getCorrelationsByProcessModelId(identity, processModelId, offset, limit)];
                });
            });
        };
        InspectProcessInstancePaginationRepository.prototype.getLogsForCorrelation = function (correlation, identity, offset, limit) {
            return __awaiter(this, void 0, void 0, function () {
                var logsForAllProcessModelsOfCorrelation, _i, _a, processModel, logsForProcessModel, logsForCorrelation;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            logsForAllProcessModelsOfCorrelation = [];
                            _i = 0, _a = correlation.processInstances;
                            _b.label = 1;
                        case 1:
                            if (!(_i < _a.length)) return [3, 4];
                            processModel = _a[_i];
                            return [4, this.managementApiClient.getProcessModelLog(identity, processModel.processModelId, correlation.id, offset, limit)];
                        case 2:
                            logsForProcessModel = _b.sent();
                            logsForAllProcessModelsOfCorrelation.push(logsForProcessModel);
                            _b.label = 3;
                        case 3:
                            _i++;
                            return [3, 1];
                        case 4:
                            logsForCorrelation = [].concat.apply([], logsForAllProcessModelsOfCorrelation);
                            return [2, logsForCorrelation];
                    }
                });
            });
        };
        InspectProcessInstancePaginationRepository.prototype.getLogsForProcessInstance = function (processModelId, processInstanceId, identity, offset, limit) {
            return __awaiter(this, void 0, void 0, function () {
                var logs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.managementApiClient.getProcessInstanceLog(identity, processModelId, processInstanceId, offset, limit)];
                        case 1:
                            logs = _a.sent();
                            return [2, logs];
                    }
                });
            });
        };
        InspectProcessInstancePaginationRepository.prototype.getTokenForFlowNodeInstance = function (processModelId, correlationId, flowNodeId, identity, offset, limit) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, this.managementApiClient.getTokensForFlowNode(identity, correlationId, processModelId, flowNodeId, offset, limit)];
                });
            });
        };
        InspectProcessInstancePaginationRepository.prototype.getProcessInstancesForProcessModel = function (identity, processModelId, offset, limit) {
            return this.managementApiClient.getProcessInstancesForProcessModel(identity, processModelId, offset, limit);
        };
        InspectProcessInstancePaginationRepository.prototype.getProcessInstancesForCorrelation = function (identity, correlationId, offset, limit) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, this.managementApiClient.getProcessInstancesForCorrelation(identity, correlationId, offset, limit)];
                });
            });
        };
        InspectProcessInstancePaginationRepository.prototype.getProcessInstancesById = function (identity, processInstanceId) {
            return this.managementApiClient.getProcessInstanceById(identity, processInstanceId);
        };
        return InspectProcessInstancePaginationRepository;
    }(inspect_process_instance_repository_1.InspectProcessInstanceRepository));
    exports.InspectProcessInstancePaginationRepository = InspectProcessInstancePaginationRepository;
});


;
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define('modules/inspect/inspect-process-instance/repositories/inspect-process-instance.repository',["require", "exports", "../../../../services/pagination-module/pagination.module"], function (require, exports, pagination_module_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var InspectProcessInstanceRepository = (function () {
        function InspectProcessInstanceRepository(managementApiClient) {
            this.managementApiClient = managementApiClient;
        }
        InspectProcessInstanceRepository.prototype.getAllCorrelationsForProcessModelId = function (identity, processModelId, offset, limit) {
            return __awaiter(this, void 0, void 0, function () {
                var result, paginizedCorrelations;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.managementApiClient.getCorrelationsByProcessModelId(identity, processModelId)];
                        case 1:
                            result = (_a.sent());
                            paginizedCorrelations = pagination_module_1.applyPagination(result, offset, limit);
                            return [2, { correlations: paginizedCorrelations, totalCount: result.length }];
                    }
                });
            });
        };
        InspectProcessInstanceRepository.prototype.getLogsForCorrelation = function (correlation, identity) {
            return __awaiter(this, void 0, void 0, function () {
                var logsForAllProcessModelsOfCorrelation, _i, _a, processModel, logsForProcessModel, logsForCorrelation;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            logsForAllProcessModelsOfCorrelation = [];
                            _i = 0, _a = correlation.processInstances;
                            _b.label = 1;
                        case 1:
                            if (!(_i < _a.length)) return [3, 4];
                            processModel = _a[_i];
                            return [4, this.managementApiClient.getProcessModelLog(identity, processModel.processModelId, correlation.id)];
                        case 2:
                            logsForProcessModel = (_b.sent());
                            logsForAllProcessModelsOfCorrelation.push(logsForProcessModel);
                            _b.label = 3;
                        case 3:
                            _i++;
                            return [3, 1];
                        case 4:
                            logsForCorrelation = [].concat.apply([], logsForAllProcessModelsOfCorrelation);
                            return [2, [{ logEntries: logsForCorrelation, totalCount: logsForCorrelation.length }]];
                    }
                });
            });
        };
        InspectProcessInstanceRepository.prototype.getLogsForProcessInstance = function (processModelId, processInstanceId, identity) {
            return __awaiter(this, void 0, void 0, function () {
                var logs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.managementApiClient.getProcessInstanceLog(identity, processModelId, processInstanceId)];
                        case 1:
                            logs = (_a.sent());
                            return [2, { logEntries: logs, totalCount: logs.length }];
                    }
                });
            });
        };
        InspectProcessInstanceRepository.prototype.getCorrelationById = function (identity, correlationId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, this.managementApiClient.getCorrelationById(identity, correlationId)];
                });
            });
        };
        InspectProcessInstanceRepository.prototype.getTokenForFlowNodeInstance = function (processModelId, correlationId, flowNodeId, identity) {
            return __awaiter(this, void 0, void 0, function () {
                var result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.managementApiClient.getTokensForFlowNode(identity, correlationId, processModelId, flowNodeId)];
                        case 1:
                            result = (_a.sent());
                            return [2, { tokenHistoryEntries: result, totalCount: result.length }];
                    }
                });
            });
        };
        InspectProcessInstanceRepository.prototype.getTokenForFlowNodeByProcessInstanceId = function (processInstanceId, flowNodeId, identity) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, this.managementApiClient.getTokensForFlowNodeByProcessInstanceId(identity, processInstanceId, flowNodeId)];
                });
            });
        };
        InspectProcessInstanceRepository.prototype.getProcessInstancesForProcessModel = function (identity, processModelId, offset, limit) {
            return __awaiter(this, void 0, void 0, function () {
                var processInstances, paginizedProcessInstances;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.getMappedProcessInstancesByProcessModelId(identity, processModelId)];
                        case 1:
                            processInstances = _a.sent();
                            paginizedProcessInstances = pagination_module_1.applyPagination(processInstances, offset, limit);
                            return [2, { processInstances: paginizedProcessInstances, totalCount: processInstances.length }];
                    }
                });
            });
        };
        InspectProcessInstanceRepository.prototype.getProcessInstancesForCorrelation = function (identity, correlationId, offset, limit) {
            return __awaiter(this, void 0, void 0, function () {
                var processInstances, paginizedProcessInstances;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.managementApiClient.getProcessInstancesForCorrelation(identity, correlationId)];
                        case 1:
                            processInstances = (_a.sent());
                            paginizedProcessInstances = pagination_module_1.applyPagination(processInstances, offset, limit);
                            return [2, { processInstances: paginizedProcessInstances, totalCount: processInstances.length }];
                    }
                });
            });
        };
        InspectProcessInstanceRepository.prototype.getProcessInstancesById = function (identity, processInstanceId, processModelId) {
            return __awaiter(this, void 0, void 0, function () {
                var processInstances, processInstance;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.getMappedProcessInstancesByProcessModelId(identity, processModelId)];
                        case 1:
                            processInstances = _a.sent();
                            processInstance = processInstances.find(function (instance) {
                                return instance.processInstanceId === processInstanceId;
                            });
                            return [2, processInstance];
                    }
                });
            });
        };
        InspectProcessInstanceRepository.prototype.getMappedProcessInstancesByProcessModelId = function (identity, processModelId) {
            return __awaiter(this, void 0, void 0, function () {
                var result, processInstances;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.managementApiClient.getCorrelationsByProcessModelId(identity, processModelId)];
                        case 1:
                            result = (_a.sent());
                            processInstances = [];
                            result.forEach(function (correlation) {
                                var processInstancesForCorrelation = correlation.processInstances.map(function (instance) {
                                    instance.correlationId = correlation.id;
                                    return instance;
                                });
                                processInstances.push.apply(processInstances, processInstancesForCorrelation);
                            });
                            return [2, processInstances];
                    }
                });
            });
        };
        return InspectProcessInstanceRepository;
    }());
    exports.InspectProcessInstanceRepository = InspectProcessInstanceRepository;
});


;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/inspect/inspect-process-instance/services/inspect-process-instance.service',["require", "exports", "aurelia-framework", "aurelia-event-aggregator", "../repositories/inspect-process-instance.pagination-repository", "../../../../environment", "../repositories/inspect-process-instance.repository", "../../../../services/process-engine-version-module/process-engine-version.module"], function (require, exports, aurelia_framework_1, aurelia_event_aggregator_1, inspect_process_instance_pagination_repository_1, environment_1, inspect_process_instance_repository_1, process_engine_version_module_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var InspectProcessInstanceService = (function () {
        function InspectProcessInstanceService(eventAggregator, managementApiClient) {
            var _this = this;
            this.eventAggregator = eventAggregator;
            this.managementApiClient = managementApiClient;
            this.eventAggregator.subscribe(environment_1.default.events.configPanel.solutionEntryChanged, function (solutionEntry) {
                if (process_engine_version_module_1.processEngineSupportsPagination(solutionEntry.processEngineVersion)) {
                    _this.inspectProcessInstanceRepository = new inspect_process_instance_pagination_repository_1.InspectProcessInstancePaginationRepository(_this.managementApiClient);
                }
                else {
                    _this.inspectProcessInstanceRepository = new inspect_process_instance_repository_1.InspectProcessInstanceRepository(_this.managementApiClient);
                }
            });
        }
        InspectProcessInstanceService.prototype.getAllCorrelationsForProcessModelId = function (identity, processModelId, offset, limit) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, this.inspectProcessInstanceRepository.getAllCorrelationsForProcessModelId(identity, processModelId, offset, limit)];
                });
            });
        };
        InspectProcessInstanceService.prototype.getCorrelationById = function (identity, correlationId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, this.inspectProcessInstanceRepository.getCorrelationById(identity, correlationId)];
                });
            });
        };
        InspectProcessInstanceService.prototype.getLogsForCorrelation = function (correlation, identity) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, this.inspectProcessInstanceRepository.getLogsForCorrelation(correlation, identity)];
                });
            });
        };
        InspectProcessInstanceService.prototype.getLogsForProcessInstance = function (processModelId, processInstanceId, identity) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, this.inspectProcessInstanceRepository.getLogsForProcessInstance(processModelId, processInstanceId, identity)];
                });
            });
        };
        InspectProcessInstanceService.prototype.getTokenForFlowNodeInstance = function (processModelId, correlationId, flowNodeId, identity) {
            return __awaiter(this, void 0, void 0, function () {
                var tokenHistory, tokenForFlowNodeInstance, error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            tokenHistory = {};
                            return [4, this.inspectProcessInstanceRepository.getTokenForFlowNodeInstance(processModelId, correlationId, flowNodeId, identity)];
                        case 1:
                            tokenForFlowNodeInstance = _a.sent();
                            tokenHistory[tokenForFlowNodeInstance[0].flowNodeId] = tokenForFlowNodeInstance;
                            return [2, tokenHistory];
                        case 2:
                            error_1 = _a.sent();
                            return [2, undefined];
                        case 3: return [2];
                    }
                });
            });
        };
        InspectProcessInstanceService.prototype.getTokenForFlowNodeByProcessInstanceId = function (processInstanceId, flowNodeId, identity) {
            return __awaiter(this, void 0, void 0, function () {
                var error_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4, this.inspectProcessInstanceRepository.getTokenForFlowNodeByProcessInstanceId(processInstanceId, flowNodeId, identity)];
                        case 1: return [2, _a.sent()];
                        case 2:
                            error_2 = _a.sent();
                            return [2, undefined];
                        case 3: return [2];
                    }
                });
            });
        };
        InspectProcessInstanceService.prototype.getProcessInstancesForProcessModel = function (identity, processModelId, offset, limit) {
            return this.inspectProcessInstanceRepository.getProcessInstancesForProcessModel(identity, processModelId, offset, limit);
        };
        InspectProcessInstanceService.prototype.getProcessInstancesForCorrelation = function (identity, correlationId, offset, limit) {
            return this.inspectProcessInstanceRepository.getProcessInstancesForCorrelation(identity, correlationId, offset, limit);
        };
        InspectProcessInstanceService.prototype.getProcessInstanceById = function (identity, processInstanceId, processModelId) {
            return this.inspectProcessInstanceRepository.getProcessInstancesById(identity, processInstanceId, processModelId);
        };
        InspectProcessInstanceService = __decorate([
            aurelia_framework_1.inject(aurelia_event_aggregator_1.EventAggregator, 'ManagementApiClientService'),
            __metadata("design:paramtypes", [aurelia_event_aggregator_1.EventAggregator, Object])
        ], InspectProcessInstanceService);
        return InspectProcessInstanceService;
    }());
    exports.InspectProcessInstanceService = InspectProcessInstanceService;
});


;
define('text!modules/inspect/inspect.css',[],function(){return ".inspect {\n  width: 100%;\n  height: 100%; }\n\n.inspect-layout__tools-right {\n  position: fixed;\n  width: 36px;\n  top: 42px;\n  right: 0px;\n  bottom: 0;\n  background-color: #f7f7f7;\n  border-left: 2px solid #dcdbdb; }\n\n.inspect-layout__tool {\n  padding: 5px;\n  margin: 0 5px;\n  opacity: 0.5;\n  text-align: center; }\n\n.inspect-layout__tool:hover {\n  opacity: 1; }\n\n.inspect-layout__tool--active {\n  opacity: 1; }\n\n.inspect-layout__tool--disabled {\n  opacity: 0.2 !important; }\n\n.inspect-layout__tool--disabled:hover {\n  opacity: 0.2; }\n\n.dashboard__heatmap-container {\n  margin-right: 36px; }\n";});;
define('text!modules/inspect/inspect.html',[],function(){return "<template>\n  <require from=\"./inspect.css\"></require>\n  <require from=\"./heatmap/heatmap\"></require>\n  <require from=\"./dashboard/dashboard\"></require>\n  <require from=\"./inspect-process-instance/inspect-process-instance\"></require>\n  <div class=\"inspect\">\n\n    <dashboard if.bind=\"showDashboard\" view-model.ref=\"dashboard\" active-solution-entry.bind=\"activeSolutionEntry\"></dashboard>\n    <heatmap if.bind=\"showHeatmap\" active-diagram.bind=\"activeDiagram\" active-solution-entry.bind=\"activeSolutionEntry\"></heatmap>\n    <inspect-process-instance if.bind=\"showInspectProcessInstance\" active-diagram.bind=\"activeDiagram\" active-solution-entry.bind=\"activeSolutionEntry\" process-instance-id-to-select.to-view=\"processInstanceToSelect\" flow-node-to-select.to-view=\"flowNodeToSelect\" inspect-panel-tab-to-show.to-view=\"inspectPanelTabToShow\"></inspect-process-instance>\n\n    <div class=\"inspect-layout__tools-right\">\n      <div class=\"tool-list tool-list--vertical\">\n        <div if.bind=\"showInspectProcessInstance\"\n             class=\"inspect-layout__tool\"\n             class.bind=\"tokenViewerButtonDisabled ? 'inspect-layout__tool--disabled' : showTokenViewer ? 'inspect-layout__tool--active' : ''\"\n             disabled.bind=\"tokenViewerButtonDisabled\"\n             title.bind=\"showTokenViewer ? 'Hide token viewer' : 'Show token viewer'\"\n             click.delegate=\"toggleShowTokenViewer()\">\n          <i class=\"fas fa-book\"></i>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/inspect/process-list/process-list',["require", "exports", "aurelia-framework", "aurelia-router", "@process-engine/management_api_contracts", "@essential-projects/errors_ts", "bluebird", "../../../contracts/index", "../../../services/date-service/date.service", "../../../services/notification-service/notification.service", "../../../environment", "../../../services/solution-is-remote-solution-module/solution-is-remote-solution.module"], function (require, exports, aurelia_framework_1, aurelia_router_1, management_api_contracts_1, errors_ts_1, Bluebird, index_1, date_service_1, notification_service_1, environment_1, solution_is_remote_solution_module_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    Bluebird = __importStar(Bluebird);
    environment_1 = __importDefault(environment_1);
    var ProcessList = (function () {
        function ProcessList(dashboardService, notificationService, solutionService, router) {
            this.currentPage = 1;
            this.pageSize = 10;
            this.paginationSize = 10;
            this.initialLoadingFinished = false;
            this.processInstancesToDisplay = [];
            this.processInstances = [];
            this.stoppedProcessInstances = [];
            this.amountOfActiveProcessInstancesToDisplay = this.pageSize;
            this.amountOfActiveProcessInstancesToSkip = 0;
            this.dashboardServiceSubscriptions = [];
            this.dashboardService = dashboardService;
            this.notificationService = notificationService;
            this.solutionService = solutionService;
            this.router = router;
        }
        ProcessList.prototype.activeSolutionEntryChanged = function (newActiveSolutionEntry, previousActiveSolutionEntry) {
            return __awaiter(this, void 0, void 0, function () {
                var previousActiveSolutionEntryExists;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!solution_is_remote_solution_module_1.solutionIsRemoteSolution(newActiveSolutionEntry.uri)) {
                                return [2];
                            }
                            if (this.updatePromise) {
                                this.updatePromise.cancel();
                            }
                            previousActiveSolutionEntryExists = previousActiveSolutionEntry !== undefined;
                            if (previousActiveSolutionEntryExists) {
                                this.removeRuntimeSubscriptions();
                            }
                            if (this.solutionEventListenerId !== undefined) {
                                previousActiveSolutionEntry.service.unwatchSolution(this.solutionEventListenerId);
                            }
                            this.solutionEventListenerId = this.activeSolutionEntry.service.watchSolution(function () {
                                _this.updateProcessInstanceList();
                            });
                            this.processInstances = [];
                            this.processInstancesToDisplay = [];
                            this.stoppedProcessInstances = [];
                            this.initialLoadingFinished = false;
                            this.dashboardService.eventAggregator.publish(environment_1.default.events.configPanel.solutionEntryChanged, newActiveSolutionEntry);
                            return [4, this.updateProcessInstanceList()];
                        case 1:
                            _a.sent();
                            this.setRuntimeSubscriptions();
                            return [2];
                    }
                });
            });
        };
        ProcessList.prototype.currentPageChanged = function (currentPage, previousPage) {
            return __awaiter(this, void 0, void 0, function () {
                var isInitialEvent, paginationWasUsed, showNewerProcessInstances, skippedPages, paginationGetsDisplayed, pageIndex;
                return __generator(this, function (_a) {
                    isInitialEvent = previousPage === undefined || previousPage === null;
                    if (isInitialEvent) {
                        return [2];
                    }
                    if (this.updatePromise) {
                        this.updatePromise.cancel();
                    }
                    this.stoppedProcessInstances = [];
                    paginationWasUsed = previousPage > 0;
                    showNewerProcessInstances = currentPage > previousPage;
                    if (paginationWasUsed && showNewerProcessInstances) {
                        skippedPages = Math.abs(currentPage - previousPage) - 1;
                        this.amountOfActiveProcessInstancesToSkip +=
                            this.amountOfActiveProcessInstancesToDisplay + skippedPages * this.pageSize;
                    }
                    else {
                        paginationGetsDisplayed = this.totalItems > this.pageSize;
                        pageIndex = paginationGetsDisplayed ? this.currentPage - 1 : 0;
                        this.amountOfActiveProcessInstancesToSkip = pageIndex * this.pageSize;
                    }
                    this.amountOfActiveProcessInstancesToDisplay = this.pageSize;
                    this.updateProcessInstanceList();
                    return [2];
                });
            });
        };
        ProcessList.prototype.attached = function () {
            return __awaiter(this, void 0, void 0, function () {
                var activeSolutionUriIsNotSet, activeSolutionUriIsNotRemote;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.activeSolutionUri = this.router.currentInstruction.queryParams.solutionUri;
                            activeSolutionUriIsNotSet = this.activeSolutionUri === undefined;
                            if (activeSolutionUriIsNotSet) {
                                this.activeSolutionUri = window.localStorage.getItem('InternalProcessEngineRoute');
                            }
                            activeSolutionUriIsNotRemote = !solution_is_remote_solution_module_1.solutionIsRemoteSolution(this.activeSolutionUri);
                            if (activeSolutionUriIsNotRemote) {
                                this.activeSolutionUri = window.localStorage.getItem('InternalProcessEngineRoute');
                            }
                            this.activeSolutionEntry = this.solutionService.getSolutionEntryForUri(this.activeSolutionUri);
                            return [4, this.updateProcessInstanceList()];
                        case 1:
                            _a.sent();
                            this.subscriptions = [
                                this.dashboardService.eventAggregator.subscribe(index_1.AuthenticationStateEvent.LOGIN, function () { return __awaiter(_this, void 0, void 0, function () {
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                this.removeRuntimeSubscriptions();
                                                return [4, this.updateProcessInstanceList()];
                                            case 1:
                                                _a.sent();
                                                this.setRuntimeSubscriptions();
                                                return [2];
                                        }
                                    });
                                }); }),
                            ];
                            this.setRuntimeSubscriptions();
                            if (this.solutionEventListenerId === undefined) {
                                this.solutionEventListenerId = this.activeSolutionEntry.service.watchSolution(function () {
                                    _this.updateProcessInstanceList();
                                });
                            }
                            return [2];
                    }
                });
            });
        };
        ProcessList.prototype.detached = function () {
            if (this.subscriptions !== undefined) {
                for (var _i = 0, _a = this.subscriptions; _i < _a.length; _i++) {
                    var subscription = _a[_i];
                    subscription.dispose();
                }
            }
            if (this.solutionEventListenerId !== undefined && !this.activeSolutionEntry.isOpenDiagram) {
                this.activeSolutionEntry.service.unwatchSolution(this.solutionEventListenerId);
            }
            this.removeRuntimeSubscriptions();
        };
        ProcessList.prototype.stopProcessInstance = function (processInstance) {
            return __awaiter(this, void 0, void 0, function () {
                var onProcessTerminatedSubscription_1, onProcessErrorSubscription_1, error_1;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 4, , 5]);
                            return [4, this.dashboardService.onProcessTerminated(this.activeSolutionEntry.identity, function (message) {
                                    if (message.processInstanceId !== processInstance.processInstanceId) {
                                        return;
                                    }
                                    processInstance.state = management_api_contracts_1.DataModels.Correlations.CorrelationState.error;
                                    _this.dashboardService.removeSubscription(_this.activeSolutionEntry.identity, onProcessTerminatedSubscription_1);
                                    _this.dashboardService.removeSubscription(_this.activeSolutionEntry.identity, onProcessErrorSubscription_1);
                                })];
                        case 1:
                            onProcessTerminatedSubscription_1 = _a.sent();
                            return [4, this.dashboardService.onProcessError(this.activeSolutionEntry.identity, function (message) {
                                    if (message.processInstanceId !== processInstance.processInstanceId) {
                                        return;
                                    }
                                    processInstance.state = management_api_contracts_1.DataModels.Correlations.CorrelationState.error;
                                    _this.dashboardService.removeSubscription(_this.activeSolutionEntry.identity, onProcessTerminatedSubscription_1);
                                    _this.dashboardService.removeSubscription(_this.activeSolutionEntry.identity, onProcessErrorSubscription_1);
                                })];
                        case 2:
                            onProcessErrorSubscription_1 = _a.sent();
                            return [4, this.dashboardService.terminateProcessInstance(this.activeSolutionEntry.identity, processInstance.processInstanceId)];
                        case 3:
                            _a.sent();
                            this.stoppedProcessInstances.push(processInstance);
                            this.amountOfActiveProcessInstancesToDisplay--;
                            this.updateProcessInstancesToDisplay();
                            return [3, 5];
                        case 4:
                            error_1 = _a.sent();
                            this.notificationService.showNotification(index_1.NotificationType.ERROR, "Error while stopping Process! " + error_1);
                            return [3, 5];
                        case 5: return [2];
                    }
                });
            });
        };
        ProcessList.prototype.formatDate = function (date) {
            return date_service_1.getBeautifiedDate(date);
        };
        ProcessList.prototype.setRuntimeSubscriptions = function () {
            return __awaiter(this, void 0, void 0, function () {
                var subscriptionsExist, _a;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            subscriptionsExist = this.dashboardServiceSubscriptions.length > 0;
                            if (subscriptionsExist) {
                                this.removeRuntimeSubscriptions();
                            }
                            this.identitiyUsedForSubscriptions = this.activeSolutionEntry.identity;
                            _a = this;
                            return [4, Promise.all([
                                    this.dashboardService.onProcessStarted(this.activeSolutionEntry.identity, function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0: return [4, this.updateProcessInstanceList()];
                                                case 1:
                                                    _a.sent();
                                                    return [2];
                                            }
                                        });
                                    }); }),
                                    this.dashboardService.onProcessEnded(this.activeSolutionEntry.identity, function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0: return [4, this.updateProcessInstanceList()];
                                                case 1:
                                                    _a.sent();
                                                    return [2];
                                            }
                                        });
                                    }); }),
                                    this.dashboardService.onProcessError(this.activeSolutionEntry.identity, function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0: return [4, this.updateProcessInstanceList()];
                                                case 1:
                                                    _a.sent();
                                                    return [2];
                                            }
                                        });
                                    }); }),
                                    this.dashboardService.onProcessTerminated(this.activeSolutionEntry.identity, function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0: return [4, this.updateProcessInstanceList()];
                                                case 1:
                                                    _a.sent();
                                                    return [2];
                                            }
                                        });
                                    }); }),
                                ])];
                        case 1:
                            _a.dashboardServiceSubscriptions = _b.sent();
                            return [2];
                    }
                });
            });
        };
        ProcessList.prototype.removeRuntimeSubscriptions = function () {
            for (var _i = 0, _a = this.dashboardServiceSubscriptions; _i < _a.length; _i++) {
                var subscription = _a[_i];
                this.dashboardService.removeSubscription(this.identitiyUsedForSubscriptions, subscription);
            }
            this.dashboardServiceSubscriptions = [];
        };
        ProcessList.prototype.updateProcessInstanceList = function () {
            return __awaiter(this, void 0, void 0, function () {
                var processInstanceList, processInstanceListWasUpdated, error_2, errorIsForbiddenError, errorIsUnauthorizedError, errorIsAuthenticationRelated, errorIsNotNoProcessInstancesFound, processInstancesAreNotSet;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4, this.getActiveProcessInstancesForCurrentPage()];
                        case 1:
                            processInstanceList = _a.sent();
                            if (!processInstanceList) {
                                return [2];
                            }
                            processInstanceListWasUpdated = JSON.stringify(processInstanceList.processInstances) !== JSON.stringify(this.processInstances);
                            this.totalItems = processInstanceList.totalCount + this.stoppedProcessInstances.length;
                            this.activeProcessInstanceCount = processInstanceList.totalCount;
                            if (processInstanceListWasUpdated) {
                                this.processInstances = processInstanceList.processInstances;
                                this.updateProcessInstancesToDisplay();
                            }
                            this.initialLoadingFinished = true;
                            this.showError = false;
                            return [3, 3];
                        case 2:
                            error_2 = _a.sent();
                            this.initialLoadingFinished = true;
                            errorIsForbiddenError = errors_ts_1.isError(error_2, errors_ts_1.ForbiddenError);
                            errorIsUnauthorizedError = errors_ts_1.isError(error_2, errors_ts_1.UnauthorizedError);
                            errorIsAuthenticationRelated = errorIsForbiddenError || errorIsUnauthorizedError;
                            if (!errorIsAuthenticationRelated) {
                                this.processInstancesToDisplay = [];
                                this.processInstances = [];
                                errorIsNotNoProcessInstancesFound = error_2.code !== 404;
                                this.showError = errorIsNotNoProcessInstancesFound;
                            }
                            return [3, 3];
                        case 3:
                            processInstancesAreNotSet = this.processInstances === undefined || this.processInstances === null;
                            if (processInstancesAreNotSet) {
                                this.processInstances = [];
                            }
                            return [2];
                    }
                });
            });
        };
        ProcessList.prototype.getActiveProcessInstancesForCurrentPage = function () {
            return __awaiter(this, void 0, void 0, function () {
                var identity, shouldOnlyDisplayStoppedProcessInstances;
                var _this = this;
                return __generator(this, function (_a) {
                    identity = this.activeSolutionEntry.identity;
                    shouldOnlyDisplayStoppedProcessInstances = this.amountOfActiveProcessInstancesToDisplay === 0;
                    if (shouldOnlyDisplayStoppedProcessInstances) {
                        return [2, undefined];
                    }
                    this.updatePromise = new Bluebird.Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                        var activeProcessInstances, error_3;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _a.trys.push([0, 2, , 3]);
                                    return [4, this.dashboardService.getAllActiveProcessInstances(identity, this.amountOfActiveProcessInstancesToSkip, this.amountOfActiveProcessInstancesToDisplay)];
                                case 1:
                                    activeProcessInstances = _a.sent();
                                    resolve(activeProcessInstances);
                                    return [3, 3];
                                case 2:
                                    error_3 = _a.sent();
                                    reject(error_3);
                                    return [3, 3];
                                case 3: return [2];
                            }
                        });
                    }); });
                    return [2, this.updatePromise];
                });
            });
        };
        ProcessList.prototype.updateProcessInstancesToDisplay = function () {
            var _this = this;
            this.processInstancesToDisplay = this.processInstances;
            this.stoppedProcessInstances.forEach(function (stoppedProcessInstance) {
                var processInstanceGetsDisplayed = _this.processInstancesToDisplay.some(function (processInstance) {
                    return stoppedProcessInstance.processInstanceId === processInstance.processInstanceId;
                });
                if (!processInstanceGetsDisplayed) {
                    _this.processInstancesToDisplay.push(stoppedProcessInstance);
                }
            });
            this.paginationShowsLoading = false;
        };
        __decorate([
            aurelia_framework_1.observable,
            __metadata("design:type", Number)
        ], ProcessList.prototype, "currentPage", void 0);
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", Object)
        ], ProcessList.prototype, "activeSolutionEntry", void 0);
        ProcessList = __decorate([
            aurelia_framework_1.inject('DashboardService', 'NotificationService', 'SolutionService', aurelia_router_1.Router),
            __metadata("design:paramtypes", [Object, notification_service_1.NotificationService, Object, aurelia_router_1.Router])
        ], ProcessList);
        return ProcessList;
    }());
    exports.ProcessList = ProcessList;
});


;
define('text!modules/inspect/process-list/process-list.css',[],function(){return ".process-list__last-table-cell {\n  width: 320px;\n  white-space: nowrap; }\n\n.pagination {\n  padding-right: 0px;\n  justify-content: center; }\n\n.loading-spinner {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 100px; }\n\n.process-list-container {\n  flex: 1; }\n\n.process-list {\n  display: flex;\n  align-items: stretch; }\n\n.process-list-item-stopped {\n  background-color: #ff00005c !important; }\n\n.process-list-item-modelname {\n  color: inherit;\n  cursor: default; }\n\n.process-list-header {\n  margin-top: 10px;\n  margin-bottom: 10px; }\n\n.process-list-total-count {\n  float: right; }\n\n.process-list__no-processes-text--error {\n  color: darkred; }\n";});;
define('text!modules/inspect/process-list/process-list.html',[],function(){return "<template>\n  <require from=\"./process-list.css\"></require>\n  <require from=\"../../pagination/pagination\"></require>\n  <div class=\"process-list\">\n    <div class=\"process-list-container\" id=\"processListContainer\">\n      <h4 class=\"process-list-header\">Processes</h4>\n      <template if.bind=\"processInstancesToDisplay && processInstancesToDisplay.length > 0 && initialLoadingFinished\">\n        <h6 class=\"process-list-total-count\">Total: ${activeProcessInstanceCount}</h6>\n        <table class=\"table table-striped table-bordered\">\n          <tr>\n            <th>Started At</th>\n            <th>Correlation ID</th>\n            <th>Process Model ID</th>\n            <th></th>\n          </tr>\n          <tr repeat.for=\"processInstance of processInstancesToDisplay\" id=\"processList-${processInstance.correlationId}\" class.bind=\"processInstance.state === 'error' ? 'process-list-item-stopped' : 'process-list-item'\">\n            <td>${formatDate(processInstance.createdAt)}</td>\n            <td>${processInstance.correlationId}</td>\n            <td>\n              <a route-href=\"route: design; params.bind: { view: 'detail', diagramName: processInstance.processModelId, solutionUri: activeSolutionEntry.uri }\" class=\"process-list-item-modelname\">${processInstance.processModelId}</a>\n            </td>\n            <td class=\"process-list__last-table-cell\">\n              <a if.bind=\"processInstance.state !== 'error'\" route-href=\"route: task-list-processinstance; params.bind: { processInstanceId: processInstance.processInstanceId, solutionUri: activeSolutionEntry.uri }\" class=\"process-list-item-user-tasks btn btn-default\">Tasks</a>\n              <a if.bind=\"processInstance.state !== 'error'\" route-href=\"route: live-execution-tracker; params.bind: { diagramName: processInstance.processModelId, solutionUri: activeSolutionEntry.uri, correlationId: processInstance.correlationId, processInstanceId: processInstance.processInstanceId }\" class=\"btn btn-default\">Live Execution Tracking</a>\n              <button if.bind=\"processInstance.state !== 'error'\" class=\"btn btn-default\" click.delegate=\"stopProcessInstance(processInstance)\">Stop</button>\n            </td>\n          </tr>\n        </table>\n      </template>\n      <template if.bind=\"initialLoadingFinished && processInstancesToDisplay.length == 0\">\n        <span if.bind=\"showError\" class=\"process-list__no-processes-text process-list__no-processes-text--error\">There was an error while receiving the processes.</span>\n        <span else class=\"process-list__no-processes-text\">No process instances found for this user.</span>\n      </template>\n      <div class=\"col-md-12 col-xs-12 pagination\" show.bind=\"processInstancesToDisplay && processInstancesToDisplay.length > 0\">\n        <pagination if.bind=\"totalItems > pageSize\" view-model.ref=\"pagination\" current-page.two-way=\"currentPage\" per-page.to-view=\"pageSize\" items.to-view=\"totalItems\" max-pages-to-display.to-view=\"paginationSize\" content-is-async.bind=\"true\" is-loading.two-way=\"paginationShowsLoading\"></pagination>\n      </div>\n      <div if.bind=\"!initialLoadingFinished\" class=\"container\">\n        <img src=\"src/resources/images/gears.svg\" class=\"loading-spinner\">\n      </div>\n    </div>\n  </div>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/inspect/task-list/task-list',["require", "exports", "aurelia-framework", "aurelia-router", "bluebird", "@essential-projects/errors_ts", "../../../contracts/index", "../../../environment", "../dashboard/contracts/index", "../../../services/solution-is-remote-solution-module/solution-is-remote-solution.module"], function (require, exports, aurelia_framework_1, aurelia_router_1, Bluebird, errors_ts_1, index_1, environment_1, index_2, solution_is_remote_solution_module_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    Bluebird = __importStar(Bluebird);
    environment_1 = __importDefault(environment_1);
    var TaskList = (function () {
        function TaskList(dashboardService, router, solutionService) {
            this.taskList = this;
            this.currentPage = 1;
            this.pageSize = 10;
            this.paginationSize = 10;
            this.initialLoadingFinished = false;
            this.showError = false;
            this.showDynamicUiModal = false;
            this.dashboardServiceSubscriptions = [];
            this.tasks = [];
            this.dashboardService = dashboardService;
            this.router = router;
            this.solutionService = solutionService;
        }
        TaskList.prototype.attached = function () {
            return __awaiter(this, void 0, void 0, function () {
                var getTasksIsUndefined, activeSolutionUriIsNotSet, activeSolutionUriIsNotRemote;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            getTasksIsUndefined = this.getTasks === undefined;
                            this.activeSolutionUri = this.router.currentInstruction.queryParams.solutionUri;
                            activeSolutionUriIsNotSet = this.activeSolutionUri === undefined;
                            if (activeSolutionUriIsNotSet) {
                                this.activeSolutionUri = window.localStorage.getItem('InternalProcessEngineRoute');
                            }
                            activeSolutionUriIsNotRemote = !solution_is_remote_solution_module_1.solutionIsRemoteSolution(this.activeSolutionUri);
                            if (activeSolutionUriIsNotRemote) {
                                this.activeSolutionUri = window.localStorage.getItem('InternalProcessEngineRoute');
                            }
                            this.activeSolutionEntry = this.solutionService.getSolutionEntryForUri(this.activeSolutionUri);
                            if (getTasksIsUndefined) {
                                this.getTasks = this.getAllTasks;
                            }
                            return [4, this.updateTasks()];
                        case 1:
                            _a.sent();
                            this.subscriptions = [
                                this.dashboardService.eventAggregator.subscribe(index_1.AuthenticationStateEvent.LOGIN, function () { return __awaiter(_this, void 0, void 0, function () {
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                this.removeRuntimeSubscriptions();
                                                return [4, this.updateTasks()];
                                            case 1:
                                                _a.sent();
                                                this.setRuntimeSubscriptions();
                                                return [2];
                                        }
                                    });
                                }); }),
                            ];
                            this.isAttached = true;
                            this.setRuntimeSubscriptions();
                            if (this.solutionEventListenerId === undefined) {
                                this.solutionEventListenerId = this.activeSolutionEntry.service.watchSolution(function () {
                                    _this.updateTasks();
                                });
                            }
                            return [2];
                    }
                });
            });
        };
        TaskList.prototype.detached = function () {
            for (var _i = 0, _a = this.subscriptions; _i < _a.length; _i++) {
                var subscription = _a[_i];
                subscription.dispose();
            }
            this.isAttached = false;
            if (this.solutionEventListenerId !== undefined && !this.activeSolutionEntry.isOpenDiagram) {
                this.activeSolutionEntry.service.unwatchSolution(this.solutionEventListenerId);
            }
            this.removeRuntimeSubscriptions();
        };
        TaskList.prototype.closeDynamicUiModal = function () {
            this.showDynamicUiModal = false;
        };
        TaskList.prototype.goBack = function () {
            this.router.navigateBack();
        };
        TaskList.prototype.continueTask = function (task) {
            return __awaiter(this, void 0, void 0, function () {
                var correlationId, id, processInstanceId, processModelId, taskType, flowNodeInstanceId, error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            correlationId = task.correlationId, id = task.id, processInstanceId = task.processInstanceId, processModelId = task.processModelId, taskType = task.taskType, flowNodeInstanceId = task.flowNodeInstanceId;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 7]);
                            return [4, this.dashboardService.getCorrelationById(this.activeSolutionEntry.identity, correlationId)];
                        case 2:
                            _a.sent();
                            return [3, 7];
                        case 3:
                            error_1 = _a.sent();
                            if (!errors_ts_1.isError(error_1, errors_ts_1.NotFoundError)) return [3, 6];
                            if (!(taskType === index_2.TaskType.EmptyActivity)) return [3, 5];
                            return [4, this.dashboardService.finishEmptyActivity(this.activeSolutionEntry.identity, processInstanceId, correlationId, flowNodeInstanceId)];
                        case 4:
                            _a.sent();
                            return [2];
                        case 5:
                            this.processModelId = processModelId;
                            this.processInstanceId = processInstanceId;
                            this.taskId = id;
                            this.correlationId = correlationId;
                            this.showDynamicUiModal = true;
                            return [2];
                        case 6: throw error_1;
                        case 7:
                            this.router.navigateToRoute('live-execution-tracker', {
                                diagramName: task.processModelId,
                                solutionUri: this.activeSolutionEntry.uri,
                                correlationId: correlationId,
                                processInstanceId: processInstanceId,
                                taskId: id,
                            });
                            return [2];
                    }
                });
            });
        };
        TaskList.prototype.activeSolutionEntryChanged = function (newActiveSolutionEntry, previousActiveSolutionEntry) {
            return __awaiter(this, void 0, void 0, function () {
                var previousActiveSolutionEntryExists;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!solution_is_remote_solution_module_1.solutionIsRemoteSolution(newActiveSolutionEntry.uri)) {
                                return [2];
                            }
                            if (!this.isAttached) {
                                return [2];
                            }
                            if (!this.isAttached) {
                                return [2];
                            }
                            if (this.updatePromise) {
                                this.updatePromise.cancel();
                            }
                            previousActiveSolutionEntryExists = previousActiveSolutionEntry !== undefined;
                            if (previousActiveSolutionEntryExists) {
                                this.removeRuntimeSubscriptions();
                            }
                            if (this.solutionEventListenerId !== undefined) {
                                previousActiveSolutionEntry.service.unwatchSolution(this.solutionEventListenerId);
                            }
                            this.solutionEventListenerId = this.activeSolutionEntry.service.watchSolution(function () {
                                _this.updateTasks();
                            });
                            this.tasks = [];
                            this.initialLoadingFinished = false;
                            this.showError = false;
                            this.dashboardService.eventAggregator.publish(environment_1.default.events.configPanel.solutionEntryChanged, newActiveSolutionEntry);
                            if (this.getTasks === undefined) {
                                this.getTasks = this.getAllTasks;
                            }
                            return [4, this.updateTasks()];
                        case 1:
                            _a.sent();
                            this.setRuntimeSubscriptions();
                            return [2];
                    }
                });
            });
        };
        TaskList.prototype.currentPageChanged = function (currentPage, previousPage) {
            var isInitialEvent = previousPage === undefined || previousPage === null;
            if (isInitialEvent) {
                return;
            }
            if (this.updatePromise) {
                this.updatePromise.cancel();
            }
            this.updateTasks();
        };
        Object.defineProperty(TaskList.prototype, "shownTasks", {
            get: function () {
                return this.tasks;
            },
            enumerable: true,
            configurable: true
        });
        TaskList.prototype.initializeTaskList = function (routeParameters) {
            var _this = this;
            var diagramName = routeParameters.diagramName;
            var correlationId = routeParameters.correlationId;
            var processInstanceId = routeParameters.processInstanceId;
            var hasDiagramName = diagramName !== undefined;
            var hasCorrelationId = correlationId !== undefined;
            var hasProcessInstanceId = processInstanceId !== undefined;
            if (hasDiagramName) {
                this.getTasks = function (offset, limit) {
                    return _this.getTasksForProcessModel(diagramName, offset, limit);
                };
            }
            else if (hasCorrelationId) {
                this.getTasks = function (offset, limit) {
                    return _this.getTasksForCorrelation(correlationId, offset, limit);
                };
            }
            else if (hasProcessInstanceId) {
                this.getTasks = function (offset, limit) {
                    return _this.getTasksForProcessInstanceId(processInstanceId, offset, limit);
                };
            }
            else {
                this.getTasks = this.getAllTasks;
            }
        };
        TaskList.prototype.setRuntimeSubscriptions = function () {
            return __awaiter(this, void 0, void 0, function () {
                var subscriptionsExist, _a;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            subscriptionsExist = this.dashboardServiceSubscriptions.length > 0;
                            if (subscriptionsExist) {
                                this.removeRuntimeSubscriptions();
                            }
                            this.identitiyUsedForSubscriptions = this.activeSolutionEntry.identity;
                            _a = this;
                            return [4, Promise.all([
                                    this.dashboardService.onProcessTerminated(this.activeSolutionEntry.identity, function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0: return [4, this.updateTasks()];
                                                case 1:
                                                    _a.sent();
                                                    return [2];
                                            }
                                        });
                                    }); }),
                                    this.dashboardService.onEmptyActivityFinished(this.activeSolutionEntry.identity, function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0: return [4, this.updateTasks()];
                                                case 1:
                                                    _a.sent();
                                                    return [2];
                                            }
                                        });
                                    }); }),
                                    this.dashboardService.onEmptyActivityWaiting(this.activeSolutionEntry.identity, function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0: return [4, this.updateTasks()];
                                                case 1:
                                                    _a.sent();
                                                    return [2];
                                            }
                                        });
                                    }); }),
                                    this.dashboardService.onUserTaskFinished(this.activeSolutionEntry.identity, function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0: return [4, this.updateTasks()];
                                                case 1:
                                                    _a.sent();
                                                    return [2];
                                            }
                                        });
                                    }); }),
                                    this.dashboardService.onUserTaskWaiting(this.activeSolutionEntry.identity, function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0: return [4, this.updateTasks()];
                                                case 1:
                                                    _a.sent();
                                                    return [2];
                                            }
                                        });
                                    }); }),
                                    this.dashboardService.onManualTaskFinished(this.activeSolutionEntry.identity, function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0: return [4, this.updateTasks()];
                                                case 1:
                                                    _a.sent();
                                                    return [2];
                                            }
                                        });
                                    }); }),
                                    this.dashboardService.onManualTaskWaiting(this.activeSolutionEntry.identity, function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0: return [4, this.updateTasks()];
                                                case 1:
                                                    _a.sent();
                                                    return [2];
                                            }
                                        });
                                    }); }),
                                    this.dashboardService.onProcessError(this.activeSolutionEntry.identity, function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0: return [4, this.updateTasks()];
                                                case 1:
                                                    _a.sent();
                                                    return [2];
                                            }
                                        });
                                    }); }),
                                ])];
                        case 1:
                            _a.dashboardServiceSubscriptions = _b.sent();
                            return [2];
                    }
                });
            });
        };
        TaskList.prototype.removeRuntimeSubscriptions = function () {
            for (var _i = 0, _a = this.dashboardServiceSubscriptions; _i < _a.length; _i++) {
                var subscription = _a[_i];
                this.dashboardService.removeSubscription(this.identitiyUsedForSubscriptions, subscription);
            }
            this.dashboardServiceSubscriptions = [];
        };
        TaskList.prototype.getAllTasks = function (offset, limit) {
            var _this = this;
            return new Bluebird.Promise(function (resolve, reject, onCancel) { return __awaiter(_this, void 0, void 0, function () {
                var taskList, error_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4, this.dashboardService.getAllSuspendedTasks(this.activeSolutionEntry.identity, offset, limit)];
                        case 1:
                            taskList = _a.sent();
                            resolve(taskList);
                            return [3, 3];
                        case 2:
                            error_2 = _a.sent();
                            reject(error_2);
                            return [3, 3];
                        case 3: return [2];
                    }
                });
            }); });
        };
        TaskList.prototype.getTasksForProcessModel = function (processModelId, offset, limit) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2, new Bluebird.Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                            var taskList, error_3;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        _a.trys.push([0, 2, , 3]);
                                        return [4, this.dashboardService.getSuspendedTasksForProcessModel(this.activeSolutionEntry.identity, processModelId, offset, limit)];
                                    case 1:
                                        taskList = _a.sent();
                                        resolve(taskList);
                                        return [3, 3];
                                    case 2:
                                        error_3 = _a.sent();
                                        reject(error_3);
                                        return [3, 3];
                                    case 3: return [2];
                                }
                            });
                        }); })];
                });
            });
        };
        TaskList.prototype.getTasksForCorrelation = function (correlationId, offset, limit) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2, new Bluebird.Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                            var taskList, error_4;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        _a.trys.push([0, 2, , 3]);
                                        return [4, this.dashboardService.getSuspendedTasksForCorrelation(this.activeSolutionEntry.identity, correlationId, offset, limit)];
                                    case 1:
                                        taskList = _a.sent();
                                        resolve(taskList);
                                        return [3, 3];
                                    case 2:
                                        error_4 = _a.sent();
                                        reject(error_4);
                                        return [3, 3];
                                    case 3: return [2];
                                }
                            });
                        }); })];
                });
            });
        };
        TaskList.prototype.getTasksForProcessInstanceId = function (processInstanceId, offset, limit) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, this.dashboardService.getSuspendedTasksForProcessInstance(this.activeSolutionEntry.identity, processInstanceId, offset, limit)];
                });
            });
        };
        TaskList.prototype.updateTasks = function () {
            return __awaiter(this, void 0, void 0, function () {
                var paginationGetsDisplayed, pageIndex, taskOffset, suspendedTaskList, error_5, errorIsForbiddenError, errorIsUnauthorizedError, errorIsAuthenticationRelated;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            paginationGetsDisplayed = this.totalItems > this.pageSize;
                            pageIndex = paginationGetsDisplayed ? this.currentPage - 1 : 0;
                            taskOffset = pageIndex * this.pageSize;
                            this.updatePromise = this.getTasks(taskOffset, this.pageSize);
                            return [4, this.updatePromise];
                        case 1:
                            suspendedTaskList = _a.sent();
                            this.tasks = suspendedTaskList.taskListEntries;
                            this.totalItems = suspendedTaskList.totalCount;
                            this.initialLoadingFinished = true;
                            this.showError = false;
                            this.paginationShowsLoading = false;
                            return [3, 3];
                        case 2:
                            error_5 = _a.sent();
                            this.tasks = [];
                            this.totalItems = 0;
                            this.initialLoadingFinished = true;
                            errorIsForbiddenError = errors_ts_1.isError(error_5, errors_ts_1.ForbiddenError);
                            errorIsUnauthorizedError = errors_ts_1.isError(error_5, errors_ts_1.UnauthorizedError);
                            errorIsAuthenticationRelated = errorIsForbiddenError || errorIsUnauthorizedError;
                            if (!errorIsAuthenticationRelated) {
                                this.showError = true;
                            }
                            return [3, 3];
                        case 3: return [2];
                    }
                });
            });
        };
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", Object)
        ], TaskList.prototype, "activeSolutionEntry", void 0);
        __decorate([
            aurelia_framework_1.observable,
            __metadata("design:type", Number)
        ], TaskList.prototype, "currentPage", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", String)
        ], TaskList.prototype, "processModelId", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", String)
        ], TaskList.prototype, "taskId", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", String)
        ], TaskList.prototype, "processInstanceId", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", String)
        ], TaskList.prototype, "correlationId", void 0);
        TaskList = __decorate([
            aurelia_framework_1.inject('DashboardService', aurelia_router_1.Router, 'SolutionService'),
            __metadata("design:paramtypes", [Object, aurelia_router_1.Router, Object])
        ], TaskList);
        return TaskList;
    }());
    exports.TaskList = TaskList;
});


;
define('text!modules/inspect/task-list/task-list.css',[],function(){return ".task-list__last-table-cell {\n  width: 1%;\n  white-space: nowrap; }\n\n.pagination {\n  padding-right: 0px;\n  justify-content: center; }\n\n.loading-spinner {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 100px; }\n\n.task-list-container {\n  flex: 1; }\n\n.task-list-item-modelname {\n  color: inherit;\n  cursor: default; }\n\n.task-list-header {\n  margin-top: 10px;\n  margin-bottom: 10px; }\n\n.task-list-total-count {\n  float: right; }\n\n.task-list__no-tasks-text--error {\n  color: darkred; }\n\n.task-list__close-modal-button {\n  position: absolute;\n  right: 20px; }\n\n.task-list__close-dynamic-ui-modal-button {\n  top: 5px; }\n";});;
define('text!modules/inspect/task-list/task-list.html',[],function(){return "<template>\n  <require from=\"./task-list.css\"></require>\n  <require from=\"../../pagination/pagination\"></require>\n  <require from=\"../../task-dynamic-ui/task-dynamic-ui\"></require>\n\n  <div class=\"task-list-container\" id=\"taskListContainer\">\n    <h4 class=\"task-list-header\">Tasks</h4>\n    <template if.bind=\"initialLoadingFinished && tasks && tasks.length > 0\">\n      <h6 class=\"task-list-total-count\">Total: ${totalItems}</h6>\n      <table class=\"table table-striped table-bordered\">\n        <tr>\n          <th>Correlation ID</th>\n          <th>Process Model ID</th>\n          <th>Task Type</th>\n          <th>Task ID</th>\n          <th></th>\n        </tr>\n        <tr repeat.for=\"entry of shownTasks\" class=\"task-list-item\" id=\"taskList-${entry.processModelId}\">\n          <td>\n            ${entry.correlationId}\n          </td>\n          <td>\n            <a route-href=\"route: design; params.bind: { diagramName: entry.processModelId,\n                                          solutionUri: activeSolutionEntry.uri, view: 'detail' }\"\n                class=\"task-list-item-modelname\">${entry.processModelId}</a>\n          </td>\n          <td>\n            ${entry.taskType}\n          </td>\n          <td>${entry.id}</td>\n          <td class=\"task-list__last-table-cell\">\n            <button class=\"btn btn-default task-list-continue-button\" click.delegate=\"continueTask(entry)\">Continue</button>\n          </td>\n        </tr>\n      </table>\n      <div if.bind=\"totalItems > pageSize\" class=\"col-md-12 col-xs-12 pagination\">\n        <pagination view-model.ref=\"pagination\" current-page.two-way=\"currentPage\" per-page.to-view=\"pageSize\" items.to-view=\"totalItems\" max-pages-to-display.to-view=\"paginationSize\" content-is-async.bind=\"true\" is-loading.two-way=\"paginationShowsLoading\"></pagination>\n      </div>\n    </template>\n    <template if.bind=\"initialLoadingFinished && (!tasks || tasks.length === 0)\">\n      <span if.bind=\"showError\" class=\"task-list__no-tasks-text task-list__no-tasks-text--error \">There was an error while receiving the tasks.</span>\n      <span else class=\"task-list__no-tasks-text\">No tasks found for this user.</span>\n    </template>\n    <div if.bind=\"!initialLoadingFinished\" class=\"container\">\n      <img src=\"src/resources/images/gears.svg\" class=\"loading-spinner\">\n    </div>\n  </div>\n\n  <modal if.bind=\"showDynamicUiModal\"\n        css=\"display: ${showDynamicUiModal ? 'block' : 'none'};\"\n        body-style=\"overflow: auto;\"\n        origin.bind=\"taskList\">\n    <template replace-part=\"modal-header\">\n      <btn class=\"button task-list__close-modal-button task-list__close-dynamic-ui-modal-button\"><i class=\"fas fa-times\" click.delegate=\"closeDynamicUiModal()\"></i></btn>\n    </template>\n    <template replace-part=\"modal-body\">\n      <task-dynamic-ui view-model.ref=\"origin.dynamicUi\"\n                      correlation-id.bind=\"correlationId\"\n                      process-instance-id.bind=\"processInstanceId\"\n                      process-model-id.bind=\"processModelId\"\n                      task-id.bind=\"taskId\"\n                      is-modal=\"true\"\n                      close-modal.trigger=\"closeDynamicUiModal()\"\n                      active-solution-entry.bind=\"activeSolutionEntry\">\n      </task-dynamic-ui>\n    </template>\n  </modal>\n\n</template>\n";});;
define('modules/inspect/token-viewer/contracts/IPayloadEntry',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('modules/inspect/token-viewer/contracts/IPayloadEntryValue',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('modules/inspect/token-viewer/contracts/IRawTokenEntry',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('modules/inspect/token-viewer/contracts/ITokenEntry',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('modules/inspect/token-viewer/contracts/ITokenViewerRepository',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('modules/inspect/token-viewer/contracts/ITokenViewerService',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('modules/inspect/token-viewer/contracts/index',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('modules/inspect/token-viewer/index',["require", "exports", "aurelia-event-aggregator", "./service/token-viewer.service"], function (require, exports, aurelia_event_aggregator_1, token_viewer_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function configure(config) {
        var eventAggregator = config.container.get(aurelia_event_aggregator_1.EventAggregator);
        var managementApiClient = config.container.get('ManagementApiClientService');
        var tokenViewerService = new token_viewer_service_1.TokenViewerService(eventAggregator, managementApiClient);
        config.container.registerInstance('TokenViewerService', tokenViewerService);
    }
    exports.configure = configure;
});


;
define('modules/inspect/token-viewer/repository/token-viewer-repository-factory',["require", "exports", "../../../../services/process-engine-version-module/process-engine-version.module", "./token-viewer.pagination-repository", "./token-viewer.repository"], function (require, exports, process_engine_version_module_1, token_viewer_pagination_repository_1, token_viewer_repository_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function createTokenViewerRepository(managementApiClient, runtimeVersion) {
        if (process_engine_version_module_1.processEngineSupportsPagination(runtimeVersion)) {
            return new token_viewer_pagination_repository_1.TokenViewerPaginationRepository(managementApiClient);
        }
        return new token_viewer_repository_1.TokenViewerRepository(managementApiClient);
    }
    exports.createTokenViewerRepository = createTokenViewerRepository;
});


;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define('modules/inspect/token-viewer/repository/token-viewer.pagination-repository',["require", "exports", "./token-viewer.repository"], function (require, exports, token_viewer_repository_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TokenViewerPaginationRepository = (function (_super) {
        __extends(TokenViewerPaginationRepository, _super);
        function TokenViewerPaginationRepository() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TokenViewerPaginationRepository.prototype.getTokenForFlowNodeInstance = function (processModelId, correlationId, flowNodeId, identity) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, this.managementApiClient.getTokensForFlowNode(identity, correlationId, processModelId, flowNodeId)];
                });
            });
        };
        TokenViewerPaginationRepository.prototype.getTokenForFlowNodeByProcessInstanceId = function (processInstanceId, flowNodeId, identity) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, this.managementApiClient.getTokensForFlowNodeByProcessInstanceId(identity, processInstanceId, flowNodeId)];
                });
            });
        };
        return TokenViewerPaginationRepository;
    }(token_viewer_repository_1.TokenViewerRepository));
    exports.TokenViewerPaginationRepository = TokenViewerPaginationRepository;
});


;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define('modules/inspect/token-viewer/repository/token-viewer.repository',["require", "exports", "aurelia-framework"], function (require, exports, aurelia_framework_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TokenViewerRepository = (function () {
        function TokenViewerRepository(managementApiClient) {
            this.managementApiClient = managementApiClient;
        }
        TokenViewerRepository.prototype.getTokenForFlowNodeInstance = function (processModelId, correlationId, flowNodeId, identity) {
            return __awaiter(this, void 0, void 0, function () {
                var tokenHistoryEntries, tokenHistoryEntryList;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.managementApiClient.getTokensForFlowNode(identity, correlationId, processModelId, flowNodeId)];
                        case 1:
                            tokenHistoryEntries = (_a.sent());
                            tokenHistoryEntryList = {
                                tokenHistoryEntries: tokenHistoryEntries,
                                totalCount: tokenHistoryEntries.length,
                            };
                            return [2, tokenHistoryEntryList];
                    }
                });
            });
        };
        TokenViewerRepository.prototype.getTokenForFlowNodeByProcessInstanceId = function (processInstanceId, flowNodeId, identity) {
            return __awaiter(this, void 0, void 0, function () {
                var oldTokenHistoryGroup, oldTokenHistoryKeys, tokenHistoryGroup;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.managementApiClient.getTokensForFlowNodeByProcessInstanceId(identity, processInstanceId, flowNodeId)];
                        case 1:
                            oldTokenHistoryGroup = (_a.sent());
                            oldTokenHistoryKeys = Object.keys(oldTokenHistoryGroup);
                            tokenHistoryGroup = {};
                            oldTokenHistoryKeys.forEach(function (key) {
                                var tokenHistoryEntryList = {
                                    tokenHistoryEntries: oldTokenHistoryGroup[key],
                                    totalCount: oldTokenHistoryGroup[key].length,
                                };
                                tokenHistoryGroup[key] = tokenHistoryEntryList;
                            });
                            return [2, tokenHistoryGroup];
                    }
                });
            });
        };
        TokenViewerRepository = __decorate([
            aurelia_framework_1.inject('ManagementApiClientService'),
            __metadata("design:paramtypes", [Object])
        ], TokenViewerRepository);
        return TokenViewerRepository;
    }());
    exports.TokenViewerRepository = TokenViewerRepository;
});


;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/inspect/token-viewer/service/token-viewer.service',["require", "exports", "aurelia-framework", "aurelia-event-aggregator", "@process-engine/management_api_client", "../../../../environment", "../repository/token-viewer-repository-factory"], function (require, exports, aurelia_framework_1, aurelia_event_aggregator_1, management_api_client_1, environment_1, token_viewer_repository_factory_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var TokenViewerService = (function () {
        function TokenViewerService(eventAggregator, managementApiClient) {
            var _this = this;
            eventAggregator.subscribe(environment_1.default.events.configPanel.solutionEntryChanged, function (solutionEntry) {
                _this.tokenViewerRepository = token_viewer_repository_factory_1.createTokenViewerRepository(managementApiClient, solutionEntry.processEngineVersion);
            });
        }
        TokenViewerService.prototype.getTokenForFlowNodeInstance = function (processModelId, correlationId, flowNodeId, identity) {
            return __awaiter(this, void 0, void 0, function () {
                var tokenHistory, tokenForFlowNodeInstance, error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            tokenHistory = {};
                            return [4, this.tokenViewerRepository.getTokenForFlowNodeInstance(processModelId, correlationId, flowNodeId, identity)];
                        case 1:
                            tokenForFlowNodeInstance = _a.sent();
                            tokenHistory[tokenForFlowNodeInstance.tokenHistoryEntries[0].flowNodeId] = tokenForFlowNodeInstance;
                            return [2, tokenHistory];
                        case 2:
                            error_1 = _a.sent();
                            return [2, undefined];
                        case 3: return [2];
                    }
                });
            });
        };
        TokenViewerService.prototype.getTokenForFlowNodeByProcessInstanceId = function (processInstanceId, flowNodeId, identity) {
            return __awaiter(this, void 0, void 0, function () {
                var error_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4, this.tokenViewerRepository.getTokenForFlowNodeByProcessInstanceId(processInstanceId, flowNodeId, identity)];
                        case 1: return [2, _a.sent()];
                        case 2:
                            error_2 = _a.sent();
                            return [2, undefined];
                        case 3: return [2];
                    }
                });
            });
        };
        TokenViewerService = __decorate([
            aurelia_framework_1.inject(aurelia_event_aggregator_1.EventAggregator, management_api_client_1.ManagementApiClient),
            __metadata("design:paramtypes", [aurelia_event_aggregator_1.EventAggregator, Object])
        ], TokenViewerService);
        return TokenViewerService;
    }());
    exports.TokenViewerService = TokenViewerService;
});


;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define('modules/inspect/token-viewer/token-viewer',["require", "exports", "aurelia-framework", "../../../services/solution-is-remote-solution-module/solution-is-remote-solution.module"], function (require, exports, aurelia_framework_1, solution_is_remote_solution_module_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var versionRegex = /(\d+)\.(\d+).(\d+)/;
    var TokenViewer = (function () {
        function TokenViewer(tokenViewerService) {
            this.showBeautifiedToken = true;
            this.tokenEntries = [];
            this.showTokenEntries = false;
            this.firstElementSelected = false;
            this.shouldShowFlowNodeId = false;
            this.tokenViewerService = tokenViewerService;
        }
        TokenViewer.prototype.processInstanceIdOrCorrelationIdChanged = function () {
            var noFlowNodeSelected = this.flowNode === undefined;
            if (noFlowNodeSelected) {
                return;
            }
            var flowNodeIsSequenceFlow = this.flowNode.type === 'bpmn:SequenceFlow';
            if (flowNodeIsSequenceFlow) {
                this.clearTokenViewer();
                return;
            }
            this.updateFlowNode();
        };
        TokenViewer.prototype.flowNodeChanged = function (newFlowNode) {
            var flowNodeCannotHaveTokenHistory = newFlowNode.type === 'bpmn:Participant' ||
                newFlowNode.type === 'bpmn:Collaboration' ||
                newFlowNode.type === 'bpmn:Lane' ||
                newFlowNode.type === 'bpmn:LaneSet' ||
                newFlowNode.type === 'bpmn:SequenceFlow';
            if (flowNodeCannotHaveTokenHistory) {
                this.clearTokenViewer();
                return;
            }
            this.updateFlowNode();
        };
        TokenViewer.prototype.updateFlowNode = function () {
            return __awaiter(this, void 0, void 0, function () {
                var noProcessInstanceId, noCorrelationId, noCorrelationId, tokenHistoryGroup;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.firstElementSelected = true;
                            this.tokenEntries = [];
                            if (!solution_is_remote_solution_module_1.solutionIsRemoteSolution(this.activeSolutionEntry.uri)) {
                                this.clearTokenViewer();
                                return [2];
                            }
                            if (this.processEngineSupportsFetchingTokensByProcessInstanceId()) {
                                noProcessInstanceId = this.processInstanceId === undefined;
                                noCorrelationId = this.correlationId === undefined;
                                if (noProcessInstanceId || noCorrelationId) {
                                    this.clearTokenViewer();
                                    return [2];
                                }
                                this.getTokenHistoryGroup = this.tokenViewerService.getTokenForFlowNodeByProcessInstanceId(this.processInstanceId, this.flowNode.id, this.activeSolutionEntry.identity);
                            }
                            else {
                                noCorrelationId = this.correlationId === undefined;
                                if (noCorrelationId) {
                                    this.clearTokenViewer();
                                    return [2];
                                }
                                this.getTokenHistoryGroup = this.tokenViewerService.getTokenForFlowNodeInstance(this.activeDiagram.id, this.correlationId, this.flowNode.id, this.activeSolutionEntry.identity);
                            }
                            return [4, this.getTokenHistoryGroup];
                        case 1:
                            tokenHistoryGroup = _a.sent();
                            this.tokenEntries = this.getBeautifiedTokenEntriesForFlowNode(tokenHistoryGroup);
                            this.rawTokenEntries = this.getRawTokenEntriesForFlowNode(tokenHistoryGroup);
                            this.showTokenEntries = this.tokenEntries.length > 0;
                            this.shouldShowFlowNodeId = this.tokenEntries.length > 0;
                            return [2];
                    }
                });
            });
        };
        TokenViewer.prototype.clearTokenViewer = function () {
            this.shouldShowFlowNodeId = false;
            this.showTokenEntries = false;
            this.tokenEntries = [];
            this.rawTokenEntries = [];
        };
        TokenViewer.prototype.processEngineSupportsFetchingTokensByProcessInstanceId = function () {
            var processEngineVersion = this.activeSolutionEntry.processEngineVersion;
            var noProcessEngineVersionSet = processEngineVersion === undefined;
            if (noProcessEngineVersionSet) {
                return false;
            }
            var regexResult = versionRegex.exec(processEngineVersion);
            var majorVersion = parseInt(regexResult[1]);
            var minorVersion = parseInt(regexResult[2]);
            var processEngineSupportsEvents = majorVersion > 8 || (majorVersion === 8 && minorVersion >= 1);
            return processEngineSupportsEvents;
        };
        TokenViewer.prototype.getRawTokenEntriesForFlowNode = function (tokenHistoryGroup) {
            var tokenEntries = [];
            var elementHasNoToken = tokenHistoryGroup === undefined;
            if (elementHasNoToken) {
                return [];
            }
            Object.entries(tokenHistoryGroup).forEach(function (_a) {
                var flowNodeId = _a[0], tokenHistoryEntries = _a[1];
                tokenHistoryEntries.tokenHistoryEntries.forEach(function (historyEntry, index) {
                    var payloadAsString = JSON.stringify(historyEntry.payload, null, 2);
                    var tokenEntry = {
                        entryNr: index,
                        eventType: historyEntry.tokenEventType,
                        createdAt: historyEntry.createdAt,
                        payload: payloadAsString,
                    };
                    tokenEntries.push(tokenEntry);
                });
            });
            return tokenEntries;
        };
        TokenViewer.prototype.getBeautifiedTokenEntriesForFlowNode = function (tokenHistoryGroup) {
            var _this = this;
            var tokenEntries = [];
            var elementHasNoToken = tokenHistoryGroup === undefined;
            if (elementHasNoToken) {
                return [];
            }
            Object.entries(tokenHistoryGroup).forEach(function (_a) {
                var flowNodeId = _a[0], tokenHistoryEntries = _a[1];
                tokenHistoryEntries.tokenHistoryEntries.forEach(function (historyEntry, index) {
                    var historyEntryPayload = historyEntry.payload;
                    var historyEntryHasNoPayload = historyEntryPayload === undefined;
                    if (historyEntryHasNoPayload) {
                        return;
                    }
                    var tokenEntryPayload = _this.convertHistoryEntryPayloadToTokenEntryPayload(historyEntryPayload);
                    var tokenEntry = {
                        entryNr: index,
                        eventType: historyEntry.tokenEventType,
                        createdAt: historyEntry.createdAt,
                        payload: tokenEntryPayload,
                    };
                    tokenEntries.push(tokenEntry);
                });
            });
            return tokenEntries;
        };
        TokenViewer.prototype.convertHistoryEntryPayloadToTokenEntryPayload = function (tokenEntryPayload) {
            var formattedTokenEntryPayload = [];
            var payloadIsNotAnObjectOrArray = typeof tokenEntryPayload !== 'object' || tokenEntryPayload === null;
            if (payloadIsNotAnObjectOrArray) {
                var payloadEntry = this.getPayloadEntryForNonObject(tokenEntryPayload);
                formattedTokenEntryPayload.push(payloadEntry);
            }
            else {
                var payloadEntries = this.getAllPayloadEntriesForObject(tokenEntryPayload);
                formattedTokenEntryPayload.push.apply(formattedTokenEntryPayload, payloadEntries);
            }
            return formattedTokenEntryPayload;
        };
        TokenViewer.prototype.getAllPayloadEntriesForObject = function (payload) {
            var payloadEntries = [];
            var payloadEntryIndexes = Object.keys(payload);
            for (var _i = 0, payloadEntryIndexes_1 = payloadEntryIndexes; _i < payloadEntryIndexes_1.length; _i++) {
                var payloadIndex = payloadEntryIndexes_1[_i];
                var currentLoad = payload[payloadIndex];
                var payloadEntry = this.getPayloadEntryForObject(currentLoad, payloadIndex);
                payloadEntries.push(payloadEntry);
            }
            return payloadEntries;
        };
        TokenViewer.prototype.getPayloadEntryForObject = function (load, loadName) {
            var payloadEntry = {
                name: loadName,
                values: [],
            };
            var entryIsNotAnObjectOrNull = typeof load !== 'object' || load == null;
            if (entryIsNotAnObjectOrNull) {
                var payloadEntryValues = this.getPayloadEntryValuesForNonObject(load);
                payloadEntry.values = payloadEntryValues;
            }
            else {
                var payloadEntryValues = this.getPayloadEntryValuesForObject(load);
                payloadEntry.values = payloadEntryValues;
            }
            return payloadEntry;
        };
        TokenViewer.prototype.getPayloadEntryValuesForObject = function (payload) {
            var payloadEntryValues = [];
            var payloadIndexes = Object.keys(payload);
            for (var _i = 0, payloadIndexes_1 = payloadIndexes; _i < payloadIndexes_1.length; _i++) {
                var entryIndex = payloadIndexes_1[_i];
                var payloadEntryValue = JSON.stringify(payload[entryIndex], null, 2);
                payloadEntryValues.push({
                    title: entryIndex,
                    value: payloadEntryValue,
                });
            }
            return payloadEntryValues;
        };
        TokenViewer.prototype.getPayloadEntryForNonObject = function (payload) {
            var payloadEntryValues = this.getPayloadEntryValuesForNonObject(payload);
            var payloadEntry = {
                values: payloadEntryValues,
            };
            return payloadEntry;
        };
        TokenViewer.prototype.getPayloadEntryValuesForNonObject = function (payload) {
            var payloadIsStringOrNull = typeof payload === 'string' || payload === null;
            var payloadEntryValue = payloadIsStringOrNull ? "\"" + payload + "\"" : payload.toString();
            var payloadEntryValues = [{ value: payloadEntryValue }];
            return payloadEntryValues;
        };
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", Object)
        ], TokenViewer.prototype, "activeDiagram", void 0);
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", Object)
        ], TokenViewer.prototype, "activeSolutionEntry", void 0);
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", Object)
        ], TokenViewer.prototype, "flowNode", void 0);
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", String)
        ], TokenViewer.prototype, "token", void 0);
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", Boolean)
        ], TokenViewer.prototype, "showBeautifiedToken", void 0);
        __decorate([
            aurelia_framework_1.bindable({ changeHandler: 'processInstanceIdOrCorrelationIdChanged' }),
            __metadata("design:type", String)
        ], TokenViewer.prototype, "processInstanceId", void 0);
        __decorate([
            aurelia_framework_1.bindable({ changeHandler: 'processInstanceIdOrCorrelationIdChanged' }),
            __metadata("design:type", String)
        ], TokenViewer.prototype, "correlationId", void 0);
        TokenViewer = __decorate([
            aurelia_framework_1.inject('TokenViewerService'),
            __metadata("design:paramtypes", [Object])
        ], TokenViewer);
        return TokenViewer;
    }());
    exports.TokenViewer = TokenViewer;
});


;
define('text!modules/inspect/token-viewer/token-viewer.css',[],function(){return ".token-viewer {\n  position: relative;\n  height: 100%;\n  overflow: auto;\n  background: #f7f7f7;\n  border-left: 2px solid #ccc; }\n\n.token-viewer__headline {\n  padding-top: 10px;\n  padding-left: 10px;\n  border-bottom: 1px solid #ccc;\n  font-size: 14px; }\n\n.headline__node-id {\n  font-size: 14px;\n  font-weight: normal; }\n\n.token-viewer__empty-message {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 100%;\n  transform: translate(-50%, -50%);\n  user-select: none;\n  font-size: 20px;\n  font-weight: 900;\n  text-align: center; }\n\n.token-entry-container {\n  margin: 20px 5px; }\n\n.token-entry {\n  font-size: 14px;\n  font-weight: bold; }\n\n.payload__title {\n  margin-top: 5px;\n  text-decoration: underline; }\n\n.payload__name {\n  padding: 0;\n  background: none;\n  border: none; }\n\n.switch-container {\n  width: 100%;\n  padding: 10px;\n  margin-bottom: -20px;\n  user-select: none; }\n\n.token-viewer-switch {\n  position: relative;\n  display: inline-block;\n  width: 30px;\n  height: 17px;\n  margin-bottom: 0;\n  vertical-align: text-bottom; }\n\n/*\n * Hide default HTML checkbox\n */\n.token-viewer-switch input {\n  display: none; }\n\n.token-viewer-switch--slider {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background-color: #ccc;\n  border-radius: 17px;\n  transition: .2s;\n  -webkit-transition: .2s; }\n\n.token-viewer-switch--slider:before {\n  position: absolute;\n  bottom: 2px;\n  left: 2px;\n  height: 13px;\n  width: 13px;\n  background-color: white;\n  border-radius: 50%;\n  content: \"\";\n  transition: .2s;\n  -webkit-transition: .2s; }\n\ninput:checked + .token-viewer-switch--slider {\n  background-color: #565656; }\n\ninput:checked + .token-viewer-switch--slider:before {\n  transform: translateX(13px);\n  -webkit-transform: translateX(13px);\n  -ms-transform: translateX(13px); }\n";});;
define('text!modules/inspect/token-viewer/token-viewer.html',[],function(){return "<template>\n  <require from=\"./token-viewer.css\"></require>\n  <div class=\"token-viewer\">\n    <div show.bind=\"shouldShowFlowNodeId\" class=\"token-viewer__headline\">\n      <span>Token</span>\n      <span class=\"headline__node-id\">${flowNode.id}</span>\n    </div>\n    <div class=\"switch-container\" if.bind=\"showTokenEntries\">\n      <label class=\"token-viewer-switch\">\n        <input type=\"checkbox\" checked.bind=\"showBeautifiedToken\">\n        <span class=\"token-viewer-switch--slider\"></span>\n      </label>\n      Beautified\n    </div>\n    <span if.bind=\"!showTokenEntries && flowNode !== undefined\" class=\"token-viewer__empty-message\">There is no token for this element.</span>\n    <span if.bind=\"flowNode === undefined && !showTokenEntries\" class=\"token-viewer__empty-message\">Select an element to view token.</span>\n    <div repeat.for=\"entry of tokenEntries\" if.bind=\"showBeautifiedToken\">\n      <div class=\"token-entry-container\">\n        <div class=\"token-entry__event-type\">\n          Event Type: <span class=\"token-entry\">${entry.eventType}</span>\n        </div>\n        <div repeat.for=\"load of entry.payload\" class=\"token-entry__payload\">\n          <div if.bind=\"load.name !== undefined\">\n            <div class=\"payload__title\">\n              ${load.name}\n            </div>\n            <template repeat.for=\"value of load.values\">\n              <pre if.bind=\"value.title !== undefined\" class=\"payload__name\">- ${value.title}: ${value.value}</pre>\n              <pre else class=\"payload__name\">- ${value.value}</pre>\n            </template>\n          </div>\n          <div else class=\"payload__name\">- ${load.values[0].value}</div>\n        </div>\n        </span>\n      </div>\n    </div>\n    <div repeat.for=\"entry of rawTokenEntries\" if.bind=\"!showBeautifiedToken\">\n      <div class=\"token-entry-container\">\n        <div class=\"token-entry__event-type\">\n          Event Type: <span class=\"token-entry\">${entry.eventType}</span>\n        </div>\n        <pre class=\"token-entry__payload\">${entry.payload}</pre>\n      </div>\n    </div>\n  </div>\n</template>\n";});;
define('modules/live-execution-tracker/contracts/ILiveExecutionTrackerRepository',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('modules/live-execution-tracker/contracts/ILiveExecutionTrackerService',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});


;
define('modules/live-execution-tracker/contracts/constants',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var RequestError;
    (function (RequestError) {
        RequestError["ConnectionLost"] = "connectionLost";
        RequestError["OtherError"] = "otherError";
    })(RequestError = exports.RequestError || (exports.RequestError = {}));
});


;
define('modules/live-execution-tracker/contracts/index',["require", "exports", "./constants"], function (require, exports, constants_1) {
    "use strict";
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(constants_1);
});


;
define('modules/live-execution-tracker/index',["require", "exports", "aurelia-event-aggregator", "./services/live-execution-tracker.service"], function (require, exports, aurelia_event_aggregator_1, live_execution_tracker_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function configure(config) {
        var eventAggregator = config.container.get(aurelia_event_aggregator_1.EventAggregator);
        var managementApiClient = config.container.get('ManagementApiClientService');
        var liveExecutionTrackerService = new live_execution_tracker_service_1.LiveExecutionTrackerService(eventAggregator, managementApiClient);
        config.container.registerInstance('LiveExecutionTrackerService', liveExecutionTrackerService);
    }
    exports.configure = configure;
});


;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/live-execution-tracker/live-execution-tracker',["require", "exports", "aurelia-framework", "aurelia-router", "aurelia-event-aggregator", "@process-engine/bpmn-js-custom-bundle", "../../contracts/index", "../../environment", "../../services/notification-service/notification.service", "./contracts/index"], function (require, exports, aurelia_framework_1, aurelia_router_1, aurelia_event_aggregator_1, bundle, index_1, environment_1, notification_service_1, index_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    bundle = __importStar(bundle);
    environment_1 = __importDefault(environment_1);
    var OVERLAY_WIDTH = 40;
    var OVERLAY_HEIGHT = 30;
    var versionRegex = /(\d+)\.(\d+).(\d+)/;
    var LiveExecutionTracker = (function () {
        function LiveExecutionTracker(router, notificationService, solutionService, liveExecutionTrackerService, eventAggregator) {
            var _this = this;
            this.showDynamicUiModal = false;
            this.showDiagramPreviewViewer = false;
            this.liveExecutionTracker = this;
            this.modalStyleString = 'position: relative; top: 20%; bottom: 20%; width: 400px; height: 60%;';
            this.contentStyleString = 'height: auto;';
            this.tokenViewerWidth = 250;
            this.showTokenViewer = false;
            this.processStopped = true;
            this.isAttached = false;
            this.isColorizing = false;
            this.colorizeAgain = false;
            this.eventListenerSubscriptions = [];
            this.overlaysWithEventListeners = [];
            this.handleErrorElementClick = function (event) {
                var overlayHtmlId = event.target.id;
                var elementId = _this.getElementIdByOverlayHtmlId(overlayHtmlId);
                _this.router.navigateToRoute('inspect', {
                    view: 'inspect-process-instance',
                    diagramName: _this.activeDiagram.name,
                    solutionUri: _this.activeSolutionEntry.uri,
                    processInstanceToSelect: _this.processInstanceId,
                    flowNodeToSelect: elementId,
                    inspectPanelTabToShow: index_1.InspectPanelTab.LogViewer,
                });
            };
            this.handleTaskClick = function (event) {
                var overlayHtmlId = event.target.id;
                var elementId = _this.getElementIdByOverlayHtmlId(overlayHtmlId);
                _this.taskId = elementId;
                _this.showDynamicUiModal = true;
            };
            this.handleEmptyActivityClick = function (event) { return __awaiter(_this, void 0, void 0, function () {
                var overlayHtmlId, elementId, emptyActivitiesInProcessInstance, emptyActivity;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            overlayHtmlId = event.target.id;
                            elementId = this.getElementIdByOverlayHtmlId(overlayHtmlId);
                            this.taskId = elementId;
                            return [4, this.liveExecutionTrackerService.getEmptyActivitiesForProcessInstance(this.activeSolutionEntry.identity, this.processInstanceId)];
                        case 1:
                            emptyActivitiesInProcessInstance = _a.sent();
                            emptyActivity = emptyActivitiesInProcessInstance.emptyActivities.find(function (activity) {
                                return activity.id === _this.taskId;
                            });
                            this.liveExecutionTrackerService.finishEmptyActivity(this.activeSolutionEntry.identity, this.processInstanceId, this.correlationId, emptyActivity);
                            return [2];
                    }
                });
            }); };
            this.handleActiveCallActivityClick = function (event) { return __awaiter(_this, void 0, void 0, function () {
                var overlayHtmlId, elementId, element, callActivityTargetProcess, callAcitivityHasNoTargetProcess, noTargetMessage, targetProcessInstanceId, errorGettingTargetProcessInstanceId, errorMessage;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            overlayHtmlId = event.target.id;
                            elementId = this.getElementIdByOverlayHtmlId(overlayHtmlId);
                            element = this.elementRegistry.get(elementId);
                            callActivityTargetProcess = element.businessObject.calledElement;
                            callAcitivityHasNoTargetProcess = callActivityTargetProcess === undefined;
                            if (callAcitivityHasNoTargetProcess) {
                                noTargetMessage = 'The CallActivity has no target configured. Please configure a target in the designer.';
                                this.notificationService.showNotification(index_1.NotificationType.INFO, noTargetMessage);
                            }
                            return [4, this.liveExecutionTrackerService.getProcessInstanceIdOfCallActivityTarget(this.activeSolutionEntry.identity, this.correlationId, this.processInstanceId, callActivityTargetProcess)];
                        case 1:
                            targetProcessInstanceId = _a.sent();
                            errorGettingTargetProcessInstanceId = targetProcessInstanceId === undefined;
                            if (errorGettingTargetProcessInstanceId) {
                                errorMessage = 'Target process of call activity not found.';
                                this.notificationService.showNotification(index_1.NotificationType.ERROR, errorMessage);
                                return [2];
                            }
                            this.router.navigateToRoute('live-execution-tracker', {
                                diagramName: callActivityTargetProcess,
                                solutionUri: this.activeSolutionEntry.uri,
                                correlationId: this.correlationId,
                                processInstanceId: targetProcessInstanceId,
                            });
                            return [2];
                    }
                });
            }); };
            this.handleInactiveCallActivityClick = function (event) { return __awaiter(_this, void 0, void 0, function () {
                var overlayHtmlId, elementId, element, callActivityTargetProcess, callActivityHasNoTargetProcess, noTargetMessage, xml;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            overlayHtmlId = event.target.id;
                            elementId = this.getElementIdByOverlayHtmlId(overlayHtmlId);
                            element = this.elementRegistry.get(elementId);
                            callActivityTargetProcess = element.businessObject.calledElement;
                            callActivityHasNoTargetProcess = callActivityTargetProcess === undefined;
                            if (callActivityHasNoTargetProcess) {
                                noTargetMessage = 'The CallActivity has no target configured. Please configure a target in the designer.';
                                this.notificationService.showNotification(index_1.NotificationType.INFO, noTargetMessage);
                            }
                            return [4, this.getXmlByProcessModelId(callActivityTargetProcess)];
                        case 1:
                            xml = _a.sent();
                            return [4, this.importXmlIntoDiagramPreviewViewer(xml)];
                        case 2:
                            _a.sent();
                            this.nameOfDiagramToPreview = callActivityTargetProcess;
                            this.showDiagramPreviewViewer = true;
                            setTimeout(function () {
                                _this.diagramPreviewViewer.attachTo(_this.previewCanvasModel);
                            }, 0);
                            return [2];
                    }
                });
            }); };
            this.elementClickHandler = function (event) { return __awaiter(_this, void 0, void 0, function () {
                var clickedElement, clickedElementIsNotAUserOrManualTask;
                return __generator(this, function (_a) {
                    clickedElement = event.element;
                    this.selectedFlowNode = event.element;
                    clickedElementIsNotAUserOrManualTask = clickedElement.type !== 'bpmn:UserTask' && clickedElement.type !== 'bpmn:ManualTask';
                    if (clickedElementIsNotAUserOrManualTask) {
                        return [2];
                    }
                    this.taskId = clickedElement.id;
                    return [2];
                });
            }); };
            this.router = router;
            this.notificationService = notificationService;
            this.solutionService = solutionService;
            this.liveExecutionTrackerService = liveExecutionTrackerService;
            this.eventAggregator = eventAggregator;
        }
        LiveExecutionTracker.prototype.activate = function (routeParameters) {
            return __awaiter(this, void 0, void 0, function () {
                var _a, _b, _c, _d;
                var _this = this;
                return __generator(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            this.correlationId = routeParameters.correlationId;
                            this.processModelId = routeParameters.diagramName;
                            _a = this;
                            return [4, this.solutionService.getSolutionEntryForUri(routeParameters.solutionUri)];
                        case 1:
                            _a.activeSolutionEntry = _e.sent();
                            this.activeSolutionEntry.service.openSolution(routeParameters.solutionUri, this.activeSolutionEntry.identity);
                            this.eventAggregator.publish(environment_1.default.events.configPanel.solutionEntryChanged, this.activeSolutionEntry);
                            this.processInstanceId = routeParameters.processInstanceId;
                            _b = this;
                            return [4, this.getParentProcessInstanceId()];
                        case 2:
                            _b.parentProcessInstanceId = _e.sent();
                            _c = this;
                            return [4, this.getParentProcessModelId()];
                        case 3:
                            _c.parentProcessModelId = _e.sent();
                            _d = this;
                            return [4, this.liveExecutionTrackerService.getCorrelationById(this.activeSolutionEntry.identity, this.correlationId)];
                        case 4:
                            _d.correlation = _e.sent();
                            setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
                                var _a, routeParameterContainsTaskId, emptyActivitiesInProcessInstance, emptyActivity;
                                var _this = this;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            _a = this;
                                            return [4, this.activeSolutionEntry.service.loadDiagram(this.processModelId)];
                                        case 1:
                                            _a.activeDiagram = _b.sent();
                                            routeParameterContainsTaskId = routeParameters.taskId !== undefined;
                                            if (!routeParameterContainsTaskId) return [3, 3];
                                            this.taskId = routeParameters.taskId;
                                            return [4, this.liveExecutionTrackerService.getEmptyActivitiesForProcessInstance(this.activeSolutionEntry.identity, this.processInstanceId)];
                                        case 2:
                                            emptyActivitiesInProcessInstance = _b.sent();
                                            emptyActivity = emptyActivitiesInProcessInstance.emptyActivities.find(function (activity) {
                                                return activity.id === _this.taskId;
                                            });
                                            if (emptyActivity) {
                                                this.liveExecutionTrackerService.finishEmptyActivity(this.activeSolutionEntry.identity, this.processInstanceId, this.correlationId, emptyActivity);
                                            }
                                            else {
                                                this.showDynamicUiModal = true;
                                            }
                                            _b.label = 3;
                                        case 3: return [2];
                                    }
                                });
                            }); }, 0);
                            return [2];
                    }
                });
            });
        };
        LiveExecutionTracker.prototype.attached = function () {
            return __awaiter(this, void 0, void 0, function () {
                var fitViewportForDiagramViewerOnce, xml, couldNotGetXml, uncoloredXml, processEngineSupportsEvents, _a, processsEngineDoesNotSupportEvents, previousTokenViewerState, processInstanceIsActive, error_1;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.isAttached = true;
                            this.diagramViewer = new bundle.viewer({
                                additionalModules: [bundle.ZoomScrollModule, bundle.MoveCanvasModule, bundle.MiniMap],
                            });
                            this.elementRegistry = this.diagramViewer.get('elementRegistry');
                            this.diagramPreviewViewer = new bundle.viewer({
                                additionalModules: [bundle.ZoomScrollModule, bundle.MoveCanvasModule, bundle.MiniMap],
                            });
                            this.viewerCanvas = this.diagramViewer.get('canvas');
                            this.overlays = this.diagramViewer.get('overlays');
                            fitViewportForDiagramViewerOnce = function () {
                                _this.diagramViewer.off('import.done', fitViewportForDiagramViewerOnce);
                                _this.viewerCanvas.zoom('fit-viewport', 'auto');
                            };
                            this.diagramViewer.on('import.done', fitViewportForDiagramViewerOnce);
                            this.diagramViewer.attachTo(this.canvasModel);
                            this.diagramViewer.on('element.click', this.elementClickHandler);
                            return [4, this.getXml()];
                        case 1:
                            xml = _b.sent();
                            couldNotGetXml = xml === undefined;
                            if (couldNotGetXml) {
                                return [2];
                            }
                            return [4, this.liveExecutionTrackerService.clearDiagramColors(xml)];
                        case 2:
                            uncoloredXml = _b.sent();
                            this.xml = uncoloredXml;
                            return [4, this.importXmlIntoDiagramViewer(uncoloredXml)];
                        case 3:
                            _b.sent();
                            processEngineSupportsEvents = this.checkIfProcessEngineSupportsEvents();
                            if (!processEngineSupportsEvents) return [3, 5];
                            _a = this;
                            return [4, this.createBackendEventListeners()];
                        case 4:
                            _a.eventListenerSubscriptions = _b.sent();
                            _b.label = 5;
                        case 5: return [4, this.handleElementColorization()];
                        case 6:
                            _b.sent();
                            processsEngineDoesNotSupportEvents = !processEngineSupportsEvents;
                            if (processsEngineDoesNotSupportEvents) {
                                this.startPolling();
                            }
                            this.tokenViewerResizeDiv.addEventListener('mousedown', function (mouseDownEvent) {
                                var windowEvent = mouseDownEvent || window.event;
                                windowEvent.cancelBubble = true;
                                var mousemoveFunction = function (mouseMoveEvent) {
                                    _this.resizeTokenViewer(mouseMoveEvent);
                                    document.getSelection().empty();
                                };
                                var mouseUpFunction = function () {
                                    document.removeEventListener('mousemove', mousemoveFunction);
                                    document.removeEventListener('mouseup', mouseUpFunction);
                                };
                                document.addEventListener('mousemove', mousemoveFunction);
                                document.addEventListener('mouseup', mouseUpFunction);
                            });
                            previousTokenViewerState = JSON.parse(window.localStorage.getItem('tokenViewerLETCollapseState'));
                            this.showTokenViewer = previousTokenViewerState || false;
                            _b.label = 7;
                        case 7:
                            _b.trys.push([7, 9, , 10]);
                            return [4, this.liveExecutionTrackerService.isProcessInstanceActive(this.activeSolutionEntry.identity, this.processInstanceId)];
                        case 8:
                            processInstanceIsActive = _b.sent();
                            this.processStopped = !processInstanceIsActive;
                            return [3, 10];
                        case 9:
                            error_1 = _b.sent();
                            this.processStopped = true;
                            return [3, 10];
                        case 10: return [2];
                    }
                });
            });
        };
        LiveExecutionTracker.prototype.detached = function () {
            return __awaiter(this, void 0, void 0, function () {
                var removeSubscriptionPromises;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.isAttached = false;
                            this.stopPolling();
                            this.diagramViewer.clear();
                            this.diagramViewer.detach();
                            this.diagramViewer.destroy();
                            this.diagramPreviewViewer.destroy();
                            removeSubscriptionPromises = [];
                            this.eventListenerSubscriptions.forEach(function (subscription) {
                                var removingPromise = _this.liveExecutionTrackerService.removeSubscription(_this.activeSolutionEntry.identity, subscription);
                                removeSubscriptionPromises.push(removingPromise);
                            });
                            return [4, Promise.all(removeSubscriptionPromises)];
                        case 1:
                            _a.sent();
                            this.eventListenerSubscriptions = [];
                            return [2];
                    }
                });
            });
        };
        LiveExecutionTracker.prototype.determineActivationStrategy = function () {
            return 'replace';
        };
        Object.defineProperty(LiveExecutionTracker.prototype, "processIsActive", {
            get: function () {
                return !this.processStopped;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LiveExecutionTracker.prototype, "hasPreviousProcess", {
            get: function () {
                return this.parentProcessModelId !== undefined;
            },
            enumerable: true,
            configurable: true
        });
        LiveExecutionTracker.prototype.navigateBackToPreviousProcess = function () {
            this.router.navigateToRoute('live-execution-tracker', {
                correlationId: this.correlationId,
                diagramName: this.parentProcessModelId,
                solutionUri: this.activeSolutionEntry.uri,
                processInstanceId: this.parentProcessInstanceId,
            });
        };
        LiveExecutionTracker.prototype.closeDynamicUiModal = function () {
            this.showDynamicUiModal = false;
            this.dynamicUi.clearTasks();
        };
        LiveExecutionTracker.prototype.closeDiagramPreview = function () {
            this.showDiagramPreviewViewer = false;
            this.diagramPreviewViewer.clear();
            this.diagramPreviewViewer.detach();
        };
        LiveExecutionTracker.prototype.toggleShowTokenViewer = function () {
            this.showTokenViewer = !this.showTokenViewer;
            window.localStorage.setItem('tokenViewerLETCollapseState', JSON.stringify(this.showTokenViewer));
        };
        LiveExecutionTracker.prototype.stopProcessInstance = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.liveExecutionTrackerService.terminateProcess(this.activeSolutionEntry.identity, this.processInstanceId);
                    this.startPolling();
                    return [2];
                });
            });
        };
        LiveExecutionTracker.prototype.checkIfProcessEngineSupportsEvents = function () {
            var processEngineVersion = this.activeSolutionEntry.processEngineVersion;
            var noProcessEngineVersionSet = processEngineVersion === undefined;
            if (noProcessEngineVersionSet) {
                return false;
            }
            var regexResult = versionRegex.exec(processEngineVersion);
            var majorVersion = parseInt(regexResult[1]);
            var minorVersion = parseInt(regexResult[2]);
            var processEngineSupportsEvents = majorVersion > 8 || (majorVersion === 8 && minorVersion >= 3);
            return processEngineSupportsEvents;
        };
        LiveExecutionTracker.prototype.checkIfProcessEngineSupportsGettingFlowNodeInstances = function () {
            var processEngineVersion = this.activeSolutionEntry.processEngineVersion;
            var noProcessEngineVersionSet = processEngineVersion === undefined;
            if (noProcessEngineVersionSet) {
                return false;
            }
            var regexResult = versionRegex.exec(processEngineVersion);
            var majorVersion = parseInt(regexResult[1]);
            var minorVersion = parseInt(regexResult[2]);
            var processEngineSupportsEvents = majorVersion > 8 || (majorVersion === 8 && minorVersion >= 3);
            return processEngineSupportsEvents;
        };
        LiveExecutionTracker.prototype.getParentProcessModelId = function () {
            return __awaiter(this, void 0, void 0, function () {
                var parentProcessInstanceIdNotFound, parentProcessModel, parentProcessModelNotFound;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            parentProcessInstanceIdNotFound = this.parentProcessInstanceId === undefined;
                            if (parentProcessInstanceIdNotFound) {
                                return [2, undefined];
                            }
                            return [4, this.liveExecutionTrackerService.getProcessModelByProcessInstanceId(this.activeSolutionEntry.identity, this.correlationId, this.parentProcessInstanceId)];
                        case 1:
                            parentProcessModel = _a.sent();
                            parentProcessModelNotFound = parentProcessModel === undefined;
                            if (parentProcessModelNotFound) {
                                return [2, undefined];
                            }
                            return [2, parentProcessModel.processModelId];
                    }
                });
            });
        };
        LiveExecutionTracker.prototype.addOverlays = function () {
            return __awaiter(this, void 0, void 0, function () {
                var elementsWithError, elementsWithActiveToken, inactiveCallActivities, userAndManualTaskWithOverlays, emptyActivityWithOverlays, activeCallActivityWithOverlays, inactiveCallActivityWithOverlays, errorElementWithOverlays, elementsWithfakeOverlays, elementsWithOverlays;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.liveExecutionTrackerService.getElementsWithError(this.activeSolutionEntry.identity, this.processInstanceId, this.elementRegistry)];
                        case 1:
                            elementsWithError = _a.sent();
                            return [4, this.liveExecutionTrackerService.getElementsWithActiveToken(this.activeSolutionEntry.identity, this.processInstanceId, this.elementRegistry)];
                        case 2:
                            elementsWithActiveToken = _a.sent();
                            return [4, this.liveExecutionTrackerService.getInactiveCallActivities(this.activeSolutionEntry.identity, this.processInstanceId, this.elementRegistry)];
                        case 3:
                            inactiveCallActivities = _a.sent();
                            this.removeEventListenerFromOverlays();
                            this.overlays.clear();
                            userAndManualTaskWithOverlays = this.addOverlaysToUserAndManualTasks(elementsWithActiveToken);
                            emptyActivityWithOverlays = this.addOverlaysToEmptyActivities(elementsWithActiveToken);
                            activeCallActivityWithOverlays = this.addOverlaysToActiveCallActivities(elementsWithActiveToken);
                            inactiveCallActivityWithOverlays = this.addOverlaysToInactiveCallActivities(inactiveCallActivities);
                            errorElementWithOverlays = this.addOverlaysToElementsWithError(elementsWithError);
                            elementsWithfakeOverlays = this.addOverlaysToUserAndManualTasks(elementsWithError);
                            elementsWithOverlays = __spreadArrays(userAndManualTaskWithOverlays, emptyActivityWithOverlays, activeCallActivityWithOverlays, inactiveCallActivityWithOverlays, errorElementWithOverlays, elementsWithfakeOverlays);
                            this.rearrangeOverlaysForElementWithMultipleOverlays(elementsWithOverlays);
                            return [2];
                    }
                });
            });
        };
        LiveExecutionTracker.prototype.removeEventListenerFromOverlays = function () {
            for (var _i = 0, _a = this.overlaysWithEventListeners; _i < _a.length; _i++) {
                var overlayId = _a[_i];
                this.removeEventListenerFromOverlay(overlayId);
            }
            this.overlaysWithEventListeners = [];
        };
        LiveExecutionTracker.prototype.addEventListenerToOverlay = function (overlayHtmlId) {
            var functionToAdd = this.getEventListenerForOverlayId(overlayHtmlId);
            document.getElementById(overlayHtmlId).addEventListener('click', functionToAdd);
            this.overlaysWithEventListeners.push(overlayHtmlId);
        };
        LiveExecutionTracker.prototype.removeEventListenerFromOverlay = function (overlayHtmlId) {
            var functionToRemove = this.getEventListenerForOverlayId(overlayHtmlId);
            var elementWithEventListener = document.getElementById(overlayHtmlId);
            var elementIsAlreadyRemoved = elementWithEventListener === null;
            if (elementIsAlreadyRemoved) {
                this.overlaysWithEventListeners.splice(this.overlaysWithEventListeners.indexOf(overlayHtmlId), 1);
                return;
            }
            elementWithEventListener.removeEventListener('click', functionToRemove);
            this.overlaysWithEventListeners.splice(this.overlaysWithEventListeners.indexOf(overlayHtmlId), 1);
        };
        LiveExecutionTracker.prototype.getEventListenerForOverlayId = function (overlayHtmlId) {
            if (overlayHtmlId.endsWith('manual-user-task')) {
                return this.handleTaskClick;
            }
            if (overlayHtmlId.endsWith('empty-activity')) {
                return this.handleEmptyActivityClick;
            }
            if (overlayHtmlId.endsWith('inactive-call-activity')) {
                return this.handleInactiveCallActivityClick;
            }
            if (overlayHtmlId.endsWith('active-call-activity')) {
                return this.handleActiveCallActivityClick;
            }
            if (overlayHtmlId.endsWith('error-element')) {
                return this.handleErrorElementClick;
            }
            return undefined;
        };
        LiveExecutionTracker.prototype.addOverlaysToElementsWithError = function (elementsWithError) {
            var liveExecutionTrackerIsNotAttached = !this.isAttached;
            if (liveExecutionTrackerIsNotAttached) {
                return [];
            }
            for (var _i = 0, elementsWithError_1 = elementsWithError; _i < elementsWithError_1.length; _i++) {
                var element = elementsWithError_1[_i];
                var overlayHtmlId = element.id + "#error-element";
                this.overlays.add(element, {
                    position: {
                        left: this.getOverlayLeftPositionForElement(element.width),
                        top: this.getOverlayTopPositionForElement(element.height),
                    },
                    html: "<div class=\"let__overlay-button\" id=\"" + overlayHtmlId + "\" style=\"width: " + OVERLAY_WIDTH + "px; height: " + OVERLAY_HEIGHT + "px;\" title=\"Open process instance in Inspect Process Instance.\"><i class=\"fas fa-bug let__overlay-button-icon overlay__error-element\"></i></div>",
                });
                this.addEventListenerToOverlay(overlayHtmlId);
            }
            return elementsWithError;
        };
        LiveExecutionTracker.prototype.rearrangeOverlaysForElementWithMultipleOverlays = function (elementsWithOverlays) {
            var _this = this;
            var _loop_1 = function (element) {
                var elementOverlays = this_1.getOverlaysForElement(element.id);
                var elementHasMultipleOverlays = elementOverlays.length > 1;
                if (!elementHasMultipleOverlays) {
                    return "continue";
                }
                var neededOverlayWidth = OVERLAY_WIDTH * elementOverlays.length;
                var leftSpacing = (element.width - neededOverlayWidth) / 2;
                elementOverlays.forEach(function (overlay, index) {
                    var overlayHtmlId = /id="(.*?)"/g.exec(overlay.html)[1];
                    _this.removeEventListenerFromOverlay(overlayHtmlId);
                    _this.overlays.remove(overlay.id);
                    overlay.position.left = leftSpacing + OVERLAY_WIDTH * index;
                    _this.overlays.add(element, overlay);
                    _this.addEventListenerToOverlay(overlayHtmlId);
                });
            };
            var this_1 = this;
            for (var _i = 0, elementsWithOverlays_1 = elementsWithOverlays; _i < elementsWithOverlays_1.length; _i++) {
                var element = elementsWithOverlays_1[_i];
                _loop_1(element);
            }
        };
        LiveExecutionTracker.prototype.getOverlayLeftPositionForElement = function (elementWidth) {
            var elementCenterX = elementWidth / 2;
            var elementLeftPosition = elementCenterX - OVERLAY_WIDTH / 2;
            return elementLeftPosition;
        };
        LiveExecutionTracker.prototype.getOverlayTopPositionForElement = function (elementHeight) {
            var elementCenterY = elementHeight / 2;
            var elementTopPosition = elementCenterY - OVERLAY_HEIGHT / 2;
            return elementTopPosition;
        };
        LiveExecutionTracker.prototype.getOverlaysForElement = function (elementId) {
            var overlaysForElement = [];
            var overlays = this.overlays._overlays;
            var overlayIds = Object.keys(overlays);
            for (var _i = 0, overlayIds_1 = overlayIds; _i < overlayIds_1.length; _i++) {
                var overlayId = overlayIds_1[_i];
                var currentOverlay = overlays[overlayId];
                var isOverlayOfElement = currentOverlay.element.id === elementId;
                if (isOverlayOfElement) {
                    overlaysForElement.push(currentOverlay);
                }
            }
            return overlaysForElement;
        };
        LiveExecutionTracker.prototype.addOverlaysToEmptyActivities = function (elements) {
            var liveExecutionTrackerIsNotAttached = !this.isAttached;
            if (liveExecutionTrackerIsNotAttached) {
                return [];
            }
            var activeEmptyActivities = elements.filter(function (element) {
                var elementIsEmptyActivity = element.type === 'bpmn:Task';
                return elementIsEmptyActivity;
            });
            for (var _i = 0, activeEmptyActivities_1 = activeEmptyActivities; _i < activeEmptyActivities_1.length; _i++) {
                var element = activeEmptyActivities_1[_i];
                var overlayHtmlId = element.id + "#empty-activity";
                this.overlays.add(element, {
                    position: {
                        left: this.getOverlayLeftPositionForElement(element.width),
                        top: this.getOverlayTopPositionForElement(element.height),
                    },
                    html: "<div class=\"let__overlay-button\" id=\"" + overlayHtmlId + "\" style=\"width: " + OVERLAY_WIDTH + "px; height: " + OVERLAY_HEIGHT + "px;\" title=\"Continue empty activity.\"><i class=\"fas fa-play let__overlay-button-icon overlay__empty-task\"></i></div>",
                });
                this.addEventListenerToOverlay(overlayHtmlId);
            }
            return activeEmptyActivities;
        };
        LiveExecutionTracker.prototype.addOverlaysToUserAndManualTasks = function (elements) {
            var liveExecutionTrackerIsNotAttached = !this.isAttached;
            if (liveExecutionTrackerIsNotAttached) {
                return [];
            }
            var activeManualAndUserTasks = elements.filter(function (element) {
                var elementIsAUserOrManualTask = element.type === 'bpmn:UserTask' || element.type === 'bpmn:ManualTask';
                return elementIsAUserOrManualTask;
            });
            for (var _i = 0, activeManualAndUserTasks_1 = activeManualAndUserTasks; _i < activeManualAndUserTasks_1.length; _i++) {
                var element = activeManualAndUserTasks_1[_i];
                var overlayHtmlId = element.id + "#manual-user-task";
                this.overlays.add(element, {
                    position: {
                        left: this.getOverlayLeftPositionForElement(element.width),
                        top: this.getOverlayTopPositionForElement(element.height),
                    },
                    html: "<div class=\"let__overlay-button\" id=\"" + overlayHtmlId + "\" style=\"width: " + OVERLAY_WIDTH + "px; height: " + OVERLAY_HEIGHT + "px;\" title=\"Continue task.\"><i class=\"fas fa-play let__overlay-button-icon\"></i></div>",
                });
                this.addEventListenerToOverlay(overlayHtmlId);
            }
            return activeManualAndUserTasks;
        };
        LiveExecutionTracker.prototype.addOverlaysToInactiveCallActivities = function (inactiveCallActivities) {
            var liveExecutionTrackerIsNotAttached = !this.isAttached;
            if (liveExecutionTrackerIsNotAttached) {
                return [];
            }
            for (var _i = 0, inactiveCallActivities_1 = inactiveCallActivities; _i < inactiveCallActivities_1.length; _i++) {
                var element = inactiveCallActivities_1[_i];
                var overlayHtmlId = element.id + "#inactive-call-activity";
                this.overlays.add(element, {
                    position: {
                        left: this.getOverlayLeftPositionForElement(element.width),
                        top: this.getOverlayTopPositionForElement(element.height),
                    },
                    html: "<div class=\"let__overlay-button\" id=\"" + overlayHtmlId + "\" style=\"width: " + OVERLAY_WIDTH + "px; height: " + OVERLAY_HEIGHT + "px;\" title=\"Show target process.\"><i class=\"fas fa-search let__overlay-button-icon\"></i></div>",
                });
                this.addEventListenerToOverlay(overlayHtmlId);
            }
            return inactiveCallActivities;
        };
        LiveExecutionTracker.prototype.addOverlaysToActiveCallActivities = function (activeElements) {
            var liveExecutionTrackerIsNotAttached = !this.isAttached;
            if (liveExecutionTrackerIsNotAttached) {
                return [];
            }
            var activeCallActivities = activeElements.filter(function (element) {
                var elementIsCallActivity = element.type === 'bpmn:CallActivity';
                return elementIsCallActivity;
            });
            for (var _i = 0, activeCallActivities_1 = activeCallActivities; _i < activeCallActivities_1.length; _i++) {
                var element = activeCallActivities_1[_i];
                var overlayHtmlId = element.id + "#active-call-activity";
                this.overlays.add(element, {
                    position: {
                        left: this.getOverlayLeftPositionForElement(element.width),
                        top: this.getOverlayTopPositionForElement(element.height),
                    },
                    html: "<div class=\"let__overlay-button\" id=\"" + overlayHtmlId + "\" style=\"width: " + OVERLAY_WIDTH + "px; height: " + OVERLAY_HEIGHT + "px;\" title=\"Show target process.\"><i class=\"fas fa-external-link-square-alt let__overlay-button-icon\"></i></div>",
                });
                this.addEventListenerToOverlay(overlayHtmlId);
            }
            return activeCallActivities;
        };
        LiveExecutionTracker.prototype.getXmlByProcessModelId = function (processModelId) {
            return __awaiter(this, void 0, void 0, function () {
                var processModel;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.liveExecutionTrackerService.getProcessModelById(this.activeSolutionEntry.identity, processModelId)];
                        case 1:
                            processModel = _a.sent();
                            return [2, processModel.xml];
                    }
                });
            });
        };
        LiveExecutionTracker.prototype.getXml = function () {
            return __awaiter(this, void 0, void 0, function () {
                var correlation, errorGettingCorrelation, processModelFromCorrelation, xmlFromProcessModel;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.liveExecutionTrackerService.getCorrelationById(this.activeSolutionEntry.identity, this.correlationId)];
                        case 1:
                            correlation = _a.sent();
                            errorGettingCorrelation = correlation === undefined;
                            if (errorGettingCorrelation) {
                                this.notificationService.showNotification(index_1.NotificationType.ERROR, 'Could not get correlation. Please try to start the process again.');
                                return [2, undefined];
                            }
                            processModelFromCorrelation = correlation.processInstances.find(function (processModel) {
                                var processModelIsSearchedProcessModel = processModel.processInstanceId === _this.processInstanceId;
                                return processModelIsSearchedProcessModel;
                            });
                            xmlFromProcessModel = processModelFromCorrelation.xml;
                            return [2, xmlFromProcessModel];
                    }
                });
            });
        };
        LiveExecutionTracker.prototype.importXmlIntoDiagramViewer = function (xml) {
            return __awaiter(this, void 0, void 0, function () {
                var xmlIsNotLoaded, xmlCouldNotBeLoadedMessage, xmlImportPromise;
                var _this = this;
                return __generator(this, function (_a) {
                    xmlIsNotLoaded = xml === undefined || xml === null;
                    if (xmlIsNotLoaded) {
                        xmlCouldNotBeLoadedMessage = 'The xml could not be loaded. Please try to start the process again.';
                        this.notificationService.showNotification(index_1.NotificationType.ERROR, xmlCouldNotBeLoadedMessage);
                        return [2, undefined];
                    }
                    xmlImportPromise = new Promise(function (resolve, reject) {
                        _this.diagramViewer.importXML(xml, function (importXmlError) {
                            if (importXmlError) {
                                reject(importXmlError);
                                return;
                            }
                            resolve();
                        });
                    });
                    return [2, xmlImportPromise];
                });
            });
        };
        LiveExecutionTracker.prototype.getElementIdByOverlayHtmlId = function (overlayHtmlId) {
            return overlayHtmlId.substring(0, overlayHtmlId.lastIndexOf('#'));
        };
        LiveExecutionTracker.prototype.importXmlIntoDiagramPreviewViewer = function (xml) {
            return __awaiter(this, void 0, void 0, function () {
                var xmlIsNotLoaded, xmlCouldNotBeLoadedMessage, xmlImportPromise;
                var _this = this;
                return __generator(this, function (_a) {
                    xmlIsNotLoaded = xml === undefined || xml === null;
                    if (xmlIsNotLoaded) {
                        xmlCouldNotBeLoadedMessage = 'The xml could not be loaded. Please try to start the process again.';
                        this.notificationService.showNotification(index_1.NotificationType.ERROR, xmlCouldNotBeLoadedMessage);
                        return [2, undefined];
                    }
                    xmlImportPromise = new Promise(function (resolve, reject) {
                        _this.diagramPreviewViewer.importXML(xml, function (importXmlError) {
                            if (importXmlError) {
                                reject(importXmlError);
                                return;
                            }
                            resolve();
                        });
                    });
                    return [2, xmlImportPromise];
                });
            });
        };
        LiveExecutionTracker.prototype.exportXmlFromDiagramViewer = function () {
            return __awaiter(this, void 0, void 0, function () {
                var saveXmlPromise;
                var _this = this;
                return __generator(this, function (_a) {
                    saveXmlPromise = new Promise(function (resolve, reject) {
                        var xmlSaveOptions = {
                            format: true,
                        };
                        _this.diagramViewer.saveXML(xmlSaveOptions, function (saveXmlError, xml) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                if (saveXmlError) {
                                    reject(saveXmlError);
                                    return [2];
                                }
                                resolve(xml);
                                return [2];
                            });
                        }); });
                    });
                    return [2, saveXmlPromise];
                });
            });
        };
        LiveExecutionTracker.prototype.handleElementColorization = function () {
            return __awaiter(this, void 0, void 0, function () {
                var previousXml, colorizedXml, colorizingWasSuccessfull, xmlChanged;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (this.isColorizing) {
                                this.colorizeAgain = true;
                                return [2];
                            }
                            this.isColorizing = true;
                            return [4, this.exportXmlFromDiagramViewer()];
                        case 1:
                            previousXml = _a.sent();
                            return [4, (function () { return __awaiter(_this, void 0, void 0, function () {
                                    var error_2, message;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                _a.trys.push([0, 2, , 3]);
                                                return [4, this.liveExecutionTrackerService.getColorizedDiagram(this.activeSolutionEntry.identity, this.xml, this.processInstanceId, this.checkIfProcessEngineSupportsGettingFlowNodeInstances())];
                                            case 1: return [2, _a.sent()];
                                            case 2:
                                                error_2 = _a.sent();
                                                message = "Could not colorize XML: " + error_2;
                                                this.notificationService.showNotification(index_1.NotificationType.ERROR, message);
                                                return [3, 3];
                                            case 3: return [2, undefined];
                                        }
                                    });
                                }); })()];
                        case 2:
                            colorizedXml = _a.sent();
                            colorizingWasSuccessfull = colorizedXml !== undefined;
                            xmlChanged = previousXml !== colorizedXml;
                            if (!(xmlChanged && colorizingWasSuccessfull)) return [3, 5];
                            return [4, this.importXmlIntoDiagramViewer(colorizedXml)];
                        case 3:
                            _a.sent();
                            return [4, this.addOverlays()];
                        case 4:
                            _a.sent();
                            _a.label = 5;
                        case 5:
                            this.isColorizing = false;
                            if (this.colorizeAgain) {
                                this.colorizeAgain = false;
                                this.handleElementColorization();
                            }
                            return [2];
                    }
                });
            });
        };
        LiveExecutionTracker.prototype.getParentProcessInstanceId = function () {
            return __awaiter(this, void 0, void 0, function () {
                var correlation, errorGettingCorrelation, processInstanceFromCorrelation, parentProcessInstanceId;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.liveExecutionTrackerService.getCorrelationById(this.activeSolutionEntry.identity, this.correlationId)];
                        case 1:
                            correlation = _a.sent();
                            errorGettingCorrelation = correlation === undefined;
                            if (errorGettingCorrelation) {
                                return [2, undefined];
                            }
                            processInstanceFromCorrelation = correlation.processInstances.find(function (processInstance) {
                                var processInstanceFound = processInstance.processInstanceId === _this.processInstanceId;
                                return processInstanceFound;
                            });
                            parentProcessInstanceId = processInstanceFromCorrelation.parentProcessInstanceId;
                            return [2, parentProcessInstanceId];
                    }
                });
            });
        };
        LiveExecutionTracker.prototype.createBackendEventListeners = function () {
            var _this = this;
            var processEndedCallback = function () {
                _this.handleElementColorization();
                _this.sendProcessStoppedNotification();
            };
            var colorizationCallback = function () {
                _this.handleElementColorization();
            };
            var processEndedSubscriptionPromise = this.liveExecutionTrackerService.createProcessEndedEventListener(this.activeSolutionEntry.identity, this.processInstanceId, processEndedCallback);
            var processErrorSubscriptionPromise = this.liveExecutionTrackerService.createProcessErrorEventListener(this.activeSolutionEntry.identity, this.processInstanceId, processEndedCallback);
            var processTerminatedSubscriptionPromise = this.liveExecutionTrackerService.createProcessTerminatedEventListener(this.activeSolutionEntry.identity, this.processInstanceId, processEndedCallback);
            var userTaskWaitingSubscriptionPromise = this.liveExecutionTrackerService.createUserTaskWaitingEventListener(this.activeSolutionEntry.identity, this.processInstanceId, colorizationCallback);
            var userTaskFinishedSubscriptionPromise = this.liveExecutionTrackerService.createUserTaskFinishedEventListener(this.activeSolutionEntry.identity, this.processInstanceId, colorizationCallback);
            var manualTaskWaitingSubscriptionPromise = this.liveExecutionTrackerService.createManualTaskWaitingEventListener(this.activeSolutionEntry.identity, this.processInstanceId, colorizationCallback);
            var manualTaskFinishedSubscriptionPromise = this.liveExecutionTrackerService.createManualTaskFinishedEventListener(this.activeSolutionEntry.identity, this.processInstanceId, colorizationCallback);
            var emptyActivityWaitingSubscriptionPromise = this.liveExecutionTrackerService.createEmptyActivityWaitingEventListener(this.activeSolutionEntry.identity, this.processInstanceId, colorizationCallback);
            var emptyActivityFinishedSubscriptionPromise = this.liveExecutionTrackerService.createEmptyActivityFinishedEventListener(this.activeSolutionEntry.identity, this.processInstanceId, colorizationCallback);
            var activityReachedSubscriptionPromise = this.liveExecutionTrackerService.createActivityReachedEventListener(this.activeSolutionEntry.identity, this.processInstanceId, colorizationCallback);
            var activityFinishedSubscriptionPromise = this.liveExecutionTrackerService.createActivityFinishedEventListener(this.activeSolutionEntry.identity, this.processInstanceId, colorizationCallback);
            var boundaryEventTriggeredSubscriptionPromise = this.liveExecutionTrackerService.createBoundaryEventTriggeredEventListener(this.activeSolutionEntry.identity, this.processInstanceId, colorizationCallback);
            var intermediateThrowEventTriggeredSubscriptionPromise = this.liveExecutionTrackerService.createIntermediateThrowEventTriggeredEventListener(this.activeSolutionEntry.identity, this.processInstanceId, colorizationCallback);
            var intermediateCatchEventReachedSubscriptionPromise = this.liveExecutionTrackerService.createIntermediateCatchEventReachedEventListener(this.activeSolutionEntry.identity, this.processInstanceId, colorizationCallback);
            var intermediateCatchEventFinishedSubscriptionPromise = this.liveExecutionTrackerService.createIntermediateCatchEventFinishedEventListener(this.activeSolutionEntry.identity, this.processInstanceId, colorizationCallback);
            var subscriptionPromises = [
                processEndedSubscriptionPromise,
                processErrorSubscriptionPromise,
                processTerminatedSubscriptionPromise,
                userTaskWaitingSubscriptionPromise,
                userTaskFinishedSubscriptionPromise,
                manualTaskWaitingSubscriptionPromise,
                manualTaskFinishedSubscriptionPromise,
                emptyActivityWaitingSubscriptionPromise,
                emptyActivityFinishedSubscriptionPromise,
                activityReachedSubscriptionPromise,
                activityFinishedSubscriptionPromise,
                boundaryEventTriggeredSubscriptionPromise,
                intermediateThrowEventTriggeredSubscriptionPromise,
                intermediateCatchEventReachedSubscriptionPromise,
                intermediateCatchEventFinishedSubscriptionPromise,
            ];
            return Promise.all(subscriptionPromises);
        };
        LiveExecutionTracker.prototype.startPolling = function () {
            var _this = this;
            this.pollingTimer = setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
                var notAttached, isProcessInstanceActive, processInstanceIsActive, processInstanceIsNotActive;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            notAttached = !this.isAttached;
                            if (notAttached) {
                                return [2];
                            }
                            isProcessInstanceActive = function () { return __awaiter(_this, void 0, void 0, function () {
                                var error_3, connectionLost, notificationMessage;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            _a.trys.push([0, 2, , 3]);
                                            return [4, this.liveExecutionTrackerService.isProcessInstanceActive(this.activeSolutionEntry.identity, this.processInstanceId)];
                                        case 1: return [2, _a.sent()];
                                        case 2:
                                            error_3 = _a.sent();
                                            connectionLost = error_3 === index_2.RequestError.ConnectionLost;
                                            if (connectionLost) {
                                                this.startPolling();
                                            }
                                            else {
                                                notificationMessage = 'Could not get active correlations. Please try to start the process again.';
                                                this.notificationService.showNotification(index_1.NotificationType.ERROR, notificationMessage);
                                            }
                                            return [2, false];
                                        case 3: return [2];
                                    }
                                });
                            }); };
                            return [4, this.handleElementColorization()];
                        case 1:
                            _a.sent();
                            return [4, isProcessInstanceActive()];
                        case 2:
                            processInstanceIsActive = _a.sent();
                            processInstanceIsNotActive = processInstanceIsActive === false;
                            if (processInstanceIsNotActive) {
                                this.sendProcessStoppedNotification();
                                return [2];
                            }
                            this.startPolling();
                            return [2];
                    }
                });
            }); }, environment_1.default.processengine.liveExecutionTrackerPollingIntervalInMs);
        };
        LiveExecutionTracker.prototype.stopPolling = function () {
            clearTimeout(this.pollingTimer);
        };
        LiveExecutionTracker.prototype.sendProcessStoppedNotification = function () {
            this.processStopped = true;
            this.notificationService.showNotification(index_1.NotificationType.INFO, 'Process stopped.');
        };
        LiveExecutionTracker.prototype.resizeTokenViewer = function (mouseEvent) {
            var mouseXPosition = mouseEvent.clientX;
            var liveExecutionTracker = this.tokenViewer.parentElement;
            var minSpaceForDiagramViewer = 320;
            var windowWidth = window.innerWidth;
            var rightToolbarWidth = 36;
            var minTokenViewerWidth = 250;
            var maxTokenViewerWidth = liveExecutionTracker.clientWidth - minSpaceForDiagramViewer;
            var newTokenViewerWidth = windowWidth - mouseXPosition - rightToolbarWidth;
            this.tokenViewerWidth = Math.min(maxTokenViewerWidth, Math.max(newTokenViewerWidth, minTokenViewerWidth));
        };
        __decorate([
            aurelia_framework_1.observable,
            __metadata("design:type", Number)
        ], LiveExecutionTracker.prototype, "tokenViewerWidth", void 0);
        __decorate([
            aurelia_framework_1.observable,
            __metadata("design:type", Object)
        ], LiveExecutionTracker.prototype, "activeSolutionEntry", void 0);
        __decorate([
            aurelia_framework_1.computedFrom('processStopped'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [])
        ], LiveExecutionTracker.prototype, "processIsActive", null);
        __decorate([
            aurelia_framework_1.computedFrom('previousProcessModels.length'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [])
        ], LiveExecutionTracker.prototype, "hasPreviousProcess", null);
        LiveExecutionTracker = __decorate([
            aurelia_framework_1.inject(aurelia_router_1.Router, 'NotificationService', 'SolutionService', 'LiveExecutionTrackerService', aurelia_event_aggregator_1.EventAggregator),
            __metadata("design:paramtypes", [aurelia_router_1.Router,
                notification_service_1.NotificationService, Object, Object, aurelia_event_aggregator_1.EventAggregator])
        ], LiveExecutionTracker);
        return LiveExecutionTracker;
    }());
    exports.LiveExecutionTracker = LiveExecutionTracker;
});


;
define('text!modules/live-execution-tracker/live-execution-tracker.css',[],function(){return ".live-execution-tracker {\n  position: relative;\n  display: flex;\n  height: 100%; }\n\n.let__main-view {\n  display: flex;\n  height: 100%;\n  padding-right: 36px;\n  overflow: hidden;\n  flex-basis: 100%; }\n\n.let__diagram-viewer {\n  position: relative;\n  height: 100%;\n  flex-basis: 100%;\n  width: 0; }\n\n.let__diagram-viewer-canvas {\n  height: 100%; }\n\n.let__diagram-viewer-preview-container {\n  width: 100%;\n  height: 100%; }\n\n.let__diagram-viewer-preview-canvas {\n  width: 100%;\n  height: 100%; }\n\n.let__overlay-button-icon {\n  position: absolute;\n  top: 9px;\n  left: 14px;\n  pointer-events: none;\n  opacity: 0.4; }\n\n.let__overlay-button:hover .let__overlay-button-icon {\n  opacity: 1; }\n\n.let__button-row {\n  position: absolute;\n  display: flex;\n  justify-content: space-around;\n  bottom: 100px;\n  width: 100%; }\n\n.let__parent-process-button {\n  width: 200px; }\n\n.let__stop-process-button {\n  width: 200px; }\n\n.let__diagram-preview-header {\n  margin: 0 auto; }\n\n.let__close-modal-button {\n  position: absolute;\n  right: 20px; }\n\n.let__close-dynamic-ui-modal-button {\n  top: 5px; }\n\n.let__token-viewer {\n  max-width: calc(100% - 320px);\n  flex-shrink: 0; }\n\n.let__token-viewer-resize-div {\n  z-index: 1;\n  width: 6px;\n  margin-right: -4px;\n  cursor: col-resize;\n  flex-shrink: 0; }\n\n.let__right-toolbar {\n  position: fixed;\n  top: 42px;\n  right: 0px;\n  bottom: 0;\n  width: 36px;\n  background-color: #f7f7f7;\n  border-left: 2px solid #dcdbdb; }\n\n.let__tool {\n  padding: 5px;\n  margin: 0 5px;\n  opacity: 0.5;\n  text-align: center; }\n\n.let__tool:hover {\n  opacity: 1; }\n\n.let__tool--active {\n  opacity: 1; }\n";});;
define('text!modules/live-execution-tracker/live-execution-tracker.html',[],function(){return "<template>\n  <require from=\"@process-engine/bpmn-js-custom-bundle/bpmn-modeler-custom.css\"></require>\n  <require from=\"./live-execution-tracker.css\"></require>\n  <require from=\"../task-dynamic-ui/task-dynamic-ui\"></require>\n  <require from=\"../inspect/token-viewer/token-viewer\"></require>\n\n  <div class=\"live-execution-tracker\" data-test-live-execution-tracker>\n    <div class=\"let__main-view\">\n      <div class=\"let__diagram-viewer\">\n        <div ref=\"canvasModel\" class=\"let__diagram-viewer-canvas\"></div>\n        <div class=\"let__button-row\">\n          <button if.bind=\"hasPreviousProcess\" class=\"btn btn-default let__parent-process-button\" click.delegate=\"navigateBackToPreviousProcess()\">Back to parent process</button>\n          <button if.bind=\"processIsActive\" class=\"btn btn-default let__stop-process-button\" click.delegate=\"stopProcessInstance()\" data-test-stop-process-button>Stop Process</button>\n        </div>\n      </div>\n      <div show.bind=\"showTokenViewer\" class=\"let__token-viewer-resize-div\" ref=\"tokenViewerResizeDiv\"></div>\n      <token-viewer show.bind=\"showTokenViewer\"\n                    ref=\"tokenViewer\"\n                    class=\"let__token-viewer\"\n                    css=\"width: ${tokenViewerWidth}px;\"\n                    correlation-id.bind=\"correlation.id\"\n                    active-diagram.bind=\"activeDiagram\"\n                    flow-node.bind=\"selectedFlowNode\"\n                    active-solution-entry.bind=\"activeSolutionEntry\"\n                    process-instance-id.bind=\"processInstanceId\">\n      </token-viewer>\n    </div>\n  </div>\n  <div class=\"let__right-toolbar\">\n    <div class=\"tool-list tool-list--vertical\">\n      <div class=\"let__tool\"\n           class.bind=\"showTokenViewer ? 'let__tool--active' : ''\"\n           title.bind=\"showTokenViewer ? 'Hide token viewer' : 'Show token viewer'\"\n           click.delegate=\"toggleShowTokenViewer()\">\n        <i class=\"fas fa-book\"></i>\n      </div>\n    </div>\n  </div>\n\n  <modal if.bind=\"showDynamicUiModal\"\n         modal-style.bind=\"modalStyleString\"\n         content-style.bind=\"contentStyleString\"\n         css=\"display: ${showDynamicUiModal ? 'block' : 'none'};\"\n         body-style=\"overflow: auto;\"\n         origin.bind=\"liveExecutionTracker\">\n    <template replace-part=\"modal-header\">\n      <btn class=\"button let__close-modal-button let__close-dynamic-ui-modal-button\"><i class=\"fas fa-times\" click.delegate=\"closeDynamicUiModal()\"></i></btn>\n    </template>\n    <template replace-part=\"modal-body\">\n      <task-dynamic-ui correlation-id.bind=\"correlationId\"\n                        view-model.ref=\"origin.dynamicUi\"\n                        process-instance-id.bind=\"processInstanceId\"\n                        process-model-id.bind=\"processModelId\"\n                        task-id.bind=\"taskId\"\n                        is-modal=\"true\"\n                        close-modal.trigger=\"closeDynamicUiModal()\"\n                        active-solution-entry.bind=\"activeSolutionEntry\">\n      </task-dynamic-ui>\n    </template>\n  </modal>\n\n  <modal show.bind=\"showDiagramPreviewViewer\"\n         modal-style=\"top: 10%; bottom: 10%; left: 10%; right: 10%; margin: 0; position: absolute; max-width: 100%;\"\n         css=\"display: ${showDiagramPreviewViewer ? 'block' : 'none'};\"\n         body-style=\"overflow: auto; width: 100%; height: 100%; padding: 0;\"\n         origin.bind=\"liveExecutionTracker\">\n    <template replace-part=\"modal-header\">\n      <span class=\"let__diagram-preview-header\">Preview: ${origin.nameOfDiagramToPreview}</span>\n      <btn class=\"button let__close-modal-button\"><i class=\"fas fa-times\" click.delegate=\"closeDiagramPreview()\"></i></btn>\n    </template>\n    <template replace-part=\"modal-body\">\n      <div class=\"let__diagram-viewer-preview-container\">\n        <div ref=\"origin.previewCanvasModel\" class=\"let__diagram-viewer-preview-canvas\"></div>\n      </div>\n    </template>\n  </modal>\n</template>\n";});;
define('modules/live-execution-tracker/repositories/live-execution-tracker-repository-factory',["require", "exports", "../../../services/process-engine-version-module/process-engine-version.module", "./live-execution-tracker.pagination-repository", "./live-execution-tracker.repository"], function (require, exports, process_engine_version_module_1, live_execution_tracker_pagination_repository_1, live_execution_tracker_repository_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function createLiveExecutionTrackerRepository(managementApiClient, runtimeVersion) {
        if (process_engine_version_module_1.processEngineSupportsPagination(runtimeVersion)) {
            return new live_execution_tracker_pagination_repository_1.LiveExecutionTrackerPaginationRepository(managementApiClient);
        }
        return new live_execution_tracker_repository_1.LiveExecutionTrackerRepository(managementApiClient);
    }
    exports.createLiveExecutionTrackerRepository = createLiveExecutionTrackerRepository;
});


;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define('modules/live-execution-tracker/repositories/live-execution-tracker.pagination-repository',["require", "exports", "./live-execution-tracker.repository", "../contracts/index"], function (require, exports, live_execution_tracker_repository_1, index_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var LiveExecutionTrackerPaginationRepository = (function (_super) {
        __extends(LiveExecutionTrackerPaginationRepository, _super);
        function LiveExecutionTrackerPaginationRepository() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        LiveExecutionTrackerPaginationRepository.prototype.getFlowNodeInstancesForProcessInstance = function (identity, processInstanceId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, this.managementApiClient.getFlowNodeInstancesForProcessInstance(identity, processInstanceId)];
                });
            });
        };
        LiveExecutionTrackerPaginationRepository.prototype.isProcessInstanceActive = function (identity, processInstanceId) {
            return __awaiter(this, void 0, void 0, function () {
                var getActiveTokens, activeTokensOrRequestError, couldNotGetActiveTokens, requestError, allActiveTokens, correlationIsActive;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            getActiveTokens = function () { return __awaiter(_this, void 0, void 0, function () {
                                var retries, error_1, errorIsConnectionLost;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            retries = 0;
                                            _a.label = 1;
                                        case 1:
                                            if (!(retries < this.maxRetries)) return [3, 6];
                                            _a.label = 2;
                                        case 2:
                                            _a.trys.push([2, 4, , 5]);
                                            return [4, this.managementApiClient.getActiveTokensForProcessInstance(identity, processInstanceId)];
                                        case 3: return [2, (_a.sent())
                                                .activeTokens];
                                        case 4:
                                            error_1 = _a.sent();
                                            errorIsConnectionLost = error_1.message === 'Failed to fetch';
                                            if (errorIsConnectionLost) {
                                                return [2, index_1.RequestError.ConnectionLost];
                                            }
                                            return [3, 5];
                                        case 5:
                                            retries++;
                                            return [3, 1];
                                        case 6: return [2, index_1.RequestError.OtherError];
                                    }
                                });
                            }); };
                            return [4, getActiveTokens()];
                        case 1:
                            activeTokensOrRequestError = _a.sent();
                            couldNotGetActiveTokens = activeTokensOrRequestError === index_1.RequestError.ConnectionLost ||
                                activeTokensOrRequestError === index_1.RequestError.OtherError;
                            if (couldNotGetActiveTokens) {
                                requestError = activeTokensOrRequestError;
                                throw requestError;
                            }
                            allActiveTokens = activeTokensOrRequestError;
                            correlationIsActive = allActiveTokens.length > 0;
                            return [2, correlationIsActive];
                    }
                });
            });
        };
        LiveExecutionTrackerPaginationRepository.prototype.getTokenHistoryGroupForProcessInstance = function (identity, processInstanceId) {
            return __awaiter(this, void 0, void 0, function () {
                var retries, a, _a;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            retries = 0;
                            _b.label = 1;
                        case 1:
                            if (!(retries < this.maxRetries)) return [3, 7];
                            _b.label = 2;
                        case 2:
                            _b.trys.push([2, 4, , 6]);
                            return [4, this.managementApiClient.getTokensForProcessInstance(identity, processInstanceId)];
                        case 3:
                            a = _b.sent();
                            return [2, a];
                        case 4:
                            _a = _b.sent();
                            return [4, new Promise(function (resolve) {
                                    setTimeout(function () {
                                        resolve();
                                    }, _this.retryDelayInMs);
                                })];
                        case 5:
                            _b.sent();
                            return [3, 6];
                        case 6:
                            retries++;
                            return [3, 1];
                        case 7: return [2, null];
                    }
                });
            });
        };
        LiveExecutionTrackerPaginationRepository.prototype.getActiveTokensForProcessInstance = function (identity, processInstanceId) {
            return __awaiter(this, void 0, void 0, function () {
                var retries, _a;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            retries = 0;
                            _b.label = 1;
                        case 1:
                            if (!(retries < this.maxRetries)) return [3, 7];
                            _b.label = 2;
                        case 2:
                            _b.trys.push([2, 4, , 6]);
                            return [4, this.managementApiClient.getActiveTokensForProcessInstance(identity, processInstanceId)];
                        case 3: return [2, _b.sent()];
                        case 4:
                            _a = _b.sent();
                            return [4, new Promise(function (resolve) {
                                    setTimeout(function () {
                                        resolve();
                                    }, _this.retryDelayInMs);
                                })];
                        case 5:
                            _b.sent();
                            return [3, 6];
                        case 6:
                            retries++;
                            return [3, 1];
                        case 7: return [2, null];
                    }
                });
            });
        };
        LiveExecutionTrackerPaginationRepository.prototype.getEmptyActivitiesForProcessInstance = function (identity, processInstanceId) {
            return __awaiter(this, void 0, void 0, function () {
                var retries, _a;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            retries = 0;
                            _b.label = 1;
                        case 1:
                            if (!(retries < this.maxRetries)) return [3, 7];
                            _b.label = 2;
                        case 2:
                            _b.trys.push([2, 4, , 6]);
                            return [4, this.managementApiClient.getEmptyActivitiesForProcessInstance(identity, processInstanceId)];
                        case 3: return [2, _b.sent()];
                        case 4:
                            _a = _b.sent();
                            return [4, new Promise(function (resolve) {
                                    setTimeout(function () {
                                        resolve();
                                    }, _this.retryDelayInMs);
                                })];
                        case 5:
                            _b.sent();
                            return [3, 6];
                        case 6:
                            retries++;
                            return [3, 1];
                        case 7: return [2, null];
                    }
                });
            });
        };
        return LiveExecutionTrackerPaginationRepository;
    }(live_execution_tracker_repository_1.LiveExecutionTrackerRepository));
    exports.LiveExecutionTrackerPaginationRepository = LiveExecutionTrackerPaginationRepository;
});


;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define('modules/live-execution-tracker/repositories/live-execution-tracker.repository',["require", "exports", "aurelia-framework", "../contracts/index"], function (require, exports, aurelia_framework_1, index_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var LiveExecutionTrackerRepository = (function () {
        function LiveExecutionTrackerRepository(managementApiClientService) {
            this.maxRetries = 5;
            this.retryDelayInMs = 500;
            this.managementApiClient = managementApiClientService;
        }
        LiveExecutionTrackerRepository.prototype.getFlowNodeInstancesForProcessInstance = function (identity, processInstanceId) {
            return __awaiter(this, void 0, void 0, function () {
                var flowNodeInstances, flowNodeInstanceList;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.managementApiClient.getFlowNodeInstancesForProcessInstance(identity, processInstanceId)];
                        case 1:
                            flowNodeInstances = (_a.sent());
                            flowNodeInstanceList = {
                                flowNodeInstances: flowNodeInstances,
                                totalCount: flowNodeInstances.length,
                            };
                            return [2, flowNodeInstanceList];
                    }
                });
            });
        };
        LiveExecutionTrackerRepository.prototype.getCorrelationById = function (identity, correlationId) {
            return __awaiter(this, void 0, void 0, function () {
                var retries, _a;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            retries = 0;
                            _b.label = 1;
                        case 1:
                            if (!(retries < this.maxRetries)) return [3, 7];
                            _b.label = 2;
                        case 2:
                            _b.trys.push([2, 4, , 6]);
                            return [4, this.managementApiClient.getCorrelationById(identity, correlationId)];
                        case 3: return [2, _b.sent()];
                        case 4:
                            _a = _b.sent();
                            return [4, new Promise(function (resolve) {
                                    setTimeout(function () {
                                        resolve();
                                    }, _this.retryDelayInMs);
                                })];
                        case 5:
                            _b.sent();
                            return [3, 6];
                        case 6:
                            retries++;
                            return [3, 1];
                        case 7: return [2, undefined];
                    }
                });
            });
        };
        LiveExecutionTrackerRepository.prototype.isProcessInstanceActive = function (identity, processInstanceId) {
            return __awaiter(this, void 0, void 0, function () {
                var getActiveTokens, activeTokensOrRequestError, couldNotGetActiveTokens, requestError, allActiveTokens, correlationIsActive;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            getActiveTokens = function () { return __awaiter(_this, void 0, void 0, function () {
                                var retries, error_1, errorIsConnectionLost;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            retries = 0;
                                            _a.label = 1;
                                        case 1:
                                            if (!(retries < this.maxRetries)) return [3, 6];
                                            _a.label = 2;
                                        case 2:
                                            _a.trys.push([2, 4, , 5]);
                                            return [4, this.managementApiClient.getActiveTokensForProcessInstance(identity, processInstanceId)];
                                        case 3: return [2, (_a.sent())];
                                        case 4:
                                            error_1 = _a.sent();
                                            errorIsConnectionLost = error_1.message === 'Failed to fetch';
                                            if (errorIsConnectionLost) {
                                                return [2, index_1.RequestError.ConnectionLost];
                                            }
                                            return [3, 5];
                                        case 5:
                                            retries++;
                                            return [3, 1];
                                        case 6: return [2, index_1.RequestError.OtherError];
                                    }
                                });
                            }); };
                            return [4, getActiveTokens()];
                        case 1:
                            activeTokensOrRequestError = _a.sent();
                            couldNotGetActiveTokens = activeTokensOrRequestError === index_1.RequestError.ConnectionLost ||
                                activeTokensOrRequestError === index_1.RequestError.OtherError;
                            if (couldNotGetActiveTokens) {
                                requestError = activeTokensOrRequestError;
                                throw requestError;
                            }
                            allActiveTokens = activeTokensOrRequestError;
                            correlationIsActive = allActiveTokens.length > 0;
                            return [2, correlationIsActive];
                    }
                });
            });
        };
        LiveExecutionTrackerRepository.prototype.getTokenHistoryGroupForProcessInstance = function (identity, processInstanceId) {
            return __awaiter(this, void 0, void 0, function () {
                var _loop_1, this_1, retries, state_1;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _loop_1 = function (retries) {
                                var oldTokenHistoryGroup_1, oldTokenHistoryKeys, tokenHistoryGroup_1, _a;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            _b.trys.push([0, 2, , 4]);
                                            return [4, this_1.managementApiClient.getTokensForProcessInstance(identity, processInstanceId)];
                                        case 1:
                                            oldTokenHistoryGroup_1 = (_b.sent());
                                            oldTokenHistoryKeys = Object.keys(oldTokenHistoryGroup_1);
                                            tokenHistoryGroup_1 = {};
                                            oldTokenHistoryKeys.forEach(function (key) {
                                                var tokenHistoryEntryList = {
                                                    tokenHistoryEntries: oldTokenHistoryGroup_1[key],
                                                    totalCount: oldTokenHistoryGroup_1[key].length,
                                                };
                                                tokenHistoryGroup_1[key] = tokenHistoryEntryList;
                                            });
                                            return [2, { value: tokenHistoryGroup_1 }];
                                        case 2:
                                            _a = _b.sent();
                                            return [4, new Promise(function (resolve) {
                                                    setTimeout(function () {
                                                        resolve();
                                                    }, _this.retryDelayInMs);
                                                })];
                                        case 3:
                                            _b.sent();
                                            return [3, 4];
                                        case 4: return [2];
                                    }
                                });
                            };
                            this_1 = this;
                            retries = 0;
                            _a.label = 1;
                        case 1:
                            if (!(retries < this.maxRetries)) return [3, 4];
                            return [5, _loop_1(retries)];
                        case 2:
                            state_1 = _a.sent();
                            if (typeof state_1 === "object")
                                return [2, state_1.value];
                            _a.label = 3;
                        case 3:
                            retries++;
                            return [3, 1];
                        case 4: return [2, null];
                    }
                });
            });
        };
        LiveExecutionTrackerRepository.prototype.getActiveTokensForProcessInstance = function (identity, processInstanceId) {
            return __awaiter(this, void 0, void 0, function () {
                var retries, activeTokens, activeTokenList, _a;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            retries = 0;
                            _b.label = 1;
                        case 1:
                            if (!(retries < this.maxRetries)) return [3, 7];
                            _b.label = 2;
                        case 2:
                            _b.trys.push([2, 4, , 6]);
                            return [4, this.managementApiClient.getActiveTokensForProcessInstance(identity, processInstanceId)];
                        case 3:
                            activeTokens = (_b.sent());
                            activeTokenList = {
                                activeTokens: activeTokens,
                                totalCount: activeTokens.length,
                            };
                            return [2, activeTokenList];
                        case 4:
                            _a = _b.sent();
                            return [4, new Promise(function (resolve) {
                                    setTimeout(function () {
                                        resolve();
                                    }, _this.retryDelayInMs);
                                })];
                        case 5:
                            _b.sent();
                            return [3, 6];
                        case 6:
                            retries++;
                            return [3, 1];
                        case 7: return [2, null];
                    }
                });
            });
        };
        LiveExecutionTrackerRepository.prototype.getEmptyActivitiesForProcessInstance = function (identity, processInstanceId) {
            return __awaiter(this, void 0, void 0, function () {
                var retries, emptyActivities, emptyActivityList, _a;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            retries = 0;
                            _b.label = 1;
                        case 1:
                            if (!(retries < this.maxRetries)) return [3, 7];
                            _b.label = 2;
                        case 2:
                            _b.trys.push([2, 4, , 6]);
                            return [4, this.managementApiClient.getEmptyActivitiesForProcessInstance(identity, processInstanceId)];
                        case 3:
                            emptyActivities = (_b.sent());
                            emptyActivityList = {
                                emptyActivities: emptyActivities.emptyActivities,
                                totalCount: emptyActivities.emptyActivities.length,
                            };
                            return [2, emptyActivityList];
                        case 4:
                            _a = _b.sent();
                            return [4, new Promise(function (resolve) {
                                    setTimeout(function () {
                                        resolve();
                                    }, _this.retryDelayInMs);
                                })];
                        case 5:
                            _b.sent();
                            return [3, 6];
                        case 6:
                            retries++;
                            return [3, 1];
                        case 7: return [2, null];
                    }
                });
            });
        };
        LiveExecutionTrackerRepository.prototype.finishEmptyActivity = function (identity, processInstanceId, correlationId, emptyActivity) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, this.managementApiClient.finishEmptyActivity(identity, processInstanceId, correlationId, emptyActivity.flowNodeInstanceId)];
                });
            });
        };
        LiveExecutionTrackerRepository.prototype.getProcessModelById = function (identity, processModelId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, this.managementApiClient.getProcessModelById(identity, processModelId)];
                });
            });
        };
        LiveExecutionTrackerRepository.prototype.createProcessEndedEventListener = function (identity, processInstanceId, callback) {
            return this.managementApiClient.onProcessEnded(identity, function (message) {
                var eventIsForAnotherProcessInstance = message.processInstanceId !== processInstanceId;
                if (eventIsForAnotherProcessInstance) {
                    return;
                }
                callback();
            });
        };
        LiveExecutionTrackerRepository.prototype.createProcessErrorEventListener = function (identity, processInstanceId, callback) {
            return this.managementApiClient.onProcessError(identity, function (message) {
                var eventIsForAnotherProcessInstance = message.processInstanceId !== processInstanceId;
                if (eventIsForAnotherProcessInstance) {
                    return;
                }
                callback();
            });
        };
        LiveExecutionTrackerRepository.prototype.createProcessTerminatedEventListener = function (identity, processInstanceId, callback) {
            return this.managementApiClient.onProcessTerminated(identity, function (message) {
                var eventIsForAnotherProcessInstance = message.processInstanceId !== processInstanceId;
                if (eventIsForAnotherProcessInstance) {
                    return;
                }
                callback();
            });
        };
        LiveExecutionTrackerRepository.prototype.createUserTaskWaitingEventListener = function (identity, processInstanceId, callback) {
            return this.managementApiClient.onUserTaskWaiting(identity, function (message) {
                var eventIsForAnotherProcessInstance = message.processInstanceId !== processInstanceId;
                if (eventIsForAnotherProcessInstance) {
                    return;
                }
                callback();
            });
        };
        LiveExecutionTrackerRepository.prototype.createActivityReachedEventListener = function (identity, processInstanceId, callback) {
            return this.managementApiClient.onActivityReached(identity, function (message) {
                var eventIsForAnotherProcessInstance = message.processInstanceId !== processInstanceId;
                if (eventIsForAnotherProcessInstance) {
                    return;
                }
                callback();
            });
        };
        LiveExecutionTrackerRepository.prototype.createActivityFinishedEventListener = function (identity, processInstanceId, callback) {
            return this.managementApiClient.onActivityFinished(identity, function (message) {
                var eventIsForAnotherProcessInstance = message.processInstanceId !== processInstanceId;
                if (eventIsForAnotherProcessInstance) {
                    return;
                }
                callback();
            });
        };
        LiveExecutionTrackerRepository.prototype.createUserTaskFinishedEventListener = function (identity, processInstanceId, callback) {
            return this.managementApiClient.onUserTaskFinished(identity, function (message) {
                var eventIsForAnotherProcessInstance = message.processInstanceId !== processInstanceId;
                if (eventIsForAnotherProcessInstance) {
                    return;
                }
                callback();
            });
        };
        LiveExecutionTrackerRepository.prototype.createManualTaskWaitingEventListener = function (identity, processInstanceId, callback) {
            return this.managementApiClient.onManualTaskWaiting(identity, function (message) {
                var eventIsForAnotherProcessInstance = message.processInstanceId !== processInstanceId;
                if (eventIsForAnotherProcessInstance) {
                    return;
                }
                callback();
            });
        };
        LiveExecutionTrackerRepository.prototype.createManualTaskFinishedEventListener = function (identity, processInstanceId, callback) {
            return this.managementApiClient.onManualTaskFinished(identity, function (message) {
                var eventIsForAnotherProcessInstance = message.processInstanceId !== processInstanceId;
                if (eventIsForAnotherProcessInstance) {
                    return;
                }
                callback();
            });
        };
        LiveExecutionTrackerRepository.prototype.createEmptyActivityWaitingEventListener = function (identity, processInstanceId, callback) {
            return this.managementApiClient.onEmptyActivityWaiting(identity, function (message) {
                var eventIsForAnotherProcessInstance = message.processInstanceId !== processInstanceId;
                if (eventIsForAnotherProcessInstance) {
                    return;
                }
                callback();
            });
        };
        LiveExecutionTrackerRepository.prototype.createEmptyActivityFinishedEventListener = function (identity, processInstanceId, callback) {
            return this.managementApiClient.onEmptyActivityFinished(identity, function (message) {
                var eventIsForAnotherProcessInstance = message.processInstanceId !== processInstanceId;
                if (eventIsForAnotherProcessInstance) {
                    return;
                }
                callback();
            });
        };
        LiveExecutionTrackerRepository.prototype.createBoundaryEventTriggeredEventListener = function (identity, processInstanceId, callback) {
            return this.managementApiClient.onBoundaryEventTriggered(identity, function (message) {
                var eventIsForAnotherProcessInstance = message.processInstanceId !== processInstanceId;
                if (eventIsForAnotherProcessInstance) {
                    return;
                }
                callback();
            });
        };
        LiveExecutionTrackerRepository.prototype.createIntermediateThrowEventTriggeredEventListener = function (identity, processInstanceId, callback) {
            return this.managementApiClient.onIntermediateThrowEventTriggered(identity, function (message) {
                var eventIsForAnotherProcessInstance = message.processInstanceId !== processInstanceId;
                if (eventIsForAnotherProcessInstance) {
                    return;
                }
                callback();
            });
        };
        LiveExecutionTrackerRepository.prototype.createIntermediateCatchEventReachedEventListener = function (identity, processInstanceId, callback) {
            return this.managementApiClient.onIntermediateCatchEventReached(identity, function (message) {
                var eventIsForAnotherProcessInstance = message.processInstanceId !== processInstanceId;
                if (eventIsForAnotherProcessInstance) {
                    return;
                }
                callback();
            });
        };
        LiveExecutionTrackerRepository.prototype.createIntermediateCatchEventFinishedEventListener = function (identity, processInstanceId, callback) {
            return this.managementApiClient.onIntermediateCatchEventFinished(identity, function (message) {
                var eventIsForAnotherProcessInstance = message.processInstanceId !== processInstanceId;
                if (eventIsForAnotherProcessInstance) {
                    return;
                }
                callback();
            });
        };
        LiveExecutionTrackerRepository.prototype.removeSubscription = function (identity, subscription) {
            return this.managementApiClient.removeSubscription(identity, subscription);
        };
        LiveExecutionTrackerRepository.prototype.terminateProcess = function (identity, processInstanceId) {
            return this.managementApiClient.terminateProcessInstance(identity, processInstanceId);
        };
        LiveExecutionTrackerRepository = __decorate([
            aurelia_framework_1.inject('ManagementApiClientService'),
            __metadata("design:paramtypes", [Object])
        ], LiveExecutionTrackerRepository);
        return LiveExecutionTrackerRepository;
    }());
    exports.LiveExecutionTrackerRepository = LiveExecutionTrackerRepository;
});


;
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/live-execution-tracker/services/live-execution-tracker.service',["require", "exports", "@process-engine/bpmn-js-custom-bundle", "@process-engine/management_api_contracts", "../../../contracts/index", "../repositories/live-execution-tracker-repository-factory", "../../../environment"], function (require, exports, bundle, management_api_contracts_1, index_1, live_execution_tracker_repository_factory_1, environment_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    bundle = __importStar(bundle);
    environment_1 = __importDefault(environment_1);
    var LiveExecutionTrackerService = (function () {
        function LiveExecutionTrackerService(eventAggregator, managementApiClient) {
            var _this = this;
            eventAggregator.subscribe(environment_1.default.events.configPanel.solutionEntryChanged, function (solutionEntry) {
                _this.liveExecutionTrackerRepository = live_execution_tracker_repository_factory_1.createLiveExecutionTrackerRepository(managementApiClient, solutionEntry.processEngineVersion);
            });
        }
        LiveExecutionTrackerService.prototype.isProcessInstanceActive = function (identity, processInstanceId) {
            return this.liveExecutionTrackerRepository.isProcessInstanceActive(identity, processInstanceId);
        };
        LiveExecutionTrackerService.prototype.getCorrelationById = function (identity, correlationId) {
            return this.liveExecutionTrackerRepository.getCorrelationById(identity, correlationId);
        };
        LiveExecutionTrackerService.prototype.getTokenHistoryGroupForProcessInstance = function (identity, processInstanceId) {
            return this.liveExecutionTrackerRepository.getTokenHistoryGroupForProcessInstance(identity, processInstanceId);
        };
        LiveExecutionTrackerService.prototype.getActiveTokensForProcessInstance = function (identity, processInstanceId) {
            return this.liveExecutionTrackerRepository.getActiveTokensForProcessInstance(identity, processInstanceId);
        };
        LiveExecutionTrackerService.prototype.getEmptyActivitiesForProcessInstance = function (identity, processInstanceId) {
            return this.liveExecutionTrackerRepository.getEmptyActivitiesForProcessInstance(identity, processInstanceId);
        };
        LiveExecutionTrackerService.prototype.getProcessModelById = function (identity, processModelId) {
            return this.liveExecutionTrackerRepository.getProcessModelById(identity, processModelId);
        };
        LiveExecutionTrackerService.prototype.finishEmptyActivity = function (identity, processInstanceId, correlationId, emptyActivity) {
            return this.liveExecutionTrackerRepository.finishEmptyActivity(identity, processInstanceId, correlationId, emptyActivity);
        };
        LiveExecutionTrackerService.prototype.createProcessEndedEventListener = function (identity, processInstanceId, callback) {
            return this.liveExecutionTrackerRepository.createProcessEndedEventListener(identity, processInstanceId, callback);
        };
        LiveExecutionTrackerService.prototype.createProcessErrorEventListener = function (identity, processInstanceId, callback) {
            return this.liveExecutionTrackerRepository.createProcessErrorEventListener(identity, processInstanceId, callback);
        };
        LiveExecutionTrackerService.prototype.createProcessTerminatedEventListener = function (identity, processInstanceId, callback) {
            return this.liveExecutionTrackerRepository.createProcessTerminatedEventListener(identity, processInstanceId, callback);
        };
        LiveExecutionTrackerService.prototype.createUserTaskWaitingEventListener = function (identity, processInstanceId, callback) {
            return this.liveExecutionTrackerRepository.createUserTaskWaitingEventListener(identity, processInstanceId, callback);
        };
        LiveExecutionTrackerService.prototype.createUserTaskFinishedEventListener = function (identity, processInstanceId, callback) {
            return this.liveExecutionTrackerRepository.createUserTaskFinishedEventListener(identity, processInstanceId, callback);
        };
        LiveExecutionTrackerService.prototype.createManualTaskWaitingEventListener = function (identity, processInstanceId, callback) {
            return this.liveExecutionTrackerRepository.createManualTaskWaitingEventListener(identity, processInstanceId, callback);
        };
        LiveExecutionTrackerService.prototype.createManualTaskFinishedEventListener = function (identity, processInstanceId, callback) {
            return this.liveExecutionTrackerRepository.createManualTaskFinishedEventListener(identity, processInstanceId, callback);
        };
        LiveExecutionTrackerService.prototype.createEmptyActivityWaitingEventListener = function (identity, processInstanceId, callback) {
            return this.liveExecutionTrackerRepository.createEmptyActivityWaitingEventListener(identity, processInstanceId, callback);
        };
        LiveExecutionTrackerService.prototype.createEmptyActivityFinishedEventListener = function (identity, processInstanceId, callback) {
            return this.liveExecutionTrackerRepository.createEmptyActivityFinishedEventListener(identity, processInstanceId, callback);
        };
        LiveExecutionTrackerService.prototype.createActivityReachedEventListener = function (identity, processInstanceId, callback) {
            return this.liveExecutionTrackerRepository.createActivityReachedEventListener(identity, processInstanceId, callback);
        };
        LiveExecutionTrackerService.prototype.createActivityFinishedEventListener = function (identity, processInstanceId, callback) {
            return this.liveExecutionTrackerRepository.createActivityFinishedEventListener(identity, processInstanceId, callback);
        };
        LiveExecutionTrackerService.prototype.createBoundaryEventTriggeredEventListener = function (identity, processInstanceId, callback) {
            return this.liveExecutionTrackerRepository.createBoundaryEventTriggeredEventListener(identity, processInstanceId, callback);
        };
        LiveExecutionTrackerService.prototype.createIntermediateThrowEventTriggeredEventListener = function (identity, processInstanceId, callback) {
            return this.liveExecutionTrackerRepository.createIntermediateThrowEventTriggeredEventListener(identity, processInstanceId, callback);
        };
        LiveExecutionTrackerService.prototype.createIntermediateCatchEventReachedEventListener = function (identity, processInstanceId, callback) {
            return this.liveExecutionTrackerRepository.createIntermediateCatchEventReachedEventListener(identity, processInstanceId, callback);
        };
        LiveExecutionTrackerService.prototype.createIntermediateCatchEventFinishedEventListener = function (identity, processInstanceId, callback) {
            return this.liveExecutionTrackerRepository.createIntermediateCatchEventFinishedEventListener(identity, processInstanceId, callback);
        };
        LiveExecutionTrackerService.prototype.removeSubscription = function (identity, subscription) {
            return this.liveExecutionTrackerRepository.removeSubscription(identity, subscription);
        };
        LiveExecutionTrackerService.prototype.getElementsWithActiveToken = function (identity, processInstanceId, elementRegistry) {
            return __awaiter(this, void 0, void 0, function () {
                var elements, activeTokenList, couldNotGetActiveTokens, elementsWithActiveToken;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            elements = this.getAllElementsThatCanHaveAToken(elementRegistry);
                            return [4, this.getActiveTokensForProcessInstance(identity, processInstanceId)];
                        case 1:
                            activeTokenList = _a.sent();
                            couldNotGetActiveTokens = activeTokenList === null;
                            if (couldNotGetActiveTokens) {
                                return [2, null];
                            }
                            elementsWithActiveToken = activeTokenList.activeTokens.map(function (activeToken) {
                                var elementWithActiveToken = elements.find(function (element) {
                                    return element.id === activeToken.flowNodeId;
                                });
                                return elementWithActiveToken;
                            });
                            return [2, elementsWithActiveToken];
                    }
                });
            });
        };
        LiveExecutionTrackerService.prototype.getElementsWithTokenHistory = function (identity, processInstanceId, elementRegistry) {
            return __awaiter(this, void 0, void 0, function () {
                var elements, tokenHistoryGroups, couldNotGetTokenHistory, elementsWithTokenHistory, flowNodeIds, _loop_1, this_1, _i, flowNodeIds_1, flowNodeId;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            elements = this.getAllElementsThatCanHaveAToken(elementRegistry);
                            return [4, this.getTokenHistoryGroupForProcessInstance(identity, processInstanceId)];
                        case 1:
                            tokenHistoryGroups = _a.sent();
                            couldNotGetTokenHistory = tokenHistoryGroups === null;
                            if (couldNotGetTokenHistory) {
                                return [2, undefined];
                            }
                            elementsWithTokenHistory = [];
                            flowNodeIds = Object.keys(tokenHistoryGroups);
                            _loop_1 = function (flowNodeId) {
                                var elementFromTokenHistory = elements.find(function (element) {
                                    return element.id === flowNodeId;
                                });
                                var elementFinished = tokenHistoryGroups[flowNodeId].tokenHistoryEntries.find(function (tokenHistoryEntry) {
                                    return tokenHistoryEntry.tokenEventType === management_api_contracts_1.DataModels.TokenHistory.TokenEventType.onExit;
                                }) !== undefined;
                                if (elementFinished) {
                                    elementsWithTokenHistory.push(elementFromTokenHistory);
                                    var outgoingElements = this_1.getOutgoingElementsOfElement(elementFromTokenHistory, tokenHistoryGroups, elementRegistry);
                                    elementsWithTokenHistory.push.apply(elementsWithTokenHistory, outgoingElements);
                                }
                            };
                            this_1 = this;
                            for (_i = 0, flowNodeIds_1 = flowNodeIds; _i < flowNodeIds_1.length; _i++) {
                                flowNodeId = flowNodeIds_1[_i];
                                _loop_1(flowNodeId);
                            }
                            return [2, elementsWithTokenHistory];
                    }
                });
            });
        };
        LiveExecutionTrackerService.prototype.elementHasTokenHistory = function (elementId, tokenHistoryGroups) {
            var tokenHistoryFromFlowNodeInstanceFound = tokenHistoryGroups[elementId] !== undefined;
            return tokenHistoryFromFlowNodeInstanceFound;
        };
        LiveExecutionTrackerService.prototype.elementHasActiveToken = function (elementId, activeTokens) {
            var activeTokenForFlowNodeInstance = activeTokens.find(function (activeToken) {
                var activeTokenIsFromFlowNodeInstance = activeToken.flowNodeId === elementId;
                return activeTokenIsFromFlowNodeInstance;
            });
            return activeTokenForFlowNodeInstance !== undefined;
        };
        LiveExecutionTrackerService.prototype.getActiveCallActivities = function (identity, processInstanceId, elementRegistry) {
            return __awaiter(this, void 0, void 0, function () {
                var activeTokenList, callActivities, inactiveCallActivities;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.liveExecutionTrackerRepository.getActiveTokensForProcessInstance(identity, processInstanceId)];
                        case 1:
                            activeTokenList = _a.sent();
                            callActivities = this.getCallActivities(elementRegistry);
                            inactiveCallActivities = callActivities.filter(function (callActivity) {
                                return _this.elementHasActiveToken(callActivity.id, activeTokenList.activeTokens);
                            });
                            return [2, inactiveCallActivities];
                    }
                });
            });
        };
        LiveExecutionTrackerService.prototype.getInactiveCallActivities = function (identity, processInstanceId, elementRegistry) {
            return __awaiter(this, void 0, void 0, function () {
                var activeTokenList, callActivities, inactiveCallActivities;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.liveExecutionTrackerRepository.getActiveTokensForProcessInstance(identity, processInstanceId)];
                        case 1:
                            activeTokenList = _a.sent();
                            callActivities = this.getCallActivities(elementRegistry);
                            inactiveCallActivities = callActivities.filter(function (callActivity) {
                                return !_this.elementHasActiveToken(callActivity.id, activeTokenList.activeTokens);
                            });
                            return [2, inactiveCallActivities];
                    }
                });
            });
        };
        LiveExecutionTrackerService.prototype.getProcessModelByProcessInstanceId = function (identity, correlationId, processInstanceId) {
            return __awaiter(this, void 0, void 0, function () {
                var correlation, errorGettingCorrelation, processModel;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.getCorrelationById(identity, correlationId)];
                        case 1:
                            correlation = _a.sent();
                            errorGettingCorrelation = correlation === undefined;
                            if (errorGettingCorrelation) {
                                return [2, undefined];
                            }
                            processModel = correlation.processInstances.find(function (processInstance) {
                                var processModelFound = processInstance.processInstanceId === processInstanceId;
                                return processModelFound;
                            });
                            return [2, processModel];
                    }
                });
            });
        };
        LiveExecutionTrackerService.prototype.getProcessInstanceIdOfCallActivityTarget = function (identity, correlationId, processInstanceIdOfOrigin, callActivityTargetId) {
            return __awaiter(this, void 0, void 0, function () {
                var correlation, errorGettingCorrelation, processInstance, processInstanceFound;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.getCorrelationById(identity, correlationId)];
                        case 1:
                            correlation = _a.sent();
                            errorGettingCorrelation = correlation === undefined;
                            if (errorGettingCorrelation) {
                                return [2, undefined];
                            }
                            processInstance = correlation.processInstances.find(function (currentProcessInstance) {
                                var targetProcessModelFound = currentProcessInstance.parentProcessInstanceId === processInstanceIdOfOrigin &&
                                    currentProcessInstance.processModelId === callActivityTargetId &&
                                    currentProcessInstance.state === management_api_contracts_1.DataModels.Correlations.CorrelationState.running;
                                return targetProcessModelFound;
                            });
                            processInstanceFound = processInstance !== undefined;
                            return [2, processInstanceFound ? processInstance.processInstanceId : undefined];
                    }
                });
            });
        };
        LiveExecutionTrackerService.prototype.clearDiagramColors = function (xml) {
            return __awaiter(this, void 0, void 0, function () {
                var diagramModeler, modeling, elementRegistry, elementsWithColor, noElementsWithColor, clearedXml;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            diagramModeler = new bundle.modeler();
                            modeling = diagramModeler.get('modeling');
                            elementRegistry = diagramModeler.get('elementRegistry');
                            return [4, this.importXmlIntoDiagramModeler(diagramModeler, xml)];
                        case 1:
                            _a.sent();
                            elementsWithColor = elementRegistry.filter(function (element) {
                                var elementHasFillColor = element.businessObject.di.fill !== undefined;
                                var elementHasBorderColor = element.businessObject.di.stroke !== undefined;
                                var elementHasColor = elementHasFillColor || elementHasBorderColor;
                                return elementHasColor;
                            });
                            noElementsWithColor = elementsWithColor.length === 0;
                            if (noElementsWithColor) {
                                return [2, xml];
                            }
                            modeling.setColor(elementsWithColor, {
                                stroke: index_1.defaultBpmnColors.none.border,
                                fill: index_1.defaultBpmnColors.none.fill,
                            });
                            return [4, this.exportXmlFromDiagramModeler(diagramModeler)];
                        case 2:
                            clearedXml = _a.sent();
                            this.killModeler(diagramModeler);
                            return [2, clearedXml];
                    }
                });
            });
        };
        LiveExecutionTrackerService.prototype.getColorizedDiagram = function (identity, xml, processInstanceId, processEngineSupportsGettingFlowNodeInstances) {
            return __awaiter(this, void 0, void 0, function () {
                var diagramModeler, modeling, elementRegistry, elementsWithActiveToken, elementsWithTokenHistory, elementsWithError, colorizedXml;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            diagramModeler = new bundle.modeler();
                            return [4, this.importXmlIntoDiagramModeler(diagramModeler, xml)];
                        case 1:
                            _a.sent();
                            modeling = diagramModeler.get('modeling');
                            elementRegistry = diagramModeler.get('elementRegistry');
                            return [4, this.getElementsWithActiveToken(identity, processInstanceId, elementRegistry)];
                        case 2:
                            elementsWithActiveToken = _a.sent();
                            return [4, this.getElementsWithTokenHistory(identity, processInstanceId, elementRegistry)];
                        case 3:
                            elementsWithTokenHistory = _a.sent();
                            this.colorizeElements(modeling, elementsWithTokenHistory, index_1.defaultBpmnColors.green);
                            this.colorizeElements(modeling, elementsWithActiveToken, index_1.defaultBpmnColors.orange);
                            if (!processEngineSupportsGettingFlowNodeInstances) return [3, 5];
                            return [4, this.getElementsWithError(identity, processInstanceId, elementRegistry)];
                        case 4:
                            elementsWithError = _a.sent();
                            this.colorizeElements(modeling, elementsWithError, index_1.defaultBpmnColors.red);
                            _a.label = 5;
                        case 5: return [4, this.exportXmlFromDiagramModeler(diagramModeler)];
                        case 6:
                            colorizedXml = _a.sent();
                            this.killModeler(diagramModeler);
                            return [2, colorizedXml];
                    }
                });
            });
        };
        LiveExecutionTrackerService.prototype.terminateProcess = function (identity, processInstanceId) {
            return this.liveExecutionTrackerRepository.terminateProcess(identity, processInstanceId);
        };
        LiveExecutionTrackerService.prototype.getElementsWithError = function (identity, processInstanceId, elementRegistry) {
            return __awaiter(this, void 0, void 0, function () {
                var flowNodeInstanceList;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.liveExecutionTrackerRepository.getFlowNodeInstancesForProcessInstance(identity, processInstanceId)];
                        case 1:
                            flowNodeInstanceList = _a.sent();
                            return [2, flowNodeInstanceList.flowNodeInstances
                                    .filter(function (flowNodeInstance) {
                                    return flowNodeInstance.state === 'error';
                                })
                                    .map(function (flowNodeInstance) {
                                    return elementRegistry.get(flowNodeInstance.flowNodeId);
                                })];
                    }
                });
            });
        };
        LiveExecutionTrackerService.prototype.getAllElementsThatCanHaveAToken = function (elementRegistry) {
            var allElementsThatCanHaveAToken = elementRegistry.filter(function (element) {
                var elementCanHaveAToken = element.type !== 'bpmn:SequenceFlow' &&
                    element.type !== 'bpmn:Collaboration' &&
                    element.type !== 'bpmn:Participant' &&
                    element.type !== 'bpmn:Lane' &&
                    element.type !== 'label';
                return elementCanHaveAToken;
            });
            return allElementsThatCanHaveAToken;
        };
        LiveExecutionTrackerService.prototype.getOutgoingElementsOfElement = function (element, tokenHistoryGroups, elementRegistry) {
            var outgoingElementsAsIModdleElement = element.businessObject.outgoing;
            var elementHasNoOutgoingElements = outgoingElementsAsIModdleElement === undefined;
            if (elementHasNoOutgoingElements) {
                return [];
            }
            var elementsWithOutgoingElements = [];
            for (var _i = 0, outgoingElementsAsIModdleElement_1 = outgoingElementsAsIModdleElement; _i < outgoingElementsAsIModdleElement_1.length; _i++) {
                var outgoingElement = outgoingElementsAsIModdleElement_1[_i];
                var outgoingElementAsShape = elementRegistry.get(outgoingElement.id);
                var targetOfOutgoingElement = outgoingElementAsShape.target;
                var outgoingElementHasNoTarget = targetOfOutgoingElement === undefined;
                if (outgoingElementHasNoTarget) {
                    continue;
                }
                var targetOfOutgoingElementHasNoTokenHistory = !this.elementHasTokenHistory(targetOfOutgoingElement.id, tokenHistoryGroups);
                if (targetOfOutgoingElementHasNoTokenHistory) {
                    continue;
                }
                var outgoingElementIsSequenceFlow = outgoingElementAsShape.type === 'bpmn:SequenceFlow';
                if (outgoingElementIsSequenceFlow) {
                    var tokenHistoryForTarget = tokenHistoryGroups[targetOfOutgoingElement.id].tokenHistoryEntries[0];
                    var previousFlowNodeInstanceIdOfTarget = tokenHistoryForTarget.previousFlowNodeInstanceId;
                    var tokenHistoryForElement = tokenHistoryGroups[element.id].tokenHistoryEntries[0];
                    var flowNodeInstanceIdOfElement = tokenHistoryForElement.flowNodeInstanceId;
                    var targetOfOutgoingElementIsGateway = targetOfOutgoingElement.type === 'bpmn:ParallelGateway';
                    var sequenceFlowWasExecuted = previousFlowNodeInstanceIdOfTarget === flowNodeInstanceIdOfElement;
                    var outgoingElementWasUsed = sequenceFlowWasExecuted || targetOfOutgoingElementIsGateway;
                    if (outgoingElementWasUsed) {
                        elementsWithOutgoingElements.push(outgoingElementAsShape);
                    }
                    continue;
                }
                elementsWithOutgoingElements.push(outgoingElementAsShape);
            }
            return elementsWithOutgoingElements;
        };
        LiveExecutionTrackerService.prototype.killModeler = function (modeler) {
            modeler.destroy();
        };
        LiveExecutionTrackerService.prototype.getCallActivities = function (elementRegistry) {
            var callActivities = elementRegistry.filter(function (element) {
                return element.type === 'bpmn:CallActivity';
            });
            return callActivities;
        };
        LiveExecutionTrackerService.prototype.importXmlIntoDiagramModeler = function (diagramModeler, xml) {
            return __awaiter(this, void 0, void 0, function () {
                var xmlImportPromise;
                return __generator(this, function (_a) {
                    xmlImportPromise = new Promise(function (resolve, reject) {
                        diagramModeler.importXML(xml, function (importXmlError) {
                            if (importXmlError) {
                                reject(importXmlError);
                                return;
                            }
                            resolve();
                        });
                    });
                    return [2, xmlImportPromise];
                });
            });
        };
        LiveExecutionTrackerService.prototype.exportXmlFromDiagramModeler = function (diagramModeler) {
            return __awaiter(this, void 0, void 0, function () {
                var saveXmlPromise;
                var _this = this;
                return __generator(this, function (_a) {
                    saveXmlPromise = new Promise(function (resolve, reject) {
                        var xmlSaveOptions = {
                            format: true,
                        };
                        diagramModeler.saveXML(xmlSaveOptions, function (saveXmlError, xml) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                if (saveXmlError) {
                                    reject(saveXmlError);
                                    return [2];
                                }
                                resolve(xml);
                                return [2];
                            });
                        }); });
                    });
                    return [2, saveXmlPromise];
                });
            });
        };
        LiveExecutionTrackerService.prototype.colorizeElements = function (modeling, elements, color) {
            var noElementsToColorize = elements === undefined || elements.length === 0;
            if (noElementsToColorize) {
                return;
            }
            try {
                modeling.setColor(elements, {
                    stroke: color.border,
                    fill: color.fill,
                });
            }
            catch (_a) {
                throw new Error('Adding color to some elements failed.');
            }
        };
        return LiveExecutionTrackerService;
    }());
    exports.LiveExecutionTrackerService = LiveExecutionTrackerService;
});


;
define('modules/management-api_client/http-client-proxy',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var HttpClientProxy = (function () {
        function HttpClientProxy(proxiedHttpClient, urlPrefix) {
            this.proxiedHttpClient = proxiedHttpClient;
            this.urlPrefix = urlPrefix;
        }
        HttpClientProxy.prototype.setUrlPrefix = function (newUrlPrefix) {
            this.urlPrefix = newUrlPrefix;
        };
        HttpClientProxy.prototype.get = function (url, options) {
            var prefixedUrl = "" + this.urlPrefix + url;
            return this.proxiedHttpClient.get(prefixedUrl, options);
        };
        HttpClientProxy.prototype.post = function (url, data, options) {
            var prefixedUrl = "" + this.urlPrefix + url;
            return this.proxiedHttpClient.post(prefixedUrl, data, options);
        };
        HttpClientProxy.prototype.put = function (url, data, options) {
            var prefixedUrl = "" + this.urlPrefix + url;
            return this.proxiedHttpClient.put(prefixedUrl, data, options);
        };
        HttpClientProxy.prototype.delete = function (url, options) {
            var prefixedUrl = "" + this.urlPrefix + url;
            return this.proxiedHttpClient.delete(prefixedUrl, options);
        };
        return HttpClientProxy;
    }());
    exports.HttpClientProxy = HttpClientProxy;
});


;
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/management-api_client/index',["require", "exports", "aurelia-event-aggregator", "@process-engine/management_api_client", "../../environment", "./http-client-proxy"], function (require, exports, aurelia_event_aggregator_1, management_api_client_1, environment_1, http_client_proxy_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    function configure(config) {
        return __awaiter(this, void 0, void 0, function () {
            var httpClient, configuredBaseRoute, urlPrefix, proxiedHttpClient, externalAccessor, clientService, socketIsAlreadyInitialized, eventAggregator;
            return __generator(this, function (_a) {
                httpClient = config.container.get('HttpFetchClient');
                configuredBaseRoute = window.localStorage.getItem('InternalProcessEngineRoute');
                urlPrefix = configuredBaseRoute + "/";
                proxiedHttpClient = new http_client_proxy_1.HttpClientProxy(httpClient, urlPrefix);
                externalAccessor = createExternalAccessor(proxiedHttpClient, configuredBaseRoute);
                clientService = createManagementApiClient(externalAccessor);
                socketIsAlreadyInitialized = false;
                eventAggregator = config.container.get(aurelia_event_aggregator_1.EventAggregator);
                eventAggregator.subscribe(environment_1.default.events.configPanel.solutionEntryChanged, function (newSolutionEntry) {
                    proxiedHttpClient.setUrlPrefix(newSolutionEntry.uri + "/");
                    externalAccessor.config = {
                        socketUrl: newSolutionEntry.uri,
                    };
                    if (socketIsAlreadyInitialized) {
                        externalAccessor.disconnectSocket(newSolutionEntry.identity);
                        externalAccessor.initializeSocket(newSolutionEntry.identity);
                    }
                    else {
                        socketIsAlreadyInitialized = true;
                    }
                });
                config.container.registerInstance('ManagementApiClientService', clientService);
                return [2];
            });
        });
    }
    exports.configure = configure;
    function createExternalAccessor(httpClient, socketUrl) {
        var externalAccessor = new management_api_client_1.ExternalAccessor(httpClient);
        externalAccessor.config = {
            socketUrl: socketUrl,
        };
        return externalAccessor;
    }
    function createManagementApiClient(externalAccessor) {
        return new management_api_client_1.ManagementApiClient(externalAccessor);
    }
});


;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/navbar/navbar',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "aurelia-router", "../../contracts/index", "../../environment", "../../services/notification-service/notification.service", "../../services/solution-is-remote-solution-module/solution-is-remote-solution.module", "../../services/is-running-in-electron-module/is-running-in-electron.module"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, aurelia_router_1, index_1, environment_1, notification_service_1, solution_is_remote_solution_module_1, is_running_in_electron_module_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var NavBar = (function () {
        function NavBar(router, eventAggregator, notificationService, solutionService) {
            var _this = this;
            this.solutionExplorerIsActive = true;
            this.showTools = false;
            this.showInspectTools = false;
            this.showExportOnInspectProcessInstance = false;
            this.disableStartButton = true;
            this.validationError = false;
            this.showProcessName = false;
            this.disableDiagramUploadButton = true;
            this.disableHeatmapButton = true;
            this.disableDashboardButton = false;
            this.disableInspectProcessInstanceButton = false;
            this.diagramContainsUnsavedChanges = false;
            this.savingTargetIsRemoteSolution = false;
            this.showLeftMarginInNavbar = false;
            this.inspectView = 'dashboard';
            this.designView = 'detail';
            this.thinkView = 'diagram-list';
            this.navbarTitle = '';
            this.maximizeWindow = function () {
                if (!is_running_in_electron_module_1.isRunningInElectron()) {
                    return undefined;
                }
                var browserWindow = window.nodeRequire('electron').remote.getCurrentWindow();
                var browserWindowIsMaximized = browserWindow.isMaximized();
                if (browserWindowIsMaximized) {
                    return browserWindow.unmaximize();
                }
                return browserWindow.maximize();
            };
            this.closeDiagramOrStudioEventFunction = function () {
                var noDiagramIsActive = _this.activeDiagram === undefined;
                if (noDiagramIsActive) {
                    _this.ipcRenderer.send('close_bpmn-studio');
                }
                if (solution_is_remote_solution_module_1.solutionIsRemoteSolution(_this.activeSolutionEntry.uri)) {
                    _this.router.navigateToRoute('start-page');
                }
                else {
                    _this.eventAggregator.publish(environment_1.default.events.solutionExplorer.closeDiagram);
                }
            };
            this.router = router;
            this.eventAggregator = eventAggregator;
            this.notificationService = notificationService;
            this.solutionService = solutionService;
            if (is_running_in_electron_module_1.isRunningInElectron()) {
                this.ipcRenderer = window.nodeRequire('electron').ipcRenderer;
            }
        }
        NavBar.prototype.attached = function () {
            var _this = this;
            this.solutionExplorerIsActive = window.localStorage.getItem('SolutionExplorerVisibility') === 'true';
            var isMac = this.checkIfCurrentPlatformIsMac();
            if (this.ipcRenderer && isMac) {
                this.ipcRenderer.on('toggle-fullscreen', function (uselessEvent, showFullscreen) {
                    _this.showLeftMarginInNavbar = !showFullscreen;
                });
                this.ipcRenderer.on('menubar__start_close_diagram', this.closeDiagramOrStudioEventFunction);
            }
            var isFullscreen = !window.screenTop && !window.screenY;
            this.showLeftMarginInNavbar = isMac && !isFullscreen;
            this.updateNavbar();
            this.subscriptions = [
                this.eventAggregator.subscribe('router:navigation:success', function () {
                    _this.updateNavbar();
                }),
                this.eventAggregator.subscribe(environment_1.default.events.navBar.validationError, function () {
                    _this.validationError = true;
                }),
                this.eventAggregator.subscribe(environment_1.default.events.navBar.noValidationError, function () {
                    _this.validationError = false;
                }),
                this.eventAggregator.subscribe(environment_1.default.events.differsFromOriginal, function (isDiagramChanged) {
                    _this.diagramContainsUnsavedChanges = isDiagramChanged;
                }),
                this.eventAggregator.subscribe(environment_1.default.events.diagramWasSaved, function (diagramUri) {
                    var activeDiagramWasSaved = diagramUri === _this.activeDiagram.uri;
                    if (!activeDiagramWasSaved) {
                        return;
                    }
                    _this.diagramContainsUnsavedChanges = false;
                }),
                this.eventAggregator.subscribe(environment_1.default.events.navBar.inspectNavigateToDashboard, function () {
                    _this.inspectView = 'dashboard';
                }),
                this.eventAggregator.subscribe(environment_1.default.events.navBar.toggleHeatmapView, function () {
                    _this.disableHeatmapButton = true;
                    _this.disableDashboardButton = false;
                    _this.disableInspectProcessInstanceButton = false;
                }),
                this.eventAggregator.subscribe(environment_1.default.events.navBar.toggleDashboardView, function () {
                    _this.disableHeatmapButton = false;
                    _this.disableDashboardButton = true;
                    _this.disableInspectProcessInstanceButton = false;
                }),
                this.eventAggregator.subscribe(environment_1.default.events.navBar.toggleInspectProcessInstanceView, function () {
                    _this.disableHeatmapButton = false;
                    _this.disableDashboardButton = false;
                    _this.disableInspectProcessInstanceButton = true;
                }),
            ];
        };
        NavBar.prototype.detached = function () {
            this.disposeAllSubscriptions();
            this.ipcRenderer.removeListener('menubar__start_close_diagram', this.closeDiagramOrStudioEventFunction);
        };
        NavBar.prototype.disposeAllSubscriptions = function () {
            this.subscriptions.forEach(function (subscription) {
                subscription.dispose();
            });
        };
        NavBar.prototype.navigateBack = function () {
            this.router.navigateBack();
        };
        NavBar.prototype.navigate = function (navModel) {
            switch (navModel.config.name) {
                case 'think':
                    this.routerNavigate(navModel.config.name, this.thinkView);
                    break;
                case 'design':
                    if (this.activeDiagram === undefined) {
                        this.notificationService.showNotification(index_1.NotificationType.INFO, 'In order to open the designer, you have to select a diagram first!');
                        return;
                    }
                    if (navModel.isActive) {
                        return;
                    }
                    this.routerNavigate(navModel.config.name, this.designView);
                    break;
                case 'inspect':
                    if (navModel.isActive) {
                        return;
                    }
                    this.routerNavigate(navModel.config.name, this.inspectView);
                    break;
                default:
                    break;
            }
        };
        NavBar.prototype.showDashboard = function () {
            this.disableDashboardButton = true;
            this.disableHeatmapButton = false;
            this.disableInspectProcessInstanceButton = false;
            this.inspectView = 'dashboard';
            this.routerNavigate(this.router.currentInstruction.config.name, this.inspectView);
        };
        NavBar.prototype.showHeatmap = function () {
            this.disableHeatmapButton = true;
            this.disableDashboardButton = false;
            this.disableInspectProcessInstanceButton = false;
            this.inspectView = 'heatmap';
            this.routerNavigate(this.router.currentInstruction.config.name, this.inspectView);
        };
        NavBar.prototype.showInspectProcessInstance = function () {
            this.disableHeatmapButton = false;
            this.disableDashboardButton = false;
            this.disableInspectProcessInstanceButton = true;
            this.inspectView = 'inspect-process-instance';
            this.routerNavigate(this.router.currentInstruction.config.name, this.inspectView);
        };
        NavBar.prototype.routerNavigate = function (route, view) {
            this.router.navigateToRoute(route, {
                diagramName: this.activeDiagram ? this.activeDiagram.name : undefined,
                solutionUri: this.activeSolutionEntry ? this.activeSolutionEntry.uri : undefined,
                view: view,
            });
        };
        NavBar.prototype.toggleSolutionExplorer = function () {
            this.solutionExplorerIsActive = !this.solutionExplorerIsActive;
            this.eventAggregator.publish(environment_1.default.events.solutionExplorerPanel.toggleSolutionExplorer, this.solutionExplorerIsActive);
        };
        NavBar.prototype.saveDiagram = function () {
            if (this.validationError || this.savingTargetIsRemoteSolution) {
                return;
            }
            this.eventAggregator.publish(environment_1.default.events.diagramDetail.saveDiagram);
        };
        NavBar.prototype.printDiagram = function () {
            this.eventAggregator.publish(environment_1.default.events.diagramDetail.printDiagram);
        };
        NavBar.prototype.exportDiagram = function (exportAs) {
            var eventToPublish = this.showExportOnInspectProcessInstance
                ? environment_1.default.events.inspect.exportDiagramAs
                : environment_1.default.events.diagramDetail.exportDiagramAs;
            this.eventAggregator.publish(eventToPublish + ":" + exportAs);
        };
        NavBar.prototype.startProcess = function () {
            if (this.validationError || this.disableStartButton) {
                return;
            }
            this.eventAggregator.publish(environment_1.default.events.diagramDetail.startProcess);
        };
        NavBar.prototype.startProcessWithOptions = function () {
            if (this.validationError || this.disableStartButton) {
                return;
            }
            this.eventAggregator.publish(environment_1.default.events.diagramDetail.startProcessWithOptions);
        };
        NavBar.prototype.uploadProcess = function () {
            if (this.validationError || this.disableDiagramUploadButton) {
                return;
            }
            this.eventAggregator.publish(environment_1.default.events.diagramDetail.uploadProcess);
        };
        Object.defineProperty(NavBar.prototype, "diagramUploadButtonTitle", {
            get: function () {
                if (this.disableDiagramUploadButton) {
                    return 'This process is already deployed to the remote ProcessEngine.';
                }
                return 'Deploy to ProcessEngine';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavBar.prototype, "startButtonTitle", {
            get: function () {
                if (this.disableStartButton) {
                    return 'Please deploy the process to a ProcessEngine before starting it.';
                }
                return 'Start Process';
            },
            enumerable: true,
            configurable: true
        });
        NavBar.prototype.updateNavbarTitle = function () {
            var noActiveDiagram = this.router.currentInstruction.params.diagramName === undefined;
            if (noActiveDiagram) {
                this.showProcessName = false;
                this.navbarTitle = '';
                return;
            }
            var activeSolutionIsRemoteSolution = solution_is_remote_solution_module_1.solutionIsRemoteSolution(this.activeSolutionEntry.uri);
            this.showProcessName = this.activeDiagram.name !== undefined;
            this.navbarTitle = activeSolutionIsRemoteSolution ? this.activeDiagram.id : this.activeDiagram.name;
            this.savingTargetIsRemoteSolution = activeSolutionIsRemoteSolution;
        };
        NavBar.prototype.updateNavbarTools = function () {
            var activeRoute = this.router.currentInstruction.config.name;
            var activeSolutionIsRemoteSolution = solution_is_remote_solution_module_1.solutionIsRemoteSolution(this.activeSolutionEntry.uri) && this.activeDiagram !== undefined;
            var activeRouteIsDiagramDetail = activeRoute === 'design';
            var activeRouteIsInspect = activeRoute === 'inspect';
            var activeRouteIsLET = activeRoute === 'live-execution-tracker';
            this.disableStartButton = !activeSolutionIsRemoteSolution;
            this.disableDiagramUploadButton = activeSolutionIsRemoteSolution;
            if (activeRouteIsDiagramDetail) {
                this.showInspectTools = false;
                this.showExportOnInspectProcessInstance = false;
                this.showTools = true;
            }
            else if (activeRouteIsInspect) {
                var inspectView = this.router.currentInstruction.params.view;
                var inspectViewIsDashboard = inspectView === 'dashboard';
                var inspectViewIsHeatmap = inspectView === 'heatmap';
                var inspectViewIsInspectProcessInstance = inspectView === 'inspect-process-instance';
                this.showInspectTools = true;
                this.disableDashboardButton = inspectViewIsDashboard;
                this.disableHeatmapButton = inspectViewIsHeatmap;
                this.disableInspectProcessInstanceButton = inspectViewIsInspectProcessInstance;
                this.showExportOnInspectProcessInstance = inspectViewIsInspectProcessInstance || false;
                this.showTools = false;
            }
            else if (activeRouteIsLET) {
                this.showTools = false;
                this.showInspectTools = false;
                this.showExportOnInspectProcessInstance = false;
            }
            else {
                this.showInspectTools = false;
                this.showTools = false;
                this.showExportOnInspectProcessInstance = false;
            }
        };
        NavBar.prototype.updateNavbar = function () {
            return __awaiter(this, void 0, void 0, function () {
                var solutionUriFromNavigation, noSolutionUriSpecified, solutionUri, activeSolutionIsUndefined, solutionIsSet, diagramName, diagramIsSet, activeSolutionIsOpenDiagramSolution, persistedDiagrams, _a, diagramNotFound, routeNameIsStartPage;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            solutionUriFromNavigation = this.router.currentInstruction.queryParams.solutionUri;
                            noSolutionUriSpecified = solutionUriFromNavigation === undefined;
                            solutionUri = noSolutionUriSpecified
                                ? window.localStorage.getItem('InternalProcessEngineRoute')
                                : solutionUriFromNavigation;
                            if (this.router.currentInstruction.config.name !== 'preferences') {
                                this.activeSolutionEntry = this.solutionService.getSolutionEntryForUri(solutionUri);
                            }
                            activeSolutionIsUndefined = this.activeSolutionEntry === undefined;
                            if (activeSolutionIsUndefined) {
                                return [2];
                            }
                            this.savingTargetIsRemoteSolution = solution_is_remote_solution_module_1.solutionIsRemoteSolution(this.activeSolutionEntry.uri);
                            solutionIsSet = this.activeSolutionEntry !== undefined;
                            diagramName = this.router.currentInstruction.params.diagramName;
                            diagramIsSet = diagramName !== undefined;
                            if (!(solutionIsSet && diagramIsSet)) return [3, 4];
                            activeSolutionIsOpenDiagramSolution = solutionUri === 'about:open-diagrams';
                            if (!activeSolutionIsOpenDiagramSolution) return [3, 1];
                            persistedDiagrams = this.solutionService.getOpenDiagrams();
                            this.activeDiagram = persistedDiagrams.find(function (diagram) {
                                return diagram.name === diagramName;
                            });
                            return [3, 3];
                        case 1:
                            _a = this;
                            return [4, this.activeSolutionEntry.service.loadDiagram(this.router.currentInstruction.params.diagramName)];
                        case 2:
                            _a.activeDiagram = _b.sent();
                            _b.label = 3;
                        case 3:
                            diagramNotFound = this.activeDiagram === undefined;
                            if (diagramNotFound) {
                                return [2];
                            }
                            this.updateNavbarTitle();
                            _b.label = 4;
                        case 4:
                            this.updateNavbarTools();
                            routeNameIsStartPage = this.router.currentInstruction.config.name === 'start-page';
                            if (routeNameIsStartPage) {
                                this.resetNavbar();
                            }
                            return [2];
                    }
                });
            });
        };
        NavBar.prototype.resetNavbar = function () {
            this.activeDiagram = undefined;
            this.activeSolutionEntry = undefined;
            this.navbarTitle = '';
            this.showProcessName = false;
        };
        NavBar.prototype.checkIfCurrentPlatformIsMac = function () {
            var macRegex = /.*mac*./i;
            var currentPlatform = navigator.platform;
            var currentPlatformIsMac = macRegex.test(currentPlatform);
            return currentPlatformIsMac && is_running_in_electron_module_1.isRunningInElectron();
        };
        NavBar = __decorate([
            aurelia_framework_1.inject(aurelia_router_1.Router, aurelia_event_aggregator_1.EventAggregator, 'NotificationService', 'SolutionService'),
            __metadata("design:paramtypes", [aurelia_router_1.Router,
                aurelia_event_aggregator_1.EventAggregator,
                notification_service_1.NotificationService, Object])
        ], NavBar);
        return NavBar;
    }());
    exports.NavBar = NavBar;
});


;
define('text!modules/navbar/navbar.css',[],function(){return ".bpmn-studio-navbar {\n  display: flex;\n  height: 42px;\n  background-color: #f7f7f7;\n  border-bottom: 2px solid #dcdbdb;\n  user-select: none; }\n\n.bpmn-studio-navbar--left-margin {\n  -webkit-app-region: drag; }\n\na,\nbutton {\n  -webkit-app-region: no-drag; }\n\n.bpmn-studio-navbar--left-margin .menu-bar__menu--left::before {\n  padding-left: 80px;\n  content: \"\"; }\n\n.menu-bar__menu--left {\n  display: flex;\n  flex: 2;\n  justify-content: flex-start;\n  align-items: stretch;\n  text-align: center;\n  min-width: 308px; }\n\n.menu-bar__menu--center {\n  display: flex;\n  flex: 1 100%;\n  align-items: center;\n  overflow: hidden; }\n\n.menu-bar__menu--right {\n  display: flex;\n  flex: 2;\n  justify-content: flex-end;\n  align-items: center;\n  text-align: right;\n  padding-right: 80px;\n  min-width: 308px; }\n\n.menu__menu-tabbed-link {\n  display: flex;\n  padding: 0 8px;\n  align-items: stretch;\n  font-weight: bold;\n  text-decoration: none; }\n\n.menu__menu-tabbed-link--active {\n  border-bottom: 2px solid #5e5e5e; }\n\n.menu__menu-tabbed-link--active .menu-tabbed-link {\n  color: inherit;\n  text-decoration: none; }\n\n.menu-tabbed-link {\n  display: block;\n  text-decoration: none;\n  line-height: 40px; }\n\n.menu-tabbed-link:hover {\n  text-decoration: inherit;\n  -webkit-user-drag: none;\n  color: inherit; }\n\n.action-button {\n  background: inherit;\n  border: none; }\n\n.menu-bar__dashboard-dropdown {\n  top: 40px;\n  padding: 0;\n  background-color: #f7f7f7;\n  border-top: none;\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n  box-shadow: none; }\n\n.menu-bar__menu-center--action-button {\n  background-color: inherit;\n  border: none; }\n\n.process-details-dropdown-menu {\n  user-select: text; }\n\n.menu__element {\n  margin: 0 10px;\n  color: #5c5c5c;\n  white-space: nowrap; }\n\n.menu__element--title {\n  display: flex;\n  width: 100%;\n  margin: 0 0 1px 0;\n  justify-content: center; }\n\n.menu-bar__menu-center--back-button {\n  margin-right: 20px;\n  margin-left: 20px; }\n\n.menu__origin-icon {\n  padding-top: 2px;\n  float: left; }\n\n.solution-explorer {\n  color: #5c5c5c; }\n\n.process-details-title {\n  float: left;\n  max-width: 100%;\n  margin-left: 5px;\n  overflow: hidden;\n  text-overflow: ellipsis; }\n\n.edited-label {\n  margin-left: 4px;\n  opacity: 0.7; }\n\n.start-options__icon {\n  font-size: 12px; }\n\n.dropdown__start-button {\n  padding: 0; }\n\n.export_button-inspect_correlation {\n  margin-right: 10px; }\n";});;
define('text!modules/navbar/navbar.html',[],function(){return "<template>\n  <require from=\"./navbar.css\"></require>\n  <div class=\"bpmn-studio-navbar\" class.bind=\"showLeftMarginInNavbar ? 'bpmn-studio-navbar--left-margin' : ''\" ref=\"navbarContainer\" dblclick.trigger=\"maximizeWindow()\">\n    <div class=\"menu-bar__menu--left\" id=\"navBarLeft\">\n      <div class=\"menu__menu-tabbed-link\">\n        <button class=\"button menu-tabbed-link action-button\" class.bind=\"solutionExplorerIsActive ? 'button--active' : ''\" click.delegate=\"toggleSolutionExplorer($event)\" dblclick.trigger=\"$event.stopPropagation()\" title=\"Toggle visibility of the Solution Explorer\" data-test-toggle-solution-explorer>\n          <i class=\"fas fa-project-diagram\"></i>\n        </button>\n      </div>\n      <div repeat.for=\"nav of router.navigation\" class=\"button menu__menu-tabbed-link\" class.bind=\"nav.isActive ? 'button--active menu__menu-tabbed-link--active' : ''\">\n        <a class=\"menu-tabbed-link\" click.delegate=\"navigate(nav)\" dblclick.trigger=\"$event.stopPropagation()\" data-test-navbar=\"${nav.title}\">${nav.title}</a>\n      </div>\n    </div>\n    <div class=\"menu-bar__menu--center\">\n      <div class=\"menu__element menu__element--title btn-group\" if.bind=\"showProcessName\" ref=\"diagramInfo\">\n        <span if.bind=\"savingTargetIsRemoteSolution\" class=\"fas menu__origin-icon fa-database\" data-test-navbar-icon-remote-solution></span>\n        <span else class=\"fas menu__origin-icon fa-folder\" data-test-navbar-icon-local-solution></span>\n        <span class=\"process-details-title\" title.bind=\"navbarTitle\" data-test-navbar-title>${navbarTitle}</span>\n        <span if.bind=\"diagramContainsUnsavedChanges\" class=\"edited-label\" data-test-edited-label>- edited</span>\n      </div>\n    </div>\n    <div class=\"menu-bar__menu--right\">\n      <template if.bind=\"showTools\">\n        <button class=\"button menu-bar__menu-center--action-button menu-bar__menu-center--back-button back-button\" click.delegate=\"navigateBack()\" dblclick.trigger=\"$event.stopPropagation()\" title=\"Navigate back\">\n          <i class=\"fas fa-arrow-circle-left\"></i>\n        </button>\n        <button if.bind=\"!savingTargetIsRemoteSolution\" class=\"button menu-bar__menu-center--action-button\" class.bind=\"validationError ? 'button--disabled' : ''\" dblclick.trigger=\"$event.stopPropagation()\" click.delegate=\"saveDiagram()\" disabled.bind=\"validationError\" title=\"Save Diagram\">\n          <i class=\"fas fa-save\"></i>\n        </button>\n      </template>\n      <template if.bind=\"showTools || showExportOnInspectProcessInstance\">\n        <div class=\"dropdown\">\n          <button class=\"button menu-bar__menu-center--action-button dropdown-toggle\"\n                  class.bind=\"showExportOnInspectProcessInstance ? 'export_button-inspect_correlation' : ''\"\n                  title=\"Export Diagram\"\n                  dblclick.trigger=\"$event.stopPropagation()\"\n                  data-toggle=\"dropdown\"\n                  aria-haspopup=\"true\"\n                  aria-expanded=\"false\">\n            <i class=\"fas fa-upload\"></i>\n          </button>\n          <ul class=\"dropdown-menu\">\n            <li class=\"dropdown-item\" click.delegate=\"exportDiagram('BPMN')\">as BPMN</li>\n            <li class=\"dropdown-item\" click.delegate=\"exportDiagram('SVG')\">as SVG</li>\n            <li class=\"dropdown-item\" click.delegate=\"exportDiagram('PNG')\">as PNG</li>\n            <li class=\"dropdown-item\" click.delegate=\"exportDiagram('JPEG')\">as JPEG</li>\n          </ul>\n        </div>\n      </template>\n      <template if.bind=\"showTools\">\n        <button class=\"button menu-bar__menu-center--action-button\"  click.delegate=\"printDiagram()\" dblclick.trigger=\"$event.stopPropagation()\" title=\"Print Diagram\">\n          <i class=\"fas fa-print\"></i>\n        </button>\n        <button class=\"button menu-bar__menu-center--action-button\" class.bind=\"validationError || disableDiagramUploadButton ? 'button--disabled' : ''\" click.delegate=\"uploadProcess()\" dblclick.trigger=\"$event.stopPropagation()\" title.bind=\"diagramUploadButtonTitle\" data-test-deploy-diagram-button>\n          <i class=\"fas fa-dolly-flatbed\"></i>\n        </button>\n        <div class=\"btn-group\">\n          <button class=\"button menu-bar__menu-center--action-button\" class.bind=\"validationError || disableStartButton ? 'button--disabled' : ''\" click.delegate=\"startProcess()\" dblclick.trigger=\"$event.stopPropagation()\" disabled.bind=\"validationError || disableStartButton\" title.bind=\"startButtonTitle\" data-test-start-diagram-button>\n            <i class=\"fas fa-play\"></i>\n          </button>\n          <button type=\"button\" class=\"button menu-bar__menu-center--action-button dropdown-toggle dropdown-toggle-split dropdown__start-button\" class.bind=\"validationError || disableStartButton ? 'button--disabled' : ''\" dblclick.trigger=\"$event.stopPropagation()\" disabled.bind=\"validationError || disableStartButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n            <i class=\"fas fa-angle-down start-options__icon\"></i>\n          </button>\n          <div class=\"dropdown-menu\">\n            <li class=\"dropdown-item\" click.delegate=\"startProcessWithOptions()\">Custom Start</li>\n          </div>\n        </div>\n      </template>\n      <template if.bind=\"showInspectTools\">\n        <button class=\"button menu-bar__menu-center--action-button\" class.bind=\"disableInspectProcessInstanceButton ? 'button--active' : ''\" click.delegate=\"showInspectProcessInstance()\" dblclick.trigger=\"$event.stopPropagation()\" disabled.bind=\"disableInspectProcessInstanceButton\" title.bind=\"disableInspectProcessInstanceButton ? 'You are on the inspect process instance view' : 'Show Inspect Process Instance'\">\n          <i class=\"fas fa-search\"></i>\n        </button>\n        <button class=\"button menu-bar__menu-center--action-button\" class.bind=\"disableDashboardButton ? 'button--active' : ''\" click.delegate=\"showDashboard()\" dblclick.trigger=\"$event.stopPropagation()\" disabled.bind=\"disableDashboardButton\" title.bind=\"disableDashboardButton ? 'You are on the dashboard' : 'Show Dashboard'\">\n          <i class=\"fas fa-chalkboard\"></i>\n        </button>\n        <button class=\"button menu-bar__menu-center--action-button\" class.bind=\"disableHeatmapButton ? 'button--active' : ''\" click.delegate=\"showHeatmap()\" dblclick.trigger=\"$event.stopPropagation()\" disabled.bind=\"disableHeatmapButton\" title.bind=\"disableHeatmapButton ? 'You are on the heatmap view' : 'Show Heatmap'\">\n          <i class=\"fas fa-chart-line\"></i>\n        </button>\n      </template>\n    </div>\n  </div>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
define('modules/pagination/pagination',["require", "exports", "aurelia-framework", "aurelia-templating-resources"], function (require, exports, aurelia_framework_1, aurelia_templating_resources_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Pagination = (function () {
        function Pagination(signaler) {
            this.perPage = 0;
            this.items = 0;
            this.maxPagesToDisplay = -1;
            this.currentPage = 1;
            this.isLoading = false;
            this.previousPage = 0;
            this.pageStartValue = 1;
            this.signaler = signaler;
        }
        Pagination.prototype.isLoadingChanged = function () {
            if (!this.contentIsAsync) {
                return;
            }
            this.signaler.signal('update-page-class');
        };
        Pagination.prototype.currentPageChanged = function (currentPage, previousPage) {
            var currentPageDoesNotGetDisplayed = this.currentPage < this.pageStartValue || this.currentPage > this.pageStartValue + this.maxPagesToDisplay - 1;
            if (currentPageDoesNotGetDisplayed) {
                var pageIndex = this.currentPage % this.maxPagesToDisplay;
                this.pageStartValue = this.currentPage - pageIndex + 1;
            }
            if (this.contentIsAsync) {
                if (!this.isLoading) {
                    this.previousPage = previousPage;
                }
                this.isLoading = true;
            }
            this.signaler.signal('update-page-class');
        };
        Pagination.prototype.setCurrentPage = function (page) {
            this.currentPage = page;
        };
        Pagination.prototype.showPreviousPage = function () {
            if (this.currentPageIsFirstPage) {
                return;
            }
            this.currentPage--;
            if (this.currentPage < this.pageStartValue) {
                this.showPagesBeforeCurrentLimit();
            }
        };
        Pagination.prototype.showNextPage = function () {
            if (this.currentPageIsLastPage) {
                return;
            }
            this.currentPage++;
            if (this.currentPage > this.pageStartValue + this.maxPagesToDisplay - 1) {
                this.showPagesAfterCurrentLimit();
            }
        };
        Pagination.prototype.showFirstPage = function () {
            this.currentPage = 1;
            this.pageStartValue = 1;
        };
        Pagination.prototype.showLastPage = function () {
            this.currentPage = this.amountOfPages;
            var amountOfPagesToDisplayWhenShowingLastPage = (this.amountOfPages % this.maxPagesToDisplay) - 1;
            this.pageStartValue = this.amountOfPages - amountOfPagesToDisplayWhenShowingLastPage;
        };
        Pagination.prototype.showPagesBeforeCurrentLimit = function () {
            this.pageStartValue -= this.maxPagesToDisplay;
            this.currentPage = this.pageStartValue + this.maxPagesToDisplay - 1;
        };
        Pagination.prototype.showPagesAfterCurrentLimit = function () {
            this.pageStartValue += this.maxPagesToDisplay;
            this.currentPage = this.pageStartValue;
        };
        Pagination.prototype.getClassForPageIndex = function (pageIndex) {
            var pageNumber = pageIndex + this.pageStartValue;
            var isCurrentPage = this.currentPage === pageNumber;
            if (isCurrentPage) {
                return this.isLoading ? 'pagination-button--loading' : 'active';
            }
            var isPreviousPage = this.previousPage === pageNumber;
            if (isPreviousPage) {
                return this.isLoading ? 'active' : '';
            }
            return '';
        };
        Object.defineProperty(Pagination.prototype, "amountOfPages", {
            get: function () {
                return Math.ceil(this.items / this.perPage);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Pagination.prototype, "showLimitedAmountOfPages", {
            get: function () {
                return this.maxPagesToDisplay > 0 && this.amountOfPages > this.maxPagesToDisplay;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Pagination.prototype, "firstPagesGetDisplayed", {
            get: function () {
                return this.pageStartValue === 1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Pagination.prototype, "lastPagesGetDisplayed", {
            get: function () {
                return this.pageStartValue + this.maxPagesToDisplay > this.amountOfPages;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Pagination.prototype, "amountOfPagesToDisplay", {
            get: function () {
                if (this.showLimitedAmountOfPages) {
                    var lessPagesThanMaxPagesToDisplayAvailable = this.pageStartValue + this.maxPagesToDisplay > this.amountOfPages;
                    if (lessPagesThanMaxPagesToDisplayAvailable) {
                        return this.amountOfPages - this.pageStartValue + 1;
                    }
                    return this.maxPagesToDisplay;
                }
                return this.amountOfPages;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Pagination.prototype, "currentPageIsLastPage", {
            get: function () {
                return this.currentPage === this.amountOfPages;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Pagination.prototype, "currentPageIsFirstPage", {
            get: function () {
                return this.currentPage === 1;
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Number)
        ], Pagination.prototype, "perPage", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Number)
        ], Pagination.prototype, "items", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Number)
        ], Pagination.prototype, "maxPagesToDisplay", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Number)
        ], Pagination.prototype, "currentPage", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Boolean)
        ], Pagination.prototype, "contentIsAsync", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Boolean)
        ], Pagination.prototype, "isLoading", void 0);
        __decorate([
            aurelia_framework_1.computedFrom('items', 'perPage'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [])
        ], Pagination.prototype, "amountOfPages", null);
        __decorate([
            aurelia_framework_1.computedFrom('amountOfPages', 'maxPagesToDisplay'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [])
        ], Pagination.prototype, "showLimitedAmountOfPages", null);
        __decorate([
            aurelia_framework_1.computedFrom('pageStartValue'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [])
        ], Pagination.prototype, "firstPagesGetDisplayed", null);
        __decorate([
            aurelia_framework_1.computedFrom('pageStartValue', 'maxPagesToDisplay', 'amountOfPages'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [])
        ], Pagination.prototype, "lastPagesGetDisplayed", null);
        __decorate([
            aurelia_framework_1.computedFrom('maxPagesToDisplay', 'pageStartValue', 'amountOfPages'),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [])
        ], Pagination.prototype, "amountOfPagesToDisplay", null);
        __decorate([
            aurelia_framework_1.computedFrom('currentPage', 'amountOfPages'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [])
        ], Pagination.prototype, "currentPageIsLastPage", null);
        __decorate([
            aurelia_framework_1.computedFrom('currentPage'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [])
        ], Pagination.prototype, "currentPageIsFirstPage", null);
        Pagination = __decorate([
            aurelia_framework_1.inject(aurelia_templating_resources_1.BindingSignaler),
            __metadata("design:paramtypes", [aurelia_templating_resources_1.BindingSignaler])
        ], Pagination);
        return Pagination;
    }());
    exports.Pagination = Pagination;
});


;
define('text!modules/pagination/pagination.css',[],function(){return ".bpmn-studio-pagination {\n  user-select: none; }\n\n.pagination-button--disabled {\n  opacity: 0.7; }\n\n.pagination-button--loading {\n  opacity: 0.4; }\n";});;
define('text!modules/pagination/pagination.html',[],function(){return "<template>\n  <require from=\"./pagination.css\"></require>\n\n  <nav class=\"bpmn-studio-pagination\">\n    <ul class=\"pagination\">\n      <li class=\"page-item\" class.bind=\"currentPageIsFirstPage ? 'pagination-button--disabled' : ''\" click.delegate=\"showFirstPage()\"><a class=\"page-link\">First</a></li>\n      <li class=\"page-item\" class.bind=\"currentPageIsFirstPage ? 'pagination-button--disabled' : ''\" click.delegate=\"showPreviousPage()\"><a class=\"page-link\"><</a></li>\n      <li if.bind=\"pageStartValue > 1\" class=\"page-item\" click.delegate=\"showPagesBeforeCurrentLimit()\"><a class=\"page-link\">...</a></li>\n      <li repeat.for=\"pageIndex of amountOfPagesToDisplay\" class=\"page-item\" class.bind=\"getClassForPageIndex(pageIndex) & signal:'update-page-class'\" click.delegate=\"setCurrentPage(pageIndex + pageStartValue)\"><a class=\"page-link\">${pageIndex + pageStartValue}</a></li>\n      <li if.bind=\"showLimitedAmountOfPages && !lastPagesGetDisplayed\" class=\"page-item\" click.delegate=\"showPagesAfterCurrentLimit()\"><a class=\"page-link\">...</a></li>\n      <li class=\"page-item\" class.bind=\"currentPageIsLastPage ? 'pagination-button--disabled' : ''\" class=\"page-item\" click.delegate=\"showNextPage()\"><a class=\"page-link\">></a></li>\n      <li class=\"page-item\" class.bind=\"currentPageIsLastPage ? 'pagination-button--disabled' : ''\" class=\"page-item\" click.delegate=\"showLastPage()\"><a class=\"page-link\">Last</a></li>\n    </ul>\n  </nav>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
define('modules/signin-popup-redirect/signin-popup-redirect',["require", "exports", "aurelia-framework", "aurelia-open-id-connect"], function (require, exports, aurelia_framework_1, aurelia_open_id_connect_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PopupRedirect = (function () {
        function PopupRedirect(openIdConnect) {
            this.openIdConnect = openIdConnect;
        }
        PopupRedirect.prototype.activate = function () {
            this.openIdConnect.userManager.signinPopupCallback(window.location.href);
        };
        PopupRedirect = __decorate([
            aurelia_framework_1.inject(aurelia_open_id_connect_1.OpenIdConnect),
            __metadata("design:paramtypes", [aurelia_open_id_connect_1.OpenIdConnect])
        ], PopupRedirect);
        return PopupRedirect;
    }());
    exports.PopupRedirect = PopupRedirect;
});


;
define('text!modules/signin-popup-redirect/signin-popup-redirect.css',[],function(){return "";});;
define('text!modules/signin-popup-redirect/signin-popup-redirect.html',[],function(){return "<template>\n\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
define('modules/signout-popup-redirect/signout-popup-redirect',["require", "exports", "aurelia-framework", "aurelia-open-id-connect"], function (require, exports, aurelia_framework_1, aurelia_open_id_connect_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PopupRedirect = (function () {
        function PopupRedirect(openIdConnect) {
            this.openIdConnect = openIdConnect;
        }
        PopupRedirect.prototype.activate = function () {
            this.openIdConnect.userManager.signoutPopupCallback(window.location.href, false);
        };
        PopupRedirect = __decorate([
            aurelia_framework_1.inject(aurelia_open_id_connect_1.OpenIdConnect),
            __metadata("design:paramtypes", [aurelia_open_id_connect_1.OpenIdConnect])
        ], PopupRedirect);
        return PopupRedirect;
    }());
    exports.PopupRedirect = PopupRedirect;
});


;
define('text!modules/signout-popup-redirect/signout-popup-redirect.css',[],function(){return "";});;
define('text!modules/signout-popup-redirect/signout-popup-redirect.html',[],function(){return "<template>\n\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/solution-explorer/solution-explorer-list/solution-explorer-list',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "aurelia-router", "semver", "../../../contracts/index", "../../../services/solution-explorer-services/open-diagrams-solution-explorer.service", "../../../services/solution-explorer-services/solution-explorer-service-factory", "../../../services/expose-functionality-module/expose-functionality.module", "../../fetch-http-client/http-fetch-client", "../../../services/solution-is-remote-solution-module/solution-is-remote-solution.module", "../../../services/is-running-in-electron-module/is-running-in-electron.module", "../../../environment"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, aurelia_router_1, semver_1, index_1, open_diagrams_solution_explorer_service_1, solution_explorer_service_factory_1, expose_functionality_module_1, http_fetch_client_1, solution_is_remote_solution_module_1, is_running_in_electron_module_1, environment_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var SolutionExplorerList = (function () {
        function SolutionExplorerList(router, eventAggregator, solutionExplorerServiceFactory, authenticationService, solutionService, openDiagramService, httpFetchClient) {
            var _this = this;
            this.processEngineIsNewerModal = false;
            this.processEngineIsOlderModal = false;
            this.checkIfSolutionIsRemoteSolution = solution_is_remote_solution_module_1.solutionIsRemoteSolution;
            this.solutionEntryViewModels = {};
            this.openedSolutions = [];
            this.solutionsToOpen = [];
            this.solutionsWhoseOpeningShouldGetAborted = [];
            this.shouldDisplaySolution = function (entry) {
                var service = entry.service;
                var isOpenDiagramService = service.getOpenedDiagrams !== undefined;
                if (isOpenDiagramService) {
                    var openDiagramService = service;
                    var someDiagramsAreOpened = openDiagramService.getOpenedDiagrams().length > 0;
                    var isCreatingDiagram = _this.openDiagramService.isCreatingDiagram;
                    return someDiagramsAreOpened || isCreatingDiagram;
                }
                return true;
            };
            this.router = router;
            this.eventAggregator = eventAggregator;
            this.solutionExplorerServiceFactory = solutionExplorerServiceFactory;
            this.authenticationService = authenticationService;
            this.solutionService = solutionService;
            this.openDiagramService = openDiagramService;
            this.httpFetchClient = httpFetchClient;
            var canReadFromFileSystem = is_running_in_electron_module_1.isRunningInElectron();
            if (canReadFromFileSystem) {
                this.createOpenDiagramServiceEntry();
            }
            expose_functionality_module_1.exposeFunctionForTesting('openSolution', function (uri, insertAtBeginning, identity) {
                _this.openSolution(uri, insertAtBeginning, identity);
            });
            this.loginFunction = function (solutionEntry) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.login(solutionEntry)];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            }); };
            this.internalSolutionUri = window.localStorage.getItem('InternalProcessEngineRoute');
            this.internalProcessEngineVersion = window.localStorage.getItem('InternalProcessEngineVersion');
        }
        SolutionExplorerList.prototype.refreshSolutions = function () {
            return __awaiter(this, void 0, void 0, function () {
                var refreshPromises;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            refreshPromises = Object.values(this.solutionEntryViewModels)
                                .filter(function (viewModel) {
                                var viewModelExists = viewModel !== undefined && viewModel !== null;
                                return viewModelExists;
                            })
                                .map(function (viewModel) {
                                return viewModel.updateSolution();
                            });
                            return [4, Promise.all(refreshPromises)];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        SolutionExplorerList.prototype.toggleSolution = function (solutionEntry) {
            solutionEntry.hidden = !solutionEntry.hidden;
            this.solutionService.persistSolutionsInLocalStorage();
        };
        SolutionExplorerList.prototype.solutionIsInternalSolution = function (solution) {
            var solutionIsInternalSolution = solution.uri === this.internalSolutionUri;
            return solutionIsInternalSolution;
        };
        SolutionExplorerList.prototype.openSettings = function () {
            this.router.navigateToRoute('settings');
        };
        SolutionExplorerList.prototype.openDiagram = function (uri) {
            return __awaiter(this, void 0, void 0, function () {
                var identity, diagram;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            identity = this.createIdentityForSolutionExplorer();
                            return [4, this.openDiagramService.openDiagram(uri, identity)];
                        case 1:
                            diagram = _a.sent();
                            return [2, diagram];
                    }
                });
            });
        };
        SolutionExplorerList.prototype.getOpenedDiagramByURI = function (uri) {
            return this.openDiagramService.getOpenedDiagramByURI(uri);
        };
        SolutionExplorerList.prototype.getOpenDiagramSolutionEntry = function () {
            return this.openedSolutions.find(function (entry) {
                return entry.uri === 'about:open-diagrams';
            });
        };
        SolutionExplorerList.prototype.isProcessEngineNewerThanInternal = function (solutionEntry) {
            if (this.internalProcessEngineVersion === 'null') {
                return false;
            }
            var internalPEVersion = new semver_1.SemVer(this.internalProcessEngineVersion);
            var solutionEntryPEVersion = new semver_1.SemVer(solutionEntry.processEngineVersion);
            return internalPEVersion.major < solutionEntryPEVersion.major;
        };
        SolutionExplorerList.prototype.isProcessEngineOlderThanInternal = function (solutionEntry) {
            if (this.internalProcessEngineVersion === 'null') {
                return false;
            }
            var internalPEVersion = new semver_1.SemVer(this.internalProcessEngineVersion);
            var solutionEntryPEVersion = new semver_1.SemVer(solutionEntry.processEngineVersion);
            return internalPEVersion.major > solutionEntryPEVersion.major;
        };
        SolutionExplorerList.prototype.showNewerModal = function (event) {
            event.preventDefault();
            event.stopPropagation();
            this.processEngineIsNewerModal = true;
        };
        SolutionExplorerList.prototype.showOlderModal = function (event) {
            event.preventDefault();
            event.stopPropagation();
            this.processEngineIsOlderModal = true;
        };
        SolutionExplorerList.prototype.cancelOpeningSolution = function (solutionUri) {
            if (this.solutionsToOpen.includes(solutionUri)) {
                this.solutionsWhoseOpeningShouldGetAborted.push(solutionUri);
            }
        };
        SolutionExplorerList.prototype.openSolution = function (uri, insertAtBeginning, identity) {
            if (insertAtBeginning === void 0) { insertAtBeginning = false; }
            return __awaiter(this, void 0, void 0, function () {
                var uriIsRemote, solutionExplorer, identityIsSet, identityToUse, processEngineVersion, uriIsNotInternalProcessEngine, response, isResponseFromProcessEngine, uriIsInternalProcessEngine, error_1, errorIsNoProcessEngine, openSolutionFailedWithFailedToFetch, solutionURI, arrayAlreadyContainedURI;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.solutionsToOpen.push(uri);
                            uriIsRemote = solution_is_remote_solution_module_1.solutionIsRemoteSolution(uri);
                            if (!uriIsRemote) return [3, 2];
                            return [4, this.solutionExplorerServiceFactory.newManagementApiSolutionExplorer()];
                        case 1:
                            solutionExplorer = _a.sent();
                            return [3, 4];
                        case 2: return [4, this.solutionExplorerServiceFactory.newFileSystemSolutionExplorer()];
                        case 3:
                            solutionExplorer = _a.sent();
                            _a.label = 4;
                        case 4:
                            identityIsSet = identity !== undefined && identity !== null;
                            identityToUse = identityIsSet ? identity : this.createIdentityForSolutionExplorer();
                            uriIsNotInternalProcessEngine = this.internalSolutionUri !== uri;
                            _a.label = 5;
                        case 5:
                            _a.trys.push([5, 9, , 10]);
                            if (!(uriIsRemote && uriIsNotInternalProcessEngine)) return [3, 7];
                            return [4, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                                    var timeout, fetchResponse, error_2, errorIsNotFoundError, fetchResponse, error_3;
                                    var _this = this;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                timeout = setTimeout(function () {
                                                    if (_this.solutionsWhoseOpeningShouldGetAborted.includes(uri)) {
                                                        _this.openingSolutionWasCanceled(uri);
                                                        return;
                                                    }
                                                    reject(new Error('Server did not respond.'));
                                                }, 3000);
                                                _a.label = 1;
                                            case 1:
                                                _a.trys.push([1, 9, , 10]);
                                                _a.label = 2;
                                            case 2:
                                                _a.trys.push([2, 4, , 8]);
                                                return [4, this.httpFetchClient.get(uri + "/process_engine")];
                                            case 3:
                                                fetchResponse = _a.sent();
                                                resolve(fetchResponse);
                                                return [3, 8];
                                            case 4:
                                                error_2 = _a.sent();
                                                errorIsNotFoundError = error_2.code === 404;
                                                if (!errorIsNotFoundError) return [3, 6];
                                                return [4, this.httpFetchClient.get("" + uri)];
                                            case 5:
                                                fetchResponse = _a.sent();
                                                resolve(fetchResponse);
                                                return [3, 7];
                                            case 6:
                                                reject(error_2);
                                                _a.label = 7;
                                            case 7: return [3, 8];
                                            case 8:
                                                clearTimeout(timeout);
                                                return [3, 10];
                                            case 9:
                                                error_3 = _a.sent();
                                                clearTimeout(timeout);
                                                reject(error_3);
                                                return [3, 10];
                                            case 10: return [2];
                                        }
                                    });
                                }); })];
                        case 6:
                            response = _a.sent();
                            if (this.solutionsWhoseOpeningShouldGetAborted.includes(uri)) {
                                this.openingSolutionWasCanceled(uri);
                                return [2];
                            }
                            isResponseFromProcessEngine = response.result['name'] === '@process-engine/process_engine_runtime';
                            if (!isResponseFromProcessEngine) {
                                throw new Error('The response was not send by a ProcessEngine.');
                            }
                            processEngineVersion = response.result.version;
                            _a.label = 7;
                        case 7:
                            uriIsInternalProcessEngine = !uriIsNotInternalProcessEngine;
                            if (uriIsInternalProcessEngine) {
                                processEngineVersion = this.internalProcessEngineVersion;
                            }
                            if (this.solutionsWhoseOpeningShouldGetAborted.includes(uri)) {
                                this.openingSolutionWasCanceled(uri);
                                return [2];
                            }
                            return [4, solutionExplorer.openSolution(uri, identityToUse)];
                        case 8:
                            _a.sent();
                            this.solutionsToOpen.splice(this.solutionsToOpen.indexOf(uri), 1);
                            return [3, 10];
                        case 9:
                            error_1 = _a.sent();
                            this.solutionsToOpen.splice(this.solutionsToOpen.indexOf(uri), 1);
                            this.solutionService.removeSolutionEntryByUri(uri);
                            errorIsNoProcessEngine = error_1.message === 'The response was not send by a ProcessEngine.' ||
                                error_1.message === 'Unexpected token < in JSON at position 0' ||
                                error_1.message === 'Server did not respond.';
                            if (errorIsNoProcessEngine) {
                                throw new Error('There is no processengine running on this uri.');
                            }
                            openSolutionFailedWithFailedToFetch = error_1.message === 'Failed to fetch';
                            if (openSolutionFailedWithFailedToFetch) {
                                if (!uriIsNotInternalProcessEngine) {
                                    this.startPollingForInternalEngine(uri, insertAtBeginning, identityToUse);
                                    return [2];
                                }
                                throw new Error('Failed to receive the list of ProcessModels from the endpoint');
                            }
                            throw error_1;
                        case 10:
                            solutionURI = uri;
                            arrayAlreadyContainedURI = this.getIndexOfSolution(solutionURI) >= 0;
                            if (arrayAlreadyContainedURI) {
                                throw new Error('Solution is already opened.');
                            }
                            this.addSolutionEntry(uri, solutionExplorer, identityToUse, insertAtBeginning, processEngineVersion);
                            return [2];
                    }
                });
            });
        };
        SolutionExplorerList.prototype.startPollingForInternalEngine = function (uri, insertAtBeginning, identityToUse) {
            var _this = this;
            this.pollingTimeout = setTimeout(function () {
                if (_this.openedSolutions.some(function (solution) { return solution.uri === uri; })) {
                    clearTimeout(_this.pollingTimeout);
                    return;
                }
                _this.openSolution(uri, insertAtBeginning, identityToUse);
            }, 400);
        };
        SolutionExplorerList.prototype.closeSolution = function (uri) {
            return __awaiter(this, void 0, void 0, function () {
                var currentOpenDiagram, diagramOfClosedSolutionOpen, subscription_1;
                var _this = this;
                return __generator(this, function (_a) {
                    currentOpenDiagram = this.router.currentInstruction.queryParams.solutionUri;
                    diagramOfClosedSolutionOpen = uri.includes(currentOpenDiagram);
                    if (diagramOfClosedSolutionOpen) {
                        subscription_1 = this.eventAggregator.subscribe('router:navigation:success', function () {
                            _this.cleanupSolution(uri);
                            subscription_1.dispose();
                        });
                        this.router.navigateToRoute('start-page');
                    }
                    else {
                        this.cleanupSolution(uri);
                    }
                    return [2];
                });
            });
        };
        SolutionExplorerList.prototype.login = function (solutionEntry, silent) {
            return __awaiter(this, void 0, void 0, function () {
                var onTokenRefresh, result, error_4, couldNotConnectToAuthority, userIsNotLoggedIn, identity;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            onTokenRefresh = function (refreshResult) { return __awaiter(_this, void 0, void 0, function () {
                                var couldNotConnectToAuthority, userIsNotLoggedIn;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            couldNotConnectToAuthority = refreshResult === undefined;
                                            userIsNotLoggedIn = refreshResult.idToken === 'access_denied';
                                            if (couldNotConnectToAuthority || userIsNotLoggedIn) {
                                                return [2, false];
                                            }
                                            solutionEntry.identity = {
                                                token: refreshResult.accessToken,
                                                userId: refreshResult.idToken,
                                            };
                                            solutionEntry.isLoggedIn = true;
                                            solutionEntry.userName = refreshResult.identity.name;
                                            return [4, solutionEntry.service.openSolution(solutionEntry.uri, solutionEntry.identity)];
                                        case 1:
                                            _a.sent();
                                            this.solutionService.persistSolutionsInLocalStorage();
                                            this.eventAggregator.publish(index_1.AuthenticationStateEvent.LOGIN);
                                            return [2, true];
                                    }
                                });
                            }); };
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4, this.authenticationService.login(solutionEntry.authority, solutionEntry.uri, onTokenRefresh, silent)];
                        case 2:
                            result = _a.sent();
                            return [3, 4];
                        case 3:
                            error_4 = _a.sent();
                            if (error_4 === 'window was closed by user' || error_4 === 'User could not get logged in.') {
                                return [2, false];
                            }
                            throw error_4;
                        case 4:
                            couldNotConnectToAuthority = result === undefined;
                            if (couldNotConnectToAuthority) {
                                return [2, false];
                            }
                            userIsNotLoggedIn = result.idToken === 'access_denied';
                            if (userIsNotLoggedIn) {
                                return [2, false];
                            }
                            identity = {
                                token: result.accessToken,
                                userId: result.idToken,
                            };
                            solutionEntry.identity = identity;
                            solutionEntry.isLoggedIn = true;
                            solutionEntry.userName = result.identity.name;
                            return [4, solutionEntry.service.openSolution(solutionEntry.uri, solutionEntry.identity)];
                        case 5:
                            _a.sent();
                            this.solutionService.persistSolutionsInLocalStorage();
                            this.eventAggregator.publish(index_1.AuthenticationStateEvent.LOGIN);
                            return [2, true];
                    }
                });
            });
        };
        SolutionExplorerList.prototype.logout = function (solutionEntry, silent) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.authenticationService.logout(solutionEntry.authority, solutionEntry.uri, solutionEntry.identity, silent)];
                        case 1:
                            _a.sent();
                            solutionEntry.identity = this.createIdentityForSolutionExplorer();
                            solutionEntry.isLoggedIn = false;
                            solutionEntry.userName = undefined;
                            return [4, solutionEntry.service.openSolution(solutionEntry.uri, solutionEntry.identity)];
                        case 2:
                            _a.sent();
                            this.solutionService.persistSolutionsInLocalStorage();
                            this.router.navigateToRoute('start-page');
                            return [2];
                    }
                });
            });
        };
        SolutionExplorerList.prototype.createDiagram = function (solutionEntryOrUri) {
            return __awaiter(this, void 0, void 0, function () {
                var hiddenPropertyExists, uri, viewModelOfEntry, solutionIsNotOpened, uriIsOpenDiagrams;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            hiddenPropertyExists = solutionEntryOrUri.hidden !== undefined;
                            if (hiddenPropertyExists && solutionEntryOrUri.hidden) {
                                this.toggleSolution(solutionEntryOrUri);
                            }
                            uri = solutionEntryOrUri.uri ? solutionEntryOrUri.uri : solutionEntryOrUri;
                            viewModelOfEntry = this.solutionEntryViewModels[uri];
                            solutionIsNotOpened = viewModelOfEntry === undefined || viewModelOfEntry === null;
                            if (!solutionIsNotOpened) return [3, 3];
                            uriIsOpenDiagrams = uri.startsWith('about:open-diagrams');
                            if (!uriIsOpenDiagrams) return [3, 1];
                            this.openDiagramService.isCreatingDiagram = true;
                            return [3, 3];
                        case 1: return [4, this.openSolution(uri)];
                        case 2:
                            _a.sent();
                            _a.label = 3;
                        case 3:
                            window.setTimeout(function () {
                                if (solutionIsNotOpened) {
                                    viewModelOfEntry = _this.solutionEntryViewModels[uri];
                                }
                                viewModelOfEntry.startCreationOfNewDiagram();
                                _this.openDiagramService.isCreatingDiagram = false;
                            }, 0);
                            return [2];
                    }
                });
            });
        };
        SolutionExplorerList.prototype.getSolutionName = function (solutionUri) {
            var solutionIsRemote = solution_is_remote_solution_module_1.solutionIsRemoteSolution(solutionUri);
            if (solutionIsRemote) {
                return solutionUri;
            }
            var isOpenDiagrams = solutionUri === 'about:open-diagrams';
            if (isOpenDiagrams) {
                return 'Open Diagrams';
            }
            var lastIndexOfSlash = solutionUri.lastIndexOf('/');
            var lastIndexOfBackSlash = solutionUri.lastIndexOf('\\');
            var lastFolderIndex = Math.max(lastIndexOfSlash, lastIndexOfBackSlash) + 1;
            var solutionName = solutionUri.substring(lastFolderIndex);
            var solutionNameIsEmpty = solutionName.length === 0;
            if (solutionNameIsEmpty) {
                return solutionUri;
            }
            return solutionName;
        };
        SolutionExplorerList.prototype.solutionEntryIsRemote = function (solutionEntry) {
            return solution_is_remote_solution_module_1.solutionIsRemoteSolution(solutionEntry.uri);
        };
        Object.defineProperty(SolutionExplorerList.prototype, "openedSolutionsToDisplay", {
            get: function () {
                var filteredEntries = this.openedSolutions.filter(this.shouldDisplaySolution);
                var sortedEntries = filteredEntries.sort(function (solutionA, solutionB) {
                    if (solutionA.isOpenDiagram) {
                        return -1;
                    }
                    var solutionAIsInternalProcessEngine = solutionA.uri === window.localStorage.getItem('InternalProcessEngineRoute');
                    if (solutionAIsInternalProcessEngine || solutionB.isOpenDiagram) {
                        return 1;
                    }
                    return solution_is_remote_solution_module_1.solutionIsRemoteSolution(solutionA.uri) && !solution_is_remote_solution_module_1.solutionIsRemoteSolution(solutionB.uri) ? 1 : -1;
                });
                return sortedEntries;
            },
            enumerable: true,
            configurable: true
        });
        SolutionExplorerList.prototype.closeAllOpenDiagrams = function () {
            this.eventAggregator.publish(environment_1.default.events.solutionExplorer.closeAllOpenDiagrams);
        };
        SolutionExplorerList.prototype.openingSolutionWasCanceled = function (solutionUri) {
            this.solutionsWhoseOpeningShouldGetAborted.splice(this.solutionsWhoseOpeningShouldGetAborted.indexOf(solutionUri), 1);
            this.solutionsToOpen.splice(this.solutionsToOpen.indexOf(solutionUri), 1);
        };
        SolutionExplorerList.prototype.cleanupSolution = function (uri) {
            var indexOfSolutionToBeRemoved = this.getIndexOfSolution(uri);
            var uriNotFound = indexOfSolutionToBeRemoved < 0;
            if (uriNotFound) {
                return;
            }
            this.openedSolutions.splice(indexOfSolutionToBeRemoved, 1);
            var entryToRemove = this.solutionService.getSolutionEntryForUri(uri);
            this.logout(entryToRemove, true);
            this.solutionService.removeSolutionEntryByUri(entryToRemove.uri);
        };
        SolutionExplorerList.prototype.createOpenDiagramServiceEntry = function () {
            var identity = this.createIdentityForSolutionExplorer();
            this.addSolutionEntry('about:open-diagrams', this.openDiagramService, identity, true);
        };
        SolutionExplorerList.prototype.getFontAwesomeIconForSolution = function (service, uri) {
            var solutionIsOpenedFromRemote = solution_is_remote_solution_module_1.solutionIsRemoteSolution(uri);
            if (solutionIsOpenedFromRemote) {
                return 'fa fa-database';
            }
            var solutionIsOpenDiagrams = service === this.openDiagramService;
            if (solutionIsOpenDiagrams) {
                return 'fa fa-copy';
            }
            return 'fa fa-folder';
        };
        SolutionExplorerList.prototype.canCreateNewDiagramsInSolution = function (service, uri) {
            var solutionIsNotOpenedFromRemote = !solution_is_remote_solution_module_1.solutionIsRemoteSolution(uri);
            var solutionIsNotOpenDiagrams = service !== this.openDiagramService;
            return solutionIsNotOpenedFromRemote && solutionIsNotOpenDiagrams;
        };
        SolutionExplorerList.prototype.canCloseSolution = function (service, uri) {
            var solutionIsNotOpenDiagrams = !this.isOpenDiagram(service);
            var internalProcessEngineRoute = window.localStorage.getItem('InternalProcessEngineRoute');
            var solutionIsNotInternalSolution = uri !== internalProcessEngineRoute;
            return solutionIsNotOpenDiagrams && solutionIsNotInternalSolution;
        };
        SolutionExplorerList.prototype.isOpenDiagram = function (service) {
            return service === this.openDiagramService;
        };
        SolutionExplorerList.prototype.getIndexOfSolution = function (uri) {
            var indexOfSolutionWithURI = this.openedSolutions.findIndex(function (element) {
                return element.uri === uri;
            });
            return indexOfSolutionWithURI;
        };
        SolutionExplorerList.prototype.addSolutionEntry = function (uri, service, identity, insertAtBeginning, processEngineVersion) {
            return __awaiter(this, void 0, void 0, function () {
                var isOpenDiagram, cssIconClass, canCloseSolution, canCreateNewDiagramsInSolution, authority, hidden, tooltipText, isConnected, authorityIsUndefined, isLoggedIn, _a, userName, userIdentity, entry, _b, success;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            isOpenDiagram = this.isOpenDiagram(service);
                            cssIconClass = this.getFontAwesomeIconForSolution(service, uri);
                            canCloseSolution = this.canCloseSolution(service, uri);
                            canCreateNewDiagramsInSolution = this.canCreateNewDiagramsInSolution(service, uri);
                            return [4, this.getAuthorityForSolution(uri)];
                        case 1:
                            authority = _c.sent();
                            hidden = this.getHiddenStateForSolutionUri(uri);
                            tooltipText = '';
                            isConnected = true;
                            authorityIsUndefined = authority === undefined;
                            if (!authorityIsUndefined) return [3, 2];
                            _a = false;
                            return [3, 4];
                        case 2: return [4, this.authenticationService.isLoggedIn(authority, identity)];
                        case 3:
                            _a = _c.sent();
                            _c.label = 4;
                        case 4:
                            isLoggedIn = _a;
                            if (!isLoggedIn) return [3, 6];
                            return [4, this.authenticationService.getUserIdentity(authority, identity)];
                        case 5:
                            userIdentity = _c.sent();
                            userName = userIdentity.name;
                            _c.label = 6;
                        case 6:
                            entry = {
                                uri: uri,
                                service: service,
                                cssIconClass: cssIconClass,
                                tooltipText: tooltipText,
                                isConnected: isConnected,
                                canCloseSolution: canCloseSolution,
                                canCreateNewDiagramsInSolution: canCreateNewDiagramsInSolution,
                                isOpenDiagram: isOpenDiagram,
                                identity: identity,
                                authority: authority,
                                isLoggedIn: isLoggedIn,
                                userName: userName,
                                processEngineVersion: processEngineVersion,
                                hidden: hidden,
                            };
                            this.solutionService.addSolutionEntry(entry);
                            if (insertAtBeginning) {
                                this.openedSolutions.splice(1, 0, entry);
                            }
                            else {
                                this.openedSolutions.push(entry);
                            }
                            if (!(identity.userId !== '')) return [3, 11];
                            if (!(entry.authority === undefined)) return [3, 8];
                            _b = entry;
                            return [4, this.getAuthorityWhenAvailable(entry.uri)];
                        case 7:
                            _b.authority = _c.sent();
                            _c.label = 8;
                        case 8: return [4, this.login(entry, true)];
                        case 9:
                            success = _c.sent();
                            if (!!success) return [3, 11];
                            return [4, this.logout(entry, true)];
                        case 10:
                            _c.sent();
                            _c.label = 11;
                        case 11: return [2];
                    }
                });
            });
        };
        SolutionExplorerList.prototype.getAuthorityWhenAvailable = function (solutionUri) {
            var _this = this;
            return new Promise(function (resolve) {
                var authorityCheckInterval = setInterval(function () { return __awaiter(_this, void 0, void 0, function () {
                    var authority, error_5;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                return [4, this.getAuthorityForSolution(solutionUri)];
                            case 1:
                                authority = _a.sent();
                                return [3, 3];
                            case 2:
                                error_5 = _a.sent();
                                if (error_5.message !== 'Failed to fetch') {
                                    throw error_5;
                                }
                                return [3, 3];
                            case 3:
                                if (authority !== undefined) {
                                    clearInterval(authorityCheckInterval);
                                    resolve(authority);
                                }
                                return [2];
                        }
                    });
                }); }, 100);
            });
        };
        SolutionExplorerList.prototype.getHiddenStateForSolutionUri = function (uri) {
            var solutionIsOpenDiagrams = uri === 'about:open-diagrams';
            if (solutionIsOpenDiagrams) {
                var solutionCollapseState = JSON.parse(window.localStorage.getItem('openDiagramSolutionCollapseState'));
                return solutionCollapseState ? solutionCollapseState : false;
            }
            var persistedSolutions = this.solutionService.getPersistedEntries();
            var solutionToLoad = persistedSolutions.find(function (solution) { return solution.uri === uri; });
            if (!solutionToLoad) {
                return false;
            }
            return solutionToLoad.hidden ? solutionToLoad.hidden : false;
        };
        SolutionExplorerList.prototype.createIdentityForSolutionExplorer = function () {
            var accessToken = this.createDummyAccessToken();
            var identity = {
                token: accessToken,
                userId: '',
            };
            return identity;
        };
        SolutionExplorerList.prototype.getAuthorityForSolution = function (solutionUri) {
            return __awaiter(this, void 0, void 0, function () {
                var solutionIsNotRemote, fetchResponse, error_6, errorIsNotFoundError, fetchResponse;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            solutionIsNotRemote = !solution_is_remote_solution_module_1.solutionIsRemoteSolution(solutionUri);
                            if (solutionIsNotRemote) {
                                return [2, undefined];
                            }
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 6]);
                            return [4, this.httpFetchClient.get(solutionUri + "/process_engine/security/authority")];
                        case 2:
                            fetchResponse = _a.sent();
                            return [2, fetchResponse.result.authority];
                        case 3:
                            error_6 = _a.sent();
                            errorIsNotFoundError = error_6.code === 404;
                            if (!errorIsNotFoundError) return [3, 5];
                            return [4, this.httpFetchClient.get(solutionUri + "/security/authority")];
                        case 4:
                            fetchResponse = _a.sent();
                            return [2, fetchResponse.result.authority];
                        case 5: return [2, undefined];
                        case 6: return [2];
                    }
                });
            });
        };
        SolutionExplorerList.prototype.createDummyAccessToken = function () {
            var dummyAccessTokenString = 'dummy_token';
            var base64EncodedString = btoa(dummyAccessTokenString);
            return base64EncodedString;
        };
        __decorate([
            aurelia_framework_1.computedFrom('openedSolutions.length', 'openDiagramService.openedDiagrams.length', 'openDiagramService.isCreatingDiagram'),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [])
        ], SolutionExplorerList.prototype, "openedSolutionsToDisplay", null);
        SolutionExplorerList = __decorate([
            aurelia_framework_1.inject(aurelia_router_1.Router, aurelia_event_aggregator_1.EventAggregator, 'SolutionExplorerServiceFactory', 'AuthenticationService', 'SolutionService', 'OpenDiagramService', 'HttpFetchClient'),
            __metadata("design:paramtypes", [aurelia_router_1.Router,
                aurelia_event_aggregator_1.EventAggregator,
                solution_explorer_service_factory_1.SolutionExplorerServiceFactory, Object, Object, open_diagrams_solution_explorer_service_1.OpenDiagramsSolutionExplorerService,
                http_fetch_client_1.HttpFetchClient])
        ], SolutionExplorerList);
        return SolutionExplorerList;
    }());
    exports.SolutionExplorerList = SolutionExplorerList;
});


;
define('text!modules/solution-explorer/solution-explorer-list/solution-explorer-list.css',[],function(){return ".solution-explorer-list {\n  position: absolute;\n  width: 100%;\n  max-height: 100%;\n  overflow-y: auto; }\n\n.solution-entry {\n  border-bottom: 2px solid #dcdbdb; }\n\n.open-diagrams-entry {\n  max-height: 260px;\n  overflow-y: scroll; }\n\n.solution-entry:last-child {\n  margin-bottom: 40px;\n  border-bottom: none; }\n\n.solution-entry__header {\n  display: flex;\n  max-height: 26px;\n  padding: 2.5px 5px;\n  padding-bottom: 2px;\n  color: darkgray; }\n\n.solution-entry__header--error {\n  background-color: #fde7e7; }\n\n.solution-entry__header:hover {\n  background-color: rgba(230, 230, 230, 0.6); }\n\n.solution-entry__header button {\n  padding: 0 2px;\n  background: transparent;\n  border: none; }\n\n.solution-entry__solution-icon {\n  flex: 0;\n  margin-top: 3px;\n  margin-right: 6px; }\n\n.solution-entry__solution-name {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap; }\n\n.solution-entry__solution-path {\n  overflow: hidden;\n  margin-left: 10px;\n  margin-top: 2px;\n  padding-left: 5px;\n  font-size: 12px;\n  color: #ccc;\n  text-overflow: ellipsis;\n  white-space: nowrap; }\n\n.solution-entry__actions {\n  position: absolute;\n  right: 5px;\n  display: none; }\n\n.solution-entry__actions_remote-solution {\n  display: none; }\n\n.login-logout-button {\n  padding: 0;\n  border: none;\n  background: inherit; }\n\n@media (any-hover: none) {\n  .solution-entry__actions {\n    display: flex; }\n  .solution-entry__actions_remote-solution {\n    display: flex;\n    position: absolute;\n    right: 5px; } }\n\n.solution-entry:hover .solution-entry__actions {\n  display: flex;\n  background-color: #f6f6f6; }\n\n.solution-entry:hover .solution-entry__actions_remote-solution {\n  display: flex;\n  position: absolute;\n  right: 5px; }\n\n.solution-entry:hover .solution-entry__header:hover .solution-entry__actions {\n  background-color: #eaeaea; }\n\n.solution-entry__left-icon_and_name {\n  display: flex;\n  float: left;\n  height: 20px;\n  max-width: 200px; }\n\n.solution-entry__actions button {\n  padding: 0 2px;\n  background: transparent;\n  border: none; }\n\n.solution-entry__collapse-header {\n  max-width: 240px; }\n\n.collapse__icon {\n  width: 10px;\n  padding-top: 2px;\n  padding-right: 14px;\n  margin-left: 2px; }\n\n.version-info {\n  padding-top: 3px;\n  padding-right: 5px; }\n\n.version-info--old {\n  color: #ffc107; }\n\n.version-info--new {\n  color: #007bffd4; }\n";});;
define('text!modules/solution-explorer/solution-explorer-list/solution-explorer-list.html',[],function(){return "<template>\n  <require from=\"./solution-explorer-list.css\"></require>\n  <require from=\"../solution-explorer-solution/solution-explorer-solution\"></require>\n\n  <div class=\"solution-explorer-list\">\n\n    <div class=\"solution-list\">\n      <div repeat.for=\"solutionEntry of openedSolutionsToDisplay\" class=\"solution-entry\">\n\n        <div class=\"solution-entry__header\" class.bind=\"solutionEntry.isConnected ? '' : 'solution-entry__header--error'\" title.bind=\"solutionEntry.processEngineVersion ? `${solutionEntry.uri} | Version: ${solutionEntry.processEngineVersion}` : solutionEntry.uri\">\n\n        <div class=\"solution-entry__collapse-header\" click.delegate=\"toggleSolution(solutionEntry)\">\n\n          <div class=\"solution-entry__left-icon_and_name\">\n\n            <i if.bind=\"solutionEntry.hidden\" class=\"fas fa-angle-right collapse__icon\" title=\"Expand Solution\"></i>\n            <i if.bind=\"!solutionEntry.hidden\" class=\"fas fa-angle-down collapse__icon\" title=\"Collapse Solution\"></i>\n\n            <i class=\"${solutionEntry.cssIconClass} solution-entry__solution-icon\" title.bind=\"solutionEntry.tooltipText\"></i>\n\n            <i if.bind=\"checkIfSolutionIsRemoteSolution(solutionEntry.uri) && isProcessEngineNewerThanInternal(solutionEntry) & signal:'update-version-icon'\" class=\"fas fa-info-circle version-info version-info--new\" click.capture=\"showNewerModal($event)\" title=\"ProcessEngine is newer. Click to show more information.\"></i>\n            <i if.bind=\"checkIfSolutionIsRemoteSolution(solutionEntry.uri) && isProcessEngineOlderThanInternal(solutionEntry) & signal:'update-version-icon'\" class=\"fas fa-info-circle version-info version-info--old\" click.capture=\"showOlderModal($event)\" title=\"ProcessEngine is outdated. Click to show more information.\"></i>\n\n            <span class=\"solution-entry__solution-name\" data-test-solution-entry-name=\"${getSolutionName(solutionEntry.uri)}\" data-test-solution-is-internal=\"${solutionIsInternalSolution(solutionEntry)}\" data-test-solution-is-connected=\"${peHasStarted ? 'true' : 'false'}\">${getSolutionName(solutionEntry.uri)}</span>\n          </div>\n          <div class=\"solution-entry__solution-path\">\n            <span\n              if.bind=\"!solutionEntryIsRemote(solutionEntry) && getSolutionName(solutionEntry.uri) !== solutionEntry.uri && solutionEntry.uri !== 'about:open-diagrams'\"\n              title.bind=\"solutionEntry.uri\">\n              ${solutionEntry.uri}\n            </span>\n          </div>\n        </div>\n\n\n          <div class.bind=\"checkIfSolutionIsRemoteSolution(solutionEntry.uri) ? 'solution-entry__actions_remote-solution' : 'solution-entry__actions'\">\n\n            <button class=\"button\"\n              if.bind=\"solutionIsInternalSolution(solutionEntry)\"\n              click.delegate=\"openSettings()\"\n              title=\"Open settings of the internal ProcessEngine\">\n\n              <i class=\"fa fa-cog\"></i>\n            </button>\n\n            <button\n              class=\"button\"\n              if.bind=\"solutionEntry.canCreateNewDiagramsInSolution\"\n              click.delegate=\"createDiagram(solutionEntry)\"\n              title=\"Create a new diagram\">\n\n              <i class=\"fa fa-file-medical\"></i>\n            </button>\n\n            <button\n              class=\"button\"\n              if.bind=\"solutionEntry.canCloseSolution\"\n              click.delegate=\"closeSolution(solutionEntry.uri)\"\n              title=\"Close the solution\">\n\n              <i class=\"fa fa-times\"></i>\n            </button>\n\n\n            <button\n              class=\"button\"\n              if.bind=\"solutionEntry.isOpenDiagram\"\n              click.delegate=\"closeAllOpenDiagrams()\"\n              title=\"Close all open diagrams\">\n\n              <i class=\"fa fa-times\"></i>\n            </button>\n\n            <button class=\"button login-logout-button\"\n              if.bind=\"checkIfSolutionIsRemoteSolution(solutionEntry.uri) && !solutionEntry.isLoggedIn\"\n              click.delegate=\"login(solutionEntry)\"\n              title=\"Login to remote solution\">\n\n              <i class=\"fa fa-lock-open\"></i>\n            </button>\n\n            <button class=\"button login-logout-button\"\n              if.bind=\"solutionEntry.isLoggedIn\"\n              click.delegate=\"logout(solutionEntry)\"\n              title.bind=\"`Logout ${solutionEntry.userName}`\">\n\n              <i class=\"fa fa-lock\"></i>\n            </button>\n          </div>\n\n\n        </div>\n\n        <solution-explorer-solution\n          displayed-solution-entry.two-way=\"solutionEntry\"\n          solution-service.bind=\"solutionEntry.service\"\n          open-diagram-service.bind=\"openDiagramService\"\n          view-model.ref=\"solutionEntryViewModels[solutionEntry.uri]\"\n          css-icon-class.two-way=\"solutionEntry.cssIconClass\"\n          is-connected.two-way=\"solutionEntry.isConnected\"\n          tooltip-text.two-way=\"solutionEntry.tooltipText\"\n          pe-has-started.two-way=\"peHasStarted\"\n          style.bind=\"solutionEntry.hidden ? 'display: none;' : 'display: inherit;'\"\n          class.bind=\"solutionEntry.isOpenDiagram ? 'open-diagrams-entry' : ''\"\n          login.bind=\"loginFunction\">\n        </solution-explorer-solution>\n      </div>\n    </div>\n\n  </div>\n\n  <modal if.bind=\"processEngineIsOlderModal\"\n         header-text=\"Older ProcessEngine Version\"\n         body-text=\"The ProcessEngine version is older than the integrated one. Maybe it's time for an update.\">\n    <template replace-part=\"modal-footer\">\n      <button type=\"button\" class=\"btn btn-primary\" data-dismiss=\"modal\" click.delegate=\"processEngineIsOlderModal = false\">Okay</button>\n    </template>\n  </modal>\n\n  <modal if.bind=\"processEngineIsNewerModal\"\n         header-text=\"Newer ProcessEngine Version\"\n         body-text=\"The ProcessEngine version is newer than the built-in, so it may be that the BPMN Studio does not yet support some functionality.\">\n    <template replace-part=\"modal-footer\">\n      <button type=\"button\" class=\"btn btn-primary\" data-dismiss=\"modal\" click.delegate=\"processEngineIsNewerModal = false\">Okay</button>\n    </template>\n  </modal>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/solution-explorer/solution-explorer-panel/solution-explorer-panel',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "aurelia-router", "../../../contracts/index", "../../../environment", "../../../services/notification-service/notification.service", "../../../services/default-ports-module/default-ports.module", "../../fetch-http-client/http-fetch-client", "../../../services/solution-is-remote-solution-module/solution-is-remote-solution.module", "../../../services/is-running-in-electron-module/is-running-in-electron.module"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, aurelia_router_1, index_1, environment_1, notification_service_1, default_ports_module_1, http_fetch_client_1, solution_is_remote_solution_module_1, is_running_in_electron_module_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var SupportedProtocols;
    (function (SupportedProtocols) {
        SupportedProtocols["HTTPS"] = "https://";
        SupportedProtocols["HTTP"] = "http://";
    })(SupportedProtocols || (SupportedProtocols = {}));
    var SolutionExplorerPanel = (function () {
        function SolutionExplorerPanel(eventAggregator, notificationService, router, solutionService, httpFetchClient) {
            var _this = this;
            this.selectedProtocol = 'http://';
            this.showOpenRemoteSolutionModal = false;
            this.solutionExplorerPanel = this;
            this.remoteSolutionHistoryStatus = new Map();
            this.availableDefaultRemoteSolutions = [];
            this.isConnecting = false;
            this.supportedProtocols = SupportedProtocols;
            this.ipcRenderer = null;
            this.subscriptions = [];
            this.electronFileOpeningHook = function (_, pathToFile) { return __awaiter(_this, void 0, void 0, function () {
                var uri;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            uri = pathToFile;
                            return [4, this.openDiagramOrDisplayError(uri)];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            }); };
            this.electronOnMenuOpenDiagramHook = function (_) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.openDiagram();
                    return [2];
                });
            }); };
            this.electronOnMenuOpenSolutionHook = function (_) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.openSolution();
                    return [2];
                });
            }); };
            this.electronOnCreateDiagram = function (_) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.openNewDiagram()];
                        case 1:
                            _a.sent();
                            setTimeout(function () {
                                var openDiagramsEntry = document.getElementsByClassName('open-diagrams-entry')[0];
                                openDiagramsEntry.scrollTop = openDiagramsEntry.scrollHeight;
                            }, 0);
                            return [2];
                    }
                });
            }); };
            this.openDiagramOnDropBehaviour = function (event) { return __awaiter(_this, void 0, void 0, function () {
                var loadedFiles, urisToOpen, openingPromises;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            event.preventDefault();
                            loadedFiles = event.dataTransfer.files;
                            urisToOpen = Array.from(loadedFiles).map(function (file) {
                                return file.path;
                            });
                            openingPromises = urisToOpen.map(function (uri) {
                                return _this.openDiagramOrDisplayError(uri);
                            });
                            return [4, Promise.all(openingPromises)];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            }); };
            this.eventAggregator = eventAggregator;
            this.notificationService = notificationService;
            this.router = router;
            this.solutionService = solutionService;
            this.httpFetchClient = httpFetchClient;
            if (is_running_in_electron_module_1.isRunningInElectron()) {
                this.ipcRenderer = window.nodeRequire('electron').ipcRenderer;
            }
        }
        Object.defineProperty(SolutionExplorerPanel.prototype, "canReadFromFileSystem", {
            get: function () {
                return is_running_in_electron_module_1.isRunningInElectron();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SolutionExplorerPanel.prototype, "connectionErrorExists", {
            get: function () {
                return this.connectionError !== undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SolutionExplorerPanel.prototype, "remoteSolutionHistoryWithStatus", {
            get: function () {
                var _this = this;
                return this.loadRemoteSolutionHistory()
                    .reverse()
                    .map(function (solutionUri) {
                    return {
                        uri: solutionUri,
                        status: _this.remoteSolutionHistoryStatus.get(solutionUri),
                    };
                });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SolutionExplorerPanel.prototype, "suggestedRemoteSolutions", {
            get: function () {
                var _this = this;
                var filteredRemoteSolutionHistory = this.remoteSolutionHistoryWithStatus.filter(function (remoteSolution) {
                    var remoteSolutionIsDefaultRemoteSolution = _this.availableDefaultRemoteSolutions.some(function (defaultRemoteSolution) {
                        return defaultRemoteSolution.uri === remoteSolution.uri;
                    });
                    return !remoteSolutionIsDefaultRemoteSolution;
                });
                var suggestedRemoteSolutions = __spreadArrays(this.availableDefaultRemoteSolutions, filteredRemoteSolutionHistory);
                return suggestedRemoteSolutions;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SolutionExplorerPanel.prototype, "unconnectedSuggestedRemoteSolutions", {
            get: function () {
                var connectedSolutions = this.solutionService.getAllSolutionEntries();
                var unconnectedSuggestedRemoteSolutions = this.suggestedRemoteSolutions.filter(function (remoteSolution) {
                    return !connectedSolutions.some(function (connectedSolution) {
                        return connectedSolution.uri === remoteSolution.uri;
                    });
                });
                return unconnectedSuggestedRemoteSolutions;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SolutionExplorerPanel.prototype, "unconnectedSuggestedRemoteSolutionsExist", {
            get: function () {
                return this.unconnectedSuggestedRemoteSolutions.length > 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SolutionExplorerPanel.prototype, "uriOfRemoteSolution", {
            get: function () {
                return "" + this.selectedProtocol + this.uriOfRemoteSolutionWithoutProtocol;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SolutionExplorerPanel.prototype, "uriIsEmpty", {
            get: function () {
                var uriIsEmtpy = this.uriOfRemoteSolutionWithoutProtocol === undefined || this.uriOfRemoteSolutionWithoutProtocol.length === 0;
                return uriIsEmtpy;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SolutionExplorerPanel.prototype, "uriIsValid", {
            get: function () {
                var urlRegEx = /^(?:http(s)?:\/\/)+[\w.-]?[\w\-._~:/?#[\]@!$&'()*+,;=.]+$/g;
                var uriIsValid = urlRegEx.test(this.uriOfRemoteSolution);
                return uriIsValid;
            },
            enumerable: true,
            configurable: true
        });
        SolutionExplorerPanel.prototype.bind = function () {
            return __awaiter(this, void 0, void 0, function () {
                var uriOfProcessEngine, persistedInternalSolution, internalSolutionWasPersisted, previouslyOpenedSolutions, persistedOpenDiagrams, _i, persistedOpenDiagrams_1, persistedOpenDiagram, _a;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            uriOfProcessEngine = window.localStorage.getItem('InternalProcessEngineRoute');
                            persistedInternalSolution = this.solutionService.getSolutionEntryForUri(uriOfProcessEngine);
                            internalSolutionWasPersisted = persistedInternalSolution !== undefined;
                            if (window.nodeRequire) {
                                try {
                                    if (internalSolutionWasPersisted) {
                                        this.solutionExplorerList.openSolution(uriOfProcessEngine, false, persistedInternalSolution.identity);
                                    }
                                    else {
                                        this.solutionExplorerList.openSolution(uriOfProcessEngine);
                                    }
                                }
                                catch (_c) {
                                    return [2];
                                }
                            }
                            previouslyOpenedSolutions = this.solutionService.getPersistedEntries();
                            previouslyOpenedSolutions.forEach(function (entry) {
                                var entryIsNotConnectedProcessEngine = entry.uri !== uriOfProcessEngine;
                                if (entryIsNotConnectedProcessEngine) {
                                    try {
                                        _this.solutionExplorerList.openSolution(entry.uri, false, entry.identity);
                                    }
                                    catch (error) {
                                    }
                                }
                            });
                            persistedOpenDiagrams = this.solutionService.getOpenDiagrams();
                            _i = 0, persistedOpenDiagrams_1 = persistedOpenDiagrams;
                            _b.label = 1;
                        case 1:
                            if (!(_i < persistedOpenDiagrams_1.length)) return [3, 6];
                            persistedOpenDiagram = persistedOpenDiagrams_1[_i];
                            _b.label = 2;
                        case 2:
                            _b.trys.push([2, 4, , 5]);
                            return [4, this.solutionExplorerList.openDiagram(persistedOpenDiagram.uri)];
                        case 3:
                            _b.sent();
                            return [3, 5];
                        case 4:
                            _a = _b.sent();
                            return [3, 5];
                        case 5:
                            _i++;
                            return [3, 1];
                        case 6:
                            if (is_running_in_electron_module_1.isRunningInElectron()) {
                                this.registerElectronHooks();
                            }
                            return [2];
                    }
                });
            });
        };
        SolutionExplorerPanel.prototype.attached = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    if (is_running_in_electron_module_1.isRunningInElectron()) {
                        document.addEventListener('drop', this.openDiagramOnDropBehaviour);
                    }
                    this.subscriptions = [
                        this.eventAggregator.subscribe(environment_1.default.events.diagramDetail.onDiagramDeployed, function () {
                            _this.refreshSolutions();
                        }),
                        this.eventAggregator.subscribe(environment_1.default.events.startPage.openLocalSolution, function () {
                            _this.openSolution();
                        }),
                        this.eventAggregator.subscribe(environment_1.default.events.startPage.openDiagram, function () {
                            _this.openDiagram();
                        }),
                        this.eventAggregator.subscribe(environment_1.default.events.startPage.createDiagram, function () {
                            _this.createNewDiagram();
                        }),
                        this.eventAggregator.subscribe(index_1.AuthenticationStateEvent.LOGOUT, function () {
                            _this.solutionExplorerList.refreshSolutions();
                        }),
                    ];
                    return [2];
                });
            });
        };
        SolutionExplorerPanel.prototype.detached = function () {
            if (is_running_in_electron_module_1.isRunningInElectron()) {
                this.removeElectronFileOpeningHooks();
                document.removeEventListener('drop', this.openDiagramOnDropBehaviour);
            }
            for (var _i = 0, _a = this.subscriptions; _i < _a.length; _i++) {
                var subscription = _a[_i];
                subscription.dispose();
            }
        };
        SolutionExplorerPanel.prototype.openRemoteSolutionModal = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.showOpenRemoteSolutionModal = true;
                            return [4, this.updateRemoteSolutionHistoryStatus()];
                        case 1:
                            _a.sent();
                            this.startPollingOfRemoteSolutionHistoryStatus();
                            this.updateDefaultRemoteSolutions();
                            return [2];
                    }
                });
            });
        };
        SolutionExplorerPanel.prototype.removeSolutionFromHistory = function (solutionUri) {
            this.removeSolutionFromSolutionHistroy(solutionUri);
        };
        SolutionExplorerPanel.prototype.selectProtocol = function (protocol) {
            this.selectedProtocol = protocol;
        };
        SolutionExplorerPanel.prototype.closeRemoteSolutionModal = function () {
            this.stopPollingOfRemoteSolutionHistoryStatus();
            this.solutionExplorerList.cancelOpeningSolution(this.uriOfRemoteSolution);
            this.isConnecting = false;
            this.showOpenRemoteSolutionModal = false;
            this.uriOfRemoteSolutionWithoutProtocol = undefined;
            this.connectionError = undefined;
        };
        SolutionExplorerPanel.prototype.uriOfRemoteSolutionWithoutProtocolChanged = function () {
            if (this.uriOfRemoteSolutionWithoutProtocol === undefined) {
                return;
            }
            for (var _i = 0, _a = Object.values(SupportedProtocols); _i < _a.length; _i++) {
                var protocol = _a[_i];
                if (this.uriOfRemoteSolutionWithoutProtocol.startsWith(protocol)) {
                    this.uriOfRemoteSolutionWithoutProtocol = this.uriOfRemoteSolutionWithoutProtocol.replace(protocol, '');
                    this.selectProtocol(protocol);
                }
            }
        };
        SolutionExplorerPanel.prototype.openRemoteSolution = function () {
            return __awaiter(this, void 0, void 0, function () {
                var lastCharacterIsASlash, error_1, genericMessage, cause;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.uriIsValid || this.uriIsEmpty) {
                                return [2];
                            }
                            this.connectionError = undefined;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 4, , 5]);
                            lastCharacterIsASlash = this.uriOfRemoteSolutionWithoutProtocol.endsWith('/');
                            if (lastCharacterIsASlash) {
                                this.uriOfRemoteSolutionWithoutProtocol = this.uriOfRemoteSolutionWithoutProtocol.slice(0, -1);
                            }
                            return [4, this.addSolutionToRemoteSolutionHistory(this.uriOfRemoteSolution)];
                        case 2:
                            _a.sent();
                            this.isConnecting = true;
                            return [4, this.solutionExplorerList.openSolution(this.uriOfRemoteSolution)];
                        case 3:
                            _a.sent();
                            this.isConnecting = false;
                            return [3, 5];
                        case 4:
                            error_1 = _a.sent();
                            this.isConnecting = false;
                            genericMessage = "Unable to connect to ProcessEngine on: " + this.uriOfRemoteSolution;
                            cause = error_1.message ? error_1.message : '';
                            this.connectionError = genericMessage + "\n" + cause;
                            return [2];
                        case 5:
                            this.closeRemoteSolutionModal();
                            return [2];
                    }
                });
            });
        };
        SolutionExplorerPanel.prototype.onSolutionInputChange = function (event) {
            return __awaiter(this, void 0, void 0, function () {
                var uri;
                return __generator(this, function (_a) {
                    uri = event.target.files[0].path;
                    this.solutionInput.value = '';
                    this.openSolutionOrDisplayError(uri);
                    return [2];
                });
            });
        };
        SolutionExplorerPanel.prototype.onOpenDiagramInputChange = function (event) {
            return __awaiter(this, void 0, void 0, function () {
                var uri;
                return __generator(this, function (_a) {
                    uri = event.target.files[0].path;
                    this.openDiagramInput.value = '';
                    return [2, this.openDiagramOrDisplayError(uri)];
                });
            });
        };
        SolutionExplorerPanel.prototype.openDiagram = function () {
            return __awaiter(this, void 0, void 0, function () {
                var canNotReadFromFileSystem;
                var _this = this;
                return __generator(this, function (_a) {
                    canNotReadFromFileSystem = !is_running_in_electron_module_1.isRunningInElectron();
                    if (canNotReadFromFileSystem) {
                        this.openDiagramInput.click();
                        return [2];
                    }
                    this.ipcRenderer.send('open_diagram');
                    this.ipcRenderer.once('import_opened_diagram', function (event, openedFile) { return __awaiter(_this, void 0, void 0, function () {
                        var noFileSelected, filePath;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    noFileSelected = openedFile === null;
                                    if (noFileSelected) {
                                        return [2];
                                    }
                                    filePath = openedFile[0];
                                    return [4, this.openDiagramOrDisplayError(filePath)];
                                case 1:
                                    _a.sent();
                                    return [2];
                            }
                        });
                    }); });
                    return [2];
                });
            });
        };
        SolutionExplorerPanel.prototype.openSolution = function () {
            return __awaiter(this, void 0, void 0, function () {
                var canNotReadFromFileSystem;
                var _this = this;
                return __generator(this, function (_a) {
                    canNotReadFromFileSystem = !is_running_in_electron_module_1.isRunningInElectron();
                    if (canNotReadFromFileSystem) {
                        this.solutionInput.click();
                        return [2];
                    }
                    this.ipcRenderer.send('open_solution');
                    this.ipcRenderer.once('import_opened_solution', function (event, openedFolder) { return __awaiter(_this, void 0, void 0, function () {
                        var noFolderSelected, folderPath;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    noFolderSelected = openedFolder === null;
                                    if (noFolderSelected) {
                                        return [2];
                                    }
                                    folderPath = openedFolder[0];
                                    return [4, this.openSolutionOrDisplayError(folderPath)];
                                case 1:
                                    _a.sent();
                                    return [2];
                            }
                        });
                    }); });
                    return [2];
                });
            });
        };
        SolutionExplorerPanel.prototype.getBadgeForVersion = function (version) {
            switch (version) {
                case index_1.StudioVersion.Dev:
                    return 'remote-solution-badge__dev';
                case index_1.StudioVersion.Alpha:
                    return 'remote-solution-badge__alpha';
                case index_1.StudioVersion.Beta:
                    return 'remote-solution-badge__beta';
                case index_1.StudioVersion.Stable:
                    return 'remote-solution-badge__stable';
                default:
                    return 'remote-solution-badge__dev';
            }
        };
        SolutionExplorerPanel.prototype.getVersionNameForVersion = function (version) {
            switch (version) {
                case index_1.StudioVersion.Dev:
                    return 'Development';
                case index_1.StudioVersion.Alpha:
                    return 'BPMN Studio Alpha';
                case index_1.StudioVersion.Beta:
                    return 'BPMN Studio Beta';
                case index_1.StudioVersion.Stable:
                    return 'BPMN Studio';
                default:
                    return 'Development';
            }
        };
        SolutionExplorerPanel.prototype.selectRemoteSolution = function (remoteSolutionUri) {
            var protocolEndIndex = remoteSolutionUri.indexOf('//') + 2;
            var protocol = remoteSolutionUri.substring(0, protocolEndIndex);
            var protocolKey = Object.keys(SupportedProtocols).find(function (supportedProtocolKey) {
                return SupportedProtocols[supportedProtocolKey] === protocol;
            });
            var uri = remoteSolutionUri.substring(protocolEndIndex, remoteSolutionUri.length);
            this.selectProtocol(SupportedProtocols[protocolKey]);
            this.uriOfRemoteSolutionWithoutProtocol = uri;
        };
        SolutionExplorerPanel.prototype.startPollingOfRemoteSolutionHistoryStatus = function () {
            this.remoteSolutionHistoryStatusIsPolling = true;
            this.pollRemoteSolutionHistoryStatus();
        };
        SolutionExplorerPanel.prototype.pollRemoteSolutionHistoryStatus = function () {
            var _this = this;
            this.remoteSolutionHistoryStatusPollingTimer = setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.updateRemoteSolutionHistoryStatus()];
                        case 1:
                            _a.sent();
                            if (!this.remoteSolutionHistoryStatusIsPolling) {
                                return [2];
                            }
                            this.pollRemoteSolutionHistoryStatus();
                            return [2];
                    }
                });
            }); }, environment_1.default.processengine.updateRemoteSolutionHistoryIntervalInMs);
        };
        SolutionExplorerPanel.prototype.stopPollingOfRemoteSolutionHistoryStatus = function () {
            var noTimerExisting = this.remoteSolutionHistoryStatusPollingTimer === undefined;
            if (noTimerExisting) {
                return;
            }
            clearTimeout(this.remoteSolutionHistoryStatusPollingTimer);
            this.remoteSolutionHistoryStatusPollingTimer = undefined;
            this.remoteSolutionHistoryStatusIsPolling = false;
        };
        SolutionExplorerPanel.prototype.updateRemoteSolutionHistoryStatus = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    this.remoteSolutionHistoryWithStatus.forEach(function (remoteSolutionWithStatus) { return __awaiter(_this, void 0, void 0, function () {
                        var remoteSolutionStatus;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4, this.isRemoteSolutionActive(remoteSolutionWithStatus.uri)];
                                case 1:
                                    remoteSolutionStatus = _a.sent();
                                    this.remoteSolutionHistoryStatus.set(remoteSolutionWithStatus.uri, remoteSolutionStatus);
                                    return [2];
                            }
                        });
                    }); });
                    return [2];
                });
            });
        };
        SolutionExplorerPanel.prototype.updateDefaultRemoteSolutions = function () {
            return __awaiter(this, void 0, void 0, function () {
                var stableRemoteSolution, betaRemoteSolution, alphaRemoteSolution, devRemoteSolution, availableRemoteSolutions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.availableDefaultRemoteSolutions = [];
                            stableRemoteSolution = this.searchDefaultRemoteSolutionForVersion(index_1.StudioVersion.Stable);
                            betaRemoteSolution = this.searchDefaultRemoteSolutionForVersion(index_1.StudioVersion.Beta);
                            alphaRemoteSolution = this.searchDefaultRemoteSolutionForVersion(index_1.StudioVersion.Alpha);
                            devRemoteSolution = this.searchDefaultRemoteSolutionForVersion(index_1.StudioVersion.Dev);
                            return [4, Promise.all([
                                    stableRemoteSolution,
                                    betaRemoteSolution,
                                    alphaRemoteSolution,
                                    devRemoteSolution,
                                ])];
                        case 1:
                            availableRemoteSolutions = _a.sent();
                            this.availableDefaultRemoteSolutions = availableRemoteSolutions.filter(function (remoteSolution) {
                                return remoteSolution !== null;
                            });
                            return [2];
                    }
                });
            });
        };
        SolutionExplorerPanel.prototype.searchDefaultRemoteSolutionForVersion = function (version) {
            return __awaiter(this, void 0, void 0, function () {
                var portsToCheck, processEngineUri, noActiveProcessEngineFound;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            portsToCheck = default_ports_module_1.getPortListByVersion(version);
                            return [4, this.getActiveProcessEngineForPortList(portsToCheck)];
                        case 1:
                            processEngineUri = _a.sent();
                            noActiveProcessEngineFound = processEngineUri === null;
                            if (noActiveProcessEngineFound) {
                                return [2, null];
                            }
                            return [2, {
                                    uri: processEngineUri,
                                    status: true,
                                    version: version,
                                }];
                    }
                });
            });
        };
        SolutionExplorerPanel.prototype.getActiveProcessEngineForPortList = function (portsToCheck) {
            return __awaiter(this, void 0, void 0, function () {
                var _i, portsToCheck_1, port, uriToCheck, processEngineFound;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _i = 0, portsToCheck_1 = portsToCheck;
                            _a.label = 1;
                        case 1:
                            if (!(_i < portsToCheck_1.length)) return [3, 4];
                            port = portsToCheck_1[_i];
                            uriToCheck = "http://localhost:" + port;
                            return [4, this.isRemoteSolutionActive(uriToCheck)];
                        case 2:
                            processEngineFound = _a.sent();
                            if (processEngineFound) {
                                return [2, uriToCheck];
                            }
                            _a.label = 3;
                        case 3:
                            _i++;
                            return [3, 1];
                        case 4: return [2, null];
                    }
                });
            });
        };
        SolutionExplorerPanel.prototype.isRemoteSolutionActive = function (remoteSolutionUri) {
            return __awaiter(this, void 0, void 0, function () {
                var response, error_2, errorIsNotFoundError, isResponseFromProcessEngine, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _b.trys.push([0, 8, , 9]);
                            response = void 0;
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 7]);
                            return [4, this.httpFetchClient.get(remoteSolutionUri + "/process_engine")];
                        case 2:
                            response = _b.sent();
                            return [3, 7];
                        case 3:
                            error_2 = _b.sent();
                            errorIsNotFoundError = error_2.code === 404;
                            if (!errorIsNotFoundError) return [3, 5];
                            return [4, this.httpFetchClient.get("" + remoteSolutionUri)];
                        case 4:
                            response = _b.sent();
                            return [3, 6];
                        case 5: throw error_2;
                        case 6: return [3, 7];
                        case 7:
                            isResponseFromProcessEngine = response.result['name'] === '@process-engine/process_engine_runtime';
                            if (!isResponseFromProcessEngine) {
                                throw new Error('The response was not send by a ProcessEngine.');
                            }
                            return [2, true];
                        case 8:
                            _a = _b.sent();
                            return [2, false];
                        case 9: return [2];
                    }
                });
            });
        };
        SolutionExplorerPanel.prototype.refreshSolutions = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, this.solutionExplorerList.refreshSolutions()];
                });
            });
        };
        SolutionExplorerPanel.prototype.openSolutionOrDisplayError = function (uri) {
            return __awaiter(this, void 0, void 0, function () {
                var error_3;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4, this.solutionExplorerList.openSolution(uri)];
                        case 1:
                            _a.sent();
                            return [3, 3];
                        case 2:
                            error_3 = _a.sent();
                            this.notificationService.showNotification(index_1.NotificationType.ERROR, error_3.message);
                            return [3, 3];
                        case 3: return [2];
                    }
                });
            });
        };
        SolutionExplorerPanel.prototype.loadRemoteSolutionHistory = function () {
            var remoteSolutionHistoryFromLocalStorage = localStorage.getItem('remoteSolutionHistory');
            var noHistoryExisting = remoteSolutionHistoryFromLocalStorage === null;
            var remoteSolutionHistory = noHistoryExisting
                ? []
                : JSON.parse(remoteSolutionHistoryFromLocalStorage);
            return remoteSolutionHistory;
        };
        SolutionExplorerPanel.prototype.saveRemoteSolutionHistory = function (remoteSolutionHistory) {
            var remoteSolutionHistoryString = JSON.stringify(remoteSolutionHistory);
            localStorage.setItem('remoteSolutionHistory', remoteSolutionHistoryString);
        };
        SolutionExplorerPanel.prototype.addSolutionToRemoteSolutionHistory = function (solutionUri) {
            this.removeSolutionFromSolutionHistroy(solutionUri);
            var remoteSolutionHistory = this.loadRemoteSolutionHistory();
            remoteSolutionHistory.push(solutionUri);
            this.saveRemoteSolutionHistory(remoteSolutionHistory);
        };
        SolutionExplorerPanel.prototype.removeSolutionFromSolutionHistroy = function (solutionUri) {
            var remoteSolutionHistory = this.loadRemoteSolutionHistory();
            var uniqueRemoteSolutionHistory = remoteSolutionHistory.filter(function (remoteSolutionUri) {
                return remoteSolutionUri !== solutionUri;
            });
            this.saveRemoteSolutionHistory(uniqueRemoteSolutionHistory);
        };
        SolutionExplorerPanel.prototype.openDiagramOrDisplayError = function (uri) {
            return __awaiter(this, void 0, void 0, function () {
                var openedDiagram, solution, error_4, diagram, solution, diagramWithURIIsAlreadyOpened;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 3, , 5]);
                            return [4, this.solutionExplorerList.openDiagram(uri)];
                        case 1:
                            openedDiagram = _a.sent();
                            solution = this.solutionExplorerList.getOpenDiagramSolutionEntry();
                            this.solutionService.addOpenDiagram(openedDiagram);
                            return [4, this.navigateToDetailView(openedDiagram, solution)];
                        case 2:
                            _a.sent();
                            return [3, 5];
                        case 3:
                            error_4 = _a.sent();
                            return [4, this.solutionExplorerList.getOpenedDiagramByURI(uri)];
                        case 4:
                            diagram = _a.sent();
                            solution = this.solutionExplorerList.getOpenDiagramSolutionEntry();
                            diagramWithURIIsAlreadyOpened = diagram !== null;
                            if (diagramWithURIIsAlreadyOpened) {
                                return [2, this.navigateToDetailView(diagram, solution)];
                            }
                            this.notificationService.showNotification(index_1.NotificationType.ERROR, error_4.message);
                            return [3, 5];
                        case 5: return [2, undefined];
                    }
                });
            });
        };
        SolutionExplorerPanel.prototype.openNewDiagram = function () {
            var uri = 'about:open-diagrams';
            return this.solutionExplorerList.createDiagram(uri);
        };
        SolutionExplorerPanel.prototype.createNewDiagram = function () {
            var activeSolutionUri = this.router.currentInstruction.queryParams.solutionUri;
            var activeSolution = this.solutionService.getSolutionEntryForUri(activeSolutionUri);
            var activeSolutionCanCreateDiagrams = activeSolution !== undefined && !solution_is_remote_solution_module_1.solutionIsRemoteSolution(activeSolution.uri);
            var uri = activeSolutionCanCreateDiagrams ? activeSolutionUri : 'about:open-diagrams';
            this.solutionExplorerList.createDiagram(uri);
        };
        SolutionExplorerPanel.prototype.registerElectronHooks = function () {
            return __awaiter(this, void 0, void 0, function () {
                var fileInfo, uri;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.ipcRenderer.on('double-click-on-file', this.electronFileOpeningHook);
                            this.ipcRenderer.on('menubar__start_opening_diagram', this.electronOnMenuOpenDiagramHook);
                            this.ipcRenderer.on('menubar__start_opening_solution', this.electronOnMenuOpenSolutionHook);
                            this.ipcRenderer.on('menubar__start_create_diagram', this.electronOnCreateDiagram);
                            this.ipcRenderer.send('waiting-for-double-file-click');
                            fileInfo = this.ipcRenderer.sendSync('get_opened_file');
                            if (!fileInfo.path) return [3, 2];
                            uri = fileInfo.path;
                            return [4, this.openDiagramOrDisplayError(uri)];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2: return [2];
                    }
                });
            });
        };
        SolutionExplorerPanel.prototype.removeElectronFileOpeningHooks = function () {
            this.ipcRenderer.removeListener('double-click-on-file', this.electronFileOpeningHook);
            this.ipcRenderer.removeListener('menubar__start_opening_diagram', this.electronOnMenuOpenDiagramHook);
            this.ipcRenderer.removeListener('menubar__start_opening_solution', this.electronOnMenuOpenSolutionHook);
            this.ipcRenderer.removeListener('menubar__start_create_diagram', this.electronOnCreateDiagram);
        };
        SolutionExplorerPanel.prototype.navigateToDetailView = function (diagram, solution) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.router.navigateToRoute('design', {
                                diagramName: diagram.name,
                                diagramUri: diagram.uri,
                                solutionUri: solution.uri,
                            })];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        __decorate([
            aurelia_framework_1.observable,
            __metadata("design:type", String)
        ], SolutionExplorerPanel.prototype, "selectedProtocol", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", String)
        ], SolutionExplorerPanel.prototype, "uriOfRemoteSolutionWithoutProtocol", void 0);
        __decorate([
            aurelia_framework_1.computedFrom('availableDefaultRemoteSolutions.length', 'remoteSolutionHistoryWithStatus.length'),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [])
        ], SolutionExplorerPanel.prototype, "suggestedRemoteSolutions", null);
        __decorate([
            aurelia_framework_1.computedFrom('suggestedRemoteSolutions.length'),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [])
        ], SolutionExplorerPanel.prototype, "unconnectedSuggestedRemoteSolutions", null);
        __decorate([
            aurelia_framework_1.computedFrom('unconnectedSuggestedRemoteSolutions.length'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [])
        ], SolutionExplorerPanel.prototype, "unconnectedSuggestedRemoteSolutionsExist", null);
        SolutionExplorerPanel = __decorate([
            aurelia_framework_1.inject(aurelia_event_aggregator_1.EventAggregator, 'NotificationService', aurelia_router_1.Router, 'SolutionService', 'HttpFetchClient'),
            __metadata("design:paramtypes", [aurelia_event_aggregator_1.EventAggregator,
                notification_service_1.NotificationService,
                aurelia_router_1.Router, Object, http_fetch_client_1.HttpFetchClient])
        ], SolutionExplorerPanel);
        return SolutionExplorerPanel;
    }());
    exports.SolutionExplorerPanel = SolutionExplorerPanel;
});


;
define('text!modules/solution-explorer/solution-explorer-panel/solution-explorer-panel.css',[],function(){return "solution-explorer-panel {\n  flex: 1;\n  flex-basis: 250px;\n  max-width: 250px; }\n\n.solution-explorer {\n  display: block;\n  width: 250px;\n  height: 100%;\n  min-width: 200px;\n  background-color: #f7f7f7;\n  border-right: 2px solid #dcdbdb;\n  user-select: none; }\n\n.solution-explorer-panel {\n  position: relative;\n  height: 100%; }\n\n.solution-explorer-panel__header {\n  padding: 5px 5px;\n  display: flex;\n  color: #a5a5a5;\n  border-bottom: 2px solid #dcdbdb; }\n\n.solution-explorer-panel__header-name {\n  font-size: 14px;\n  flex: 1; }\n\n.solution-explorer-panel__actions {\n  display: flex; }\n\n.solution-explorer-panel__actions button {\n  padding: 0 2px;\n  background: transparent;\n  border: none;\n  vertical-align: middle; }\n\n.solution-explorer-panel__input {\n  visibility: hidden;\n  height: 0; }\n\n.solution-explorer-panel button {\n  min-width: 20px; }\n\n.solution-explorer-panel__card__alert {\n  margin-top: 10px;\n  margin-bottom: 0; }\n\n.solution-explorer-panel__invalid-uri-message {\n  white-space: pre-line; }\n\n/*\n * Remote Solution Modal Dialog\n*/\n.uri-input--invalid {\n  border: 2px red solid; }\n\n.uri-input--invalid:focus {\n  border: 2px red solid; }\n\n.remote-solution-list {\n  margin: 14px 0;\n  width: 100%;\n  height: 120px;\n  overflow-x: hidden;\n  overflow-y: auto;\n  border: 1px solid #ccc;\n  border-radius: 10px; }\n\n.remote-solution-list__remote-solution {\n  position: relative;\n  width: 100%;\n  height: 40px;\n  padding: 0 10px;\n  margin-bottom: -1px;\n  overflow: hidden;\n  color: darkgray;\n  border-bottom: 1px solid #ccc;\n  user-select: none; }\n\n.remote-solution-list__remote-solution:hover {\n  background-color: rgba(204, 204, 204, 0.25);\n  color: black; }\n\n.remote-solution-list__solution-data {\n  position: absolute;\n  top: 50%;\n  width: calc(100% - 20px);\n  height: 20px;\n  transform: translateY(-50%); }\n\n.remote-solution-list__remote-solution-selected {\n  background-color: rgba(204, 204, 204, 0.5) !important;\n  color: black; }\n\n.remote-solution-list__close-button {\n  position: absolute;\n  top: 50%;\n  right: 20px;\n  margin-top: 1px;\n  background-color: transparent;\n  border: none;\n  transform: translateY(-50%); }\n\n.remote-solution-list__status-icon {\n  margin-right: 5px; }\n\n.solution-explorer-panel__protocol-selector {\n  width: 85px; }\n\n.remote-solution-badge {\n  position: absolute;\n  top: 50%;\n  right: 10px;\n  transform: translateY(-50%); }\n\n.remote-solution-badge__dev {\n  background: #2d2d3c; }\n\n.remote-solution-badge__alpha {\n  background: #aaaaaa; }\n\n.remote-solution-badge__beta {\n  background: #dcbe5a; }\n\n.remote-solution-badge__stable {\n  background: #5aaadc; }\n\n.remote-solution-list__loading-spinner {\n  display: inline-block;\n  width: 100%;\n  height: 100%;\n  user-select: none;\n  white-space: nowrap; }\n\n.remote-solution-list__loading-spinner-icon {\n  position: absolute;\n  left: 50%;\n  top: calc(50% - 22px);\n  height: 150px;\n  transform: translate(-50%, -50%); }\n\n.remote-solution-list__loading-spinner-text {\n  position: absolute;\n  left: 50%;\n  transform: translateX(-50%);\n  margin-top: 5px;\n  bottom: 10px; }\n\n.remote-solution-list__connection-error-message {\n  margin-bottom: 0px;\n  white-space: pre-wrap; }\n";});;
define('text!modules/solution-explorer/solution-explorer-panel/solution-explorer-panel.html',[],function(){return "<template>\n  <require from=\"./solution-explorer-panel.css\"></require>\n  <require from=\"../solution-explorer-list/solution-explorer-list\"></require>\n\n  <div class=\"solution-explorer\">\n    <div class=\"solution-explorer-panel\">\n\n      <div class=\"solution-explorer-panel__header\">\n        <span class=\"solution-explorer-panel__header-name\">Solution Explorer</span>\n\n        <div class=\"solution-explorer-panel__actions\">\n          <button\n            class=\"button\"\n            if.bind=\"canReadFromFileSystem\"\n            click.delegate=\"openDiagram()\"\n            title=\"Open a diagram\">\n\n            <i class=\"fa fa-file\"></i>\n          </button>\n\n          <button\n            class=\"button\"\n            if.bind=\"canReadFromFileSystem\"\n            click.delegate=\"openSolution()\"\n            title=\"Open a solution\">\n\n            <i class=\"fa fa-folder-open\"></i>\n          </button>\n\n          <button\n            class=\"button\"\n            click.delegate=\"openRemoteSolutionModal()\"\n            title=\"Open a remote solution\">\n\n            <i class=\"fa fa-plug\"></i>\n          </button>\n        </div>\n      </div>\n\n      <input class=\"solution-explorer-panel__input d-none\" ref=\"solutionInput\" type=\"file\" change.delegate=\"onSolutionInputChange($event)\" webkitdirectory>\n      <input class=\"solution-explorer-panel__input d-none\" ref=\"openDiagramInput\" type=\"file\" change.delegate=\"onOpenDiagramInputChange($event)\" accept=\".xml, application/xml, .bpmn, application/bpmn20-xml\">\n\n      <solution-explorer-list view-model.ref=\"solutionExplorerList\"></solution-explorer-list>\n\n    </div>\n  </div>\n\n  <!-- Open Remote Solution Modal -->\n  <modal if.bind=\"showOpenRemoteSolutionModal\"\n         header-text=\"Open Remote Solution\"\n         body-style=\"min-height: 230px\"\n         origin.bind=\"solutionExplorerPanel\">\n    <template replace-part=\"modal-body\">\n      <form if.bind=\"!isConnecting\" role=\"form\" submit.delegate=\"openRemoteSolution()\">\n        Location:\n        <div class=\"input-group mb-3\">\n          <div class=\"input-group-prepend\">\n            <button class=\"btn btn-default solution-explorer-panel__protocol-selector dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">${selectedProtocol}  <i class=\"fas fa-angle-down\"></i></button>\n            <div class=\"dropdown-menu\">\n              <a class=\"dropdown-item\" click.delegate=\"selectProtocol(supportedProtocols.HTTP)\">http://</a>\n              <a class=\"dropdown-item\" click.delegate=\"selectProtocol(supportedProtocols.HTTPS)\">https://</a>\n            </div>\n          </div>\n          <input type=\"text\" class=\"form-control\" class.bind=\"uriIsValid || uriIsEmpty ? '' : 'uri-input--invalid'\" value.bind=\"origin.uriOfRemoteSolutionWithoutProtocol\" placeholder=\"Please provide a URI for the remote ProcessEngine\" autofocus>\n          <div class=\"solution-explorer-panel__card__alert alert alert-danger\" if.bind=\"!uriIsValid && !uriIsEmpty\" role=\"alert\">\n            <div class=\"solution-explorer-panel__invalid-uri-message\"><i class=\"fas fa-exclamation-triangle\" aria-hidden=\"true\"></i> The entered URI is invalid.\n              To make it valid make sure it only contains the following characters: a-Z 0-9 - . _ ~ : / ? # [ ] @ ! $ & ' ( ) * + , ; = .\n            </div>\n          </div>\n        </div>\n      </form>\n      <div if.bind=\"!isConnecting\" class=\"remote-solution-list\" if.bind=\"unconnectedSuggestedRemoteSolutionsExist\">\n        <div class=\"remote-solution-list__remote-solution\"\n            repeat.for=\"remoteSolution of unconnectedSuggestedRemoteSolutions\"\n            class.bind=\"uriOfRemoteSolution === remoteSolution.uri ? 'remote-solution-list__remote-solution-selected' : ''\"\n            title.bind=\"remoteSolution.status ? 'Remote solution is online.' : 'Remote solution is offline.'\"\n            click.delegate=\"selectRemoteSolution(remoteSolution.uri)\">\n          <div class=\"remote-solution-list__solution-data\">\n            <i class=\"fas remote-solution-list__status-icon\" class.bind=\"remoteSolution.status ? 'fa-database' : 'fa-bolt'\"></i>\n            <span>${remoteSolution.uri}</span>\n          </div>\n          <h5 if.bind=\"remoteSolution.version !== undefined\">\n            <span class=\"badge badge-secondary remote-solution-badge\" class.bind=\"getBadgeForVersion(remoteSolution.version)\">${getVersionNameForVersion(remoteSolution.version)}</span>\n          </h5>\n          <button if.bind=\"remoteSolution.version === undefined\" class=\"button remote-solution-list__close-button\" click.delegate=\"removeSolutionFromHistory(remoteSolution.uri)\">\n            <i class=\"fas fa-times\"></i>\n          </button>\n        </div>\n      </div>\n      <div if.bind=\"connectionErrorExists\" class=\"alert alert-warning remote-solution-list__connection-error-message\" role=\"alert\">${connectionError}</div>\n      <div if.bind=\"isConnecting\" class=\"remote-solution-list__loading-spinner\">\n        <img class=\"remote-solution-list__loading-spinner-icon\" src=\"src/resources/images/gears.svg\">\n        <h3 class=\"remote-solution-list__loading-spinner-text\">Connecting to ${uriOfRemoteSolution}...</h3>\n      </div>\n    </template>\n    <template replace-part=\"modal-footer\">\n      <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" id=\"cancelOpenRemoteSolutionButton\" click.delegate=\"closeRemoteSolutionModal()\">Cancel</button>\n      <button type=\"submit\" class=\"btn btn-primary\" data-dismiss=\"modal\" id=\"openRemoteSolutionButton\" disabled.bind=\"!uriIsValid || uriIsEmpty || isConnecting\" click.delegate=\"openRemoteSolution()\">Open Solution</button>\n    </template>\n  </modal>\n\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define('modules/solution-explorer/solution-explorer-solution/delete-diagram-modal/delete-diagram-modal',["require", "exports", "aurelia-framework", "aurelia-router", "../../../../contracts/index", "../../../../services/notification-service/notification.service", "../../../../services/solution-explorer-services/open-diagrams-solution-explorer.service", "../../../../services/solution-explorer-services/open-diagram-state.service", "../../../../services/solution-is-remote-solution-module/solution-is-remote-solution.module"], function (require, exports, aurelia_framework_1, aurelia_router_1, index_1, notification_service_1, open_diagrams_solution_explorer_service_1, open_diagram_state_service_1, solution_is_remote_solution_module_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DeleteDiagramModal = (function () {
        function DeleteDiagramModal(notificationService, openDiagramStateService, router, openDiagramService, solutionService) {
            this.showModal = false;
            this.deleteDiagramModal = this;
            this.notificationService = notificationService;
            this.openDiagramStateService = openDiagramStateService;
            this.router = router;
            this.openDiagramService = openDiagramService;
            this.solutionService = solutionService;
        }
        DeleteDiagramModal.prototype.show = function (diagram, solutionExplorerService) {
            return __awaiter(this, void 0, void 0, function () {
                var deletionPromise;
                var _this = this;
                return __generator(this, function (_a) {
                    this.diagram = diagram;
                    this.solutionExplorerService = solutionExplorerService;
                    this.showModal = true;
                    deletionPromise = new Promise(function (resolve, reject) {
                        var cancelDeletion = function () {
                            _this.closeModal();
                            resolve(false);
                            document.getElementById('cancelDeleteDiagramButton').removeEventListener('click', cancelDeletion);
                            document.getElementById('deleteDiagramButton').removeEventListener('click', proceedDeletion);
                        };
                        var proceedDeletion = function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4, this.deleteDiagram()];
                                    case 1:
                                        _a.sent();
                                        resolve(true);
                                        document.getElementById('cancelDeleteDiagramButton').removeEventListener('click', cancelDeletion);
                                        document.getElementById('deleteDiagramButton').removeEventListener('click', proceedDeletion);
                                        return [2];
                                }
                            });
                        }); };
                        setTimeout(function () {
                            document.getElementById('cancelDeleteDiagramButton').addEventListener('click', cancelDeletion, { once: true });
                            document.getElementById('deleteDiagramButton').addEventListener('click', proceedDeletion, { once: true });
                        }, 0);
                    });
                    return [2, deletionPromise];
                });
            });
        };
        DeleteDiagramModal.prototype.closeModal = function () {
            this.diagram = undefined;
            this.solutionExplorerService = undefined;
            this.showModal = false;
        };
        DeleteDiagramModal.prototype.deleteDiagram = function () {
            return __awaiter(this, void 0, void 0, function () {
                var error_1, message, openDiagramServiceIsAvailable, diagramWasActiveDiagram, diagramIndex, previousOrNextDiagramIndex_1, diagramToNavigateTo, diagramIsDeployed, lastIndexOfSlash, lastIndexOfBackSlash, indexBeforeFilename, activeSolutionUri;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4, this.solutionExplorerService.deleteDiagram(this.diagram)];
                        case 1:
                            _a.sent();
                            return [3, 3];
                        case 2:
                            error_1 = _a.sent();
                            message = "Unable to delete the diagram: " + error_1.message;
                            this.notificationService.showNotification(index_1.NotificationType.ERROR, message);
                            return [3, 3];
                        case 3:
                            openDiagramServiceIsAvailable = typeof this.openDiagramService !== 'string';
                            diagramWasActiveDiagram = this.diagram === this.activeDiagram;
                            if (diagramWasActiveDiagram) {
                                diagramIndex = openDiagramServiceIsAvailable
                                    ? this.openDiagramService.getOpenedDiagrams().findIndex(function (diagram) { return diagram.uri === _this.diagram.uri; })
                                    : undefined;
                                previousOrNextDiagramIndex_1 = diagramIndex === 0 ? diagramIndex + 1 : diagramIndex - 1;
                                diagramToNavigateTo = openDiagramServiceIsAvailable
                                    ? this.openDiagramService
                                        .getOpenedDiagrams()
                                        .find(function (diagram, index) { return index === previousOrNextDiagramIndex_1; })
                                    : undefined;
                                diagramIsDeployed = solution_is_remote_solution_module_1.solutionIsRemoteSolution(this.diagram.uri);
                                if (diagramIsDeployed || !diagramToNavigateTo) {
                                    this.router.navigateToRoute('start-page');
                                }
                                else {
                                    lastIndexOfSlash = diagramToNavigateTo.uri.lastIndexOf('/');
                                    lastIndexOfBackSlash = diagramToNavigateTo.uri.lastIndexOf('\\');
                                    indexBeforeFilename = Math.max(lastIndexOfSlash, lastIndexOfBackSlash);
                                    activeSolutionUri = diagramToNavigateTo.uri.substring(0, indexBeforeFilename);
                                    this.router.navigateToRoute('design', {
                                        diagramName: diagramToNavigateTo.name,
                                        diagramUri: diagramToNavigateTo.uri,
                                        solutionUri: activeSolutionUri,
                                        view: this.router.currentInstruction.params.view,
                                    });
                                }
                            }
                            if (openDiagramServiceIsAvailable && !this.diagram.uri.startsWith('http')) {
                                this.openDiagramService.closeDiagram(this.diagram);
                                this.solutionService.removeOpenDiagramByUri(this.diagram.uri);
                                this.openDiagramStateService.deleteDiagramState(this.diagram.uri);
                            }
                            this.diagram = undefined;
                            this.solutionExplorerService = undefined;
                            this.showModal = false;
                            return [2];
                    }
                });
            });
        };
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Object)
        ], DeleteDiagramModal.prototype, "activeDiagram", void 0);
        DeleteDiagramModal = __decorate([
            aurelia_framework_1.inject('NotificationService', 'OpenDiagramStateService', aurelia_router_1.Router, 'OpenDiagramService', 'SolutionService'),
            __metadata("design:paramtypes", [notification_service_1.NotificationService,
                open_diagram_state_service_1.OpenDiagramStateService,
                aurelia_router_1.Router,
                open_diagrams_solution_explorer_service_1.OpenDiagramsSolutionExplorerService, Object])
        ], DeleteDiagramModal);
        return DeleteDiagramModal;
    }());
    exports.DeleteDiagramModal = DeleteDiagramModal;
});


;
define('text!modules/solution-explorer/solution-explorer-solution/delete-diagram-modal/delete-diagram-modal.css',[],function(){return "";});;
define('text!modules/solution-explorer/solution-explorer-solution/delete-diagram-modal/delete-diagram-modal.html',[],function(){return "<template>\n  <require from=\"./delete-diagram-modal.css\"></require>\n\n  <modal if.bind=\"showModal\" header-text=\"Are you sure you want to delete this diagram?\" origin.bind=\"deleteDiagramModal\">\n    <template replace-part=\"modal-body\">\n      Diagram Name: ${origin.diagram.name}\n    </template>\n    <template replace-part=\"modal-footer\">\n      <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" id=\"cancelDeleteDiagramButton\">Cancel</button>\n      <button type=\"button\" class=\"btn btn-danger\" data-dismiss=\"modal\" id=\"deleteDiagramButton\">Delete Diagram</button>\n    </template>\n\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/solution-explorer/solution-explorer-solution/solution-explorer-solution',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "aurelia-router", "aurelia-validation", "aurelia-templating-resources", "path", "@essential-projects/errors_ts", "../../../contracts/index", "../../../environment", "../../../services/notification-service/notification.service", "../../../services/solution-explorer-services/open-diagrams-solution-explorer.service", "../../../services/solution-explorer-services/open-diagram-state.service", "../../../services/deploy-diagram-service/deploy-diagram.service", "../../../services/save-diagram-service/save-diagram.service", "../../fetch-http-client/http-fetch-client", "../../../services/solution-is-remote-solution-module/solution-is-remote-solution.module", "../../../services/is-running-in-electron-module/is-running-in-electron.module"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, aurelia_router_1, aurelia_validation_1, aurelia_templating_resources_1, path_1, errors_ts_1, index_1, environment_1, notification_service_1, open_diagrams_solution_explorer_service_1, open_diagram_state_service_1, deploy_diagram_service_1, save_diagram_service_1, http_fetch_client_1, solution_is_remote_solution_module_1, is_running_in_electron_module_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var ENTER_KEY = 'Enter';
    var ESCAPE_KEY = 'Escape';
    var CloseModalResult;
    (function (CloseModalResult) {
        CloseModalResult[CloseModalResult["Cancel"] = 0] = "Cancel";
        CloseModalResult[CloseModalResult["Save"] = 1] = "Save";
        CloseModalResult[CloseModalResult["Delete"] = 2] = "Delete";
    })(CloseModalResult || (CloseModalResult = {}));
    var SolutionExplorerSolution = (function () {
        function SolutionExplorerSolution(router, eventAggregator, validationController, diagramCreationService, notificationService, solutionService, openDiagramStateService, deployDiagramService, saveDiagramService, bindingSignaler, httpFetchClient) {
            var _this = this;
            this.solutionExplorerSolution = this;
            this.showCloseModal = false;
            this.peHasStarted = false;
            this.showContextMenu = false;
            this.processEngineRunning = false;
            this.isSavingDiagrams = false;
            this.currentlySavingDiagramName = '';
            this.processEngineStartupError = false;
            this.diagramRoute = 'design';
            this.designView = 'detail';
            this.diagramCreationState = {
                currentDiagramInputValue: undefined,
                isCreateDiagramInputShown: false,
            };
            this.diagramRenamingState = {
                currentDiagramInputValue: undefined,
            };
            this.diagramValidationRegExpList = [/^[a-z0-9]/i, /^[._ -]/i, /^[äöüß]/i];
            this.currentlyRenamingDiagram = null;
            this.isAttached = false;
            this.sortedDiagramsOfSolutions = [];
            this.isPolling = false;
            this.closeAllDiagramsEventFunction = function () { return __awaiter(_this, void 0, void 0, function () {
                var currentlyOpenDiagrams;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            currentlyOpenDiagrams = __spreadArrays(this.openedDiagrams);
                            return [4, this.closeMultipleDiagrams(currentlyOpenDiagrams)];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            }); };
            this.saveAllDiagramsEventFunction = function () {
                _this.saveAllUnsavedDiagrams();
            };
            this.onCreateNewDiagramClickEvent = function (event) { return __awaiter(_this, void 0, void 0, function () {
                var inputWasClicked, emptyDiagram;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            inputWasClicked = event.target === this.createNewDiagramInput;
                            if (inputWasClicked) {
                                return [2];
                            }
                            return [4, this.finishDiagramCreation()];
                        case 1:
                            emptyDiagram = _a.sent();
                            if (emptyDiagram === undefined) {
                                return [2];
                            }
                            return [4, this.openDiagramAndUpdateSolution(emptyDiagram)];
                        case 2:
                            _a.sent();
                            return [2];
                    }
                });
            }); };
            this.onCreateNewDiagramKeyupEvent = function (event) { return __awaiter(_this, void 0, void 0, function () {
                var pressedKey, emptyDiagram;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            pressedKey = event.key;
                            if (!(pressedKey === ENTER_KEY)) return [3, 3];
                            return [4, this.finishDiagramCreation()];
                        case 1:
                            emptyDiagram = _a.sent();
                            if (emptyDiagram === undefined) {
                                return [2];
                            }
                            return [4, this.openDiagramAndUpdateSolution(emptyDiagram)];
                        case 2:
                            _a.sent();
                            return [3, 4];
                        case 3:
                            if (pressedKey === ESCAPE_KEY) {
                                this.resetDiagramCreation();
                            }
                            _a.label = 4;
                        case 4: return [2];
                    }
                });
            }); };
            this.onRenameDiagramClickEvent = function (event) { return __awaiter(_this, void 0, void 0, function () {
                var inputWasClicked, inputWasNotValid;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            inputWasClicked = event.target === this.renameDiagramInput;
                            if (inputWasClicked) {
                                return [2];
                            }
                            return [4, this.finishDiagramRenaming(true)];
                        case 1:
                            inputWasNotValid = !(_a.sent());
                            if (inputWasNotValid) {
                                this.resetDiagramRenaming();
                                return [2];
                            }
                            this.updateSolution().then(function () {
                                _this.refreshDisplayedDiagrams();
                            });
                            this.resetDiagramRenaming();
                            return [2];
                    }
                });
            }); };
            this.onRenameDiagramKeyupEvent = function (event) { return __awaiter(_this, void 0, void 0, function () {
                var pressedKey, enterWasPressed, escapeWasPressed, inputWasNotValid;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            pressedKey = event.key;
                            enterWasPressed = pressedKey === ENTER_KEY;
                            escapeWasPressed = pressedKey === ESCAPE_KEY;
                            if (!enterWasPressed) return [3, 2];
                            return [4, this.finishDiagramRenaming(false)];
                        case 1:
                            inputWasNotValid = !(_a.sent());
                            if (inputWasNotValid) {
                                return [2];
                            }
                            this.updateSolution().then(function () {
                                _this.refreshDisplayedDiagrams();
                            });
                            this.resetDiagramRenaming();
                            return [3, 3];
                        case 2:
                            if (escapeWasPressed) {
                                this.resetDiagramRenaming();
                            }
                            _a.label = 3;
                        case 3: return [2];
                    }
                });
            }); };
            this.router = router;
            this.eventAggregator = eventAggregator;
            this.validationController = validationController;
            this.diagramCreationService = diagramCreationService;
            this.notificationService = notificationService;
            this.globalSolutionService = solutionService;
            this.openDiagramStateService = openDiagramStateService;
            this.deployDiagramService = deployDiagramService;
            this.saveDiagramService = saveDiagramService;
            this.signaler = bindingSignaler;
            this.httpFetchClient = httpFetchClient;
            this.updateDiagramStateList();
            this.diagramStatesChangedCallbackId = this.openDiagramStateService.onDiagramStatesChanged(function () {
                _this.updateDiagramStateList();
            });
        }
        SolutionExplorerSolution.prototype.attached = function () {
            return __awaiter(this, void 0, void 0, function () {
                var solutionIsInternalProcessEngine, updateSubscription;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            solutionIsInternalProcessEngine = this.displayedSolutionEntry.uri === window.localStorage.getItem('InternalProcessEngineRoute');
                            this.isAttached = true;
                            if (is_running_in_electron_module_1.isRunningInElectron()) {
                                this.ipcRenderer = window.nodeRequire('electron').ipcRenderer;
                                if (solutionIsInternalProcessEngine) {
                                    this.ipcRenderer.send('add_internal_processengine_status_listener');
                                    this.ipcRenderer.on('internal_processengine_status', function (event, status, errorLog) { return __awaiter(_this, void 0, void 0, function () {
                                        var _this = this;
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0:
                                                    if (!(status === 'success')) return [3, 2];
                                                    this.processEngineRunning = true;
                                                    this.peHasStarted = true;
                                                    return [4, this.updateSolution()];
                                                case 1:
                                                    _a.sent();
                                                    this.solutionEventListenerId = this.displayedSolutionEntry.service.watchSolution(function () {
                                                        _this.updateSolution();
                                                    });
                                                    return [3, 3];
                                                case 2:
                                                    this.processEngineErrorLog = errorLog;
                                                    this.processEngineStartupError = true;
                                                    this.processEngineRunning = false;
                                                    this.isConnected = false;
                                                    this.cssIconClass = 'fa fa-bolt';
                                                    console.error(errorLog);
                                                    _a.label = 3;
                                                case 3: return [2];
                                            }
                                        });
                                    }); });
                                }
                            }
                            this.originalIconClass = this.cssIconClass;
                            this.updateSolutionExplorer();
                            this.subscriptions = [
                                this.eventAggregator.subscribe('router:navigation:success', function () {
                                    _this.updateSolutionExplorer();
                                }),
                                this.eventAggregator.subscribe(index_1.AuthenticationStateEvent.LOGIN, function () { return __awaiter(_this, void 0, void 0, function () {
                                    var _this = this;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4, this.updateSolution()];
                                            case 1:
                                                _a.sent();
                                                if (this.solutionEventListenerId !== undefined) {
                                                    this.displayedSolutionEntry.service.unwatchSolution(this.solutionEventListenerId);
                                                }
                                                if (!this.displayedSolutionEntry.isOpenDiagram) {
                                                    this.solutionEventListenerId = this.displayedSolutionEntry.service.watchSolution(function () {
                                                        _this.updateSolution();
                                                    });
                                                }
                                                return [2];
                                        }
                                    });
                                }); }),
                                this.eventAggregator.subscribe(environment_1.default.events.solutionExplorer.closeAllOpenDiagrams, this.closeAllDiagramsEventFunction),
                                this.eventAggregator.subscribe(environment_1.default.events.solutionExplorer.closeDiagram, function () {
                                    _this.closeDiagram(_this.activeDiagram);
                                }),
                            ];
                            if (this.displayedSolutionEntry.isOpenDiagram) {
                                updateSubscription = this.eventAggregator.subscribe(environment_1.default.events.solutionExplorer.updateOpenDiagrams, function () {
                                    _this.updateSolution();
                                });
                                this.subscriptions.push(updateSubscription);
                                if (is_running_in_electron_module_1.isRunningInElectron()) {
                                    this.ipcRenderer.on('menubar__start_close_all_diagrams', this.closeAllDiagramsEventFunction);
                                    this.ipcRenderer.on('menubar__start_save_all_diagrams', this.saveAllDiagramsEventFunction);
                                }
                            }
                            if (!solution_is_remote_solution_module_1.solutionIsRemoteSolution(this.displayedSolutionEntry.uri)) return [3, 2];
                            if (solutionIsInternalProcessEngine) {
                                return [2];
                            }
                            return [4, this.waitForProcessEngine()];
                        case 1:
                            _a.sent();
                            return [3, 3];
                        case 2:
                            this.setValidationRules();
                            setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4, this.updateSolution()];
                                        case 1:
                                            _a.sent();
                                            return [2];
                                    }
                                });
                            }); }, 0);
                            if (!this.displayedSolutionEntry.isOpenDiagram) {
                                this.solutionEventListenerId = this.displayedSolutionEntry.service.watchSolution(function () {
                                    _this.updateSolution();
                                });
                            }
                            _a.label = 3;
                        case 3: return [2];
                    }
                });
            });
        };
        SolutionExplorerSolution.prototype.waitForProcessEngine = function () {
            var _this = this;
            return new Promise(function (resolve, reject) {
                var makeRequest = function () {
                    setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
                        var error_1, errorIsNotFoundError, error_2;
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _a.trys.push([0, 9, , 10]);
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, 3, , 7]);
                                    return [4, this.httpFetchClient.get(this.displayedSolutionEntry.uri + "/process_engine")];
                                case 2:
                                    _a.sent();
                                    return [3, 7];
                                case 3:
                                    error_1 = _a.sent();
                                    errorIsNotFoundError = error_1.code === 404;
                                    if (!errorIsNotFoundError) return [3, 5];
                                    return [4, this.httpFetchClient.get("" + this.displayedSolutionEntry.uri)];
                                case 4:
                                    _a.sent();
                                    return [3, 6];
                                case 5: throw error_1;
                                case 6: return [3, 7];
                                case 7: return [4, this.updateSolution()];
                                case 8:
                                    _a.sent();
                                    this.solutionEventListenerId = this.displayedSolutionEntry.service.watchSolution(function () {
                                        _this.updateSolution();
                                    });
                                    resolve(true);
                                    return [3, 10];
                                case 9:
                                    error_2 = _a.sent();
                                    makeRequest();
                                    return [3, 10];
                                case 10: return [2];
                            }
                        });
                    }); }, 10);
                };
                makeRequest();
            });
        };
        SolutionExplorerSolution.prototype.detached = function () {
            this.isAttached = false;
            clearTimeout(this.refreshTimeoutTask);
            this.disposeSubscriptions();
            if (this.diagramCreationState.isCreateDiagramInputShown) {
                this.resetDiagramCreation();
            }
            if (this.isCurrentlyRenamingDiagram) {
                this.resetDiagramRenaming();
            }
            if (this.displayedSolutionEntry.isOpenDiagram) {
                this.ipcRenderer.removeListener('menubar__start_close_all_diagrams', this.closeAllDiagramsEventFunction);
                this.ipcRenderer.removeListener('menubar__start_save_all_diagrams', this.saveAllDiagramsEventFunction);
            }
            this.openDiagramStateService.removeOnDiagramStatesChangedListener(this.diagramStatesChangedCallbackId);
            if (this.solutionEventListenerId !== undefined) {
                this.displayedSolutionEntry.service.unwatchSolution(this.solutionEventListenerId);
            }
        };
        SolutionExplorerSolution.prototype.showDeleteDiagramModal = function (diagram, event) {
            return __awaiter(this, void 0, void 0, function () {
                var diagramWasDeleted;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            event.stopPropagation();
                            return [4, this.deleteDiagramModal.show(diagram, this.solutionService)];
                        case 1:
                            diagramWasDeleted = _a.sent();
                            if (!diagramWasDeleted) return [3, 3];
                            return [4, this.updateSolution()];
                        case 2:
                            _a.sent();
                            this.refreshDisplayedDiagrams();
                            _a.label = 3;
                        case 3: return [2];
                    }
                });
            });
        };
        SolutionExplorerSolution.prototype.copyToClipboard = function () {
            this.errorLogArea.select();
            document.execCommand('copy');
        };
        SolutionExplorerSolution.prototype.solutionServiceChanged = function (newValue, oldValue) {
            if (!this.processEngineRunning) {
                return undefined;
            }
            return this.updateSolution();
        };
        SolutionExplorerSolution.prototype.updateSolution = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, updatedDiagramList, diagramsOfSolutionChanged, error_3;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _b.trys.push([0, 3, , 4]);
                            _a = this;
                            return [4, this.solutionService.loadSolution()];
                        case 1:
                            _a.openedSolution = _b.sent();
                            return [4, this.updateSolutionEntry()];
                        case 2:
                            _b.sent();
                            updatedDiagramList = this.displayedSolutionEntry.isOpenDiagram
                                ? this.openedSolution.diagrams
                                : this.openedSolution.diagrams.sort(this.diagramSorter);
                            diagramsOfSolutionChanged = JSON.stringify(this.sortedDiagramsOfSolutions) !== JSON.stringify(updatedDiagramList);
                            if (diagramsOfSolutionChanged) {
                                this.refreshDisplayedDiagrams();
                            }
                            this.isConnected = true;
                            this.cssIconClass = this.originalIconClass;
                            this.tooltipText = '';
                            this.processEngineRunning = true;
                            this.authorisationError = false;
                            this.authenticationError = false;
                            return [3, 4];
                        case 3:
                            error_3 = _b.sent();
                            if (errors_ts_1.isError(error_3, errors_ts_1.UnauthorizedError)) {
                                this.authorisationError = true;
                                this.sortedDiagramsOfSolutions = [];
                                this.openedSolution = undefined;
                            }
                            else if (errors_ts_1.isError(error_3, errors_ts_1.ForbiddenError)) {
                                if (this.displayedSolutionEntry.isLoggedIn) {
                                    this.authorisationError = true;
                                }
                                else {
                                    this.authenticationError = true;
                                }
                                this.sortedDiagramsOfSolutions = [];
                                this.openedSolution = undefined;
                            }
                            else {
                                this.openedSolution.diagrams = undefined;
                                this.sortedDiagramsOfSolutions = [];
                                this.cssIconClass = 'fa fa-bolt';
                                this.isConnected = false;
                                if (solution_is_remote_solution_module_1.solutionIsRemoteSolution(this.displayedSolutionEntry.uri)) {
                                    this.tooltipText = 'ProcessEngine is disconnected!';
                                }
                                else {
                                    this.tooltipText = 'Solution was removed!';
                                }
                                this.processEngineRunning = false;
                            }
                            return [3, 4];
                        case 4: return [2];
                    }
                });
            });
        };
        SolutionExplorerSolution.prototype.updateSolutionEntry = function () {
            return __awaiter(this, void 0, void 0, function () {
                var solutionIsNotRemote, response, error_4, errorIsNotFoundError, authority, fetchResponse, error_5, errorIsNotFoundError, fetchResponse;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            solutionIsNotRemote = !solution_is_remote_solution_module_1.solutionIsRemoteSolution(this.displayedSolutionEntry.uri);
                            if (solutionIsNotRemote) {
                                return [2];
                            }
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 7]);
                            return [4, this.httpFetchClient.get(this.displayedSolutionEntry.uri + "/process_engine")];
                        case 2:
                            response = _a.sent();
                            return [3, 7];
                        case 3:
                            error_4 = _a.sent();
                            errorIsNotFoundError = error_4.code === 404;
                            if (!errorIsNotFoundError) return [3, 5];
                            return [4, this.httpFetchClient.get("" + this.displayedSolutionEntry.uri)];
                        case 4:
                            response = _a.sent();
                            return [3, 6];
                        case 5: throw error_4;
                        case 6: return [3, 7];
                        case 7:
                            _a.trys.push([7, 9, , 13]);
                            return [4, this.httpFetchClient.get(this.displayedSolutionEntry.uri + "/process_engine/security/authority")];
                        case 8:
                            fetchResponse = _a.sent();
                            authority = fetchResponse.result.authority;
                            return [3, 13];
                        case 9:
                            error_5 = _a.sent();
                            errorIsNotFoundError = error_5.code === 404;
                            if (!errorIsNotFoundError) return [3, 11];
                            return [4, this.httpFetchClient.get(this.displayedSolutionEntry.uri + "/security/authority")];
                        case 10:
                            fetchResponse = _a.sent();
                            authority = fetchResponse.result.authority;
                            return [3, 12];
                        case 11: throw error_5;
                        case 12: return [3, 13];
                        case 13:
                            this.displayedSolutionEntry.authority = authority;
                            this.displayedSolutionEntry.processEngineVersion = response.result.version;
                            this.globalSolutionService.addSolutionEntry(this.displayedSolutionEntry);
                            this.signaler.signal('update-version-icon');
                            return [2];
                    }
                });
            });
        };
        SolutionExplorerSolution.prototype.closeDiagram = function (diagram, event) {
            return __awaiter(this, void 0, void 0, function () {
                var eventSet, diagramState, diagramHasUnsavedChanges, cancelClosing, closedDiagramWasActiveDiagram;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            eventSet = event !== undefined;
                            if (eventSet) {
                                event.stopPropagation();
                            }
                            diagramState = this.openDiagramStateService.loadDiagramState(diagram.uri);
                            diagramHasUnsavedChanges = diagramState !== null && diagramState.metadata.isChanged;
                            if (!diagramHasUnsavedChanges) return [3, 2];
                            return [4, this.showCloseDiagramModal(diagram)];
                        case 1:
                            cancelClosing = (_a.sent()) === CloseModalResult.Cancel;
                            if (cancelClosing) {
                                return [2, undefined];
                            }
                            _a.label = 2;
                        case 2:
                            closedDiagramWasActiveDiagram = this.activeDiagramUri === diagram.uri;
                            if (closedDiagramWasActiveDiagram) {
                                return [2, new Promise(function (resolve) {
                                        var subscription = _this.eventAggregator.subscribe('router:navigation:success', function () {
                                            _this.closeOpenDiagram(diagram);
                                            subscription.dispose();
                                            resolve();
                                        });
                                        _this.router.navigateToRoute('start-page');
                                    })];
                            }
                            this.closeOpenDiagram(diagram);
                            return [2, undefined];
                    }
                });
            });
        };
        SolutionExplorerSolution.prototype.startRenamingOfDiagram = function (diagram, event) {
            return __awaiter(this, void 0, void 0, function () {
                var messageTitle, messageBody, message;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            event.stopPropagation();
                            return [4, this.isDiagramDetailViewOfDiagramOpen(diagram.uri)];
                        case 1:
                            if (_a.sent()) {
                                messageTitle = '<h4 class="toast-message__headline">Not supported while opened.</h4>';
                                messageBody = 'Renaming of opened diagrams is currently not supported. Please switch to another diagram and try again.';
                                message = messageTitle + "\n" + messageBody;
                                this.notificationService.showNotification(index_1.NotificationType.INFO, message, {
                                    toastClass: 'toast-not-allowed-renaming-or-deleting',
                                });
                                return [2];
                            }
                            if (this.isCurrentlyRenamingDiagram) {
                                return [2];
                            }
                            if (this.diagramCreationState.isCreateDiagramInputShown) {
                                return [2];
                            }
                            this.currentlyRenamingDiagram = diagram;
                            window.setTimeout(function () {
                                _this.renameDiagramInput.focus();
                                _this.diagramRenamingState.currentDiagramInputValue = diagram.name;
                                _this.setValidationRules();
                                _this.validationController.validate();
                            }, 0);
                            document.addEventListener('click', this.onRenameDiagramClickEvent);
                            document.addEventListener('keyup', this.onRenameDiagramKeyupEvent);
                            return [2];
                    }
                });
            });
        };
        SolutionExplorerSolution.prototype.activateContextMenu = function (event, diagram) {
            var _this = this;
            this.diagramInContextMenu = diagram;
            this.diagramContextMenu.style.top = event.y + "px";
            this.diagramContextMenu.style.left = event.x + "px";
            this.showContextMenu = true;
            var documentEventListener = function () {
                _this.showContextMenu = false;
                _this.diagramInContextMenu = undefined;
                document.removeEventListener('click', documentEventListener);
            };
            document.addEventListener('click', documentEventListener);
        };
        SolutionExplorerSolution.prototype.duplicateDiagram = function () {
            return __awaiter(this, void 0, void 0, function () {
                var noDiagramInContextMenu, newNameFound, newName, diagramNumber, isDiagramNameNotEqualToNewName, duplicatedDiagram;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            noDiagramInContextMenu = this.diagramInContextMenu === undefined;
                            if (noDiagramInContextMenu) {
                                return [2];
                            }
                            newNameFound = false;
                            diagramNumber = 1;
                            isDiagramNameNotEqualToNewName = function (diagram) {
                                return diagram.name !== newName;
                            };
                            while (newNameFound === false) {
                                newName = this.diagramInContextMenu.name + " (" + diagramNumber + ")";
                                newNameFound = this.openedDiagrams.every(isDiagramNameNotEqualToNewName);
                                diagramNumber++;
                            }
                            return [4, this.diagramCreationService.createNewDiagram(this.displayedSolutionEntry.uri, newName, this.diagramInContextMenu.xml)];
                        case 1:
                            duplicatedDiagram = _a.sent();
                            return [4, this.solutionService.saveDiagram(duplicatedDiagram, duplicatedDiagram.uri)];
                        case 2:
                            _a.sent();
                            return [4, this.updateSolution()];
                        case 3:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        SolutionExplorerSolution.prototype.deployDiagram = function () {
            return __awaiter(this, void 0, void 0, function () {
                var noDiagramInContextMenu, diagramState, diagramHasState, xml;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            noDiagramInContextMenu = this.diagramInContextMenu === undefined;
                            if (noDiagramInContextMenu) {
                                return [2];
                            }
                            diagramState = this.openDiagramStateService.loadDiagramState(this.diagramInContextMenu.uri);
                            diagramHasState = diagramState !== null;
                            xml = diagramHasState ? diagramState.data.xml : undefined;
                            return [4, this.deployDiagramService.deployDiagram(this.displayedSolutionEntry, this.diagramInContextMenu, xml)];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        SolutionExplorerSolution.prototype.startCreationOfNewDiagram = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    if (this.diagramCreationState.isCreateDiagramInputShown) {
                        return [2];
                    }
                    if (this.isCurrentlyRenamingDiagram) {
                        return [2];
                    }
                    if (this.displayedSolutionEntry.isOpenDiagram) {
                        this.openNewDiagram();
                        return [2];
                    }
                    this.diagramCreationState.isCreateDiagramInputShown = true;
                    window.setTimeout(function () {
                        _this.createNewDiagramInput.focus();
                        _this.setValidationRules();
                    }, 0);
                    document.addEventListener('click', this.onCreateNewDiagramClickEvent);
                    document.addEventListener('keyup', this.onCreateNewDiagramKeyupEvent);
                    return [2];
                });
            });
        };
        Object.defineProperty(SolutionExplorerSolution.prototype, "diagramValidationErrors", {
            get: function () {
                var validationErrorPresent = this.validationController.errors.length >= 1;
                if (validationErrorPresent) {
                    this.setInvalidCharacterMessage(this.validationController.errors);
                }
                return this.validationController.errors;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SolutionExplorerSolution.prototype, "hasValidationErrors", {
            get: function () {
                return this.validationController.errors && this.validationController.errors.length > 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SolutionExplorerSolution.prototype, "currentlyRenamingDiagramUri", {
            get: function () {
                return this.currentlyRenamingDiagram === null ? null : this.currentlyRenamingDiagram.uri;
            },
            enumerable: true,
            configurable: true
        });
        SolutionExplorerSolution.prototype.shouldFileIconBeShown = function () {
            return false;
        };
        Object.defineProperty(SolutionExplorerSolution.prototype, "canRenameDiagram", {
            get: function () {
                return (!this.displayedSolutionEntry.isOpenDiagram &&
                    this.openedSolution &&
                    !solution_is_remote_solution_module_1.solutionIsRemoteSolution(this.openedSolution.uri));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SolutionExplorerSolution.prototype, "diagramChangedStateMap", {
            get: function () {
                var isChangedMap = new Map();
                this.diagramStateList.forEach(function (diagramStateListEntry) {
                    var isChanged = diagramStateListEntry !== null && diagramStateListEntry.diagramState.metadata.isChanged;
                    isChangedMap.set(diagramStateListEntry.uri, isChanged);
                });
                return isChangedMap;
            },
            enumerable: true,
            configurable: true
        });
        SolutionExplorerSolution.prototype.canDeleteDiagram = function () {
            return !this.displayedSolutionEntry.isOpenDiagram && this.openedSolution !== undefined;
        };
        Object.defineProperty(SolutionExplorerSolution.prototype, "solutionIsNotLoaded", {
            get: function () {
                return (solution_is_remote_solution_module_1.solutionIsRemoteSolution(this.displayedSolutionEntry.uri) &&
                    (this.openedSolution === null || this.openedSolution === undefined || !this.processEngineRunning));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SolutionExplorerSolution.prototype, "openedDiagrams", {
            get: function () {
                return this.sortedDiagramsOfSolutions;
            },
            enumerable: true,
            configurable: true
        });
        SolutionExplorerSolution.prototype.getDiagramLocation = function (diagramUri) {
            var lastIndexOfSlash = diagramUri.lastIndexOf('/');
            var lastIndexOfBackSlash = diagramUri.lastIndexOf('\\');
            var indexBeforeFilename = Math.max(lastIndexOfSlash, lastIndexOfBackSlash);
            var diagramLocationWithoutFileName = diagramUri.slice(0, indexBeforeFilename);
            return diagramLocationWithoutFileName;
        };
        SolutionExplorerSolution.prototype.getDiagramFolder = function (diagramUri) {
            var diagramLocation = this.getDiagramLocation(diagramUri);
            var lastIndexOfSlash = diagramLocation.lastIndexOf('/');
            var lastIndexOfBackSlash = diagramLocation.lastIndexOf('\\');
            var indexBeforeFoldername = Math.max(lastIndexOfSlash, lastIndexOfBackSlash);
            var indexIsInvalid = indexBeforeFoldername < 0;
            if (indexIsInvalid) {
                return '';
            }
            var diagramFolder = diagramLocation.slice(indexBeforeFoldername, diagramLocation.length);
            return diagramFolder;
        };
        Object.defineProperty(SolutionExplorerSolution.prototype, "activeDiagramUri", {
            get: function () {
                var activeDiagramIsNotSet = this.activeDiagram === undefined;
                if (activeDiagramIsNotSet) {
                    return undefined;
                }
                var solutionUri = this.router.currentInstruction.queryParams.solutionUri;
                var solutionUriUnspecified = solutionUri === undefined;
                if (solutionUriUnspecified) {
                    return undefined;
                }
                return this.activeDiagram.uri;
            },
            enumerable: true,
            configurable: true
        });
        SolutionExplorerSolution.prototype.openDiagram = function (diagram) {
            return __awaiter(this, void 0, void 0, function () {
                var diagramIsFromLocalSolution, diagramIsNotYetOpened;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            diagramIsFromLocalSolution = !solution_is_remote_solution_module_1.solutionIsRemoteSolution(diagram.uri);
                            if (!diagramIsFromLocalSolution) return [3, 2];
                            diagramIsNotYetOpened = !this.openDiagramService
                                .getOpenedDiagrams()
                                .some(function (openedDiagram) {
                                return openedDiagram.uri === diagram.uri;
                            });
                            if (!diagramIsNotYetOpened) return [3, 2];
                            return [4, this.openDiagramService.openDiagramFromSolution(diagram.uri, this.createIdentityForSolutionExplorer())];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            this.navigateToDetailView(diagram);
                            return [2];
                    }
                });
            });
        };
        SolutionExplorerSolution.prototype.isUriFromRemoteSolution = function (uri) {
            return solution_is_remote_solution_module_1.solutionIsRemoteSolution(uri);
        };
        SolutionExplorerSolution.prototype.updateDiagramStateList = function () {
            this.diagramStateList = this.openDiagramStateService.loadDiagramStateForAllDiagrams();
        };
        SolutionExplorerSolution.prototype.closeMultipleDiagrams = function (diagrams) {
            return __awaiter(this, void 0, void 0, function () {
                var diagramsIsEmpty, amountOfDiagrams, index, nextDiagramIndex, isLastDiagram, currentDiagram, nextDiagram, diagramState, diagramHasUnsavedChanges, closeDiagram, closeModalResult;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            diagramsIsEmpty = diagrams === undefined || diagrams.length === 0;
                            if (diagramsIsEmpty) {
                                return [2];
                            }
                            amountOfDiagrams = diagrams.length;
                            this.navigateToDiagram(diagrams[0]);
                            index = 0;
                            _a.label = 1;
                        case 1:
                            if (!(index < amountOfDiagrams)) return [3, 10];
                            nextDiagramIndex = index + 1;
                            isLastDiagram = nextDiagramIndex === amountOfDiagrams;
                            currentDiagram = diagrams[index];
                            nextDiagram = isLastDiagram ? undefined : diagrams[nextDiagramIndex];
                            diagramState = this.openDiagramStateService.loadDiagramState(currentDiagram.uri);
                            diagramHasUnsavedChanges = diagramState !== null && diagramState.metadata.isChanged;
                            closeDiagram = true;
                            if (!diagramHasUnsavedChanges) return [3, 3];
                            return [4, this.showCloseDiagramModal(currentDiagram, false)];
                        case 2:
                            closeModalResult = _a.sent();
                            closeDiagram = closeModalResult !== CloseModalResult.Cancel;
                            _a.label = 3;
                        case 3:
                            if (!isLastDiagram) return [3, 5];
                            return [4, this.navigateToStartPage()];
                        case 4:
                            _a.sent();
                            return [3, 7];
                        case 5: return [4, this.navigateToDiagram(nextDiagram)];
                        case 6:
                            _a.sent();
                            _a.label = 7;
                        case 7:
                            if (!closeDiagram) return [3, 9];
                            return [4, this.closeOpenDiagram(currentDiagram)];
                        case 8:
                            _a.sent();
                            _a.label = 9;
                        case 9:
                            index++;
                            return [3, 1];
                        case 10: return [2];
                    }
                });
            });
        };
        Object.defineProperty(SolutionExplorerSolution.prototype, "isCurrentlyRenamingDiagram", {
            get: function () {
                return this.currentlyRenamingDiagram !== null;
            },
            enumerable: true,
            configurable: true
        });
        SolutionExplorerSolution.prototype.navigateToStartPage = function () {
            var _this = this;
            return new Promise(function (resolve) {
                _this.eventAggregator.subscribeOnce('router:navigation:success', function () {
                    resolve();
                });
                _this.router.navigateToRoute('start-page');
            });
        };
        SolutionExplorerSolution.prototype.navigateToDiagram = function (diagram) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2, new Promise(function (resolve) {
                            _this.eventAggregator.subscribeOnce('router:navigation:success', function () {
                                resolve();
                            });
                            _this.router.navigateToRoute('design', {
                                view: _this.designView,
                                diagramName: diagram.name,
                                diagramUri: diagram.uri,
                                solutionUri: _this.displayedSolutionEntry.uri,
                            });
                        })];
                });
            });
        };
        SolutionExplorerSolution.prototype.navigateBack = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2, new Promise(function (resolve) {
                            _this.eventAggregator.subscribeOnce('router:navigation:success', function () {
                                resolve();
                            });
                            _this.router.navigateBack();
                        })];
                });
            });
        };
        SolutionExplorerSolution.prototype.navigateToDetailView = function (diagram) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.router.navigateToRoute(this.diagramRoute, {
                                view: this.inspectView ? this.inspectView : this.designView,
                                diagramName: diagram.name,
                                diagramUri: diagram.uri,
                                solutionUri: this.displayedSolutionEntry.uri,
                            })];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        SolutionExplorerSolution.prototype.createIdentityForSolutionExplorer = function () {
            var accessToken = this.createDummyAccessToken();
            var identity = {
                token: accessToken,
                userId: '',
            };
            return identity;
        };
        SolutionExplorerSolution.prototype.createDummyAccessToken = function () {
            var dummyAccessTokenString = 'dummy_token';
            var base64EncodedString = btoa(dummyAccessTokenString);
            return base64EncodedString;
        };
        Object.defineProperty(SolutionExplorerSolution.prototype, "diagramSorter", {
            get: function () {
                var sortOptions = {
                    caseFirst: 'lower',
                };
                var sorter = function (firstElement, secondElement) {
                    return firstElement.name.localeCompare(secondElement.name, undefined, sortOptions);
                };
                return sorter;
            },
            enumerable: true,
            configurable: true
        });
        SolutionExplorerSolution.prototype.saveAllUnsavedDiagrams = function () {
            return __awaiter(this, void 0, void 0, function () {
                var diagramStateList, _loop_1, this_1, _i, diagramStateList_1, diagramStateListEntry;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (this.isSavingDiagrams) {
                                return [2];
                            }
                            this.isSavingDiagrams = true;
                            diagramStateList = this.openDiagramStateService
                                .loadDiagramStateForAllDiagrams()
                                .filter(function (diagramStateListEntry) {
                                return diagramStateListEntry.diagramState.metadata.isChanged;
                            });
                            _loop_1 = function (diagramStateListEntry) {
                                var isActiveDiagram, diagramToSave, diagramNotFound, diagramState;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            isActiveDiagram = this_1.activeDiagram !== undefined && this_1.activeDiagram.uri === diagramStateListEntry.uri;
                                            if (!isActiveDiagram) return [3, 3];
                                            this_1.currentlySavingDiagramName = this_1.activeDiagram.name;
                                            return [4, this_1.saveActiveDiagram()];
                                        case 1:
                                            _a.sent();
                                            return [4, this_1.waitForSaving()];
                                        case 2:
                                            _a.sent();
                                            return [2, "continue"];
                                        case 3:
                                            diagramToSave = this_1.openedDiagrams.find(function (diagram) {
                                                return diagram.uri === diagramStateListEntry.uri;
                                            });
                                            diagramNotFound = diagramToSave === undefined;
                                            if (diagramNotFound) {
                                                return [2, "continue"];
                                            }
                                            this_1.currentlySavingDiagramName = diagramToSave.name;
                                            diagramToSave.xml = diagramStateListEntry.diagramState.data.xml;
                                            return [4, this_1.saveDiagramService.saveDiagram(this_1.displayedSolutionEntry, diagramToSave, diagramToSave.xml)];
                                        case 4:
                                            _a.sent();
                                            diagramState = this_1.openDiagramStateService.loadDiagramState(diagramToSave.uri);
                                            diagramState.metadata.isChanged = false;
                                            this_1.openDiagramStateService.updateDiagramState(diagramStateListEntry.uri, diagramState);
                                            return [4, this_1.waitForSaving()];
                                        case 5:
                                            _a.sent();
                                            return [2];
                                    }
                                });
                            };
                            this_1 = this;
                            _i = 0, diagramStateList_1 = diagramStateList;
                            _a.label = 1;
                        case 1:
                            if (!(_i < diagramStateList_1.length)) return [3, 4];
                            diagramStateListEntry = diagramStateList_1[_i];
                            return [5, _loop_1(diagramStateListEntry)];
                        case 2:
                            _a.sent();
                            _a.label = 3;
                        case 3:
                            _i++;
                            return [3, 1];
                        case 4:
                            this.isSavingDiagrams = false;
                            this.currentlySavingDiagramName = '';
                            return [2];
                    }
                });
            });
        };
        SolutionExplorerSolution.prototype.saveActiveDiagram = function () {
            var _this = this;
            return new Promise(function (resolve) {
                _this.eventAggregator.subscribeOnce(environment_1.default.events.diagramDetail.saveDiagramDone, function () {
                    resolve();
                });
                _this.eventAggregator.publish(environment_1.default.events.diagramDetail.saveDiagram);
            });
        };
        SolutionExplorerSolution.prototype.waitForSaving = function () {
            return new Promise(function (resolve) {
                setTimeout(function () {
                    resolve();
                }, 550);
            });
        };
        SolutionExplorerSolution.prototype.refreshDisplayedDiagrams = function () {
            this.sortedDiagramsOfSolutions = this.displayedSolutionEntry.isOpenDiagram
                ? this.openedSolution.diagrams
                : this.openedSolution.diagrams.sort(this.diagramSorter);
        };
        SolutionExplorerSolution.prototype.closeOpenDiagram = function (diagramToClose) {
            return __awaiter(this, void 0, void 0, function () {
                var openDiagramService;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            openDiagramService = this
                                .solutionService;
                            return [4, openDiagramService.closeDiagram(diagramToClose)];
                        case 1:
                            _a.sent();
                            this.globalSolutionService.removeOpenDiagramByUri(diagramToClose.uri);
                            return [2];
                    }
                });
            });
        };
        SolutionExplorerSolution.prototype.showCloseDiagramModal = function (diagramToSave, shouldNavigate) {
            if (shouldNavigate === void 0) { shouldNavigate = true; }
            return __awaiter(this, void 0, void 0, function () {
                var diagramToSaveIsNotActiveDiagram, modalResult;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            diagramToSaveIsNotActiveDiagram = diagramToSave.uri !== this.activeDiagramUri;
                            if (!(diagramToSaveIsNotActiveDiagram && shouldNavigate)) return [3, 2];
                            return [4, this.navigateToDiagram(diagramToSave)];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            modalResult = new Promise(function (resolve) {
                                var dontSaveFunction = function () { return __awaiter(_this, void 0, void 0, function () {
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                this.showCloseModal = false;
                                                document.getElementById('dontSaveButtonCloseView').removeEventListener('click', dontSaveFunction);
                                                document.getElementById('saveButtonCloseView').removeEventListener('click', saveFunction);
                                                document.getElementById('cancelButtonCloseView').removeEventListener('click', cancelFunction);
                                                if (!(diagramToSaveIsNotActiveDiagram && shouldNavigate)) return [3, 2];
                                                return [4, this.navigateBack()];
                                            case 1:
                                                _a.sent();
                                                _a.label = 2;
                                            case 2:
                                                resolve(CloseModalResult.Delete);
                                                return [2];
                                        }
                                    });
                                }); };
                                var saveFunction = function () { return __awaiter(_this, void 0, void 0, function () {
                                    var _this = this;
                                    return __generator(this, function (_a) {
                                        this.eventAggregator.subscribeOnce(environment_1.default.events.diagramWasSaved, function () { return __awaiter(_this, void 0, void 0, function () {
                                            return __generator(this, function (_a) {
                                                switch (_a.label) {
                                                    case 0:
                                                        if (!shouldNavigate) return [3, 2];
                                                        return [4, this.navigateBack()];
                                                    case 1:
                                                        _a.sent();
                                                        _a.label = 2;
                                                    case 2:
                                                        resolve(CloseModalResult.Save);
                                                        return [2];
                                                }
                                            });
                                        }); });
                                        this.eventAggregator.publish(environment_1.default.events.diagramDetail.saveDiagram);
                                        this.showCloseModal = false;
                                        document.getElementById('dontSaveButtonCloseView').removeEventListener('click', dontSaveFunction);
                                        document.getElementById('saveButtonCloseView').removeEventListener('click', saveFunction);
                                        document.getElementById('cancelButtonCloseView').removeEventListener('click', cancelFunction);
                                        return [2];
                                    });
                                }); };
                                var cancelFunction = function () { return __awaiter(_this, void 0, void 0, function () {
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                this.showCloseModal = false;
                                                document.getElementById('dontSaveButtonCloseView').removeEventListener('click', dontSaveFunction);
                                                document.getElementById('saveButtonCloseView').removeEventListener('click', saveFunction);
                                                document.getElementById('cancelButtonCloseView').removeEventListener('click', cancelFunction);
                                                if (!(diagramToSaveIsNotActiveDiagram && shouldNavigate)) return [3, 2];
                                                return [4, this.navigateBack()];
                                            case 1:
                                                _a.sent();
                                                _a.label = 2;
                                            case 2:
                                                resolve(CloseModalResult.Cancel);
                                                return [2];
                                        }
                                    });
                                }); };
                                document.getElementById('dontSaveButtonCloseView').addEventListener('click', dontSaveFunction);
                                document.getElementById('saveButtonCloseView').addEventListener('click', saveFunction);
                                document.getElementById('cancelButtonCloseView').addEventListener('click', cancelFunction);
                                _this.showCloseModal = true;
                            });
                            return [2, modalResult];
                    }
                });
            });
        };
        SolutionExplorerSolution.prototype.isDiagramDetailViewOfDiagramOpen = function (diagramUriToCheck) {
            return __awaiter(this, void 0, void 0, function () {
                var activeDiagramIsUndefined, diagramIsOpened;
                return __generator(this, function (_a) {
                    activeDiagramIsUndefined = this.activeDiagram === undefined;
                    if (activeDiagramIsUndefined) {
                        return [2, false];
                    }
                    diagramIsOpened = diagramUriToCheck === this.activeDiagramUri;
                    return [2, diagramIsOpened];
                });
            });
        };
        SolutionExplorerSolution.prototype.setInvalidCharacterMessage = function (errors) {
            var invalidCharacterString = 'Your diagram contains at least one invalid-character: ';
            for (var _i = 0, _a = this.validationController.errors; _i < _a.length; _i++) {
                var currentError = _a[_i];
                var validationErrorIsInvalidCharacter = currentError.message.startsWith(invalidCharacterString);
                if (validationErrorIsInvalidCharacter) {
                    var inputToValidate = currentError.message.replace(invalidCharacterString, '');
                    var invalidCharacters = this.getInvalidCharacters(inputToValidate);
                    currentError.message = this.getInvalidCharacterErrorMessage(invalidCharacters);
                }
            }
        };
        SolutionExplorerSolution.prototype.getInvalidCharacters = function (input) {
            var _this = this;
            var inputLetters = input.split('');
            var invalidCharacters = inputLetters.filter(function (letter) {
                var rules = Object.values(_this.diagramValidationRegExpList);
                var letterIsInvalid = !rules.some(function (regExp) {
                    return letter.match(regExp) !== null;
                });
                return letterIsInvalid;
            });
            return invalidCharacters;
        };
        SolutionExplorerSolution.prototype.getInvalidCharacterErrorMessage = function (invalidCharacters) {
            var filteredInvalidCharacters = invalidCharacters.filter(function (current, index) {
                return invalidCharacters.indexOf(current) === index;
            });
            var messagePrefix = 'Your diagram contains at least one invalid-character: ';
            var invalidCharacterString = ("" + filteredInvalidCharacters).replace(/(.)./g, '$1 ');
            return messagePrefix + " " + invalidCharacterString;
        };
        SolutionExplorerSolution.prototype.openNewDiagram = function () {
            return __awaiter(this, void 0, void 0, function () {
                var unsavedDiagrams, unsavedDiagramIndexes, anotherUnsavedDiagramExists, newDiagramIndex, solutionIsNotFullyOpen, createdDiagram;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            unsavedDiagrams = this.openedDiagrams.filter(function (diagram) {
                                var diagramIsUnsavedDiagram = diagram.name.startsWith('Untitled-');
                                if (!diagramIsUnsavedDiagram) {
                                    return false;
                                }
                                var diagramIndex = parseInt(diagram.name.replace('Untitled-', ''));
                                return !isNaN(diagramIndex);
                            });
                            unsavedDiagramIndexes = unsavedDiagrams.map(function (diagram) {
                                var diagramIndex = parseInt(diagram.name.replace('Untitled-', ''));
                                return diagramIndex;
                            });
                            anotherUnsavedDiagramExists = unsavedDiagrams.length > 0;
                            newDiagramIndex = anotherUnsavedDiagramExists ? Math.max.apply(Math, unsavedDiagramIndexes) + 1 : 1;
                            solutionIsNotFullyOpen = this.openedSolution === undefined;
                            if (!solutionIsNotFullyOpen) return [3, 2];
                            return [4, this.updateSolution()];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2: return [4, this.diagramCreationService.createNewDiagram(this.openedSolution.uri, "Untitled-" + newDiagramIndex)];
                        case 3:
                            createdDiagram = _a.sent();
                            this.openDiagramStateService.saveDiagramState(createdDiagram.uri, createdDiagram.xml, undefined, undefined, true);
                            this.openDiagramService.openDiagramFromSolution(createdDiagram.uri, this.createIdentityForSolutionExplorer());
                            return [4, this.updateSolution()];
                        case 4:
                            _a.sent();
                            this.navigateToDetailView(createdDiagram);
                            return [2];
                    }
                });
            });
        };
        SolutionExplorerSolution.prototype.openDiagramAndUpdateSolution = function (createdDiagram) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.openDiagramService.openDiagramFromSolution(createdDiagram.uri, this.createIdentityForSolutionExplorer())];
                        case 1:
                            _a.sent();
                            this.openDiagramStateService.setDiagramChange(createdDiagram.uri, { change: 'create' });
                            return [4, this.updateSolution()];
                        case 2:
                            _a.sent();
                            this.resetDiagramCreation();
                            this.activeDiagram = createdDiagram;
                            this.navigateToDetailView(createdDiagram);
                            return [2];
                    }
                });
            });
        };
        SolutionExplorerSolution.prototype.hasNonEmptyValue = function (input) {
            var inputValue = input.value;
            var inputHasValue = inputValue !== undefined && inputValue !== null && inputValue !== '';
            return inputHasValue;
        };
        SolutionExplorerSolution.prototype.finishDiagramRenaming = function (silent) {
            return __awaiter(this, void 0, void 0, function () {
                var validationResult, inputWasNotValid, message, filenameWasNotChanged, diagramHasState, error_6;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.validationController.validate()];
                        case 1:
                            validationResult = _a.sent();
                            inputWasNotValid = !validationResult.valid || (this.validationController.errors && this.validationController.errors.length > 0);
                            if (inputWasNotValid) {
                                if (!silent) {
                                    message = 'Please resolve all errors first.';
                                    this.notificationService.showNotification(index_1.NotificationType.INFO, message);
                                }
                                return [2, false];
                            }
                            filenameWasNotChanged = this.currentlyRenamingDiagram.name === this.diagramRenamingState.currentDiagramInputValue;
                            if (filenameWasNotChanged) {
                                return [2, true];
                            }
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 4, , 5]);
                            return [4, this.solutionService.renameDiagram(this.currentlyRenamingDiagram, this.diagramRenamingState.currentDiagramInputValue)];
                        case 3:
                            _a.sent();
                            diagramHasState = this.openDiagramStateService.loadDiagramState(this.currentlyRenamingDiagram.uri) !== null;
                            if (diagramHasState) {
                                this.openDiagramStateService.setDiagramChange(this.currentlyRenamingDiagram.uri, { change: 'rename' });
                            }
                            return [3, 5];
                        case 4:
                            error_6 = _a.sent();
                            this.notificationService.showNotification(index_1.NotificationType.WARNING, error_6.message);
                            return [2, false];
                        case 5: return [2, true];
                    }
                });
            });
        };
        SolutionExplorerSolution.prototype.finishDiagramCreation = function () {
            return __awaiter(this, void 0, void 0, function () {
                var inputHasNoValue, validationResult, inputWasNotValid, message, emptyDiagram, error_7;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            inputHasNoValue = !this.hasNonEmptyValue(this.createNewDiagramInput);
                            if (inputHasNoValue) {
                                this.resetDiagramCreation();
                                return [2, undefined];
                            }
                            return [4, this.validationController.validate()];
                        case 1:
                            validationResult = _a.sent();
                            inputWasNotValid = !validationResult.valid || (this.validationController.errors && this.validationController.errors.length > 0);
                            if (inputWasNotValid) {
                                message = 'Please resolve all errors first.';
                                this.notificationService.showNotification(index_1.NotificationType.INFO, message);
                                return [2, undefined];
                            }
                            return [4, this.diagramCreationService.createNewDiagram(this.openedSolution.uri, this.diagramCreationState.currentDiagramInputValue)];
                        case 2:
                            emptyDiagram = _a.sent();
                            _a.label = 3;
                        case 3:
                            _a.trys.push([3, 5, , 6]);
                            return [4, this.solutionService.saveDiagram(emptyDiagram, emptyDiagram.uri)];
                        case 4:
                            _a.sent();
                            return [3, 6];
                        case 5:
                            error_7 = _a.sent();
                            this.notificationService.showNotification(index_1.NotificationType.ERROR, error_7.message);
                            return [2, undefined];
                        case 6: return [2, emptyDiagram];
                    }
                });
            });
        };
        SolutionExplorerSolution.prototype.resetDiagramRenaming = function () {
            document.removeEventListener('click', this.onRenameDiagramClickEvent);
            document.removeEventListener('keyup', this.onRenameDiagramKeyupEvent);
            this.diagramRenamingState.currentDiagramInputValue = '';
            this.renameDiagramInput.value = '';
            this.currentlyRenamingDiagram = null;
            aurelia_validation_1.ValidationRules.off(this.diagramRenamingState);
        };
        SolutionExplorerSolution.prototype.resetDiagramCreation = function () {
            document.removeEventListener('click', this.onCreateNewDiagramClickEvent);
            document.removeEventListener('keyup', this.onCreateNewDiagramKeyupEvent);
            this.diagramCreationState.currentDiagramInputValue = '';
            this.createNewDiagramInput.value = '';
            this.diagramCreationState.isCreateDiagramInputShown = false;
            aurelia_validation_1.ValidationRules.off(this.diagramCreationState);
        };
        SolutionExplorerSolution.prototype.findURIObject = function (objects, targetURI) {
            var foundObject = objects.find(function (object) {
                return object.uri.toLowerCase() === targetURI.toLowerCase();
            });
            return foundObject;
        };
        SolutionExplorerSolution.prototype.disposeSubscriptions = function () {
            for (var _i = 0, _a = this.subscriptions; _i < _a.length; _i++) {
                var subscription = _a[_i];
                subscription.dispose();
            }
        };
        SolutionExplorerSolution.prototype.updateSolutionExplorer = function () {
            return __awaiter(this, void 0, void 0, function () {
                var solutionUri, solutionUriSpecified, diagramName, diagramNameIsSpecified, diagramUri, routeName, routeNameNeedsUpdate, currentRoute, activeSolution, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            solutionUri = this.router.currentInstruction.queryParams.solutionUri;
                            solutionUriSpecified = solutionUri !== undefined;
                            diagramName = this.router.currentInstruction.params.diagramName;
                            diagramNameIsSpecified = diagramName !== undefined;
                            diagramUri = this.router.currentInstruction.queryParams.diagramUri;
                            routeName = this.router.currentInstruction.config.name;
                            routeNameNeedsUpdate = routeName === 'design' || routeName === 'inspect' || routeName === 'think';
                            if (routeNameNeedsUpdate) {
                                this.diagramRoute = routeName;
                                this.inspectView = this.router.currentInstruction.params.view;
                            }
                            currentRoute = this.router.currentInstruction.config.name;
                            if (currentRoute === 'preferences' || currentRoute === 'settings') {
                                return [2];
                            }
                            if (!(solutionUriSpecified && diagramNameIsSpecified)) return [3, 5];
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            return [4, this.solutionService.loadSolution()];
                        case 2:
                            activeSolution = _b.sent();
                            this.activeDiagram = activeSolution.diagrams.find(function (diagram) {
                                var currentDiagramIsGivenDiagram = diagram.uri === diagramUri;
                                var diagramIsInGivenSolution = solution_is_remote_solution_module_1.solutionIsRemoteSolution(solutionUri)
                                    ? diagram.uri.includes(solutionUri)
                                    : diagram.uri.includes(solutionUri + "/" + diagram.name + ".bpmn") ||
                                        diagram.uri.endsWith(diagram.name + ".bpmn");
                                return diagram.name === diagramName && (currentDiagramIsGivenDiagram || diagramIsInGivenSolution);
                            });
                            return [3, 4];
                        case 3:
                            _a = _b.sent();
                            return [3, 4];
                        case 4: return [3, 6];
                        case 5:
                            this.activeDiagram = undefined;
                            _b.label = 6;
                        case 6: return [2];
                    }
                });
            });
        };
        SolutionExplorerSolution.prototype.setValidationRules = function () {
            var _this = this;
            aurelia_validation_1.ValidationRules.ensure(function (state) { return state.currentDiagramInputValue; })
                .required()
                .withMessage('Diagram name cannot be blank.')
                .satisfies(function (input) {
                var inputIsNotEmpty = input !== undefined;
                var inputAsCharArray = inputIsNotEmpty ? input.split('') : [];
                var diagramNamePassesNameChecks = inputAsCharArray.every(function (letter) {
                    var letterMatches = function (regExp) { return regExp.test(letter); };
                    return _this.diagramValidationRegExpList.some(letterMatches);
                });
                return diagramNamePassesNameChecks;
            })
                .withMessage("Your diagram contains at least one invalid-character: ${$value}")
                .satisfies(function (input) {
                var inputIsNotEmpty = input !== undefined;
                var diagramDoesNotStartWithWhitespace = inputIsNotEmpty ? !/^\s/.test(input) : true;
                return diagramDoesNotStartWithWhitespace;
            })
                .withMessage('The diagram name cannot start with a whitespace character.')
                .satisfies(function (input) {
                var inputIsNotEmpty = input !== undefined;
                var diagramDoesNotEndWithWhitespace = inputIsNotEmpty ? !/\s+$/.test(input) : true;
                return diagramDoesNotEndWithWhitespace;
            })
                .withMessage('The diagram name cannot end with a whitespace character.')
                .then()
                .satisfies(function (input) { return __awaiter(_this, void 0, void 0, function () {
                var diagramNameIsUnchanged, isRemoteSolution, expectedDiagramUri, diagramWithUriDoesNotExist;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            diagramNameIsUnchanged = this.isCurrentlyRenamingDiagram && this.currentlyRenamingDiagram.name.toLowerCase() === input.toLowerCase();
                            if (diagramNameIsUnchanged) {
                                return [2, true];
                            }
                            return [4, this.updateSolution()];
                        case 1:
                            _a.sent();
                            isRemoteSolution = solution_is_remote_solution_module_1.solutionIsRemoteSolution(this.openedSolution.uri);
                            if (isRemoteSolution) {
                                expectedDiagramUri = this.openedSolution.uri + "/" + input + ".bpmn";
                            }
                            else if (is_running_in_electron_module_1.isRunningInElectron()) {
                                expectedDiagramUri = path_1.join(this.openedSolution.uri, input + ".bpmn");
                            }
                            diagramWithUriDoesNotExist = this.findURIObject(this.openedSolution.diagrams, expectedDiagramUri) === undefined;
                            return [2, diagramWithUriDoesNotExist];
                    }
                });
            }); })
                .withMessage('A diagram with that name already exists.')
                .on(this.diagramRenamingState)
                .on(this.diagramCreationState);
        };
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", HTMLInputElement)
        ], SolutionExplorerSolution.prototype, "renameDiagramInput", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Object)
        ], SolutionExplorerSolution.prototype, "solutionService", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", open_diagrams_solution_explorer_service_1.OpenDiagramsSolutionExplorerService)
        ], SolutionExplorerSolution.prototype, "openDiagramService", void 0);
        __decorate([
            aurelia_framework_1.bindable, aurelia_framework_1.observable,
            __metadata("design:type", Object)
        ], SolutionExplorerSolution.prototype, "displayedSolutionEntry", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", String)
        ], SolutionExplorerSolution.prototype, "cssIconClass", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Boolean)
        ], SolutionExplorerSolution.prototype, "isConnected", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", String)
        ], SolutionExplorerSolution.prototype, "tooltipText", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Boolean)
        ], SolutionExplorerSolution.prototype, "peHasStarted", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", Function)
        ], SolutionExplorerSolution.prototype, "login", void 0);
        __decorate([
            aurelia_framework_1.computedFrom('validationController.errors.length'),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [])
        ], SolutionExplorerSolution.prototype, "diagramValidationErrors", null);
        __decorate([
            aurelia_framework_1.computedFrom('validationController.errors.length'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [])
        ], SolutionExplorerSolution.prototype, "hasValidationErrors", null);
        __decorate([
            aurelia_framework_1.computedFrom('currentlyRenamingDiagram'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [])
        ], SolutionExplorerSolution.prototype, "currentlyRenamingDiagramUri", null);
        __decorate([
            aurelia_framework_1.computedFrom('displayedSolutionEntry.isOpenDiagram', 'openedSolution'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [])
        ], SolutionExplorerSolution.prototype, "canRenameDiagram", null);
        __decorate([
            aurelia_framework_1.computedFrom('diagramStateList'),
            __metadata("design:type", Map),
            __metadata("design:paramtypes", [])
        ], SolutionExplorerSolution.prototype, "diagramChangedStateMap", null);
        __decorate([
            aurelia_framework_1.computedFrom('activeDiagram.uri'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [])
        ], SolutionExplorerSolution.prototype, "activeDiagramUri", null);
        SolutionExplorerSolution = __decorate([
            aurelia_framework_1.inject(aurelia_router_1.Router, aurelia_event_aggregator_1.EventAggregator, aurelia_framework_1.NewInstance.of(aurelia_validation_1.ValidationController), 'DiagramCreationService', 'NotificationService', 'SolutionService', 'OpenDiagramStateService', deploy_diagram_service_1.DeployDiagramService, save_diagram_service_1.SaveDiagramService, aurelia_templating_resources_1.BindingSignaler, 'HttpFetchClient'),
            __metadata("design:paramtypes", [aurelia_router_1.Router,
                aurelia_event_aggregator_1.EventAggregator,
                aurelia_validation_1.ValidationController, Object, notification_service_1.NotificationService, Object, open_diagram_state_service_1.OpenDiagramStateService,
                deploy_diagram_service_1.DeployDiagramService,
                save_diagram_service_1.SaveDiagramService,
                aurelia_templating_resources_1.BindingSignaler,
                http_fetch_client_1.HttpFetchClient])
        ], SolutionExplorerSolution);
        return SolutionExplorerSolution;
    }());
    exports.SolutionExplorerSolution = SolutionExplorerSolution;
});


;
define('text!modules/solution-explorer/solution-explorer-solution/solution-explorer-solution.css',[],function(){return ".solution__diagram-list {\n  padding: 0; }\n\n.solution-loading {\n  text-align: center; }\n\n.diagram-create {\n  width: 100%;\n  padding: 2.5px 0;\n  padding-left: 22px;\n  list-style: none; }\n\n.diagram-create .input-holder {\n  flex: 1;\n  margin-right: 5px; }\n\n.input-holder__input {\n  width: 100%; }\n\n.input-holder__input--error {\n  border-color: red; }\n\n.diagram-create__errors {\n  padding: 2px;\n  padding-left: 22px;\n  margin-right: 5px;\n  margin-left: 0;\n  border: 2px solid red;\n  color: red;\n  border-top: none; }\n\n.diagram-create__error {\n  list-style-type: disc; }\n\n.diagram-rename-container {\n  width: 100%;\n  padding: 2.5px 0px;\n  list-style: none; }\n\n.diagram-rename-container .input-holder {\n  flex: 1;\n  margin-right: 0; }\n\n.rename-errors-container__error-list {\n  padding: 2px;\n  padding-left: 25px;\n  margin-right: 0px;\n  border: 2px solid red;\n  border-top: none;\n  color: red; }\n\n.rename-errors-container__error-list-entry {\n  list-style-type: disc; }\n\n.diagram-entry {\n  display: flex;\n  padding: 2.5px 5px 2.5px 22px; }\n\n.diagram-entry--highlight {\n  background-color: #e6e6e6; }\n\n.diagram-entry__icon {\n  flex: 0;\n  margin-top: 2px;\n  margin-right: 6px; }\n\n.diagram-entry__unsaved-icon {\n  flex: 0;\n  position: relative;\n  left: -14px;\n  margin-top: 6px;\n  margin-right: -9px;\n  font-size: 9px;\n  opacity: 0.5; }\n\n.diagram-entry__name-container {\n  flex: 1;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap; }\n\n.diagram-entry__location {\n  font-size: 12px;\n  color: darkgray; }\n\n.diagram-entry:hover .diagram-entry__name {\n  text-decoration: underline; }\n\n.diagram-entry__actions {\n  display: none; }\n\n.diagram-entry:hover .diagram-entry__actions {\n  display: flex; }\n\n@media (any-hover: none) {\n  .diagram-entry__actions {\n    display: flex; } }\n\n.diagram-entry__actions button {\n  padding: 0 2px;\n  background: transparent;\n  border: none; }\n\n.toast-message__headline {\n  width: calc(100% + 30px);\n  margin-left: -30px; }\n\n.toast-not-allowed-renaming-or-deleting {\n  width: 350px; }\n\n.diagram-contextmenu {\n  position: fixed;\n  background: white;\n  border: 1px solid #dcdbdb;\n  border-radius: 5px; }\n\n.diagram-contextmenu__entry {\n  width: 100%;\n  padding: 0 10px;\n  text-align: center; }\n\n.diagram-contextmenu__entry:hover {\n  background-color: #dcdbdb; }\n\n.saving-diagram-modal__loading-spinner {\n  display: inline-block;\n  width: 100%;\n  height: 100%;\n  user-select: none;\n  white-space: nowrap; }\n\n.saving-diagram-modal__loading-spinner-icon {\n  position: absolute;\n  left: 50%;\n  top: calc(50% - 22px);\n  height: 150px;\n  transform: translate(-50%, -50%); }\n\n.saving-diagram-modal__loading-spinner-text {\n  position: absolute;\n  left: 50%;\n  transform: translateX(-50%);\n  margin-top: 5px;\n  bottom: 10px; }\n\n.startup-error:hover {\n  text-decoration: underline; }\n\n.error-log {\n  min-height: 440px;\n  resize: none; }\n\n.authority-issue {\n  margin-left: 20px; }\n\n.authorisation-error:hover > .authorisation-error__login-link {\n  cursor: default; }\n";});;
define('text!modules/solution-explorer/solution-explorer-solution/solution-explorer-solution.html',[],function(){return "<template>\n  <require from=\"./solution-explorer-solution.css\"></require>\n  <require from=\"./delete-diagram-modal/delete-diagram-modal\"></require>\n\n  <div class=\"solution-explorer-solution\">\n\n    <div class=\"solution-loading\" if.bind=\"solutionIsNotLoaded && !processEngineStartupError && !authorisationError && !authenticationError\">\n      <i class=\"fa fa-spinner fa-spin\"></i>\n    </div>\n\n    <div class=\"solution-loading\" if.bind=\"solutionIsNotLoaded && processEngineStartupError\">\n      <span>ProcessEngine Startup Error</span><br>\n      <small class=\"startup-error\" click.delegate=\"showErrorLogs = true\">Click here for more information</small>\n    </div>\n\n    <div class=\"authority-issue\" if.bind=\"solutionIsNotLoaded && authorisationError\">\n      <span class=\"authorisation-error\">You don't have sufficient permissions for accessing this ProcessEngine. Please <a href=\"#\" class=\"authorisation-error__login-link\" click.delegate=\"login(displayedSolutionEntry)\">try to login</a> as another user.</span>\n    </div>\n\n    <div class=\"authority-issue\" if.bind=\"solutionIsNotLoaded && authenticationError\">\n      <span class=\"authorisation-error\">Please <a href=\"#\" class=\"authorisation-error__login-link\" click.delegate=\"login(displayedSolutionEntry)\">try to login.</a></span>\n    </div>\n\n    <div class=\"diagram-contextmenu\" ref=\"diagramContextMenu\" show.bind=\"showContextMenu\">\n      <div show.bind=\"canRenameDiagram\" class=\"diagram-contextmenu__entry\" click.delegate=\"duplicateDiagram()\">\n        Duplicate\n      </div>\n      <div show.bind=\"!isUriFromRemoteSolution(displayedSolutionEntry.uri)\" class=\"diagram-contextmenu__entry\" click.delegate=\"deployDiagram()\">\n        Deploy\n      </div>\n    </div>\n\n    <ul if.bind=\"!solutionIsNotLoaded\" class=\"solution__diagram-list\">\n\n      <li if.bind=\"diagramCreationState.isCreateDiagramInputShown\" class=\"diagram-create\">\n        <div class=\"input-holder\">\n          <input ref=\"createNewDiagramInput\" class.bind=\"hasValidationErrors ? 'input-holder__input input-holder__input--error' : 'input-holder__input'\" type=\"text\" value.bind=\"diagramCreationState.currentDiagramInputValue & validateOnChange\">\n        </div>\n        <ul if.bind=\"hasValidationErrors\" class=\"diagram-create__errors\">\n          <li repeat.for=\"error of diagramValidationErrors\" class=\"diagram-create__error\">${error.message}</li>\n        </ul>\n      </li>\n\n      <li\n        repeat.for=\"diagram of openedDiagrams\"\n        class.bind=\"activeDiagramUri === diagram.uri ? 'diagram-entry diagram-entry--highlight' : 'diagram-entry'\"\n        click.delegate=\"openDiagram(diagram)\"\n        data-test-open-diagram-with-uri=\"${diagram.uri}\">\n\n        <div if.bind=\"currentlyRenamingDiagramUri === diagram.uri\" class=\"diagram-rename-container\">\n          <div class=\"input-holder\">\n            <input ref=\"renameDiagramInput\" class.bind=\"hasValidationErrors ? 'input-holder__input input-holder__input--error' : 'input-holder__input'\" type=\"text\" value.bind=\"diagramRenamingState.currentDiagramInputValue & validateOnChange\">\n          </div>\n          <ul if.bind=\"hasValidationErrors\" class=\"rename-errors-container__error-list\">\n            <li repeat.for=\"error of diagramValidationErrors\" class=\"rename-errors-container__error-list-entry\">${error.message}</li>\n          </ul>\n        </div>\n\n        <template if.bind=\"currentlyRenamingDiagramUri !== diagram.uri\">\n\n          <i if.bind=\"shouldFileIconBeShown()\" class=\"diagram-entry__icon fa fa-cogs\"></i>\n          <i if.bind=\"displayedSolutionEntry.isOpenDiagram && diagramChangedStateMap.get(diagram.uri)\" class=\"diagram-entry__unsaved-icon fas fa-circle\"></i>\n          <div class=\"diagram-entry__name-container\" contextmenu.delegate=\"activateContextMenu($event, diagram)\">\n            <span class=\"diagram-entry__name\" title=\"${diagram.name}\" title.bind=\"displayedSolutionEntry.isOpenDiagram ? diagram.uri : ''\">${diagram.name}</span>\n            <span class=\"diagram-entry__location\" if.bind=\"displayedSolutionEntry.isOpenDiagram\" title=\"${getDiagramLocation(diagram.uri)}\">${getDiagramFolder(diagram.uri)}</span>\n          </div>\n\n          <div class=\"diagram-entry__actions\">\n            <button\n              class.bind=\"activeDiagramUri !== diagram.uri ? 'button' : 'button button--disabled'\"\n              if.bind=\"canRenameDiagram\"\n              click.delegate=\"startRenamingOfDiagram(diagram, $event)\"\n              title.bind=\"activeDiagramUri !== diagram.uri ? 'Rename the diagram' : 'The diagram is currently open, it cant be renamed.'\">\n\n              <i class=\"fa fa-pencil-alt\"></i>\n            </button>\n\n            <button\n              class=\"button\"\n              if.bind=\"displayedSolutionEntry.isOpenDiagram\"\n              click.delegate=\"closeDiagram(diagram, $event)\"\n              title=\"Close the diagram\">\n\n              <i class=\"fa fa-times\"></i>\n            </button>\n\n            <button\n              class=\"button\"\n              if.bind=\"canDeleteDiagram()\"\n              click.delegate=\"showDeleteDiagramModal(diagram, $event)\"\n              title=\"Delete the diagram\">\n\n              <i class=\"fa fa-trash\"></i>\n            </button>\n          </div>\n        </template>\n\n      </li>\n    </ul>\n  </div>\n\n  <!--Delete Diagram Modal-->\n  <delete-diagram-modal active-diagram=\"activeDiagram\" view-model.ref=\"deleteDiagramModal\"></delete-diagram-modal>\n\n  <modal show.bind=\"showCloseModal\"\n         header-text=\"Document Contains Changes\"\n         body-text=\"Your diagram has unsaved changes. Save changes to diagram before closing?\">\n    <template replace-part=\"modal-footer\">\n      <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" id=\"cancelButtonCloseView\">Cancel</button>\n      <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\" id=\"dontSaveButtonCloseView\">Don't save</button>\n      <button type=\"button\" class=\"btn btn-primary\" data-dismiss=\"modal\" id=\"saveButtonCloseView\">Save</button>\n    </template>\n  </modal>\n  \n  <modal if.bind=\"isSavingDiagrams\"\n         body-style=\"min-height: 230px\"\n         header-text=\"Saving Diagrams\">\n    <template replace-part=\"modal-body\">\n      <div class=\"saving-diagram-modal__loading-spinner\">\n        <img class=\"saving-diagram-modal__loading-spinner-icon\" src=\"src/resources/images/gears.svg\">\n        <h3 class=\"saving-diagram-modal__loading-spinner-text\">Saving \"${currentlySavingDiagramName}\"...</h3>\n        </div>\n    </template>\n  </modal>\n\n  <modal if.bind=\"showErrorLogs\"\n          body-style=\"min-height: 320px\"\n          modal-style=\"max-width: 900px; top: 10%;\"\n          content-style=\"height: 600px;\"\n          header-text=\"ProcessEngine Error Log\"\n          origin.bind=\"solutionExplorerSolution\">\n    <template replace-part=\"modal-body\">\n      <textarea ref=\"origin.errorLogArea\" class=\"form-control error-log\" value.bind=\"processEngineErrorLog\" readonly></textarea>\n    </template>\n    <template replace-part=\"modal-footer\">\n      <button type=\"button\" class=\"btn btn-default\" click.delegate=\"copyToClipboard()\">Copy</button>\n      <button type=\"button\" class=\"btn btn-default\" click.delegate=\"showErrorLogs = false\">Close</button>\n    </template>\n  </modal>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/start-page/start-page',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "../../environment", "../../services/is-running-in-electron-module/is-running-in-electron.module"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, environment_1, is_running_in_electron_module_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var StartPage = (function () {
        function StartPage(eventAggregator) {
            this.isRunningOnWindows = false;
            this.isRunningOnMacOS = false;
            this.eventAggregator = eventAggregator;
        }
        StartPage.prototype.activate = function () {
            if (is_running_in_electron_module_1.isRunningInElectron()) {
                this.isRunningOnWindows = process.platform === 'win32';
                this.isRunningOnMacOS = process.platform === 'darwin';
            }
        };
        Object.defineProperty(StartPage.prototype, "showShortcuts", {
            get: function () {
                return is_running_in_electron_module_1.isRunningInElectron();
            },
            enumerable: true,
            configurable: true
        });
        StartPage.prototype.openLocalSolution = function () {
            this.eventAggregator.publish(environment_1.default.events.startPage.openLocalSolution);
        };
        StartPage.prototype.openDiagram = function () {
            this.eventAggregator.publish(environment_1.default.events.startPage.openDiagram);
        };
        StartPage.prototype.createNewDiagram = function () {
            this.eventAggregator.publish(environment_1.default.events.startPage.createDiagram);
        };
        StartPage = __decorate([
            aurelia_framework_1.inject(aurelia_event_aggregator_1.EventAggregator),
            __metadata("design:paramtypes", [aurelia_event_aggregator_1.EventAggregator])
        ], StartPage);
        return StartPage;
    }());
    exports.StartPage = StartPage;
});


;
define('text!modules/start-page/start-page.css',[],function(){return ".start-page__container {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center; }\n\n.start-page__content {\n  text-align: center;\n  -webkit-user-drag: none;\n  user-select: none; }\n\n.start-page__title {\n  position: relative;\n  top: 150px;\n  margin: 0; }\n\n.start-page__icon {\n  opacity: 0.1;\n  -webkit-user-drag: none; }\n\n.start-page__quick-start {\n  display: flex;\n  flex-direction: column;\n  padding: 0 250px; }\n\n.quick-start__item {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between; }\n\n.quick-start__topic {\n  width: 50%;\n  margin-right: 20px;\n  font-size: 14px;\n  font-weight: bold;\n  color: #555555;\n  text-align: right; }\n\n.quick-start__topic:hover {\n  text-decoration: underline; }\n\n.quick-start__shortcut {\n  width: 50%;\n  margin-left: 20px;\n  font-size: 14px;\n  font-weight: bold;\n  color: #555555;\n  text-align: left; }\n";});;
define('text!modules/start-page/start-page.html',[],function(){return "<template>\n  <require from ='./start-page.css'></require>\n  <div class=\"start-page__container\" data-test-start-page>\n    <div class=\"start-page__content\">\n      <h3 class=\"start-page__title\">Welcome to BPMN Studio!</h3>\n      <img class=\"start-page__icon\" src=\"src/resources/images/icon.png\">\n      <div class=\"start-page__quick-start\" show.bind=\"showShortcuts\">\n        <div class=\"quick-start__item\">\n          <div class=\"quick-start__topic\" click.delegate=\"openDiagram()\">Open Diagram</div>\n          <div show.bind=\"showShortcuts && isRunningOnMacOS\" class=\"quick-start__shortcut\">⌘ + O</div>\n          <div show.bind=\"showShortcuts && isRunningOnWindows\" class=\"quick-start__shortcut\">Strg + O</div>\n        </div>\n        <div class=\"quick-start__item\">\n          <div class=\"quick-start__topic\" click.delegate=\"openLocalSolution()\">Open Solution</div>\n          <div show.bind=\"showShortcuts && isRunningOnMacOS\" class=\"quick-start__shortcut\">⌘ + ⇧ + O</div>\n          <div show.bind=\"showShortcuts && isRunningOnWindows\" class=\"quick-start__shortcut\">Strg + Shift + O</div>\n        </div>\n        <div class=\"quick-start__item\">\n          <div class=\"quick-start__topic\" click.delegate=\"createNewDiagram()\" data-test-create-new-diagram>New Diagram</div>\n          <div show.bind=\"showShortcuts && isRunningOnMacOS\" class=\"quick-start__shortcut\">⌘ + N</div>\n          <div show.bind=\"showShortcuts && isRunningOnWindows\" class=\"quick-start__shortcut\">Strg + N</div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/status-bar/status-bar',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "aurelia-router", "jquery", "../../contracts/index", "../../environment", "../../services/notification-service/notification.service", "../../services/is-running-in-electron-module/is-running-in-electron.module"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, aurelia_router_1, jquery_1, index_1, environment_1, notification_service_1, is_running_in_electron_module_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    jquery_1 = __importDefault(jquery_1);
    environment_1 = __importDefault(environment_1);
    var StatusBar = (function () {
        function StatusBar(eventAggregator, router, solutionService, notificationService) {
            var _this = this;
            this.showDiagramViewButtons = false;
            this.diffIsShown = false;
            this.xmlIsShown = false;
            this.showInspectProcessInstanceButtons = false;
            this.showChangeList = false;
            this.currentXmlIdentifier = 'New';
            this.previousXmlIdentifier = 'Old';
            this.showInspectPanel = true;
            this.updateAvailable = false;
            this.updateDownloadFinished = false;
            this.updateStarted = false;
            this.diffMode = index_1.DiffMode;
            this.eventAggregator = eventAggregator;
            this.router = router;
            this.solutionService = solutionService;
            this.notificationService = notificationService;
            if (is_running_in_electron_module_1.isRunningInElectron()) {
                this.ipcRenderer = window.nodeRequire('electron').ipcRenderer;
                this.ipcRenderer.on('update_error', function (event, message) {
                    console.error('Update Error:', message);
                    var targetHref = "<a href=\"javascript:nodeRequire('open')('https://github.com/process-engine/bpmn-studio/releases/tag/v" + _this.updateVersion + "')\" style=\"text-decoration: underline;\">click here</a>";
                    notificationService.showNonDisappearingNotification(index_1.NotificationType.WARNING, "<h4>Update Error!</h4>The automatic update has failed!<br>To update BPMN Studio manually, " + targetHref + ".");
                });
                this.ipcRenderer.on('update_available', function (event, version) {
                    _this.updateAvailable = true;
                    _this.updateVersion = version;
                    var message = 'A new update is available.\nPlease click on the BPMN Studio icon in the statusbar to start the download.';
                    var toastrOptions = {
                        onclick: function (notificationClickEvent) {
                            notificationClickEvent.stopPropagation();
                            var updateDropdownIsHidden = jquery_1.default(_this.updateDropdown).is(':hidden');
                            if (updateDropdownIsHidden) {
                                _this.updateDropdownToggle.click();
                            }
                        },
                    };
                    _this.notificationService.showNonDisappearingNotification(index_1.NotificationType.INFO, message, toastrOptions);
                });
                this.ipcRenderer.on('update_download_progress', function (event, updateProgressData) {
                    _this.updateProgressData = updateProgressData;
                });
                this.ipcRenderer.on('update_downloaded', function () {
                    _this.updateDownloadFinished = true;
                });
            }
        }
        StatusBar.prototype.attached = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.subscriptions = [
                                this.eventAggregator.subscribe(environment_1.default.events.statusBar.showDiagramViewButtons, function () {
                                    _this.showDiagramViewButtons = true;
                                }),
                                this.eventAggregator.subscribe(environment_1.default.events.statusBar.hideDiagramViewButtons, function () {
                                    _this.showDiagramViewButtons = false;
                                    _this.xmlIsShown = false;
                                    _this.diffIsShown = false;
                                    _this.showChangeList = false;
                                    _this.currentDiffMode = index_1.DiffMode.NewVsOld;
                                }),
                                this.eventAggregator.subscribe(environment_1.default.events.statusBar.setXmlIdentifier, function (xmlIdentifier) {
                                    _this.previousXmlIdentifier = xmlIdentifier[0], _this.currentXmlIdentifier = xmlIdentifier[1];
                                }),
                                this.eventAggregator.subscribe(environment_1.default.events.statusBar.showInspectProcessInstanceButtons, function (showInspectProcessInstance) {
                                    _this.showInspectProcessInstanceButtons = showInspectProcessInstance;
                                }),
                                this.eventAggregator.subscribe('router:navigation:success', function () { return __awaiter(_this, void 0, void 0, function () {
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4, this.updateStatusBar()];
                                            case 1:
                                                _a.sent();
                                                this.refreshRightButtons();
                                                return [2];
                                        }
                                    });
                                }); }),
                            ];
                            jquery_1.default(document).on('click', '.update-dropdown', function (event) {
                                event.stopPropagation();
                            });
                            return [4, this.updateStatusBar()];
                        case 1:
                            _a.sent();
                            this.refreshRightButtons();
                            this.currentDiffMode = index_1.DiffMode.NewVsOld;
                            return [2];
                    }
                });
            });
        };
        StatusBar.prototype.detached = function () {
            this.disposeAllSubscriptions();
        };
        Object.defineProperty(StatusBar.prototype, "isDownloading", {
            get: function () {
                return this.updateProgressData !== undefined;
            },
            enumerable: true,
            configurable: true
        });
        StatusBar.prototype.toggleXMLView = function () {
            if (this.diffIsShown) {
                this.toggleDiffView();
            }
            this.designView = this.xmlIsShown ? 'detail' : 'xml';
            this.router.navigateToRoute('design', {
                diagramName: this.activeDiagram ? this.activeDiagram.name : undefined,
                diagramUri: this.activeDiagram ? this.activeDiagram.uri : undefined,
                solutionUri: this.activeSolutionEntry.uri,
                view: this.designView,
            });
            this.xmlIsShown = !this.xmlIsShown;
        };
        StatusBar.prototype.changeDiffMode = function (mode) {
            this.currentDiffMode = mode;
            this.eventAggregator.publish(environment_1.default.events.diffView.changeDiffMode, mode);
        };
        StatusBar.prototype.toggleChangeList = function () {
            this.showChangeList = !this.showChangeList;
            this.eventAggregator.publish(environment_1.default.events.diffView.toggleChangeList);
        };
        StatusBar.prototype.toggleDiffView = function () {
            if (this.xmlIsShown) {
                this.toggleXMLView();
            }
            this.designView = this.diffIsShown ? 'detail' : 'diff';
            this.router.navigateToRoute('design', {
                diagramName: this.activeDiagram ? this.activeDiagram.name : undefined,
                diagramUri: this.activeDiagram ? this.activeDiagram.uri : undefined,
                solutionUri: this.activeSolutionEntry.uri,
                view: this.designView,
            });
            this.diffIsShown = !this.diffIsShown;
        };
        StatusBar.prototype.toggleInspectPanel = function () {
            this.showInspectPanel = !this.showInspectPanel;
            this.eventAggregator.publish(environment_1.default.events.inspectProcessInstance.showInspectPanel, this.showInspectPanel);
        };
        StatusBar.prototype.showReleaseNotes = function () {
            this.ipcRenderer.send('show_release_notes');
        };
        StatusBar.prototype.hideDropdown = function () {
            if (this.updateStarted) {
                return;
            }
            this.updateDropdown.classList.remove('show');
        };
        StatusBar.prototype.startUpdate = function () {
            if (this.updateStarted) {
                return;
            }
            this.ipcRenderer.send('download_update');
            this.updateStarted = true;
        };
        StatusBar.prototype.installUpdate = function () {
            this.ipcRenderer.send('quit_and_install');
        };
        StatusBar.prototype.cancelUpdate = function () {
            this.ipcRenderer.send('cancel_update');
            this.updateProgressData = undefined;
            this.updateStarted = false;
        };
        StatusBar.prototype.refreshRightButtons = function () {
            var currentView = this.router.currentInstruction.params.view;
            switch (currentView) {
                case 'xml':
                    this.xmlIsShown = true;
                    break;
                case 'diff':
                    this.diffIsShown = true;
                    break;
                default:
                    this.xmlIsShown = false;
                    this.diffIsShown = false;
                    break;
            }
        };
        StatusBar.prototype.disposeAllSubscriptions = function () {
            this.subscriptions.forEach(function (subscription) {
                subscription.dispose();
            });
        };
        StatusBar.prototype.updateStatusBar = function () {
            return __awaiter(this, void 0, void 0, function () {
                var solutionUriFromNavigation, solutionIsSet, diagramName, diagramIsSet, activeSolutionIsOpenDiagramSolution, persistedDiagrams, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            solutionUriFromNavigation = this.router.currentInstruction.queryParams.solutionUri;
                            this.activeSolutionEntry = this.solutionService.getSolutionEntryForUri(solutionUriFromNavigation);
                            solutionIsSet = this.activeSolutionEntry !== undefined;
                            diagramName = this.router.currentInstruction.params.diagramName;
                            diagramIsSet = diagramName !== undefined;
                            if (!(solutionIsSet && diagramIsSet)) return [3, 3];
                            activeSolutionIsOpenDiagramSolution = solutionUriFromNavigation === 'about:open-diagrams';
                            if (!activeSolutionIsOpenDiagramSolution) return [3, 1];
                            persistedDiagrams = this.solutionService.getOpenDiagrams();
                            this.activeDiagram = persistedDiagrams.find(function (diagram) {
                                return diagram.name === diagramName;
                            });
                            return [3, 3];
                        case 1:
                            _a = this;
                            return [4, this.activeSolutionEntry.service.loadDiagram(diagramName)];
                        case 2:
                            _a.activeDiagram = _b.sent();
                            _b.label = 3;
                        case 3: return [2];
                    }
                });
            });
        };
        __decorate([
            aurelia_framework_1.computedFrom('updateProgressData'),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [])
        ], StatusBar.prototype, "isDownloading", null);
        StatusBar = __decorate([
            aurelia_framework_1.inject(aurelia_event_aggregator_1.EventAggregator, aurelia_router_1.Router, 'SolutionService', 'NotificationService'),
            __metadata("design:paramtypes", [aurelia_event_aggregator_1.EventAggregator,
                aurelia_router_1.Router, Object, notification_service_1.NotificationService])
        ], StatusBar);
        return StatusBar;
    }());
    exports.StatusBar = StatusBar;
});


;
define('text!modules/status-bar/status-bar.css',[],function(){return "/*\n * STATUS BAR\n *\n*/\n.status-bar {\n  position: fixed;\n  bottom: 0;\n  display: flex;\n  width: 100%;\n  height: 22px;\n  padding: 0 5px;\n  background-color: #3f51b5;\n  background-color: #9c27b0;\n  background-color: #607d8b;\n  border-top: 2px solid #e9e9e9;\n  user-select: none;\n  color: #fff;\n  font-size: 12px;\n  flex-direction: row;\n  justify-content: space-evenly;\n  align-items: stretch; }\n\n.status-bar__left-bar,\n.status-bar__center-bar,\n.status-bar__right-bar {\n  flex: 1 100%; }\n\n.status-bar__left-bar {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center; }\n\n.status-bar__center-bar {\n  display: flex;\n  justify-content: space-around;\n  align-items: center; }\n\n.status-bar__right-bar {\n  display: flex;\n  justify-content: flex-end;\n  align-items: center; }\n\n.status-bar__element {\n  display: inline-block;\n  min-width: 50px;\n  padding-right: 10px;\n  padding-left: 10px;\n  padding-bottom: 2px;\n  color: white;\n  text-align: center;\n  white-space: nowrap; }\n\n.status-bar__element--active {\n  background-color: #445a65;\n  text-decoration: none; }\n\n.status-bar__element:hover {\n  background-color: #445a65;\n  text-decoration: none; }\n\n.center-bar__diff-view-buttons {\n  display: inline-flex;\n  float: left; }\n\n.status-bar__diff-view {\n  display: inline-flex;\n  max-width: 280px; }\n\n.identifier {\n  max-width: 200px;\n  margin-right: 5px;\n  margin-left: 5px;\n  overflow: hidden;\n  text-overflow: ellipsis; }\n\n.arrow-icon {\n  margin-top: 2px; }\n\n.update-button {\n  width: 15px;\n  height: 15px;\n  line-height: 15px; }\n\n.update-button-icon {\n  height: 15px; }\n\n.update-dropdown {\n  width: 315px;\n  height: 135px;\n  text-align: center; }\n\n.update-dropdown-text {\n  display: block;\n  padding: 0px 10px 3px 10px; }\n\n.update-dropdown-title-container {\n  padding-bottom: 15px; }\n\n.update-dropdown-title {\n  display: inline-block;\n  margin: auto;\n  font-weight: bold; }\n\n.update-dropdown-progressbar {\n  height: 16px;\n  margin: 0 10px 0 10px; }\n\n.update-dropdown-progressbar-progress {\n  background-color: #ccc;\n  font-size: 12px; }\n\n.update-dropdown-progress-container {\n  overflow: hidden;\n  vertical-align: middle; }\n\n.update-dropdown-cancel-download-button {\n  margin-top: 5px; }\n\n.update-dropdown-button-container {\n  margin: 10px 30px; }\n\n.update-dropdown-cancel-button {\n  float: left; }\n\n.update-dropdown-update-button {\n  float: right; }\n\n.update-dropdown-install-button {\n  float: right;\n  margin-right: 15px;\n  margin-top: 20px; }\n\n.update-dropdown-install-text {\n  display: inherit;\n  width: 212px;\n  text-align: left;\n  margin-left: 10px; }\n\n.update-dropdown-release-notes {\n  display: block; }\n";});;
define('text!modules/status-bar/status-bar.html',[],function(){return "<template>\n  <require from=\"./status-bar.css\"></require>\n  <!--\n    STATUS BAR\n  -->\n  <div class=\"status-bar status-bar--system-macos\" id=\"statusBarContainer\">\n    <div class=\"status-bar__left-bar\" id=\"statusBarLeft\">\n      <a if.bind=\"updateAvailable\" ref=\"updateDropdownToggle\" class=\"update-button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n        <img class=\"update-button-icon\" src=\"src/resources/images/icon.png\" title.bind=\"isDownloading ? updateProgressData.percent.toString() + '%' : 'Update available.'\">\n      </a>\n      <div class=\"dropdown-menu update-dropdown\" ref=\"updateDropdown\">\n        <template if.bind=\"!isDownloading && !updateDownloadFinished\">\n          <div class=\"update-dropdown-title-container\">\n            <span class=\"update-dropdown-title\">Version ${updateVersion} available</span>\n          </div>\n          <a class=\"update-dropdown-release-notes\" click.delegate=\"showReleaseNotes()\">\n            Click here for release notes\n          </a>\n          <div class=\"update-dropdown-button-container\">\n            <button class=\"btn btn-default update-dropdown-cancel-button\" click.delegate=\"hideDropdown()\" disabled.bind=\"updateStarted\">Cancel</button>\n            <button class=\"btn btn-primary update-dropdown-update-button\" click.delegate=\"startUpdate()\" disabled.bind=\"updateStarted\">Update</button>\n          </div>\n        </template>\n        <template if.bind=\"isDownloading && !updateDownloadFinished\">\n          <div class=\"update-dropdown-title-container\">\n            <span class=\"update-dropdown-title\">Downloading update</span>\n          </div>\n          <span class=\"update-dropdown-text\">${(updateProgressData.bytesPerSecond/1000).toFixed(2)} KB/s - ${(updateProgressData.transferred/1000/1000).toFixed(2)} MB of ${(updateProgressData.total/1000/1000).toFixed(2)} MB</span>\n          <div class=\"update-dropdown-progress-container\">\n            <div class=\"progress update-dropdown-progressbar\">\n              <div class=\"progress-bar progress-bar-striped progress-bar-animated update-dropdown-progressbar-progress\" role=\"progressbar\" css=\"width: ${updateProgressData.percent}%;\">${updateProgressData.percent.toFixed(1)}%</div>\n            </div>\n            <button class=\"btn btn-default update-dropdown-cancel-download-button\" title=\"Abort download.\" click.delegate=\"cancelUpdate()\">Abort Download</button>\n          </div>\n        </template>\n        <template if.bind=\"updateDownloadFinished\">\n          <div class=\"update-dropdown-title-container\">\n            <span class=\"update-dropdown-title\">Update ready</span>\n          </div>\n          <button class=\"btn btn-primary update-dropdown-install-button\" click.delegate=\"installUpdate()\">Install</button>\n          <span class=\"update-dropdown-install-text\">Would you like to install the update now?<br>Otherwise it will be installed when restarting the BPMN Studio.</span>\n        </template>\n      </div>\n    </div>\n    <div class=\"status-bar__center-bar\" id=\"statusBarCenter\">\n      <div if.bind=\"showInspectProcessInstanceButtons\">\n        <a class=\"status-bar__element\" class.bind=\"showInspectPanel ? 'status-bar__element--active' : ''\" click.delegate=\"toggleInspectPanel()\">Inspect Panel</a>\n      </div>\n      <div class=\"center-bar__diff-view-buttons\" if.bind=\"diffIsShown\">\n        <a class=\"status-bar__element status-bar__diff-view\" class.bind=\"currentDiffMode === diffMode.OldVsNew ? 'status-bar__element--active' : ''\" click.delegate=\"changeDiffMode(diffMode.OldVsNew)\" title=\"Compare the ${previousXmlIdentifier === 'Old' ? previousXmlIdentifier.toLowerCase() : previousXmlIdentifier} diagram with the ${currentXmlIdentifier === 'New' ? currentXmlIdentifier.toLowerCase() : currentXmlIdentifier} diagram\" id=\"statusBarOldVsNew\">\n          <div class=\"identifier\">${previousXmlIdentifier}</div> vs. <div class=\"identifier\">${currentXmlIdentifier}</div>\n          <i class=\"fa fa-arrow-right arrow-icon\"></i>\n        </a>\n        <a class=\"status-bar__element\" class.bind=\"showChangeList ? 'status-bar__element--active' : ''\" click.delegate=\"toggleChangeList()\" title=\"Toggle visibility of the Change List\" id=\"statusBarChangesLog\">\n          <i class=\"fas fa-bars\"></i>\n        </a>\n        <a class=\"status-bar__element status-bar__diff-view\" class.bind=\"currentDiffMode === diffMode.NewVsOld ? 'status-bar__element--active' : ''\" click.delegate=\"changeDiffMode(diffMode.NewVsOld)\" title=\"Compare the ${currentXmlIdentifier === 'New' ? currentXmlIdentifier.toLowerCase() : currentXmlIdentifier} diagram with the ${previousXmlIdentifier === 'Old' ? previousXmlIdentifier.toLowerCase() : previousXmlIdentifier} diagram\" id=\"statusBarNewVsOld\">\n          <i class=\"fa fa-arrow-left arrow-icon\"></i>\n          <div class=\"identifier\">${currentXmlIdentifier}</div> vs. <div class=\"identifier\">${previousXmlIdentifier}</div>\n        </a>\n      </div>\n    </div>\n    <div class=\"status-bar__right-bar\" id=\"statusBarRight\">\n      <template if.bind=\"showDiagramViewButtons\">\n        <a class=\"status-bar__element\" click.delegate=\"toggleXMLView()\" if.bind=\"!xmlIsShown\" data-test-status-bar-xml-view-button>\n          <i class=\"fas fa-file-code\"></i> Show XML\n        </a>\n        <a class=\"status-bar__element\" click.delegate=\"toggleXMLView()\" if.bind=\"xmlIsShown\" data-test-status-bar-disable-xml-view-button>\n          <i class=\"fas fa-file-code\"></i> Show Diagram\n        </a>\n        <a class=\"status-bar__element\" click.delegate=\"toggleDiffView()\" if.bind=\"!diffIsShown\" data-test-status-bar-diff-view-button>\n          <i class=\"fa fa-object-group\"></i> Show Diff\n        </a>\n        <a class=\"status-bar__element\" click.delegate=\"toggleDiffView()\" if.bind=\"diffIsShown\" data-test-status-bar-disable-diff-view-button>\n          <i class=\"fa fa-object-group\"></i> Show Diagram\n        </a>\n      </template>\n    </div>\n  </div>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define('modules/task-dynamic-ui/task-dynamic-ui',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "aurelia-router", "dom-event-dispatch", "@process-engine/management_api_contracts", "../../contracts/index", "../../services/notification-service/notification.service"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, aurelia_router_1, dom_event_dispatch_1, management_api_contracts_1, index_1, notification_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TaskDynamicUi = (function () {
        function TaskDynamicUi(eventAggregator, dynamicUiService, router, notificationService, solutionService, element) {
            this.eventAggregator = eventAggregator;
            this.dynamicUiService = dynamicUiService;
            this.router = router;
            this.notificationService = notificationService;
            this.solutionService = solutionService;
            this.element = element;
        }
        TaskDynamicUi.prototype.activate = function (routeParameters) {
            this.correlationId = routeParameters.correlationId;
            this.processModelId = routeParameters.diagramName;
            this.processInstanceId = routeParameters.processInstanceId;
            this.taskId = routeParameters.taskId;
            this.activeDiagramName = routeParameters.diagramName;
            this.activeSolutionUri = routeParameters.solutionUri;
            this.activeSolutionEntry = this.solutionService.getSolutionEntryForUri(this.activeSolutionUri);
            this.identity = this.activeSolutionEntry.identity;
            this.isModal = false;
        };
        TaskDynamicUi.prototype.attached = function () {
            var _this = this;
            this.dynamicUiWrapper.identity = this.identity;
            this.getTask();
            this.subscriptions = [
                this.eventAggregator.subscribe(index_1.AuthenticationStateEvent.LOGIN, function () {
                    _this.getTask();
                }),
                this.eventAggregator.subscribe(index_1.AuthenticationStateEvent.LOGOUT, function () {
                    _this.getTask();
                }),
            ];
            this.dynamicUiWrapper.onButtonClick = function () {
                _this.finishTask();
            };
            this.setDynamicUIWrapperUserTask();
            this.setDynamicUIWrapperManualTask();
            this.dynamicUiWrapper.activeSolutionEntry = this.activeSolutionEntry;
        };
        TaskDynamicUi.prototype.activeSolutionEntryChanged = function (newValue) {
            this.identity = newValue.identity;
            var dynamicUiWrapperIsUndefined = this.dynamicUiWrapper === undefined;
            if (dynamicUiWrapperIsUndefined) {
                return;
            }
            this.dynamicUiWrapper.activeSolutionEntry = newValue;
        };
        TaskDynamicUi.prototype.detached = function () {
            for (var _i = 0, _a = this.subscriptions; _i < _a.length; _i++) {
                var subscription = _a[_i];
                subscription.dispose();
            }
        };
        TaskDynamicUi.prototype.userTaskChanged = function () {
            this.setDynamicUIWrapperUserTask();
        };
        TaskDynamicUi.prototype.manualTaskChanged = function () {
            this.setDynamicUIWrapperManualTask();
        };
        Object.defineProperty(TaskDynamicUi.prototype, "taskName", {
            get: function () {
                var nonWhiteSpaceRegex = /\S/;
                var task = this.userTask === undefined ? this.manualTask : this.userTask;
                var noTaskIsSet = task === undefined;
                if (noTaskIsSet) {
                    return undefined;
                }
                var taskNameIsSet = nonWhiteSpaceRegex.test(task.name);
                var taskDisplayName = taskNameIsSet ? task.name : task.id;
                return taskDisplayName;
            },
            enumerable: true,
            configurable: true
        });
        TaskDynamicUi.prototype.clearTasks = function () {
            this.userTask = undefined;
            this.manualTask = undefined;
        };
        TaskDynamicUi.prototype.finishTask = function () {
            if (this.isModal) {
                dom_event_dispatch_1.domEventDispatch.dispatchEvent(this.element, 'close-modal', { bubbles: true });
                this.clearTasks();
                return;
            }
            var task = this.userTask === undefined ? this.manualTask : this.userTask;
            this.router.navigateToRoute('live-execution-tracker', {
                diagramName: this.activeDiagramName,
                solutionUri: this.activeSolutionUri,
                correlationId: task.correlationId,
                processInstanceId: this.processInstanceId,
            });
        };
        TaskDynamicUi.prototype.getTask = function () {
            return __awaiter(this, void 0, void 0, function () {
                var processInstanceIdNotGiven, _a, userTaskFound, _b, manualTaskFound, error_1;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _c.trys.push([0, 3, , 4]);
                            processInstanceIdNotGiven = this.processInstanceId === undefined;
                            if (processInstanceIdNotGiven) {
                                throw Error("Invalid ProcessInstance ID: " + this.processInstanceId);
                            }
                            _a = this;
                            return [4, this.dynamicUiService.getUserTask(this.identity, this.processInstanceId, this.taskId)];
                        case 1:
                            _a.userTask = _c.sent();
                            userTaskFound = this.userTask !== undefined;
                            if (userTaskFound) {
                                return [2];
                            }
                            _b = this;
                            return [4, this.dynamicUiService.getManualTask(this.identity, this.processInstanceId, this.taskId)];
                        case 2:
                            _b.manualTask = _c.sent();
                            manualTaskFound = this.manualTask !== undefined;
                            if (manualTaskFound) {
                                return [2];
                            }
                            throw new Error("No UserTask or ManualTask with ID " + this.taskId + " found!");
                        case 3:
                            error_1 = _c.sent();
                            this.notificationService.showNotification(index_1.NotificationType.ERROR, "Failed to refresh task: " + error_1.message);
                            throw error_1;
                        case 4: return [2];
                    }
                });
            });
        };
        TaskDynamicUi.prototype.setDynamicUIWrapperUserTask = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (this.dynamicUiWrapper === undefined || this.dynamicUiWrapper === null) {
                        return [2];
                    }
                    this.dynamicUiWrapper.currentUserTask = this.userTask;
                    return [2];
                });
            });
        };
        TaskDynamicUi.prototype.setDynamicUIWrapperManualTask = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (this.dynamicUiWrapper === undefined || this.dynamicUiWrapper === null) {
                        return [2];
                    }
                    this.dynamicUiWrapper.currentManualTask = this.manualTask;
                    return [2];
                });
            });
        };
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", String)
        ], TaskDynamicUi.prototype, "correlationId", void 0);
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", String)
        ], TaskDynamicUi.prototype, "processModelId", void 0);
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", String)
        ], TaskDynamicUi.prototype, "processInstanceId", void 0);
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", String)
        ], TaskDynamicUi.prototype, "taskId", void 0);
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", Boolean)
        ], TaskDynamicUi.prototype, "isModal", void 0);
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", Object)
        ], TaskDynamicUi.prototype, "activeSolutionEntry", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", management_api_contracts_1.DataModels.UserTasks.UserTask)
        ], TaskDynamicUi.prototype, "userTask", void 0);
        __decorate([
            aurelia_framework_1.bindable,
            __metadata("design:type", management_api_contracts_1.DataModels.ManualTasks.ManualTask)
        ], TaskDynamicUi.prototype, "manualTask", void 0);
        __decorate([
            aurelia_framework_1.computedFrom('userTask', 'manualTask'),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [])
        ], TaskDynamicUi.prototype, "taskName", null);
        TaskDynamicUi = __decorate([
            aurelia_framework_1.inject(aurelia_event_aggregator_1.EventAggregator, 'DynamicUiService', aurelia_router_1.Router, 'NotificationService', 'SolutionService', Element),
            __metadata("design:paramtypes", [aurelia_event_aggregator_1.EventAggregator, Object, aurelia_router_1.Router,
                notification_service_1.NotificationService, Object, Element])
        ], TaskDynamicUi);
        return TaskDynamicUi;
    }());
    exports.TaskDynamicUi = TaskDynamicUi;
});


;
define('text!modules/task-dynamic-ui/task-dynamic-ui.css',[],function(){return ".dynamic-ui {\n  height: 100%;\n  overflow-y: auto; }\n\n.dynamic-ui-wrapper {\n  height: 100%; }\n";});;
define('text!modules/task-dynamic-ui/task-dynamic-ui.html',[],function(){return "<template>\n  <require from=\"./task-dynamic-ui.css\"></require>\n  <require from=\"../dynamic-ui-wrapper/dynamic-ui-wrapper\"></require>\n  <div class=\"dynamic-ui-wrapper\">\n    <div class=\"dynamic-ui\">\n      <dynamic-ui-wrapper\n        view-model.ref=\"dynamicUiWrapper\"\n        is-modal.bind=\"isModal\"\n        close-modal.trigger=\"clearTasks()\">\n      </dynamic-ui-wrapper>\n      <template if.bind=\"!userTask && !manualTask\">\n        <h3>Task not found</h3>\n      </template>\n    </div>\n  </div>\n\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define('modules/task-list-container/task-list-container',["require", "exports", "aurelia-framework", "aurelia-router", "@essential-projects/errors_ts", "../../contracts/index", "../../services/notification-service/notification.service"], function (require, exports, aurelia_framework_1, aurelia_router_1, errors_ts_1, index_1, notification_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TaskListContainer = (function () {
        function TaskListContainer(notificationService, router, dashboardService, solutionService) {
            this.showTaskList = false;
            this.notificationService = notificationService;
            this.router = router;
            this.dashboardService = dashboardService;
            this.solutionService = solutionService;
        }
        TaskListContainer.prototype.canActivate = function () {
            return __awaiter(this, void 0, void 0, function () {
                var solutionUriIsSet, activeSolutionUri, activeSolutionEntry, hasNoClaimsForTaskList;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            solutionUriIsSet = this.router.currentInstruction !== null &&
                                this.router.currentInstruction !== undefined &&
                                this.router.currentInstruction.queryParams.solutionUri !== null &&
                                this.router.currentInstruction.queryParams.solutionUri !== undefined;
                            activeSolutionUri = solutionUriIsSet
                                ? this.router.currentInstruction.queryParams.solutionUri
                                : window.localStorage.getItem('InternalProcessEngineRoute');
                            activeSolutionEntry = this.solutionService.getSolutionEntryForUri(activeSolutionUri);
                            return [4, this.hasClaimsForTaskList(activeSolutionEntry.identity)];
                        case 1:
                            hasNoClaimsForTaskList = !(_a.sent());
                            if (hasNoClaimsForTaskList) {
                                this.notificationService.showNotification(index_1.NotificationType.ERROR, "You don't have the permission to use the inspect features.");
                                this.router.navigateToRoute('start-page');
                                return [2, false];
                            }
                            this.showTaskList = !hasNoClaimsForTaskList;
                            return [2, true];
                    }
                });
            });
        };
        TaskListContainer.prototype.activate = function (routeParameters) {
            this.routeParameters = routeParameters;
        };
        TaskListContainer.prototype.attached = function () {
            this.taskList.initializeTaskList(this.routeParameters);
        };
        TaskListContainer.prototype.hasClaimsForTaskList = function (identity) {
            return __awaiter(this, void 0, void 0, function () {
                var error_1, errorIsForbiddenError, errorIsUnauthorizedError;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 3, , 4]);
                            return [4, this.dashboardService.getProcessModels(identity)];
                        case 1:
                            _a.sent();
                            return [4, this.dashboardService.getActiveCorrelations(identity)];
                        case 2:
                            _a.sent();
                            return [3, 4];
                        case 3:
                            error_1 = _a.sent();
                            errorIsForbiddenError = errors_ts_1.isError(error_1, errors_ts_1.ForbiddenError);
                            errorIsUnauthorizedError = errors_ts_1.isError(error_1, errors_ts_1.UnauthorizedError);
                            if (errorIsForbiddenError || errorIsUnauthorizedError) {
                                return [2, false];
                            }
                            return [3, 4];
                        case 4: return [2, true];
                    }
                });
            });
        };
        TaskListContainer = __decorate([
            aurelia_framework_1.inject('NotificationService', aurelia_router_1.Router, 'DashboardService', 'SolutionService'),
            __metadata("design:paramtypes", [notification_service_1.NotificationService,
                aurelia_router_1.Router, Object, Object])
        ], TaskListContainer);
        return TaskListContainer;
    }());
    exports.TaskListContainer = TaskListContainer;
});


;
define('text!modules/task-list-container/task-list-container.css',[],function(){return ".task-list {\n  height: 100%;\n  padding: 20px 60px; }\n";});;
define('text!modules/task-list-container/task-list-container.html',[],function(){return "<template>\n  <require from=\"./task-list-container.css\"></require>\n  <require from=\"../inspect/task-list/task-list\"></require>\n  <div class=\"task-list\">\n    <task-list show.bind=\"showTaskList\" view-model.ref=\"taskList\" class=\"task-list-container\"></task-list>\n  </div>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('modules/think/diagram-list/diagram-list',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "aurelia-router", "../../../contracts/index", "../../../environment", "../../../services/solution-is-remote-solution-module/solution-is-remote-solution.module", "../../../services/solution-explorer-services/open-diagrams-solution-explorer.service"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, aurelia_router_1, index_1, environment_1, solution_is_remote_solution_module_1, open_diagrams_solution_explorer_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var DiagramList = (function () {
        function DiagramList(eventAggregator, router, openDiagramService) {
            this.isAttached = false;
            this.eventAggregator = eventAggregator;
            this.router = router;
            this.openDiagramService = openDiagramService;
        }
        DiagramList.prototype.attached = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.isAttached = true;
                            return [4, this.updateDiagramList()];
                        case 1:
                            _a.sent();
                            this.startPolling();
                            this.subscriptions = [
                                this.eventAggregator.subscribe(index_1.AuthenticationStateEvent.LOGIN, function () {
                                    _this.updateDiagramList();
                                }),
                            ];
                            return [2];
                    }
                });
            });
        };
        DiagramList.prototype.detached = function () {
            this.isAttached = false;
            this.stopPolling();
            if (this.subscriptions !== undefined) {
                for (var _i = 0, _a = this.subscriptions; _i < _a.length; _i++) {
                    var subscription = _a[_i];
                    subscription.dispose();
                }
            }
        };
        DiagramList.prototype.startPolling = function () {
            var _this = this;
            this.pollingTimeout = setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.updateDiagramList()];
                        case 1:
                            _a.sent();
                            if (this.isAttached) {
                                this.startPolling();
                            }
                            return [2];
                    }
                });
            }); }, environment_1.default.processengine.processDefListPollingIntervalInMs);
        };
        DiagramList.prototype.stopPolling = function () {
            clearTimeout(this.pollingTimeout);
        };
        DiagramList.prototype.openDiagram = function (diagram) {
            return __awaiter(this, void 0, void 0, function () {
                var diagramIsFromLocalSolution, diagramIsNotYetOpened;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            diagramIsFromLocalSolution = !solution_is_remote_solution_module_1.solutionIsRemoteSolution(diagram.uri);
                            if (!diagramIsFromLocalSolution) return [3, 2];
                            diagramIsNotYetOpened = !this.openDiagramService
                                .getOpenedDiagrams()
                                .some(function (openedDiagram) {
                                return openedDiagram.uri === diagram.uri;
                            });
                            if (!diagramIsNotYetOpened) return [3, 2];
                            return [4, this.openDiagramService.openDiagramFromSolution(diagram.uri, this.createIdentityForSolutionExplorer())];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            this.router.navigateToRoute('design', {
                                diagramName: diagram.name,
                                diagramUri: diagram.uri,
                                solutionUri: this.activeSolutionEntry.uri,
                                view: 'detail',
                            });
                            return [2];
                    }
                });
            });
        };
        DiagramList.prototype.updateDiagramList = function () {
            return __awaiter(this, void 0, void 0, function () {
                var solution, error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4, this.activeSolutionEntry.service.loadSolution()];
                        case 1:
                            solution = _a.sent();
                            this.allDiagrams = solution.diagrams;
                            return [3, 3];
                        case 2:
                            error_1 = _a.sent();
                            return [3, 3];
                        case 3: return [2];
                    }
                });
            });
        };
        DiagramList.prototype.createIdentityForSolutionExplorer = function () {
            var accessToken = this.createDummyAccessToken();
            var identity = {
                token: accessToken,
                userId: '',
            };
            return identity;
        };
        DiagramList.prototype.createDummyAccessToken = function () {
            var dummyAccessTokenString = 'dummy_token';
            var base64EncodedString = btoa(dummyAccessTokenString);
            return base64EncodedString;
        };
        __decorate([
            aurelia_framework_1.bindable(),
            __metadata("design:type", Object)
        ], DiagramList.prototype, "activeSolutionEntry", void 0);
        DiagramList = __decorate([
            aurelia_framework_1.inject(aurelia_event_aggregator_1.EventAggregator, aurelia_router_1.Router, 'OpenDiagramService'),
            __metadata("design:paramtypes", [aurelia_event_aggregator_1.EventAggregator,
                aurelia_router_1.Router,
                open_diagrams_solution_explorer_service_1.OpenDiagramsSolutionExplorerService])
        ], DiagramList);
        return DiagramList;
    }());
    exports.DiagramList = DiagramList;
});


;
define('text!modules/think/diagram-list/diagram-list.css',[],function(){return "/*\n * Process Definition List Styles\n */\n.diagram-list {\n  display: flex;\n  height: 100%;\n  align-items: stretch; }\n\n.diagram-list-table {\n  table-layout: fixed; }\n\n.diagram-list-container {\n  padding: 20px 60px;\n  flex: 1;\n  overflow: auto; }\n\n/*\n * Miscellaneous Styles\n */\n.loading-spinner {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 100px; }\n\n.process-name-table-entry {\n  height: 50px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap; }\n\n.process-name-table-entry:hover {\n  background: #E5E5E5; }\n";});;
define('text!modules/think/diagram-list/diagram-list.html',[],function(){return "<template>\n  <require from=\"./diagram-list.css\"></require>\n\n  <div class=\"diagram-list\">\n    <div class=\"diagram-list-container\">\n      <div show.bind=\"allDiagrams\">\n        <input type=\"file\" ref=\"fileInput\" accept=\".xml, application/xml, .bpmn, application/bpmn20-xml\" files.bind=\"selectedFiles\" class=\"d-none\">\n        <table class=\"table table-striped table-bordered diagram-list-table\">\n          <tr>\n            <th>Process Name</th>\n          </tr>\n          <tr repeat.for=\"diagram of allDiagrams\" class=\"diagram-list-item\">\n            <td class=\"process-name-table-entry\" id=\"diagram-${diagram.name}\" title=\"${diagram.name}\" click.delegate=\"openDiagram(diagram)\">${diagram.name}</td>\n          </tr>\n        </table>\n      </div>\n      <div show.bind=\"!allDiagrams\" class=\"container\">\n        <img src=\"src/resources/images/gears.svg\" class=\"loading-spinner\">\n      </div>\n    </div>\n  </div>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define('modules/think/think',["require", "exports", "aurelia-framework", "aurelia-router", "../../contracts/index", "../../services/notification-service/notification.service"], function (require, exports, aurelia_framework_1, aurelia_router_1, index_1, notification_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Think = (function () {
        function Think(solutionService, notificationService) {
            this.showDiagramList = false;
            this.solutionService = solutionService;
            this.notificationService = notificationService;
        }
        Think.prototype.canActivate = function (routeParameters) {
            return __awaiter(this, void 0, void 0, function () {
                var solutionUriIsSet, solutionUri, noActiveSolution;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            solutionUriIsSet = routeParameters.solutionUri !== undefined;
                            solutionUri = solutionUriIsSet
                                ? routeParameters.solutionUri
                                : window.localStorage.getItem('InternalProcessEngineRoute');
                            this.activeSolutionEntry = this.solutionService.getSolutionEntryForUri(solutionUri);
                            noActiveSolution = this.activeSolutionEntry === undefined;
                            if (noActiveSolution) {
                                this.notificationService.showNotification(index_1.NotificationType.INFO, 'Please open a solution first.');
                                return [2, false];
                            }
                            return [4, this.activeSolutionEntry.service.openSolution(this.activeSolutionEntry.uri, this.activeSolutionEntry.identity)];
                        case 1:
                            _a.sent();
                            return [2, true];
                    }
                });
            });
        };
        Think.prototype.activate = function () {
            this.showDiagramList = true;
        };
        Think.prototype.determineActivationStrategy = function () {
            return aurelia_router_1.activationStrategy.replace;
        };
        Think = __decorate([
            aurelia_framework_1.inject('SolutionService', 'NotificationService'),
            __metadata("design:paramtypes", [Object, notification_service_1.NotificationService])
        ], Think);
        return Think;
    }());
    exports.Think = Think;
});


;
define('text!modules/think/think.css',[],function(){return ".think {\n  width: 100%;\n  height: 100%; }\n";});;
define('text!modules/think/think.html',[],function(){return "<template>\n  <require from=\"./think.css\"></require>\n  <require from=\"./diagram-list/diagram-list\"></require>\n\n  <div class=\"think\">\n    <diagram-list show.bind=\"showDiagramList\" active-solution-entry.bind=\"activeSolutionEntry\"></diagram-list>\n  </div>\n</template>\n";});;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
define('modules/user-preferences/user-preferences',["require", "exports", "aurelia-framework", "aurelia-router", "../../services/notification-service/notification.service", "../../contracts/index", "../../services/user-config-service/user-config.service"], function (require, exports, aurelia_framework_1, aurelia_router_1, notification_service_1, index_1, user_config_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Preferences = (function () {
        function Preferences(notificationService, userConfigService, router) {
            this.notificationService = notificationService;
            this.userConfigService = userConfigService;
            this.router = router;
        }
        Preferences.prototype.attached = function () {
            var loadedPreferences = this.userConfigService.getCurrentConfig();
            this.preferences = JSON.stringify(loadedPreferences, null, 2);
        };
        Preferences.prototype.save = function () {
            if (this.isValidJSON()) {
                var customConfig_1 = {};
                var defaultConfig_1 = this.userConfigService.getDefaultConfig();
                Object.entries(JSON.parse(this.preferences)).forEach(function (entry) {
                    var defaultConfigEntry = defaultConfig_1[entry[0]];
                    if (defaultConfigEntry !== entry[1]) {
                        customConfig_1[entry[0]] = entry[1];
                    }
                });
                this.userConfigService.persistUserConfig(customConfig_1);
                this.router.navigateBack();
            }
            else {
                this.notificationService.showNotification(index_1.NotificationType.ERROR, 'Error:\n The preferences can not be saved! \nNot a valid JSON format!');
            }
        };
        Preferences.prototype.isValidJSON = function () {
            try {
                JSON.parse(this.preferences);
                return true;
            }
            catch (error) {
                return false;
            }
        };
        Preferences = __decorate([
            aurelia_framework_1.inject('NotificationService', 'UserConfigService', aurelia_router_1.Router),
            __metadata("design:paramtypes", [notification_service_1.NotificationService, user_config_service_1.UserConfigService, aurelia_router_1.Router])
        ], Preferences);
        return Preferences;
    }());
    exports.Preferences = Preferences;
});


;
define('text!modules/user-preferences/user-preferences.css',[],function(){return ".user-preferences {\n  width: 100%;\n  height: 100%;\n  padding: 20px 20px 130px 20px; }\n\n.user-preferences__title {\n  margin-bottom: 20px; }\n\n.user-preferences__input {\n  width: 100%;\n  min-height: 500px;\n  max-height: 98%;\n  margin-bottom: 10px; }\n";});;
define('text!modules/user-preferences/user-preferences.html',[],function(){return "<template>\n  <require from=\"./user-preferences.css\"></require>\n  <div class=\"user-preferences\">\n    <div class=\"user-preferences__title\">\n      <h1>Preferences</h1>\n    </div>\n\n    <textarea class=\"form-control user-preferences__input\" value.bind=\"preferences\"></textarea>\n    <button class=\"btn btn-primary\" click.delegate=\"save()\">Save</button>\n\n  </div>\n</template>\n";});;
define('open-id-connect-electron-configuration',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        clientId: 'bpmn_studio',
        redirectUri: 'http://localhost:9000/signin-oidc',
        logoutRedirectUri: 'http://localhost:9000/signout-oidc',
        responseType: 'id_token token',
        scope: 'openid profile test_resource',
    };
});


;
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('open-id-connect-web-configuration',["require", "exports", "oidc-client", "./environment"], function (require, exports, oidc_client_1, environment_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    exports.oidcConfig = {
        loginRedirectRoute: '/',
        logoutRedirectRoute: '/',
        unauthorizedRedirectRoute: '/',
        logLevel: 0,
        userManagerSettings: {
            accessTokenExpiringNotificationTime: 1,
            authority: environment_1.default.openIdConnect.authority,
            automaticSilentRenew: true,
            monitorSession: true,
            checkSessionInterval: 2000,
            client_id: 'bpmn_studio',
            filterProtocolClaims: true,
            loadUserInfo: false,
            post_logout_redirect_uri: environment_1.default.appHost + "/signout-oidc",
            popup_redirect_uri: environment_1.default.appHost + "/signin-popup-redirect",
            popup_post_logout_redirect_uri: environment_1.default.appHost + "/signout-popup-redirect",
            redirect_uri: environment_1.default.appHost + "/signin-oidc",
            response_type: 'id_token token',
            scope: 'openid profile test_resource',
            silentRequestTimeout: 10000,
            silent_redirect_uri: environment_1.default.appHost + "/signin-oidc",
            userStore: new oidc_client_1.WebStorageStateStore({
                prefix: 'oidc',
                store: window.localStorage,
            }),
        },
    };
});


;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('services/authentication-service/electron.oidc-authentication-service',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "bluebird", "querystring", "url", "../../contracts/index", "../notification-service/notification.service", "../../open-id-connect-electron-configuration", "../../modules/fetch-http-client/http-fetch-client"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, bluebird_1, querystring_1, url_1, index_1, notification_service_1, open_id_connect_electron_configuration_1, http_fetch_client_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    bluebird_1 = __importDefault(bluebird_1);
    querystring_1 = __importDefault(querystring_1);
    url_1 = __importDefault(url_1);
    open_id_connect_electron_configuration_1 = __importDefault(open_id_connect_electron_configuration_1);
    var UNAUTHORIZED_STATUS_CODE = 401;
    var IDENTITY_SERVER_AVAILABLE_SUCCESS_STATUS_CODE = 200;
    var identityServerCookieName = '.AspNetCore.Identity.Application';
    var ElectronOidcAuthenticationService = (function () {
        function ElectronOidcAuthenticationService(eventAggregator, notificationService, httpFetchClient) {
            this.solutionsToRefresh = [];
            this.refreshTimeouts = new Map();
            this.eventAggregator = eventAggregator;
            this.notificationService = notificationService;
            this.httpFetchClient = httpFetchClient;
            this.electronRemote = window.nodeRequire('electron').remote;
        }
        ElectronOidcAuthenticationService.prototype.isLoggedIn = function (authorityUrl, identity) {
            return __awaiter(this, void 0, void 0, function () {
                var userIdentity, error_1, userIdentityIsDefined;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            authorityUrl = this.formAuthority(authorityUrl);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4, this.getUserIdentity(authorityUrl, identity)];
                        case 2:
                            userIdentity = _a.sent();
                            return [3, 4];
                        case 3:
                            error_1 = _a.sent();
                            return [2, false];
                        case 4:
                            userIdentityIsDefined = userIdentity !== undefined && userIdentity !== null;
                            return [2, userIdentityIsDefined];
                    }
                });
            });
        };
        ElectronOidcAuthenticationService.prototype.login = function (authorityUrl, solutionUri, refreshCallback, silent) {
            return __awaiter(this, void 0, void 0, function () {
                var identityServerIsNotReachable, tokenObject, silentRefreshHandler, loginResult;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            authorityUrl = this.formAuthority(authorityUrl);
                            return [4, this.isAuthorityReachable(authorityUrl)];
                        case 1:
                            identityServerIsNotReachable = !(_a.sent());
                            if (identityServerIsNotReachable) {
                                return [2, undefined];
                            }
                            return [4, this.showLoginPopup(authorityUrl, solutionUri, silent)];
                        case 2:
                            tokenObject = _a.sent();
                            silentRefreshHandler = function (silentRefreshTokenObject) { return __awaiter(_this, void 0, void 0, function () {
                                var loginResult;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4, this.convertTokenObjectToLoginResult(authorityUrl, silentRefreshTokenObject)];
                                        case 1:
                                            loginResult = _a.sent();
                                            refreshCallback(loginResult);
                                            return [2];
                                    }
                                });
                            }); };
                            this.startSilentRefreshing(authorityUrl, solutionUri, tokenObject, silentRefreshHandler);
                            loginResult = this.convertTokenObjectToLoginResult(authorityUrl, tokenObject);
                            this.eventAggregator.publish(index_1.AuthenticationStateEvent.LOGIN);
                            return [2, loginResult];
                    }
                });
            });
        };
        ElectronOidcAuthenticationService.prototype.logout = function (authorityUrl, solutionUri, identity, silent) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            authorityUrl = this.formAuthority(authorityUrl);
                            return [4, this.showLogoutPopup(authorityUrl, solutionUri, identity, silent)];
                        case 1:
                            _a.sent();
                            this.eventAggregator.publish(index_1.AuthenticationStateEvent.LOGOUT);
                            return [2];
                    }
                });
            });
        };
        ElectronOidcAuthenticationService.prototype.getUserIdentity = function (authorityUrl, identity) {
            return __awaiter(this, void 0, void 0, function () {
                var userInfoResponse, requestIsUnauthorized;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            authorityUrl = this.formAuthority(authorityUrl);
                            return [4, this.httpFetchClient.get(authorityUrl + "connect/userinfo", {
                                    headers: {
                                        'Access-Control-Allow-Origin': '*',
                                        'Content-Type': 'application/json',
                                        Authorization: "Bearer " + identity.token,
                                    },
                                })];
                        case 1:
                            userInfoResponse = _a.sent();
                            requestIsUnauthorized = userInfoResponse.result.status === UNAUTHORIZED_STATUS_CODE;
                            if (requestIsUnauthorized) {
                                return [2, null];
                            }
                            return [2, userInfoResponse.result];
                    }
                });
            });
        };
        ElectronOidcAuthenticationService.prototype.showLogoutPopup = function (authorityUrl, solutionUri, identity, silent) {
            return __awaiter(this, void 0, void 0, function () {
                var urlParams, endSessionUrl;
                var _this = this;
                return __generator(this, function (_a) {
                    urlParams = {
                        id_token_hint: identity.userId,
                        post_logout_redirect_uri: open_id_connect_electron_configuration_1.default.logoutRedirectUri,
                    };
                    endSessionUrl = authorityUrl + "connect/endsession?" + querystring_1.default.stringify(urlParams);
                    this.stopSilentRefreshing(solutionUri);
                    this.removeIdentityServerCookieOfSolution(solutionUri);
                    return [2, new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                            var response, windowParams, logoutWindow;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4, fetch(endSessionUrl)];
                                    case 1:
                                        response = _a.sent();
                                        windowParams = {
                                            show: silent !== true,
                                            alwaysOnTop: true,
                                            autoHideMenuBar: true,
                                            webPreferences: {
                                                nodeIntegration: true,
                                                nodeIntegrationInWorker: true,
                                            },
                                        };
                                        logoutWindow = new this.electronRemote.BrowserWindow(windowParams || { useContentSize: true });
                                        logoutWindow.webContents.on('will-navigate', function (event, url) {
                                            if (url.includes(open_id_connect_electron_configuration_1.default.logoutRedirectUri)) {
                                                event.preventDefault();
                                                resolve(true);
                                                logoutWindow.close();
                                            }
                                        });
                                        logoutWindow.on('closed', function () {
                                            resolve(true);
                                        });
                                        logoutWindow.loadURL(response.url);
                                        if (!silent) {
                                            logoutWindow.show();
                                        }
                                        else {
                                            logoutWindow.webContents.on('did-finish-load', function () {
                                                resolve(true);
                                                logoutWindow.close();
                                            });
                                        }
                                        return [2];
                                }
                            });
                        }); })];
                });
            });
        };
        ElectronOidcAuthenticationService.prototype.convertTokenObjectToLoginResult = function (authorityUrl, tokenObject) {
            return __awaiter(this, void 0, void 0, function () {
                var iamIdentity, identity, loginResult;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            iamIdentity = {
                                token: tokenObject.accessToken,
                                userId: tokenObject.idToken,
                            };
                            return [4, this.getUserIdentity(authorityUrl, iamIdentity)];
                        case 1:
                            identity = _a.sent();
                            loginResult = {
                                identity: identity,
                                accessToken: tokenObject.accessToken,
                                idToken: tokenObject.idToken,
                            };
                            return [2, loginResult];
                    }
                });
            });
        };
        ElectronOidcAuthenticationService.prototype.showLoginPopup = function (authorityUrl, solutionUri, silent) {
            return __awaiter(this, void 0, void 0, function () {
                var urlParams, urlToLoad, windowParams;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.identityServerCookieIsEmpty(authorityUrl)];
                        case 1:
                            if (!!(_a.sent())) return [3, 3];
                            return [4, this.waitUntilCookieIsEmpty(authorityUrl)];
                        case 2:
                            _a.sent();
                            _a.label = 3;
                        case 3: return [4, this.solutionHasIdentityServerCookie(solutionUri)];
                        case 4:
                            if (!_a.sent()) return [3, 6];
                            return [4, this.setIdentityServerCookie(solutionUri, authorityUrl)];
                        case 5:
                            _a.sent();
                            _a.label = 6;
                        case 6:
                            urlParams = {
                                client_id: open_id_connect_electron_configuration_1.default.clientId,
                                redirect_uri: open_id_connect_electron_configuration_1.default.redirectUri,
                                response_type: open_id_connect_electron_configuration_1.default.responseType,
                                scope: open_id_connect_electron_configuration_1.default.scope,
                                state: this.getRandomString(16),
                                nonce: this.getRandomString(16),
                            };
                            urlToLoad = authorityUrl + "connect/authorize?" + querystring_1.default.stringify(urlParams);
                            windowParams = {
                                show: silent !== true,
                                alwaysOnTop: true,
                                autoHideMenuBar: true,
                                webPreferences: {
                                    nodeIntegration: true,
                                    nodeIntegrationInWorker: true,
                                },
                            };
                            return [2, new Promise(function (resolve, reject) {
                                    var authWindow = new _this.electronRemote.BrowserWindow(windowParams);
                                    authWindow.loadURL(urlToLoad);
                                    if (!silent) {
                                        authWindow.show();
                                    }
                                    authWindow.on('closed', function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0: return [4, this.removeCurrentIdentityServerCookie(authorityUrl)];
                                                case 1:
                                                    _a.sent();
                                                    reject(new Error('window was closed by user'));
                                                    return [2];
                                            }
                                        });
                                    }); });
                                    authWindow.webContents.on('will-redirect', function (event, url) {
                                        if (url.includes(open_id_connect_electron_configuration_1.default.redirectUri)) {
                                            event.preventDefault();
                                        }
                                        var redirectCallbackResolved = function (tokenObject) { return __awaiter(_this, void 0, void 0, function () {
                                            return __generator(this, function (_a) {
                                                switch (_a.label) {
                                                    case 0: return [4, this.setCurrentIdentityServerCookieForSolution(solutionUri, authorityUrl)];
                                                    case 1:
                                                        _a.sent();
                                                        return [4, this.removeCurrentIdentityServerCookie(authorityUrl)];
                                                    case 2:
                                                        _a.sent();
                                                        resolve(tokenObject);
                                                        return [2];
                                                }
                                            });
                                        }); };
                                        _this.handleRedirectCallback(url, authWindow, redirectCallbackResolved, reject);
                                    });
                                })];
                    }
                });
            });
        };
        ElectronOidcAuthenticationService.prototype.startSilentRefreshing = function (authorityUrl, solutionUri, tokenObject, refreshCallback) {
            this.solutionsToRefresh.push(solutionUri);
            this.silentRefresh(authorityUrl, solutionUri, tokenObject, refreshCallback);
        };
        ElectronOidcAuthenticationService.prototype.stopSilentRefreshing = function (solutionUri) {
            if (this.refreshTimeouts.has(solutionUri)) {
                this.refreshTimeouts.get(solutionUri).cancel();
                this.refreshTimeouts.delete(solutionUri);
            }
            if (this.solutionsToRefresh.includes(solutionUri)) {
                var solutionToRemove = this.solutionsToRefresh.findIndex(function (solution) { return solution === solutionUri; });
                this.solutionsToRefresh.splice(solutionToRemove, 1);
            }
        };
        ElectronOidcAuthenticationService.prototype.silentRefresh = function (authorityUrl, solutionUri, tokenObject, refreshCallback) {
            return __awaiter(this, void 0, void 0, function () {
                var tokenRefreshFactor, secondsInMilisecondsFactor, tokenRefreshInterval, timeout, urlParams, urlToLoad, authWindow;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            tokenRefreshFactor = 0.75;
                            secondsInMilisecondsFactor = 1000;
                            tokenRefreshInterval = tokenObject.expiresIn * tokenRefreshFactor * secondsInMilisecondsFactor;
                            timeout = this.wait(tokenRefreshInterval);
                            this.refreshTimeouts.set(solutionUri, timeout);
                            return [4, timeout];
                        case 1:
                            _a.sent();
                            if (!this.solutionsToRefresh.includes(solutionUri)) {
                                return [2];
                            }
                            return [4, this.solutionHasIdentityServerCookie(solutionUri)];
                        case 2:
                            if (!_a.sent()) return [3, 4];
                            return [4, this.setIdentityServerCookie(solutionUri, authorityUrl)];
                        case 3:
                            _a.sent();
                            _a.label = 4;
                        case 4:
                            urlParams = {
                                client_id: open_id_connect_electron_configuration_1.default.clientId,
                                redirect_uri: open_id_connect_electron_configuration_1.default.redirectUri,
                                response_type: open_id_connect_electron_configuration_1.default.responseType,
                                scope: open_id_connect_electron_configuration_1.default.scope,
                                state: this.getRandomString(16),
                                nonce: this.getRandomString(16),
                                prompt: 'none',
                            };
                            urlToLoad = authorityUrl + "connect/authorize?" + querystring_1.default.stringify(urlParams);
                            authWindow = new this.electronRemote.BrowserWindow({ show: false });
                            authWindow.loadURL(urlToLoad);
                            authWindow.on('closed', function () {
                                throw new Error('window was closed by user');
                            });
                            authWindow.webContents.on('will-redirect', function (event, url) {
                                if (url.includes(open_id_connect_electron_configuration_1.default.redirectUri)) {
                                    event.preventDefault();
                                }
                                var redirectCallbackResolved = function (token) { return __awaiter(_this, void 0, void 0, function () {
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                refreshCallback(token);
                                                return [4, this.setCurrentIdentityServerCookieForSolution(solutionUri, authorityUrl)];
                                            case 1:
                                                _a.sent();
                                                return [4, this.removeCurrentIdentityServerCookie(authorityUrl)];
                                            case 2:
                                                _a.sent();
                                                this.silentRefresh(authorityUrl, solutionUri, token, refreshCallback);
                                                return [2];
                                        }
                                    });
                                }); };
                                var redirectCallbackRejected = function (error) {
                                    if (error.message !== 'User is no longer logged in.') {
                                        throw error;
                                    }
                                    _this.stopSilentRefreshing(solutionUri);
                                };
                                _this.handleRedirectCallback(url, authWindow, redirectCallbackResolved, redirectCallbackRejected);
                            });
                            return [2];
                    }
                });
            });
        };
        ElectronOidcAuthenticationService.prototype.handleRedirectCallback = function (url, authWindow, resolve, reject) {
            var _a;
            var urlParts = url_1.default.parse(url, true);
            var href = urlParts.href;
            if (href === null) {
                reject(new Error("Could not parse url: " + url));
                authWindow.removeAllListeners('closed');
                setImmediate(function () {
                    authWindow.close();
                });
            }
            else if (href.includes('/connect/authorize/callback')) {
                authWindow.loadURL(href);
            }
            else if (href.includes(open_id_connect_electron_configuration_1.default.redirectUri)) {
                var identityParameter = urlParts.hash;
                var parameterAsArray = identityParameter.split('&');
                if (parameterAsArray[0].includes('login_required')) {
                    reject(new Error('User is no longer logged in.'));
                    authWindow.removeAllListeners('closed');
                    setImmediate(function () {
                        authWindow.close();
                    });
                    return;
                }
                if (parameterAsArray[0].includes('error')) {
                    reject(new Error('User could not get logged in.'));
                    authWindow.removeAllListeners('closed');
                    setImmediate(function () {
                        authWindow.close();
                    });
                    return;
                }
                var idToken = parameterAsArray[0].split('=')[1];
                var accessToken = parameterAsArray[1].split('=')[1];
                var expiresIn = parseInt((_a = parameterAsArray.find(function (parameter) { return parameter.startsWith('expires_in='); })) === null || _a === void 0 ? void 0 : _a.split('=')[1]);
                var tokenObject = {
                    idToken: idToken,
                    accessToken: accessToken,
                    expiresIn: expiresIn,
                };
                resolve(tokenObject);
                authWindow.removeAllListeners('closed');
                setImmediate(function () {
                    authWindow.close();
                });
            }
        };
        ElectronOidcAuthenticationService.prototype.isAuthorityReachable = function (authorityUrl) {
            return __awaiter(this, void 0, void 0, function () {
                var configRequest, configResponse, error_2, identityServerWasOffline, identityServerWasAvailable;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            configRequest = new Request(authorityUrl + ".well-known/openid-configuration", {
                                method: 'GET',
                                mode: 'cors',
                                referrer: 'no-referrer',
                                headers: {
                                    'Access-Control-Allow-Origin': '*',
                                    'Content-Type': 'application/json',
                                },
                            });
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4, fetch(configRequest)];
                        case 2:
                            configResponse = _a.sent();
                            return [3, 4];
                        case 3:
                            error_2 = _a.sent();
                            identityServerWasOffline = error_2.message === 'Failed to fetch';
                            if (identityServerWasOffline) {
                                this.notificationService.showNotification(index_1.NotificationType.ERROR, 'IdentityServer is offline.');
                                return [2, false];
                            }
                            return [3, 4];
                        case 4:
                            identityServerWasAvailable = configResponse.status === IDENTITY_SERVER_AVAILABLE_SUCCESS_STATUS_CODE;
                            if (identityServerWasAvailable) {
                                return [2, true];
                            }
                            return [2, false];
                    }
                });
            });
        };
        ElectronOidcAuthenticationService.prototype.formAuthority = function (authorityUrl) {
            if (authorityUrl === undefined) {
                return undefined;
            }
            var authorityDoesNotEndWithSlash = !authorityUrl.endsWith('/');
            if (authorityDoesNotEndWithSlash) {
                authorityUrl = authorityUrl + "/";
            }
            return authorityUrl;
        };
        ElectronOidcAuthenticationService.prototype.getIdentityServerCookie = function (authorityUrl) {
            return __awaiter(this, void 0, void 0, function () {
                var domain, identityServerCookies;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            domain = this.convertUrltoDomain(authorityUrl);
                            return [4, this.electronRemote.session.defaultSession.cookies.get({
                                    name: identityServerCookieName,
                                    domain: domain,
                                })];
                        case 1:
                            identityServerCookies = _a.sent();
                            return [2, identityServerCookies[0]];
                    }
                });
            });
        };
        ElectronOidcAuthenticationService.prototype.getIdentityServerCookieForSolution = function (solutionUri) {
            return __awaiter(this, void 0, void 0, function () {
                var persistedCookie;
                return __generator(this, function (_a) {
                    persistedCookie = localStorage.getItem(this.getCookieNameForSolution(solutionUri));
                    return [2, persistedCookie ? JSON.parse(persistedCookie) : undefined];
                });
            });
        };
        ElectronOidcAuthenticationService.prototype.setIdentityServerCookie = function (solutionUri, authorityUrl) {
            return __awaiter(this, void 0, void 0, function () {
                var cookieToSet, cookiesSetDetails;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.getIdentityServerCookieForSolution(solutionUri)];
                        case 1:
                            cookieToSet = _a.sent();
                            cookiesSetDetails = Object.assign(cookieToSet, {
                                url: authorityUrl,
                                domain: this.convertUrltoDomain(authorityUrl),
                            });
                            cookiesSetDetails.name = identityServerCookieName;
                            this.electronRemote.session.defaultSession.cookies.set(cookiesSetDetails);
                            return [2];
                    }
                });
            });
        };
        ElectronOidcAuthenticationService.prototype.setCurrentIdentityServerCookieForSolution = function (solutionUri, authorityUrl) {
            return __awaiter(this, void 0, void 0, function () {
                var currentIdentityServerCookie;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.getIdentityServerCookie(authorityUrl)];
                        case 1:
                            currentIdentityServerCookie = _a.sent();
                            localStorage.setItem(this.getCookieNameForSolution(solutionUri), JSON.stringify(currentIdentityServerCookie));
                            return [2];
                    }
                });
            });
        };
        ElectronOidcAuthenticationService.prototype.removeCurrentIdentityServerCookie = function (authorityUrl) {
            return __awaiter(this, void 0, void 0, function () {
                var identityServerCookie;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.electronRemote.session.defaultSession.cookies.get({
                                name: identityServerCookieName,
                                domain: this.convertUrltoDomain(authorityUrl),
                            })];
                        case 1:
                            identityServerCookie = _a.sent();
                            if (!identityServerCookie) {
                                return [2, undefined];
                            }
                            return [2, this.electronRemote.session.defaultSession.cookies.remove(authorityUrl, identityServerCookie[0].name)];
                    }
                });
            });
        };
        ElectronOidcAuthenticationService.prototype.removeIdentityServerCookieOfSolution = function (solutionUri) {
            localStorage.removeItem(this.getCookieNameForSolution(solutionUri));
        };
        ElectronOidcAuthenticationService.prototype.identityServerCookieIsEmpty = function (authorityUrl) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.getIdentityServerCookie(authorityUrl)];
                        case 1: return [2, (_a.sent()) === undefined];
                    }
                });
            });
        };
        ElectronOidcAuthenticationService.prototype.solutionHasIdentityServerCookie = function (solutionUri) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, localStorage.getItem(this.getCookieNameForSolution(solutionUri)) !== null];
                });
            });
        };
        ElectronOidcAuthenticationService.prototype.waitUntilCookieIsEmpty = function (authorityUrl) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.identityServerCookieIsEmpty(authorityUrl)];
                        case 1:
                            if (!!(_a.sent())) return [3, 3];
                            return [4, this.wait(100)];
                        case 2:
                            _a.sent();
                            return [3, 0];
                        case 3: return [2];
                    }
                });
            });
        };
        ElectronOidcAuthenticationService.prototype.getCookieNameForSolution = function (solutionUri) {
            return "identity-server-cookie__" + solutionUri;
        };
        ElectronOidcAuthenticationService.prototype.wait = function (ms) {
            return new bluebird_1.default.Promise(function (resolve) {
                setTimeout(function () {
                    resolve();
                }, ms);
            });
        };
        ElectronOidcAuthenticationService.prototype.convertUrltoDomain = function (url) {
            var domainRegex = /^(?:.*:\/\/)?([^:/]*)/;
            return url.match(domainRegex)[1];
        };
        ElectronOidcAuthenticationService.prototype.getRandomString = function (length) {
            var charset = '0123456789ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvwxyz-._~';
            var randomString = '';
            for (var i = 0; i < length; i++) {
                randomString += charset.charAt(Math.floor(Math.random() * charset.length));
            }
            return randomString;
        };
        ElectronOidcAuthenticationService = __decorate([
            aurelia_framework_1.inject(aurelia_event_aggregator_1.EventAggregator, 'NotificationService', 'HttpFetchClient'),
            __metadata("design:paramtypes", [aurelia_event_aggregator_1.EventAggregator,
                notification_service_1.NotificationService,
                http_fetch_client_1.HttpFetchClient])
        ], ElectronOidcAuthenticationService);
        return ElectronOidcAuthenticationService;
    }());
    exports.ElectronOidcAuthenticationService = ElectronOidcAuthenticationService;
});


;
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define('services/authentication-service/index',["require", "exports", "./electron.oidc-authentication-service", "./web.oidc-authentication-service", "../is-running-in-electron-module/is-running-in-electron.module"], function (require, exports, electron_oidc_authentication_service_1, web_oidc_authentication_service_1, is_running_in_electron_module_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function configure(config) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (is_running_in_electron_module_1.isRunningInElectron()) {
                    config.container.registerSingleton('AuthenticationService', electron_oidc_authentication_service_1.ElectronOidcAuthenticationService);
                }
                else {
                    config.container.registerSingleton('AuthenticationService', web_oidc_authentication_service_1.WebOidcAuthenticationService);
                }
                return [2];
            });
        });
    }
    exports.configure = configure;
});


;
define('services/authentication-service/open-id/open-id-signin-response',["require", "exports", "./open-id-url-utility"], function (require, exports, open_id_url_utility_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var OidcScope = 'openid';
    var SigninResponse = (function () {
        function SigninResponse(url) {
            var values = open_id_url_utility_1.UrlUtility.parseUrlFragment(url, '#');
            this.error = values.error;
            this.error_description = values.error_description;
            this.error_uri = values.error_uri;
            this.state = values.state;
            this.id_token = values.id_token;
            this.session_state = values.session_state;
            this.access_token = values.access_token;
            this.token_type = values.token_type;
            this.scope = values.scope;
            this.profile = undefined;
            var expires_in = parseInt(values.expires_in);
            if (typeof expires_in === 'number' && expires_in > 0) {
                var nowInSeconds = Math.floor(Date.now() / 1000);
                this.expires_at = nowInSeconds + expires_in;
            }
        }
        Object.defineProperty(SigninResponse.prototype, "expires_in", {
            get: function () {
                if (this.expires_at === undefined) {
                    return undefined;
                }
                var nowInSeconds = Math.floor(Date.now() / 1000);
                return this.expires_at - nowInSeconds;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SigninResponse.prototype, "expired", {
            get: function () {
                var expires_in = this.expires_in;
                if (expires_in === undefined) {
                    return undefined;
                }
                return expires_in <= 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SigninResponse.prototype, "scopes", {
            get: function () {
                return (this.scope || '').split(' ');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SigninResponse.prototype, "isOpenIdConnect", {
            get: function () {
                return this.scopes.indexOf(OidcScope) >= 0 || Boolean(this.id_token);
            },
            enumerable: true,
            configurable: true
        });
        return SigninResponse;
    }());
    exports.SigninResponse = SigninResponse;
});


;
define('services/authentication-service/open-id/open-id-url-utility',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var UrlUtility = (function () {
        function UrlUtility() {
        }
        UrlUtility.addQueryParam = function (url, name, value) {
            if (url.indexOf('?') < 0) {
                url += '?';
            }
            if (url[url.length - 1] !== '?') {
                url += '&';
            }
            url += encodeURIComponent(name);
            url += '=';
            url += encodeURIComponent(value);
            return url;
        };
        UrlUtility.parseUrlFragment = function (url, delimiter) {
            if (delimiter === void 0) { delimiter = '#'; }
            if (typeof url !== 'string') {
                url = location.href;
            }
            var idx = url.lastIndexOf(delimiter);
            if (idx >= 0) {
                url = url.substr(idx + 1);
            }
            var params = {};
            var regex = /([^&=]+)=([^&]*)/g;
            var m;
            var counter = 0;
            while ((m = regex.exec(url))) {
                params[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);
                if (counter++ > 50) {
                    return {
                        error: 'Response exceeded expected number of parameters',
                    };
                }
            }
            return params;
        };
        return UrlUtility;
    }());
    exports.UrlUtility = UrlUtility;
});


;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define('services/authentication-service/web.oidc-authentication-service',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "aurelia-open-id-connect", "aurelia-router", "../../contracts/index", "../../open-id-connect-web-configuration", "../notification-service/notification.service"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, aurelia_open_id_connect_1, aurelia_router_1, index_1, open_id_connect_web_configuration_1, notification_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var UNAUTHORIZED_STATUS_CODE = 401;
    var IDENTITY_SERVER_AVAILABLE_SUCCESS_STATUS_CODE = 200;
    var WebOidcAuthenticationService = (function () {
        function WebOidcAuthenticationService(eventAggregator, notificationService, openIdConnect) {
            this.eventAggregator = eventAggregator;
            this.notificationService = notificationService;
            this.openIdConnect = openIdConnect;
        }
        WebOidcAuthenticationService.prototype.isLoggedIn = function (authorityUrl, identity) {
            return __awaiter(this, void 0, void 0, function () {
                var userIdentity, userIsAuthorized;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            authorityUrl = this.formAuthority(authorityUrl);
                            return [4, this.getUserIdentity(authorityUrl)];
                        case 1:
                            userIdentity = _a.sent();
                            userIsAuthorized = userIdentity !== null && userIdentity !== undefined;
                            return [2, userIsAuthorized];
                    }
                });
            });
        };
        WebOidcAuthenticationService.prototype.login = function (authorityUrl, solutionUri, refreshCallback) {
            return __awaiter(this, void 0, void 0, function () {
                var isAuthorityUnReachable, signinResult, iamIdentity, identity, loginResult;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            authorityUrl = this.formAuthority(authorityUrl);
                            return [4, this.isAuthorityReachable(authorityUrl)];
                        case 1:
                            isAuthorityUnReachable = !(_a.sent());
                            if (isAuthorityUnReachable) {
                                this.notificationService.showNotification(index_1.NotificationType.ERROR, 'Authority seems to be offline');
                                return [2, undefined];
                            }
                            return [4, this.setAuthority(authorityUrl)];
                        case 2:
                            _a.sent();
                            return [4, this.openIdConnect.userManager.signinPopup()];
                        case 3:
                            signinResult = _a.sent();
                            window.localStorage.setItem('openIdRoute', authorityUrl);
                            iamIdentity = {
                                token: signinResult.access_token,
                                userId: signinResult.id_token,
                            };
                            return [4, this.getUserIdentity(authorityUrl, iamIdentity)];
                        case 4:
                            identity = _a.sent();
                            loginResult = {
                                identity: identity,
                                accessToken: iamIdentity.token,
                                idToken: iamIdentity.userId,
                            };
                            this.openIdConnect.observeUser(function (user) { return __awaiter(_this, void 0, void 0, function () {
                                var refreshedIamIdentity, refreshedIdentity, refreshResult;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            refreshedIamIdentity = {
                                                token: user.access_token,
                                                userId: signinResult.id_token,
                                            };
                                            return [4, this.getUserIdentity(authorityUrl, refreshedIamIdentity)];
                                        case 1:
                                            refreshedIdentity = _a.sent();
                                            refreshResult = {
                                                identity: refreshedIdentity,
                                                accessToken: refreshedIamIdentity.token,
                                                idToken: refreshedIamIdentity.userId,
                                            };
                                            refreshCallback(refreshResult);
                                            return [2];
                                    }
                                });
                            }); });
                            return [2, loginResult];
                    }
                });
            });
        };
        WebOidcAuthenticationService.prototype.logout = function (authorityUrl, solutionUri, identity) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            authorityUrl = this.formAuthority(authorityUrl);
                            if (!this.isLoggedIn) {
                                return [2];
                            }
                            return [4, this.setAuthority(authorityUrl)];
                        case 1:
                            _a.sent();
                            return [4, this.openIdConnect.userManager.signoutPopup()];
                        case 2:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        WebOidcAuthenticationService.prototype.getUserIdentity = function (authorityUrl, identity) {
            return __awaiter(this, void 0, void 0, function () {
                var accessToken, _a, accessTokenIsDummyToken, request, response;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            authorityUrl = this.formAuthority(authorityUrl);
                            if (!(identity === undefined)) return [3, 2];
                            return [4, this.getAccessToken(authorityUrl)];
                        case 1:
                            _a = _b.sent();
                            return [3, 3];
                        case 2:
                            _a = identity.token;
                            _b.label = 3;
                        case 3:
                            accessToken = _a;
                            accessTokenIsDummyToken = accessToken === this.getDummyAccessToken();
                            if (accessTokenIsDummyToken) {
                                return [2, null];
                            }
                            request = new Request(authorityUrl + "connect/userinfo", {
                                method: 'GET',
                                mode: 'cors',
                                referrer: 'no-referrer',
                                headers: {
                                    'Access-Control-Allow-Origin': '*',
                                    'Content-Type': 'application/json',
                                    Authorization: "Bearer " + accessToken,
                                },
                            });
                            return [4, fetch(request)];
                        case 4:
                            response = _b.sent();
                            if (response.status === UNAUTHORIZED_STATUS_CODE) {
                                return [2, null];
                            }
                            return [2, response.json()];
                    }
                });
            });
        };
        WebOidcAuthenticationService.prototype.isAuthorityReachable = function (authorityUrl) {
            return __awaiter(this, void 0, void 0, function () {
                var request, response, error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            request = new Request(authorityUrl + ".well-known/openid-configuration", {
                                method: 'GET',
                                mode: 'cors',
                                referrer: 'no-referrer',
                                headers: {
                                    'Access-Control-Allow-Origin': '*',
                                    'Content-Type': 'application/json',
                                },
                            });
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4, fetch(request)];
                        case 2:
                            response = _a.sent();
                            return [3, 4];
                        case 3:
                            error_1 = _a.sent();
                            if (error_1.message === 'Failed to fetch') {
                                return [2, false];
                            }
                            return [3, 4];
                        case 4:
                            if (response.status === IDENTITY_SERVER_AVAILABLE_SUCCESS_STATUS_CODE) {
                                return [2, true];
                            }
                            return [2, false];
                    }
                });
            });
        };
        WebOidcAuthenticationService.prototype.setAuthority = function (authorityUrl) {
            open_id_connect_web_configuration_1.oidcConfig.userManagerSettings.authority = authorityUrl;
            this.openIdConnect.configuration.userManagerSettings.authority = authorityUrl;
            this.openIdConnect.userManager._settings._authority = authorityUrl;
        };
        WebOidcAuthenticationService.prototype.getDummyAccessToken = function () {
            var dummyAccessTokenString = 'dummy_token';
            var base64EncodedString = btoa(dummyAccessTokenString);
            return base64EncodedString;
        };
        WebOidcAuthenticationService.prototype.getAccessToken = function (authorityUrl) {
            return __awaiter(this, void 0, void 0, function () {
                var user, userIsNotLoggedIn;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.setAuthority(authorityUrl);
                            return [4, this.openIdConnect.getUser()];
                        case 1:
                            user = _a.sent();
                            userIsNotLoggedIn = user === undefined || user === null;
                            return [2, userIsNotLoggedIn ? this.getDummyAccessToken() : user.access_token];
                    }
                });
            });
        };
        WebOidcAuthenticationService.prototype.formAuthority = function (authorityUrl) {
            var authorityDoesNotEndWithSlash = !authorityUrl.endsWith('/');
            if (authorityDoesNotEndWithSlash) {
                authorityUrl = authorityUrl + "/";
            }
            return authorityUrl;
        };
        WebOidcAuthenticationService = __decorate([
            aurelia_framework_1.inject(aurelia_event_aggregator_1.EventAggregator, 'NotificationService', aurelia_open_id_connect_1.OpenIdConnect, aurelia_router_1.Router),
            __metadata("design:paramtypes", [aurelia_event_aggregator_1.EventAggregator,
                notification_service_1.NotificationService,
                aurelia_open_id_connect_1.OpenIdConnect])
        ], WebOidcAuthenticationService);
        return WebOidcAuthenticationService;
    }());
    exports.WebOidcAuthenticationService = WebOidcAuthenticationService;
});


;
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('services/date-service/date.service',["require", "exports", "moment"], function (require, exports, moment_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    moment_1 = __importDefault(moment_1);
    function getBeautifiedDate(date) {
        return moment_1.default(date).format('YYYY-MM-DD HH:mm:ss');
    }
    exports.getBeautifiedDate = getBeautifiedDate;
});


;
define('services/default-ports-module/default-ports.module',["require", "exports", "../../contracts/index"], function (require, exports, index_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function getPortListByVersion(studioVersion) {
        var portList = [];
        var firstPort = getFirstPortByVersion(studioVersion);
        for (var index = 0; index < 10; index++) {
            portList.push(firstPort + index * 10);
        }
        return portList;
    }
    exports.getPortListByVersion = getPortListByVersion;
    function getFirstPortByVersion(studioVersion) {
        switch (studioVersion) {
            case index_1.StudioVersion.Dev:
                return 56300;
            case index_1.StudioVersion.Alpha:
                return 56200;
            case index_1.StudioVersion.Beta:
                return 56100;
            case index_1.StudioVersion.Stable:
                return 56000;
            default:
                throw new Error('Could not get default port for internal process engine');
        }
    }
});


;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('services/deploy-diagram-service/deploy-diagram.service',["require", "exports", "aurelia-framework", "aurelia-event-aggregator", "aurelia-router", "@process-engine/bpmn-js-custom-bundle", "../../environment", "../solution-service/solution.service", "../../contracts/index", "../notification-service/notification.service"], function (require, exports, aurelia_framework_1, aurelia_event_aggregator_1, aurelia_router_1, bundle, environment_1, solution_service_1, index_1, notification_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    bundle = __importStar(bundle);
    environment_1 = __importDefault(environment_1);
    var DeployDiagramService = (function () {
        function DeployDiagramService(eventAggregator, solutionService, router, notificationService) {
            this.eventAggregator = eventAggregator;
            this.solutionService = solutionService;
            this.router = router;
            this.notificationService = notificationService;
            this.modeler = new bundle.modeler({
                moddleExtensions: {
                    camunda: bundle.camundaModdleDescriptor,
                },
            });
            this.moddle = this.modeler.get('moddle');
        }
        DeployDiagramService.prototype.deployDiagram = function (solution, diagram, xml) {
            return __awaiter(this, void 0, void 0, function () {
                var diagramHasChanges, remoteSolutionToDeployTo;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            diagramHasChanges = xml !== undefined;
                            if (diagramHasChanges) {
                                diagram.xml = xml;
                            }
                            return [4, this.getRemoteSolutionToDeployTo()];
                        case 1:
                            remoteSolutionToDeployTo = _a.sent();
                            if (remoteSolutionToDeployTo === undefined) {
                                return [2, undefined];
                            }
                            return [2, this.uploadProcess(remoteSolutionToDeployTo, diagram)];
                    }
                });
            });
        };
        DeployDiagramService.prototype.uploadProcess = function (solutionToDeployTo, diagram) {
            return __awaiter(this, void 0, void 0, function () {
                var processModelId, diagramIsAlreadyDeployed, shouldOverwriteDiagram, bpmnFileSuffix, diagramUriWithoutSuffix, copyOfDiagram, deployedDiagram, error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.getProcessModelIdForXml(diagram.xml)];
                        case 1:
                            processModelId = _a.sent();
                            return [4, this.diagramIsAlreadyDeployed(solutionToDeployTo, processModelId)];
                        case 2:
                            diagramIsAlreadyDeployed = _a.sent();
                            if (!diagramIsAlreadyDeployed) return [3, 4];
                            return [4, this.shouldOverwriteDiagram()];
                        case 3:
                            shouldOverwriteDiagram = _a.sent();
                            if (!shouldOverwriteDiagram) {
                                return [2, undefined];
                            }
                            _a.label = 4;
                        case 4:
                            _a.trys.push([4, 7, , 8]);
                            diagram.id = processModelId;
                            bpmnFileSuffix = '.bpmn';
                            diagramUriWithoutSuffix = diagram.uri.endsWith(bpmnFileSuffix)
                                ? diagram.uri.slice(0, bpmnFileSuffix.length)
                                : diagram.uri;
                            copyOfDiagram = {
                                id: diagram.id,
                                name: diagram.name,
                                uri: diagramUriWithoutSuffix,
                                xml: diagram.xml,
                            };
                            return [4, solutionToDeployTo.service.saveDiagram(copyOfDiagram, solutionToDeployTo.uri)];
                        case 5:
                            _a.sent();
                            return [4, solutionToDeployTo.service.loadDiagram(processModelId)];
                        case 6:
                            deployedDiagram = _a.sent();
                            this.notificationService.showNotification(index_1.NotificationType.SUCCESS, 'Diagram was successfully uploaded to the connected ProcessEngine.');
                            this.eventAggregator.publish(environment_1.default.events.diagramDetail.onDiagramDeployed, processModelId);
                            return [2, {
                                    diagram: deployedDiagram,
                                    solution: solutionToDeployTo,
                                }];
                        case 7:
                            error_1 = _a.sent();
                            this.notificationService.showNotification(index_1.NotificationType.ERROR, "Unable to update diagram: " + error_1);
                            return [2, undefined];
                        case 8: return [2];
                    }
                });
            });
        };
        DeployDiagramService.prototype.getProcessModelIdForXml = function (xml) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2, new Promise(function (resolve, reject) {
                            _this.moddle.fromXML(xml, function (error, definitions) {
                                var errorOccured = error !== undefined;
                                if (errorOccured) {
                                    reject(error);
                                }
                                var rootElements = definitions.rootElements;
                                var processModel = rootElements.find(function (definition) {
                                    return definition.$type === 'bpmn:Process';
                                });
                                var processModelId = processModel.id;
                                resolve(processModelId);
                            });
                        })];
                });
            });
        };
        DeployDiagramService.prototype.diagramIsAlreadyDeployed = function (solution, processModelId) {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _b.trys.push([0, 2, , 3]);
                            return [4, solution.service.loadDiagram(processModelId)];
                        case 1:
                            _b.sent();
                            return [2, true];
                        case 2:
                            _a = _b.sent();
                            return [2, false];
                        case 3: return [2];
                    }
                });
            });
        };
        Object.defineProperty(DeployDiagramService.prototype, "multipleRemoteSolutionsExist", {
            get: function () {
                var remoteSolutions = this.solutionService.getRemoteSolutionEntries();
                return remoteSolutions.length > 1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DeployDiagramService.prototype, "firstRemoteSolution", {
            get: function () {
                var remoteSolutions = this.solutionService.getRemoteSolutionEntries();
                return remoteSolutions[0];
            },
            enumerable: true,
            configurable: true
        });
        DeployDiagramService.prototype.shouldOverwriteDiagram = function () {
            var _this = this;
            return new Promise(function (resolve) {
                _this.eventAggregator.publish(environment_1.default.events.deployModals.showOverwriteDiagramModal, function (shouldOverwrite) {
                    resolve(shouldOverwrite);
                });
            });
        };
        DeployDiagramService.prototype.getRemoteSolutionToDeployTo = function () {
            var _this = this;
            return new Promise(function (resolve) {
                if (_this.multipleRemoteSolutionsExist) {
                    _this.eventAggregator.publish(environment_1.default.events.deployModals.showRemoteSolutionSelectionModal, function (selectedRemoteSolution) {
                        resolve(selectedRemoteSolution);
                    });
                }
                else {
                    resolve(_this.firstRemoteSolution);
                }
            });
        };
        DeployDiagramService = __decorate([
            aurelia_framework_1.inject(aurelia_event_aggregator_1.EventAggregator, 'SolutionService', aurelia_router_1.Router, 'NotificationService'),
            __metadata("design:paramtypes", [aurelia_event_aggregator_1.EventAggregator,
                solution_service_1.SolutionService,
                aurelia_router_1.Router,
                notification_service_1.NotificationService])
        ], DeployDiagramService);
        return DeployDiagramService;
    }());
    exports.DeployDiagramService = DeployDiagramService;
});


;
define('services/deploy-diagram-service/index',["require", "exports", "./deploy-diagram.service"], function (require, exports, deploy_diagram_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function configure(config) {
        config.container.registerSingleton('DeployDiagramService', deploy_diagram_service_1.DeployDiagramService);
    }
    exports.configure = configure;
});


;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
define('services/diagram-creation-service/diagram-creation.service',["require", "exports", "aurelia-framework", "@process-engine/bpmn-js-custom-bundle", "../../contracts/index", "../notification-service/notification.service"], function (require, exports, aurelia_framework_1, bundle, index_1, notification_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    bundle = __importStar(bundle);
    var DiagramCreationService = (function () {
        function DiagramCreationService(notificationService) {
            this.notificationService = notificationService;
        }
        DiagramCreationService.prototype.createNewDiagram = function (solutionBaseUri, withName, xml) {
            return __awaiter(this, void 0, void 0, function () {
                var processName, diagramUri, xmlGiven, processXML, _a, diagram;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            processName = withName.trim();
                            diagramUri = solutionBaseUri + "/" + processName + ".bpmn";
                            xmlGiven = xml !== undefined;
                            if (!xmlGiven) return [3, 2];
                            return [4, this.renameDiagram(xml, withName)];
                        case 1:
                            _a = _b.sent();
                            return [3, 3];
                        case 2:
                            _a = this.getInitialProcessXML(processName);
                            _b.label = 3;
                        case 3:
                            processXML = _a;
                            diagram = {
                                id: processName,
                                name: processName,
                                uri: diagramUri,
                                xml: processXML,
                            };
                            return [2, diagram];
                    }
                });
            });
        };
        DiagramCreationService.prototype.renameDiagram = function (xml, name) {
            return __awaiter(this, void 0, void 0, function () {
                var modeler, promise;
                var _this = this;
                return __generator(this, function (_a) {
                    modeler = new bundle.modeler({
                        moddleExtensions: {
                            camunda: bundle.camundaModdleDescriptor,
                        },
                    });
                    modeler.importXML(xml, function (error) {
                        var errorOccured = error !== undefined;
                        if (errorOccured) {
                            _this.notificationService.showNotification(index_1.NotificationType.ERROR, "Failed to copy diagram. " + error.message);
                        }
                    });
                    promise = new Promise(function (resolve, reject) {
                        modeler.on('import.done', function () {
                            var rootElements = modeler._definitions.rootElements;
                            var process = rootElements.find(function (element) {
                                return element.$type === 'bpmn:Process';
                            });
                            process.id = name;
                            process.name = name;
                            var collaboration = rootElements.find(function (element) {
                                return element.$type === 'bpmn:Collaboration';
                            });
                            var participant = collaboration.participants[0];
                            participant.name = name;
                            participant.processRef = process;
                            modeler.saveXML({}, function (error, result) {
                                var errorOccured = error !== undefined;
                                if (errorOccured) {
                                    _this.notificationService.showNotification(index_1.NotificationType.ERROR, "Failed to copy the diagram. Cause: " + error.message);
                                    reject(error);
                                    return;
                                }
                                resolve(result);
                            });
                        });
                    });
                    return [2, promise];
                });
            });
        };
        DiagramCreationService.prototype.getInitialProcessXML = function (processModelId) {
            return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <bpmn:definitions\n      xmlns:bpmn=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"\n      xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\"\n      xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n      xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\"\n      id=\"Definition_1\"\n      targetNamespace=\"http://bpmn.io/schema/bpmn\"\n      exporter=\"BPMN Studio\"\n      exporterVersion=\"1\">\n      <bpmn:collaboration id=\"Collaboration_1cidyxu\" name=\"\">\n        <bpmn:participant id=\"Participant_0px403d\" name=\"" + processModelId + "\" processRef=\"" + processModelId + "\" />\n      </bpmn:collaboration>\n      <bpmn:process id=\"" + processModelId + "\" name=\"" + processModelId + "\" isExecutable=\"true\">\n        <bpmn:laneSet>\n          <bpmn:lane id=\"Lane_1xzf0d3\" name=\"Lane\">\n            <bpmn:flowNodeRef>StartEvent_1mox3jl</bpmn:flowNodeRef>\n            <bpmn:flowNodeRef>EndEvent_0eie6q6</bpmn:flowNodeRef>\n          </bpmn:lane>\n        </bpmn:laneSet>\n        <bpmn:startEvent id=\"StartEvent_1mox3jl\" name=\"Start Event\">\n          <bpmn:outgoing>SequenceFlow_1jdocur</bpmn:outgoing>\n        </bpmn:startEvent>\n        <bpmn:sequenceFlow id=\"SequenceFlow_1jdocur\" sourceRef=\"StartEvent_1mox3jl\" targetRef=\"EndEvent_0eie6q6\" />\n        <bpmn:endEvent id=\"EndEvent_0eie6q6\" name=\"End Event\">\n          <bpmn:incoming>SequenceFlow_1jdocur</bpmn:incoming>\n        </bpmn:endEvent>\n      </bpmn:process>\n      <bpmndi:BPMNDiagram id=\"BPMNDiagram_1\">\n        <bpmndi:BPMNPlane id=\"BPMNPlane_1\" bpmnElement=\"Collaboration_1cidyxu\">\n          <bpmndi:BPMNShape id=\"Participant_0px403d_di\" bpmnElement=\"Participant_0px403d\">\n            <dc:Bounds x=\"5\" y=\"4\" width=\"581\" height=\"170\" />\n          </bpmndi:BPMNShape>\n          <bpmndi:BPMNShape id=\"Lane_1xzf0d3_di\" bpmnElement=\"Lane_1xzf0d3\">\n            <dc:Bounds x=\"35\" y=\"4\" width=\"551\" height=\"170\" />\n          </bpmndi:BPMNShape>\n          <bpmndi:BPMNShape id=\"StartEvent_1mox3jl_di\" bpmnElement=\"StartEvent_1mox3jl\">\n            <dc:Bounds x=\"83\" y=\"69\" width=\"36\" height=\"36\" />\n          </bpmndi:BPMNShape>\n          <bpmndi:BPMNShape id=\"EndEvent_0eie6q6_di\" bpmnElement=\"EndEvent_0eie6q6\">\n            <dc:Bounds x=\"503\" y=\"69\" width=\"36\" height=\"36\" />\n          </bpmndi:BPMNShape>\n          <bpmndi:BPMNEdge id=\"SequenceFlow_1jdocur_di\" bpmnElement=\"SequenceFlow_1jdocur\">\n            <di:waypoint x=\"119\" y=\"87\" />\n            <di:waypoint x=\"503\" y=\"87\" />\n          </bpmndi:BPMNEdge>\n        </bpmndi:BPMNPlane>\n      </bpmndi:BPMNDiagram>\n    </bpmn:definitions>";
        };
        DiagramCreationService = __decorate([
            aurelia_framework_1.inject('NotificationService'),
            __metadata("design:paramtypes", [notification_service_1.NotificationService])
        ], DiagramCreationService);
        return DiagramCreationService;
    }());
    exports.DiagramCreationService = DiagramCreationService;
});


;
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define('services/diagram-creation-service/index',["require", "exports", "./diagram-creation.service"], function (require, exports, diagram_creation_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function configure(config) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                config.container.registerSingleton('DiagramCreationService', diagram_creation_service_1.DiagramCreationService);
                return [2];
            });
        });
    }
    exports.configure = configure;
});


;
define('services/diagram-validation-service/diagram-validation.service',["require", "exports", "./diagram-validator"], function (require, exports, diagram_validator_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DiagramValidationService = (function () {
        function DiagramValidationService() {
            this.rules = {
                isXML: {
                    rules: [this.hasXMLFileSignature],
                    errorMessage: 'Diagram is not a valid XML file.',
                },
                isBPMN: {
                    rules: [this.containsBPMN],
                    errorMessage: 'Diagram is not a valid BPMN file.',
                },
            };
        }
        DiagramValidationService.prototype.validate = function (diagramXML) {
            return new diagram_validator_1.DiagramValidator(this.rules, diagramXML);
        };
        DiagramValidationService.prototype.hasXMLFileSignature = function (content) {
            var xmlSignature = '<?xml ';
            var startsWithSignature = content.startsWith(xmlSignature);
            return Promise.resolve(startsWithSignature);
        };
        DiagramValidationService.prototype.containsBPMN = function (content) {
            var bpmn = 'bpmn';
            var containsBPMN = content.indexOf(bpmn) !== -1;
            return Promise.resolve(containsBPMN);
        };
        return DiagramValidationService;
    }());
    exports.DiagramValidationService = DiagramValidationService;
});


;
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define('services/diagram-validation-service/diagram-validator',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DiagramValidator = (function () {
        function DiagramValidator(rules, diagramXML) {
            this.validations = [];
            this.rules = rules;
            this.diagramXML = diagramXML;
        }
        DiagramValidator.prototype.isXML = function () {
            this.processRuleSet(this.rules.isXML);
            return this;
        };
        DiagramValidator.prototype.isBPMN = function () {
            this.processRuleSet(this.rules.isBPMN);
            return this;
        };
        DiagramValidator.prototype.throwIfError = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _i, _a, validation;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _i = 0, _a = this.validations;
                            _b.label = 1;
                        case 1:
                            if (!(_i < _a.length)) return [3, 4];
                            validation = _a[_i];
                            return [4, validation];
                        case 2:
                            _b.sent();
                            _b.label = 3;
                        case 3:
                            _i++;
                            return [3, 1];
                        case 4: return [2];
                    }
                });
            });
        };
        DiagramValidator.prototype.processRuleSet = function (ruleSet) {
            var ruleSetPromise = this.promiseForRuleSet(ruleSet);
            this.validations.push(ruleSetPromise);
        };
        DiagramValidator.prototype.promiseForRuleSet = function (ruleSet) {
            var _this = this;
            var validationsResultPromise = ruleSet.rules.map(function (validationRule) {
                return validationRule(_this.diagramXML);
            });
            var unifiedPromise = Promise.all(validationsResultPromise);
            var ruleSetPromise = unifiedPromise
                .then(function (validationResult) {
                var someValidationsFailed = validationResult.indexOf(false) !== -1;
                if (someValidationsFailed) {
                    throw new Error(ruleSet.errorMessage);
                }
            })
                .catch(function (error) {
                throw new Error("Error during validation: " + error.message);
            });
            return ruleSetPromise;
        };
        return DiagramValidator;
    }());
    exports.DiagramValidator = DiagramValidator;
});


;
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define('services/diagram-validation-service/index',["require", "exports", "./diagram-validation.service"], function (require, exports, diagram_validation_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function configure(config) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                config.container.registerSingleton('DiagramValidationService', diagram_validation_service_1.DiagramValidationService);
                return [2];
            });
        });
    }
    exports.configure = configure;
});


;
define('services/download-service/download.service',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function download(data, strFileName, strMimeType) {
        var _this = this;
        var defaultMime = 'application/octet-stream';
        var anchor = document.createElement('a');
        var mimeType = strMimeType || defaultMime;
        var payload = data;
        var url = !strFileName && !strMimeType && payload;
        var fileName = strFileName || 'download';
        var reader;
        if (String(this) === 'true') {
            payload = [payload, mimeType];
            mimeType = payload[0];
            payload = payload[1];
        }
        if (url && url.length < 2048) {
            fileName = url
                .split('/')
                .pop()
                .split('?')[0];
            anchor.href = url;
            if (anchor.href.indexOf(url) !== -1) {
                var ajax_1 = new XMLHttpRequest();
                ajax_1.open('GET', url, true);
                ajax_1.responseType = 'blob';
                ajax_1.onload = function (e) {
                    download(e.target.response, fileName, defaultMime);
                };
                setTimeout(function () {
                    ajax_1.send();
                }, 0);
                return ajax_1;
            }
        }
        if (/^data:([\w+-]+\/[\w+.-]+)?[,;]/.test(payload)) {
            if (payload.length > 1024 * 1024 * 1.999) {
                payload = dataUrlToBlob(payload);
                mimeType = payload.type || defaultMime;
            }
            else {
                return navigator.msSaveBlob
                    ? navigator.msSaveBlob(dataUrlToBlob(payload), fileName)
                    : saver(payload, false);
            }
        }
        else if (/([\x80-\xff])/.test(payload)) {
            payload = new Blob([payload], { type: mimeType });
        }
        var blob = payload instanceof Blob ? payload : new Blob([payload], { type: mimeType });
        function dataUrlToBlob(strUrl) {
            var parts = strUrl.split(/[:;,]/);
            var indexDecoder = strUrl.indexOf('charset') > 0 ? 3 : 2;
            var decoder = parts[indexDecoder] == 'base64' ? atob : decodeURIComponent;
            var binData = decoder(parts.pop());
            var type = parts[1];
            return new Blob([binData], { type: type });
        }
        function saver(saveUrl, winMode) {
            if ('download' in anchor) {
                var anchorClickHandler_1 = function (event) {
                    event.stopPropagation();
                    anchor.removeEventListener('click', anchorClickHandler_1);
                };
                anchor.href = saveUrl;
                anchor.setAttribute('download', fileName);
                anchor.className = 'download-js-link';
                anchor.innerHTML = 'downloading...';
                anchor.style.display = 'none';
                anchor.addEventListener('click', anchorClickHandler_1);
                document.body.appendChild(anchor);
                setTimeout(function () {
                    anchor.click();
                    document.body.removeChild(anchor);
                    if (winMode) {
                        setTimeout(function () {
                            URL.revokeObjectURL(anchor.href);
                        }, 250);
                    }
                }, 66);
                return true;
            }
            if (/(Version)\/(\d+)\.(\d+)(?:\.(\d+))?.*Safari\//.test(navigator.userAgent)) {
                if (/^data:/.test(url)) {
                    saveUrl = "data:" + url.replace(/^data:([\w/\-+]+)/, defaultMime);
                }
                if (!window.open(url)) {
                    if (confirm('Displaying New Document\n\nUse Save As... to download, then click back to return to this page.')) {
                        location.href = saveUrl;
                    }
                }
                return true;
            }
            var downloadIframe = document.createElement('iframe');
            document.body.appendChild(downloadIframe);
            if (!winMode && /^data:/.test(url)) {
                url = "data:" + url.replace(/^data:([\w/\-+]+)/, defaultMime);
            }
            downloadIframe.src = url;
            setTimeout(function () {
                document.body.removeChild(downloadIframe);
            }, 333);
            return false;
        }
        if (navigator.msSaveBlob) {
            return navigator.msSaveBlob(blob, fileName);
        }
        if (URL) {
            saver(URL.createObjectURL(blob), true);
        }
        else {
            reader = new FileReader();
            reader.onload = function () {
                saver(_this.result, false);
            };
            reader.readAsDataURL(blob);
        }
        return true;
    }
    exports.download = download;
});


;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define('services/dynamic-ui-service/dynamic-ui.service',["require", "exports", "aurelia-framework"], function (require, exports, aurelia_framework_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DynamicUiService = (function () {
        function DynamicUiService(managmentApiClient) {
            this.dashboardService = managmentApiClient;
        }
        DynamicUiService.prototype.finishUserTask = function (identity, processInstanceId, correlationId, userTaskInstanceId, userTaskResult) {
            return this.dashboardService.finishUserTask(identity, processInstanceId, correlationId, userTaskInstanceId, userTaskResult);
        };
        DynamicUiService.prototype.getUserTask = function (identity, processInstanceId, userTaskId) {
            return __awaiter(this, void 0, void 0, function () {
                var userTaskList;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.dashboardService.getUserTasksForProcessInstance(identity, processInstanceId)];
                        case 1:
                            userTaskList = _a.sent();
                            return [2, userTaskList.userTasks.find(function (userTask) {
                                    return userTask.id === userTaskId;
                                })];
                    }
                });
            });
        };
        DynamicUiService.prototype.finishManualTask = function (identity, processInstanceId, correlationId, manualTaskInstanceId) {
            return this.dashboardService.finishManualTask(identity, processInstanceId, correlationId, manualTaskInstanceId);
        };
        DynamicUiService.prototype.getManualTask = function (identity, processInstanceId, manualTaskId) {
            return __awaiter(this, void 0, void 0, function () {
                var manualTaskList;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.dashboardService.getManualTasksForProcessInstance(identity, processInstanceId)];
                        case 1:
                            manualTaskList = _a.sent();
                            return [2, manualTaskList.manualTasks.find(function (manualTask) {
                                    return manualTask.id === manualTaskId;
                                })];
                    }
                });
            });
        };
        DynamicUiService = __decorate([
            aurelia_framework_1.inject('DashboardService'),
            __metadata("design:paramtypes", [Object])
        ], DynamicUiService);
        return DynamicUiService;
    }());
    exports.DynamicUiService = DynamicUiService;
});


;
define('services/dynamic-ui-service/index',["require", "exports", "./dynamic-ui.service"], function (require, exports, dynamic_ui_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function configure(config) {
        config.container.registerSingleton('DynamicUiService', dynamic_ui_service_1.DynamicUiService);
    }
    exports.configure = configure;
});


;
define('services/elementname-service/elementname.service',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ElementNameService = (function () {
        function ElementNameService() {
        }
        ElementNameService.prototype.getHumanReadableType = function (elementType) {
            var elementTypeWithoutBPMN = elementType.replace('bpmn:', '');
            var humanReadableElementType = elementTypeWithoutBPMN.replace(/([A-Z])/g, ' $1').trim();
            return humanReadableElementType;
        };
        ElementNameService.prototype.getHumanReadableName = function (elementName) {
            var elementNameIsEmpty = elementName === undefined || elementName === '';
            if (elementNameIsEmpty) {
                return '';
            }
            return "\"" + elementName + "\"";
        };
        return ElementNameService;
    }());
    exports.ElementNameService = ElementNameService;
});


;
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
define('services/expose-functionality-module/expose-functionality.module',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function exposeFunctionForTesting(functionName, functionCallback) {
        var dangerouslyInvokeObjectIsUndefined = window.__dangerouslyInvoke === undefined;
        if (dangerouslyInvokeObjectIsUndefined) {
            window.__dangerouslyInvoke = {};
        }
        window.__dangerouslyInvoke[functionName] = functionCallback;
    }
    exports.exposeFunctionForTesting = exposeFunctionForTesting;
    function callExposedFunction(webdriverClient, functionName) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var result;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, webdriverClient.executeAsync.apply(webdriverClient, __spreadArrays([function (exposedFunctionName) {
                                var params = [];
                                for (var _i = 1; _i < arguments.length; _i++) {
                                    params[_i - 1] = arguments[_i];
                                }
                                return __awaiter(_this, void 0, void 0, function () {
                                    var exposedFunctionResult, doneFunctionIndex, done;
                                    var _a;
                                    return __generator(this, function (_b) {
                                        switch (_b.label) {
                                            case 0: return [4, (_a = window.__dangerouslyInvoke)[exposedFunctionName].apply(_a, params)];
                                            case 1:
                                                exposedFunctionResult = _b.sent();
                                                doneFunctionIndex = params.length - 1;
                                                done = params[doneFunctionIndex];
                                                done(exposedFunctionResult);
                                                return [2];
                                        }
                                    });
                                });
                            },
                            functionName], args))];
                    case 1:
                        result = _a.sent();
                        return [2, result];
                }
            });
        });
    }
    exports.callExposedFunction = callExposedFunction;
});


;
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
define('services/help-modal-service/help-modal-service',["require", "exports", "marked", "highlight.js", "./help-text-service"], function (require, exports, marked_1, hljs, help_text_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    marked_1 = __importDefault(marked_1);
    hljs = __importStar(hljs);
    var HelpModalService = (function () {
        function HelpModalService() {
            this.showModal = false;
            this.helpTextService = new help_text_service_1.HelpTextService();
            marked_1.default.setOptions({
                renderer: new marked_1.default.Renderer(),
                highlight: function (code, language) {
                    var validLanguage = hljs.getLanguage(language) ? language : 'plaintext';
                    return hljs.highlight(validLanguage, code).value;
                },
            });
        }
        HelpModalService.prototype.showHelpModal = function (helpTextId) {
            this.showModal = !this.showModal;
            var node = document.createElement('div');
            var removeModalFn = function () {
                document.body.removeChild(node);
            };
            var helpText = this.helpTextService.getHelpTextById(helpTextId);
            node.innerHTML = "\n<div class=\"modal show show-modal\" tabindex=\"-1\" role=\"dialog\">\n  <div class=\"modal-dialog modal-style\" style=\"display: flex; top: 10%; max-height: 80%;\" role=\"document\">\n    <div class=\"modal-content\" style=\"height: unset;\">\n      <div class=\"modal-header\">\n        <h3>" + helpText.title + "</h3>\n        <button id=\"help-modal-close-button\" type=\"button\" class=\"close\">&times;</button>\n      </div>\n      <div class=\"modal-body\" style=\"overflow-y: scroll;\">" + marked_1.default(helpText.message) + "</div>\n    </div>\n  </div>\n</div>\n<div class=\"modal-backdrop fade in\"></div>";
            document.body.appendChild(node);
            document.getElementById('help-modal-close-button').onclick = removeModalFn;
        };
        return HelpModalService;
    }());
    exports.HelpModalService = HelpModalService;
});


;
define('services/help-modal-service/help-text-service',["require", "exports", "./help-texts/usertask-usage", "./help-texts/external-task-token-usage", "./help-texts/script-task-token-usage", "../../contracts/index"], function (require, exports, usertask_usage_1, external_task_token_usage_1, script_task_token_usage_1, index_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var HelpTextService = (function () {
        function HelpTextService() {
        }
        HelpTextService.prototype.getHelpTextById = function (helpTextId) {
            switch (helpTextId) {
                case index_1.HelpTextId.ScriptTaskTokenUsage:
                    return script_task_token_usage_1.ScriptTaskTokenUsage;
                case index_1.HelpTextId.ExternalTaskTokenUsage:
                    return external_task_token_usage_1.ExternalTaskTokenUsage;
                case index_1.HelpTextId.UserTaskUsage:
                    return usertask_usage_1.UserTaskUsage;
                default:
                    throw new Error("Help message with id \"" + helpTextId + "\" is unknown.");
            }
        };
        return HelpTextService;
    }());
    exports.HelpTextService = HelpTextService;
});


;
define('services/help-modal-service/help-texts/external-task-token-usage',["require", "exports", "../remove-multiline-indent"], function (require, exports, remove_multiline_indent_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExternalTaskTokenUsage = {
        title: 'How to use the results from previous tasks',
        message: remove_multiline_indent_1.removeMultilineIndent("\n  When a process is executed, it progresses through the different elements of the diagram and captures states along the way.\n  This progression and state accumulation can be visualized as a token moving along the execution's path in the diagram.\n\n  The data of previous tasks can be accessed through the token.\n\n  In order to do so make use of:\n\n  - `token.current` - To access the task that immediately preceded the script task.\n  - `token.history.<id-of-previous-task>` - To access a specific preceding task.\n\n  **Examples of using the token as a payload or topic for external tasks:**\n\n  1. To use the given user data from previous tasks, e.g. an account registration worker:\n\n      Topic: `EXAMPLE_TOPIC`\n\n      Payload:\n      ```javascript\n      {\n      firstName: token.history.AskForName.firstName,\n      lastName: token.history.AskForName.lastName,\n      rememberMyDetails: token.history.AskForConsent.rememberMyDetails,\n      sendMeLotsOfEmails: token.history.AskForConsent.sendMeLotsOfEmails\n      }\n      ```\n\n  2. To use the current token, the configuration could look like this:\n\n      Topic: `EXAMPLE_TOPIC`\n\n      Payload:\n      ```javascript\n      {\n        currentToken: token.current\n      }\n      ```\n\n  3. Custom Topics:\n\n      Topic: `token.current + 'my string'`\n\n      Payload: `EXAMPLE_PAYLOAD`\n\n    Note: String operations also work for payloads.\n   "),
    };
});


;
define('services/help-modal-service/help-texts/script-task-token-usage',["require", "exports", "../remove-multiline-indent"], function (require, exports, remove_multiline_indent_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ScriptTaskTokenUsage = {
        title: 'How to use the token',
        message: remove_multiline_indent_1.removeMultilineIndent("\n  When a process is executed, it progresses through the different elements of the diagram and captures states along the way.\n  This progression and state accumulation can be visualized as a token moving along the execution's path in the diagram.\n\n  The data of previous tasks can be accessed through the token.\n\n  In order to do so make use of:\n  - `token.current` - To access the task that immediately preceded the script task.\n  - `token.history.<id-of-previous-task>` - To access a specific preceding task.\n    "),
    };
});


;
define('services/help-modal-service/help-texts/usertask-usage',["require", "exports", "../remove-multiline-indent"], function (require, exports, remove_multiline_indent_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UserTaskUsage = {
        title: 'How to use user tasks',
        message: remove_multiline_indent_1.removeMultilineIndent("\n  When a process is executed, it progresses through the different elements of the diagram and captures states along the way.\n  This progression and state accumulation can be visualized as a token moving along the execution's path in the diagram.\n\n  The data of previous tasks can be accessed through the token.\n  In order to do so make use of:\n\n  - `token.current` - To access the task that immediately preceded the script task.\n  - `token.history.<id-of-previous-task>` - To access a specific preceding task.\n\n  To use user tasks you must add one or more form fields to the task.\n\n  **The form fields have different types, such as:**\n\n  - Text: Shows an input field for texts\n  - Integer: Shows an input field for numbers\n  - Decimal: Shows an input field for decimal number\n  - Truth value: Shows a checkbox, especially if the user task is a `confirm` control\n  - Date: Shows an input field for dates\n  - Enumeration: Shows a dropdown list\n  - Custom\n\n  **Each form field also has the following properties:**\n\n  - ID: The form field's ID. Can be used to access the form field through the token\n  - Label: The displayed name of the form field\n  - Default Value: The default value of the form field\n\n  The values for `label` and `default value` can be anything.\n  However, you can also use token expressions.\n\n  **Example:**\n\n  We have a task with the ID `Default_Checked_Task` that returns an object with a property called `checked` that is true or false.\n\n  A form field of type `Truth Value` gets the default value property `${token.history.Default_Checked_Task.checked}`.\n  The check box will now be checked, when `Default_Checked_Task.checked` equals `true` . Otherwise, it will not be checked.\n\n\n  **Attaching a confirmation dialog:**\n\n  A confirmation dialog can be used to ask the user a question. These dialogues come with a `decline` and `proceed` option, by which the user can either proceed or decline the task.\n  A simple example is a user task for displaying some terms of usage, where the user is asked `Do you accept our terms and condition?`\n\n  To add a confirmation dialog, add a property named `preferredControl` to the user task and assign the value `confirm`.\n\n  If the user task is a confirmation dialog, you can use the first `Truth Value` form field to configure your text and question.\n  It must be set as the `Default Value` property.\n  "),
    };
});


;
define('services/help-modal-service/index',["require", "exports", "./help-modal-service"], function (require, exports, help_modal_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function configure(config) {
        config.container.registerSingleton('HelpModalService', help_modal_service_1.HelpModalService);
    }
    exports.configure = configure;
});


;
define('services/help-modal-service/remove-multiline-indent',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function removeMultilineIndent(text) {
        var lines = text.split('\n');
        var firstLine = lines[0] === '' ? lines[1] : lines[0];
        var indent = firstLine.length - firstLine.trimLeft().length;
        var removeIndentRegex = new RegExp("^( {" + indent + "})");
        return lines
            .map(function (line) { return line.replace(removeIndentRegex, ''); })
            .join('\n')
            .trim();
    }
    exports.removeMultilineIndent = removeMultilineIndent;
});


;
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define('services/is-running-in-electron-module/is-running-in-electron.module',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function isRunningInElectron() {
        return Boolean(window.nodeRequire);
    }
    exports.isRunningInElectron = isRunningInElectron;
    function isRunningAsDevelop() {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!isRunningInElectron) {
                    return [2, false];
                }
                return [2, new Promise(function (resolve) {
                        var ipcRenderer = window.nodeRequire('electron').ipcRenderer;
                        ipcRenderer.once('isDevelop', function (event, isDevelop) {
                            resolve(isDevelop);
                        });
                        ipcRenderer.send('isDevelop');
                    })];
            });
        });
    }
    exports.isRunningAsDevelop = isRunningAsDevelop;
});


;
define('services/notification-service/index',["require", "exports", "./notification.service"], function (require, exports, notification_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function configure(config) {
        config.container.registerSingleton('NotificationService', notification_service_1.NotificationService);
    }
    exports.configure = configure;
});


;
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('services/notification-service/notification.service',["require", "exports", "aurelia-dependency-injection", "aurelia-event-aggregator", "toastr", "../../contracts/index"], function (require, exports, aurelia_dependency_injection_1, aurelia_event_aggregator_1, toastr_1, index_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    toastr_1 = __importDefault(toastr_1);
    var NotificationService = (function () {
        function NotificationService(eventAggregator) {
            var _this = this;
            this.savedNotifications = [];
            this.eventAggregator = eventAggregator;
            this.eventAggregator.subscribeOnce('router:navigation:complete', function () {
                _this.setToastrInstance(toastr_1.default);
            });
        }
        NotificationService.prototype.showNotification = function (type, message, options) {
            var notification = {
                type: type,
                message: message,
                nonDisappearing: false,
                options: options,
            };
            this.queueOrDisplay(notification);
        };
        NotificationService.prototype.showNonDisappearingNotification = function (type, message, options) {
            var notification = {
                type: type,
                message: message,
                nonDisappearing: true,
                options: options,
            };
            this.queueOrDisplay(notification);
        };
        NotificationService.prototype.queueOrDisplay = function (notification) {
            if (this.toastrInstance === undefined) {
                this.savedNotifications.push(notification);
                return;
            }
            this.publishNotificationToToastr(notification);
        };
        NotificationService.prototype.setToastrInstance = function (toastrInstance) {
            this.toastrInstance = toastrInstance;
            this.toastrInstance.options = {
                positionClass: 'toast-bottom-left',
            };
            this.initializeToastr();
            for (var _i = 0, _a = this.savedNotifications; _i < _a.length; _i++) {
                var notification = _a[_i];
                this.publishNotificationToToastr(notification);
            }
            this.savedNotifications = [];
        };
        NotificationService.prototype.publishNotificationToToastr = function (notification) {
            var toastrOptions = this.mapOptionsToToastrOptions(notification);
            switch (notification.type) {
                case index_1.NotificationType.SUCCESS:
                    this.toastrInstance.success(notification.message, undefined, toastrOptions);
                    break;
                case index_1.NotificationType.ERROR:
                    this.toastrInstance.error(notification.message, undefined, toastrOptions);
                    break;
                case index_1.NotificationType.INFO:
                    this.toastrInstance.info(notification.message, undefined, toastrOptions);
                    break;
                case index_1.NotificationType.WARNING:
                    this.toastrInstance.warning(notification.message, undefined, toastrOptions);
                    break;
                default:
                    break;
            }
        };
        NotificationService.prototype.initializeToastr = function () {
            this.toastrInstance.options.preventDuplicates = true;
        };
        NotificationService.prototype.mapOptionsToToastrOptions = function (notification) {
            if (notification.nonDisappearing) {
                return __assign({ closeButton: true, closeOnHover: false, timeOut: -1 }, notification.options);
            }
            return notification.options;
        };
        NotificationService = __decorate([
            aurelia_dependency_injection_1.inject(aurelia_event_aggregator_1.EventAggregator),
            __metadata("design:paramtypes", [aurelia_event_aggregator_1.EventAggregator])
        ], NotificationService);
        return NotificationService;
    }());
    exports.NotificationService = NotificationService;
});


;
define('services/pagination-module/pagination.module',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function applyPagination(list, offset, limit) {
        var endValue = limit > 0 ? Math.min(offset + limit, list.length) : list.length;
        return list.slice(offset, endValue);
    }
    exports.applyPagination = applyPagination;
});


;
define('services/process-engine-version-module/process-engine-version.module',["require", "exports", "semver"], function (require, exports, semver_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function processEngineSupportsPagination(processEngineVersion) {
        if (!processEngineVersion) {
            throw Error("'" + processEngineVersion + "' is not a valid ProcesEngine version.");
        }
        var processEngineVersionWithPaginationSupport = '9.0.0';
        return compareVersions(processEngineVersion, processEngineVersionWithPaginationSupport);
    }
    exports.processEngineSupportsPagination = processEngineSupportsPagination;
    function processEngineSupportsCronjobEvents(processEngineVersion) {
        if (!processEngineVersion) {
            throw Error("'" + processEngineVersion + "' is not a valid ProcesEngine version.");
        }
        var processEngineVersionWithCronjobEventSupport = '9.0.0';
        return compareVersions(processEngineVersion, processEngineVersionWithCronjobEventSupport);
    }
    exports.processEngineSupportsCronjobEvents = processEngineSupportsCronjobEvents;
    function processEngineSupportsCronjobs(processEngineVersion) {
        if (!processEngineVersion) {
            throw Error("'" + processEngineVersion + "' is not a valid ProcesEngine version.");
        }
        var processEngineVersionWithCronjobSupport = '8.4.0';
        return compareVersions(processEngineVersion, processEngineVersionWithCronjobSupport);
    }
    exports.processEngineSupportsCronjobs = processEngineSupportsCronjobs;
    function compareVersions(processEngineVersion, allowedVersion) {
        var indexOfReleaseChannel = processEngineVersion.indexOf('-');
        var processEngineIsStable = indexOfReleaseChannel === -1;
        var versionWithoutReleaseChannel = processEngineIsStable
            ? processEngineVersion
            : processEngineVersion.slice(0, indexOfReleaseChannel);
        var solutionEntryPEVersion = new semver_1.SemVer(versionWithoutReleaseChannel);
        var allowedProcessEngineVersion = new semver_1.SemVer(allowedVersion);
        return solutionEntryPEVersion.compare(allowedProcessEngineVersion) >= 0;
    }
});


;
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('services/release-channel-service/release-channel.service',["require", "exports", "electron-is-dev", "../../contracts/index"], function (require, exports, electron_is_dev_1, index_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    electron_is_dev_1 = __importDefault(electron_is_dev_1);
    var ReleaseChannel = (function () {
        function ReleaseChannel(version) {
            this.version = version;
        }
        ReleaseChannel.prototype.isDev = function () {
            return electron_is_dev_1.default;
        };
        ReleaseChannel.prototype.isAlpha = function () {
            return this.version.includes('alpha');
        };
        ReleaseChannel.prototype.isBeta = function () {
            return this.version.includes('beta');
        };
        ReleaseChannel.prototype.isStable = function () {
            return !this.isDev() && !this.isAlpha() && !this.isBeta();
        };
        ReleaseChannel.prototype.getName = function () {
            if (this.isDev()) {
                return 'dev';
            }
            if (this.isAlpha()) {
                return 'alpha';
            }
            if (this.isBeta()) {
                return 'beta';
            }
            return 'stable';
        };
        ReleaseChannel.prototype.getVersion = function () {
            if (this.isDev()) {
                return index_1.StudioVersion.Dev;
            }
            if (this.isAlpha()) {
                return index_1.StudioVersion.Alpha;
            }
            if (this.isBeta()) {
                return index_1.StudioVersion.Beta;
            }
            return index_1.StudioVersion.Stable;
        };
        return ReleaseChannel;
    }());
    exports.default = ReleaseChannel;
});


;
define('services/save-diagram-service/index',["require", "exports", "./save-diagram.service"], function (require, exports, save_diagram_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function configure(config) {
        config.container.registerSingleton('SaveDiagramService', save_diagram_service_1.SaveDiagramService);
    }
    exports.configure = configure;
});


;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('services/save-diagram-service/save-diagram.service',["require", "exports", "aurelia-event-aggregator", "aurelia-framework", "aurelia-router", "../../contracts/index", "../../environment", "../notification-service/notification.service", "../solution-explorer-services/open-diagrams-solution-explorer.service", "../solution-service/solution.service", "../solution-explorer-services/open-diagram-state.service", "../solution-is-remote-solution-module/solution-is-remote-solution.module", "../is-running-in-electron-module/is-running-in-electron.module"], function (require, exports, aurelia_event_aggregator_1, aurelia_framework_1, aurelia_router_1, index_1, environment_1, notification_service_1, open_diagrams_solution_explorer_service_1, solution_service_1, open_diagram_state_service_1, solution_is_remote_solution_module_1, is_running_in_electron_module_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    environment_1 = __importDefault(environment_1);
    var SaveDiagramService = (function () {
        function SaveDiagramService(eventAggregator, notificationService, openDiagramService, solutionService, router, openDiagramStateService) {
            this.isSaving = false;
            this.eventAggregator = eventAggregator;
            this.notificationService = notificationService;
            this.openDiagramService = openDiagramService;
            this.solutionService = solutionService;
            this.router = router;
            this.openDiagramStateService = openDiagramStateService;
            if (is_running_in_electron_module_1.isRunningInElectron()) {
                this.ipcRenderer = window.nodeRequire('electron').ipcRenderer;
            }
        }
        SaveDiagramService.prototype.saveDiagram = function (solutionToSaveTo, diagramToSave, xml) {
            return __awaiter(this, void 0, void 0, function () {
                var savingTargetIsRemoteSolution, diagramIsUnsavedDiagram, diagramState, error_1;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (this.isSaving) {
                                return [2];
                            }
                            this.isSaving = true;
                            savingTargetIsRemoteSolution = solution_is_remote_solution_module_1.solutionIsRemoteSolution(solutionToSaveTo.uri);
                            if (savingTargetIsRemoteSolution) {
                                setTimeout(function () {
                                    _this.isSaving = false;
                                }, 500);
                                return [2];
                            }
                            diagramIsUnsavedDiagram = diagramToSave.uri.startsWith('about:open-diagrams');
                            if (!diagramIsUnsavedDiagram) return [3, 2];
                            this.isSaving = false;
                            return [4, this.saveDiagramAs(solutionToSaveTo, diagramToSave, xml)];
                        case 1:
                            _a.sent();
                            return [2];
                        case 2:
                            _a.trys.push([2, 4, , 5]);
                            diagramToSave.xml = xml;
                            this.openDiagramStateService.setDiagramChange(diagramToSave.uri, {
                                change: 'save',
                                xml: xml,
                            });
                            return [4, solutionToSaveTo.service.saveDiagram(diagramToSave)];
                        case 3:
                            _a.sent();
                            diagramState = this.openDiagramStateService.loadDiagramState(diagramToSave.uri);
                            if (diagramState !== null) {
                                diagramState.metadata.isChanged = false;
                                this.openDiagramStateService.updateDiagramState(diagramToSave.uri, diagramState);
                            }
                            this.eventAggregator.publish(environment_1.default.events.diagramWasSaved, diagramToSave.uri);
                            return [3, 5];
                        case 4:
                            error_1 = _a.sent();
                            this.notificationService.showNotification(index_1.NotificationType.ERROR, "Unable to save the file: " + error_1);
                            setTimeout(function () {
                                _this.isSaving = false;
                            }, 500);
                            throw error_1;
                        case 5:
                            setTimeout(function () {
                                _this.isSaving = false;
                            }, 500);
                            return [2];
                    }
                });
            });
        };
        SaveDiagramService.prototype.saveDiagramAs = function (solutionToSaveTo, diagramToSave, xml, path) {
            return __awaiter(this, void 0, void 0, function () {
                var isRemoteSolution, pathIsSet, pathToSaveTo, _a, error_2, diagramIsUnsaved, lastIndexOfSlash, lastIndexOfBackSlash, indexBeforeFilename, filename, temporaryDiagramName, diagram, diagramState, diagramChange, previousDiagramsState, previousDiagramHasState, error_3, _b, alreadyOpenedDiagram;
                var _this = this;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            isRemoteSolution = solution_is_remote_solution_module_1.solutionIsRemoteSolution(diagramToSave.uri);
                            if (isRemoteSolution || this.isSaving) {
                                return [2];
                            }
                            this.isSaving = true;
                            pathIsSet = path !== undefined;
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 5, , 6]);
                            if (!pathIsSet) return [3, 2];
                            _a = path;
                            return [3, 4];
                        case 2: return [4, this.getPathToSaveTo()];
                        case 3:
                            _a = _c.sent();
                            _c.label = 4;
                        case 4:
                            pathToSaveTo = _a;
                            return [3, 6];
                        case 5:
                            error_2 = _c.sent();
                            this.isSaving = false;
                            throw error_2;
                        case 6:
                            diagramIsUnsaved = diagramToSave.uri.startsWith('about:open-diagrams');
                            if (diagramIsUnsaved) {
                                lastIndexOfSlash = pathToSaveTo.lastIndexOf('/');
                                lastIndexOfBackSlash = pathToSaveTo.lastIndexOf('\\');
                                indexBeforeFilename = Math.max(lastIndexOfSlash, lastIndexOfBackSlash) + 1;
                                filename = pathToSaveTo.slice(indexBeforeFilename, pathToSaveTo.length).replace('.bpmn', '');
                                temporaryDiagramName = diagramToSave.uri.replace('about:open-diagrams/', '').replace('.bpmn', '');
                                xml = xml.replace(new RegExp(temporaryDiagramName, 'g'), filename);
                            }
                            diagram = {
                                name: diagramToSave.name,
                                id: diagramToSave.id,
                                uri: diagramToSave.uri,
                                xml: xml,
                            };
                            _c.label = 7;
                        case 7:
                            _c.trys.push([7, 9, , 10]);
                            this.openDiagramStateService.saveDiagramState(pathToSaveTo, diagram.xml, undefined, undefined, false, {
                                change: 'save',
                                xml: xml,
                            });
                            return [4, solutionToSaveTo.service.saveDiagram(diagram, pathToSaveTo)];
                        case 8:
                            _c.sent();
                            diagramState = this.openDiagramStateService.loadDiagramState(pathToSaveTo);
                            if (diagramState !== null) {
                                diagramState.metadata.isChanged = false;
                                this.openDiagramStateService.updateDiagramState(pathToSaveTo, diagramState);
                            }
                            diagramChange = { change: 'save', xml: diagram.xml };
                            previousDiagramsState = this.openDiagramStateService.loadDiagramState(diagram.uri);
                            previousDiagramHasState = previousDiagramsState !== null;
                            if (previousDiagramHasState) {
                                previousDiagramsState.metadata.change = diagramChange;
                                this.openDiagramStateService.updateDiagramState(path, previousDiagramsState);
                            }
                            else {
                                this.openDiagramStateService.saveDiagramState(path, diagram.xml, undefined, undefined, false);
                            }
                            return [3, 10];
                        case 9:
                            error_3 = _c.sent();
                            this.notificationService.showNotification(index_1.NotificationType.ERROR, "Unable to save the file: " + error_3 + ".");
                            setTimeout(function () {
                                _this.isSaving = false;
                            }, 500);
                            throw error_3;
                        case 10: return [4, this.openDiagramService.closeDiagram(diagramToSave)];
                        case 11:
                            _c.sent();
                            this.solutionService.removeOpenDiagramByUri(diagramToSave.uri);
                            _c.label = 12;
                        case 12:
                            _c.trys.push([12, 14, , 18]);
                            return [4, this.openDiagramService.openDiagram(pathToSaveTo, solutionToSaveTo.identity)];
                        case 13:
                            diagramToSave = _c.sent();
                            this.solutionService.addOpenDiagram(diagramToSave);
                            return [3, 18];
                        case 14:
                            _b = _c.sent();
                            return [4, this.openDiagramService.getOpenedDiagramByURI(pathToSaveTo)];
                        case 15:
                            alreadyOpenedDiagram = _c.sent();
                            return [4, this.openDiagramService.closeDiagram(alreadyOpenedDiagram)];
                        case 16:
                            _c.sent();
                            return [4, this.openDiagramService.openDiagram(pathToSaveTo, solutionToSaveTo.identity)];
                        case 17:
                            diagramToSave = _c.sent();
                            return [3, 18];
                        case 18:
                            xml = diagramToSave.xml;
                            solutionToSaveTo = this.solutionService.getSolutionEntryForUri('about:open-diagrams');
                            return [4, this.router.navigateToRoute('design', {
                                    diagramName: diagramToSave.name,
                                    diagramUri: diagramToSave.uri,
                                    solutionUri: solutionToSaveTo.uri,
                                })];
                        case 19:
                            _c.sent();
                            this.eventAggregator.publish(environment_1.default.events.diagramWasSaved, diagramToSave.uri);
                            setTimeout(function () {
                                _this.isSaving = false;
                            }, 500);
                            return [2];
                    }
                });
            });
        };
        SaveDiagramService.prototype.getPathToSaveTo = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2, new Promise(function (resolve, reject) {
                            _this.ipcRenderer.once('save_diagram_as', function (event, savePath) { return __awaiter(_this, void 0, void 0, function () {
                                var noPathSelected;
                                return __generator(this, function (_a) {
                                    noPathSelected = savePath === null;
                                    if (noPathSelected) {
                                        reject(new Error('No path was selected.'));
                                        return [2];
                                    }
                                    resolve(savePath);
                                    return [2];
                                });
                            }); });
                            _this.ipcRenderer.send('open_save-diagram-as_dialog');
                        })];
                });
            });
        };
        SaveDiagramService = __decorate([
            aurelia_framework_1.inject(aurelia_event_aggregator_1.EventAggregator, notification_service_1.NotificationService, 'OpenDiagramService', 'SolutionService', aurelia_router_1.Router, open_diagram_state_service_1.OpenDiagramStateService),
            __metadata("design:paramtypes", [aurelia_event_aggregator_1.EventAggregator,
                notification_service_1.NotificationService,
                open_diagrams_solution_explorer_service_1.OpenDiagramsSolutionExplorerService,
                solution_service_1.SolutionService,
                aurelia_router_1.Router,
                open_diagram_state_service_1.OpenDiagramStateService])
        ], SaveDiagramService);
        return SaveDiagramService;
    }());
    exports.SaveDiagramService = SaveDiagramService;
});


;
define('services/solution-explorer-services/diagram-trash-folder.service',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DiagramTrashFolderService = (function () {
        function DiagramTrashFolderService() {
            this.diagramTrashFolder = null;
        }
        DiagramTrashFolderService.prototype.getDiagramTrashFolder = function () {
            var serviceIsNotInitialized = this.diagramTrashFolder === null;
            if (serviceIsNotInitialized) {
                this.initializeDiagramTrashFolder();
            }
            return this.diagramTrashFolder;
        };
        DiagramTrashFolderService.prototype.initializeDiagramTrashFolder = function () {
            var path = window.nodeRequire('path');
            var os = window.nodeRequire('os');
            var fs = window.nodeRequire('fs');
            var homeFolder = os.homedir();
            var platformIsMacOS = os.platform() === 'darwin';
            if (platformIsMacOS) {
                var systemTrashFolder = path.join(homeFolder, '.Trash');
                this.diagramTrashFolder = systemTrashFolder;
                return;
            }
            var bpmnStudioFolder = path.join(homeFolder, '.bpmn-studio');
            var deletedDiagramsFolder = path.join(bpmnStudioFolder, 'deleted-diagrams');
            var bpmnStudioFolderDoesNotExist = !fs.existsSync(bpmnStudioFolder);
            if (bpmnStudioFolderDoesNotExist) {
                fs.mkdirSync(bpmnStudioFolder);
            }
            var deletedDiagramsFolderDoesNotExist = !fs.existsSync(deletedDiagramsFolder);
            if (deletedDiagramsFolderDoesNotExist) {
                fs.mkdirSync(deletedDiagramsFolder);
            }
            this.diagramTrashFolder = deletedDiagramsFolder;
        };
        return DiagramTrashFolderService;
    }());
    exports.DiagramTrashFolderService = DiagramTrashFolderService;
});


;
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define('services/solution-explorer-services/index',["require", "exports", "@process-engine/solutionexplorer.repository.filesystem", "@process-engine/solutionexplorer.repository.management_api", "@process-engine/solutionexplorer.service", "./diagram-trash-folder.service", "./open-diagrams-solution-explorer.service", "./open-diagram-state.service", "./solution-explorer-service-factory", "../is-running-in-electron-module/is-running-in-electron.module"], function (require, exports, solutionexplorer_repository_filesystem_1, solutionexplorer_repository_management_api_1, solutionexplorer_service_1, diagram_trash_folder_service_1, open_diagrams_solution_explorer_service_1, open_diagram_state_service_1, solution_explorer_service_factory_1, is_running_in_electron_module_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function configure(config) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                registerManagementApi(config.container);
                config.container.registerSingleton('SolutionExplorerServiceFactory', solution_explorer_service_factory_1.SolutionExplorerServiceFactory);
                config.container.registerSingleton('DiagramTrashFolderService', diagram_trash_folder_service_1.DiagramTrashFolderService);
                config.container.registerSingleton('OpenDiagramStateService', open_diagram_state_service_1.OpenDiagramStateService);
                if (is_running_in_electron_module_1.isRunningInElectron()) {
                    registerFileSystem(config.container);
                    config.container.registerSingleton('OpenDiagramService', open_diagrams_solution_explorer_service_1.OpenDiagramsSolutionExplorerService);
                }
                return [2];
            });
        });
    }
    exports.configure = configure;
    function registerFileSystem(container) {
        var diagramTrashFolderService = new diagram_trash_folder_service_1.DiagramTrashFolderService();
        var diagramTrashFolder = diagramTrashFolderService.getDiagramTrashFolder();
        var fileSystemRepository = new solutionexplorer_repository_filesystem_1.SolutionExplorerFileSystemRepository(diagramTrashFolder);
        var filesystemSolutionexplorerService = new solutionexplorer_service_1.SolutionExplorerService(fileSystemRepository);
        container.registerInstance('SolutionExplorerServiceFileSystem', filesystemSolutionexplorerService);
    }
    function registerManagementApi(container) {
        var httpClient = container.get('HttpFetchClient');
        var managementApiRepository = new solutionexplorer_repository_management_api_1.SolutionExplorerManagementApiRepository(httpClient);
        var solutionexplorerService = new solutionexplorer_service_1.SolutionExplorerService(managementApiRepository);
        container.registerInstance('SolutionExplorerServiceManagementApi_NotRefreshing', solutionexplorerService);
    }
});


;
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('services/solution-explorer-services/open-diagram-state.service',["require", "exports", "node-uuid"], function (require, exports, node_uuid_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    node_uuid_1 = __importDefault(node_uuid_1);
    var OpenDiagramStateService = (function () {
        function OpenDiagramStateService() {
            this.diagramStatesChangedCallbacks = new Map();
        }
        OpenDiagramStateService.prototype.saveDiagramState = function (uri, xml, location, selectedElements, isChanged, change) {
            var diagramState = {
                data: {
                    xml: xml,
                },
                metadata: {
                    location: location,
                    selectedElements: selectedElements,
                    isChanged: isChanged,
                    change: change,
                },
            };
            var key = this.getLocalStorageKeyByUri(uri);
            var value = JSON.stringify(diagramState);
            window.localStorage.setItem(key, value);
            this.fireOnDiagramStatesChanged();
        };
        OpenDiagramStateService.prototype.updateDiagramState = function (uri, diagramState) {
            var key = this.getLocalStorageKeyByUri(uri);
            var value = JSON.stringify(diagramState);
            window.localStorage.setItem(key, value);
            this.fireOnDiagramStatesChanged();
        };
        OpenDiagramStateService.prototype.loadDiagramState = function (uri) {
            var key = this.getLocalStorageKeyByUri(uri);
            var dataFromLocalStorage = window.localStorage.getItem(key);
            var noDataFound = dataFromLocalStorage === null;
            if (noDataFound) {
                return null;
            }
            var diagramState = JSON.parse(dataFromLocalStorage);
            return diagramState;
        };
        OpenDiagramStateService.prototype.loadDiagramStateForAllDiagrams = function () {
            var diagramStateList = [];
            var uriForAllExistingDiagramStates = this.getUrisForAllDiagramStates();
            for (var _i = 0, uriForAllExistingDiagramStates_1 = uriForAllExistingDiagramStates; _i < uriForAllExistingDiagramStates_1.length; _i++) {
                var uri = uriForAllExistingDiagramStates_1[_i];
                var diagramState = this.loadDiagramState(uri);
                var diagramStateListEntry = {
                    uri: uri,
                    diagramState: diagramState,
                };
                diagramStateList.push(diagramStateListEntry);
            }
            return diagramStateList;
        };
        OpenDiagramStateService.prototype.deleteDiagramState = function (uri) {
            var key = this.getLocalStorageKeyByUri(uri);
            window.localStorage.removeItem(key);
        };
        OpenDiagramStateService.prototype.onDiagramStatesChanged = function (callback) {
            var callbackId = node_uuid_1.default.v4();
            this.diagramStatesChangedCallbacks.set(callbackId, callback);
            return callbackId;
        };
        OpenDiagramStateService.prototype.removeOnDiagramStatesChangedListener = function (callbackId) {
            this.diagramStatesChangedCallbacks.delete(callbackId);
        };
        OpenDiagramStateService.prototype.setDiagramChange = function (uri, change) {
            var diagramState = this.loadDiagramState(uri);
            if (diagramState === null) {
                throw new Error("Diagram " + uri + " has no state.");
            }
            diagramState.metadata.change = change;
            this.updateDiagramState(uri, diagramState);
        };
        OpenDiagramStateService.prototype.fireOnDiagramStatesChanged = function () {
            this.diagramStatesChangedCallbacks.forEach(function (callback) {
                callback();
            });
        };
        OpenDiagramStateService.prototype.getUrisForAllDiagramStates = function () {
            var _this = this;
            var allLocalStorageKeys = Object.keys(localStorage);
            var localStorageKeysForAllDiagramStates = allLocalStorageKeys.filter(function (key) {
                return key.startsWith(_this.getLocalStorageKeyByUri(''));
            });
            var urisForAllDiagramStates = localStorageKeysForAllDiagramStates.map(function (localStorageKey) {
                return localStorageKey.replace(_this.getLocalStorageKeyByUri(''), '');
            });
            return urisForAllDiagramStates;
        };
        OpenDiagramStateService.prototype.getLocalStorageKeyByUri = function (uri) {
            return "Open Diagram: " + uri;
        };
        return OpenDiagramStateService;
    }());
    exports.OpenDiagramStateService = OpenDiagramStateService;
});


;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define('services/solution-explorer-services/open-diagrams-solution-explorer.service',["require", "exports", "aurelia-framework", "aurelia-event-aggregator", "fs", "../../contracts/index", "./open-diagram-state.service", "./solution-explorer-service-factory", "../notification-service/notification.service", "../../environment"], function (require, exports, aurelia_framework_1, aurelia_event_aggregator_1, fs, index_1, open_diagram_state_service_1, solution_explorer_service_factory_1, notification_service_1, environment_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    fs = __importStar(fs);
    environment_1 = __importDefault(environment_1);
    var OpenDiagramsSolutionExplorerService = (function () {
        function OpenDiagramsSolutionExplorerService(validationService, serviceFactory, solutionService, openDiagramStateService, notificationService, eventAggregator) {
            this.uriOfOpenDiagramService = 'about:open-diagrams';
            this.nameOfOpenDiagramService = 'Open Diagrams';
            this.openedDiagrams = [];
            this.validationService = validationService;
            this.setSolutionExplorer(serviceFactory);
            this.solutionService = solutionService;
            this.openDiagramStateService = openDiagramStateService;
            this.notificationService = notificationService;
            this.eventAggregator = eventAggregator;
        }
        OpenDiagramsSolutionExplorerService.prototype.getOpenedDiagrams = function () {
            return this.openedDiagrams;
        };
        OpenDiagramsSolutionExplorerService.prototype.getOpenedDiagramByURI = function (uri) {
            var indexOfDiagram = this.findIndexOfDiagramWithURI(uri);
            var diagramWasNotFound = indexOfDiagram < 0;
            if (diagramWasNotFound) {
                return null;
            }
            var diagramWithURI = this.openedDiagrams[indexOfDiagram];
            return diagramWithURI;
        };
        OpenDiagramsSolutionExplorerService.prototype.openSolution = function (pathspec, identity) {
            return Promise.resolve();
        };
        OpenDiagramsSolutionExplorerService.prototype.loadSolution = function () {
            var solution = {
                diagrams: this.openedDiagrams,
                name: this.nameOfOpenDiagramService,
                uri: this.uriOfOpenDiagramService,
            };
            return Promise.resolve(solution);
        };
        OpenDiagramsSolutionExplorerService.prototype.openDiagram = function (uri, identity) {
            return __awaiter(this, void 0, void 0, function () {
                var uriIsNoBpmnFile, uriAlreadyOpened, lastIndexOfSlash, lastIndexOfBackSlash, indexBeforeFilename, filepath, filename, filenameWithoutEnding, diagram, isUnsavedDiagram, diagramState, diagramHasNoState, diagramIsStoredOnFilesystem, isSaving_1;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            uriIsNoBpmnFile = !uri.endsWith('.bpmn');
                            if (uriIsNoBpmnFile) {
                                throw new Error('File is no BPMN file.');
                            }
                            uriAlreadyOpened = this.findIndexOfDiagramWithURI(uri) >= 0;
                            if (uriAlreadyOpened) {
                                throw new Error('This diagram is already opened.');
                            }
                            lastIndexOfSlash = uri.lastIndexOf('/');
                            lastIndexOfBackSlash = uri.lastIndexOf('\\');
                            indexBeforeFilename = Math.max(lastIndexOfSlash, lastIndexOfBackSlash);
                            filepath = uri.substring(0, indexBeforeFilename);
                            filename = uri.replace(/^.*[\\/]/, '');
                            filenameWithoutEnding = filename.replace('.bpmn', '');
                            isUnsavedDiagram = filepath === 'about:open-diagrams';
                            if (!isUnsavedDiagram) return [3, 1];
                            diagramState = this.openDiagramStateService.loadDiagramState(uri);
                            diagram = {
                                name: filenameWithoutEnding,
                                xml: diagramState.data.xml,
                                uri: uri,
                            };
                            return [3, 5];
                        case 1: return [4, this.solutionExplorerToOpenDiagrams.openSolution(filepath, identity)];
                        case 2:
                            _a.sent();
                            return [4, this.solutionExplorerToOpenDiagrams.loadDiagram(filenameWithoutEnding, filepath)];
                        case 3:
                            diagram = _a.sent();
                            diagramHasNoState = this.openDiagramStateService.loadDiagramState(uri) === null;
                            if (diagramHasNoState) {
                                this.openDiagramStateService.saveDiagramState(uri, diagram.xml, undefined, [], false);
                            }
                            return [4, this.validationService
                                    .validate(diagram.xml)
                                    .isXML()
                                    .isBPMN()
                                    .throwIfError()];
                        case 4:
                            _a.sent();
                            _a.label = 5;
                        case 5:
                            diagramIsStoredOnFilesystem = !diagram.uri.startsWith('about:open-diagrams');
                            if (diagramIsStoredOnFilesystem) {
                                isSaving_1 = false;
                                this.watchFile(diagram.uri, function (event, previousFilepath, newFilename) { return __awaiter(_this, void 0, void 0, function () {
                                    var diagramState, diagramHasState, change, diagramWasChangedByStudio, change, xml, diagramWasChangedByStudio, diagramWasNotChangedOutsideOfTheStudio, diagramWasRecoveredToTheStateWhenItWasInitiallyOpened, diagramIsUnchangedInStudio, diagramWasChangedOutsideOfTheStudio, diagramBaseName, notificationMessage;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                if (isSaving_1) {
                                                    return [2];
                                                }
                                                if (!(this.savingPromise !== undefined)) return [3, 2];
                                                return [4, this.savingPromise];
                                            case 1:
                                                _a.sent();
                                                this.savingPromise = undefined;
                                                _a.label = 2;
                                            case 2:
                                                isSaving_1 = true;
                                                diagramState = this.openDiagramStateService.loadDiagramState(diagram.uri);
                                                diagramHasState = diagramState !== null;
                                                if (diagramHasState) {
                                                    if (event === 'rename') {
                                                        change = diagramState.metadata.change;
                                                        diagramWasChangedByStudio = change !== undefined && change.change === 'rename';
                                                        if (diagramWasChangedByStudio) {
                                                            isSaving_1 = false;
                                                            return [2];
                                                        }
                                                    }
                                                    if (event === 'change' || event === 'restore') {
                                                        change = diagramState.metadata.change;
                                                        xml = fs.readFileSync(diagram.uri, 'utf8');
                                                        diagramWasChangedByStudio = (change !== undefined && change.change === 'save' && change.xml === xml) ||
                                                            (change !== undefined && change.change === 'create');
                                                        diagramWasNotChangedOutsideOfTheStudio = diagram.xml === xml;
                                                        if (diagramWasChangedByStudio) {
                                                            isSaving_1 = false;
                                                            return [2];
                                                        }
                                                        if (diagramWasNotChangedOutsideOfTheStudio) {
                                                            diagramWasRecoveredToTheStateWhenItWasInitiallyOpened = diagramState.data.xml !== xml;
                                                            if (diagramWasRecoveredToTheStateWhenItWasInitiallyOpened) {
                                                                if (!diagramState.metadata.isChanged) {
                                                                    diagramState.data.xml = xml;
                                                                    this.openDiagramStateService.updateDiagramState(diagram.uri, diagramState);
                                                                    this.eventAggregator.publish(environment_1.default.events.diagramNeedsToBeUpdated);
                                                                }
                                                            }
                                                            isSaving_1 = false;
                                                            return [2];
                                                        }
                                                        diagramIsUnchangedInStudio = !diagramState.metadata.isChanged;
                                                        diagramWasChangedOutsideOfTheStudio = !diagramWasNotChangedOutsideOfTheStudio;
                                                        if (diagramWasChangedOutsideOfTheStudio && diagramIsUnchangedInStudio) {
                                                            diagramState.data.xml = xml;
                                                            this.openDiagramStateService.updateDiagramState(diagram.uri, diagramState);
                                                            this.eventAggregator.publish(environment_1.default.events.diagramNeedsToBeUpdated);
                                                            isSaving_1 = false;
                                                            return [2];
                                                        }
                                                    }
                                                    diagramState.metadata.isChanged = true;
                                                    this.openDiagramStateService.updateDiagramState(diagram.uri, diagramState);
                                                }
                                                this.eventAggregator.publish(environment_1.default.events.diagramChangedOutsideTheStudio, previousFilepath);
                                                diagramBaseName = previousFilepath.split('/').reverse()[0];
                                                notificationMessage = this.getDiagramChangedOutsideOfTheStudioMessageByEvent(diagramBaseName, event);
                                                this.notificationService.showNonDisappearingNotification(index_1.NotificationType.WARNING, notificationMessage);
                                                isSaving_1 = false;
                                                return [2];
                                        }
                                    });
                                }); });
                            }
                            this.openedDiagrams.push(diagram);
                            return [2, diagram];
                    }
                });
            });
        };
        OpenDiagramsSolutionExplorerService.prototype.closeDiagram = function (diagram) {
            var index = this.findIndexOfDiagramWithURI(diagram.uri);
            var diagramWasNotOpened = index === -1;
            if (diagramWasNotOpened) {
                return undefined;
            }
            this.openedDiagrams.splice(index, 1);
            this.openDiagramStateService.deleteDiagramState(diagram.uri);
            this.unwatchFile(diagram.uri);
            return Promise.resolve();
        };
        OpenDiagramsSolutionExplorerService.prototype.renameDiagram = function (diagram, newName) {
            throw new Error('Method not supported.');
        };
        OpenDiagramsSolutionExplorerService.prototype.deleteDiagram = function (diagram) {
            throw new Error('Method not supported.');
        };
        OpenDiagramsSolutionExplorerService.prototype.loadDiagram = function (diagramName) {
            return __awaiter(this, void 0, void 0, function () {
                var diagramToLoad;
                return __generator(this, function (_a) {
                    diagramToLoad = this.openedDiagrams.find(function (diagram) {
                        return diagram.name === diagramName;
                    });
                    return [2, diagramToLoad];
                });
            });
        };
        OpenDiagramsSolutionExplorerService.prototype.saveSolution = function (solution, pathspec) {
            throw new Error('Method not supported.');
        };
        OpenDiagramsSolutionExplorerService.prototype.saveDiagram = function (diagram, pathspec) {
            this.savingPromise = this.solutionExplorerToOpenDiagrams.saveDiagram(diagram, pathspec);
            return this.savingPromise;
        };
        OpenDiagramsSolutionExplorerService.prototype.openDiagramFromSolution = function (diagramUri, identity) {
            return __awaiter(this, void 0, void 0, function () {
                var openedDiagram;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.openDiagram(diagramUri, identity)];
                        case 1:
                            openedDiagram = _a.sent();
                            this.solutionService.addOpenDiagram(openedDiagram);
                            return [2, openedDiagram];
                    }
                });
            });
        };
        OpenDiagramsSolutionExplorerService.prototype.watchFile = function (filepath, callback) {
            this.solutionExplorerToOpenDiagrams.watchFile(filepath, callback);
        };
        OpenDiagramsSolutionExplorerService.prototype.unwatchFile = function (filepath) {
            this.solutionExplorerToOpenDiagrams.unwatchFile(filepath);
        };
        OpenDiagramsSolutionExplorerService.prototype.watchSolution = function (callback) {
            throw new Error('Method not supported.');
        };
        OpenDiagramsSolutionExplorerService.prototype.unwatchSolution = function (eventListenerId) {
            throw new Error('Method not supported.');
        };
        OpenDiagramsSolutionExplorerService.prototype.findIndexOfDiagramWithURI = function (uri) {
            var index = this.openedDiagrams.findIndex(function (diagram) {
                return diagram.uri === uri;
            });
            return index;
        };
        OpenDiagramsSolutionExplorerService.prototype.getDiagramChangedOutsideOfTheStudioMessageByEvent = function (diagramName, event) {
            if (event === 'rename') {
                return "The diagram \"" + diagramName + "\" was moved/renamed on disk.";
            }
            if (event === 'change') {
                return "The diagram \"" + diagramName + "\" was changed on disk.";
            }
            if (event === 'restore') {
                return "The diagram \"" + diagramName + "\" was restored on disk.";
            }
            return undefined;
        };
        OpenDiagramsSolutionExplorerService.prototype.setSolutionExplorer = function (serviceFactory) {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4, serviceFactory.newFileSystemSolutionExplorer()];
                        case 1:
                            _a.solutionExplorerToOpenDiagrams = _b.sent();
                            return [2];
                    }
                });
            });
        };
        OpenDiagramsSolutionExplorerService = __decorate([
            aurelia_framework_1.inject('DiagramValidationService', 'SolutionExplorerServiceFactory', 'SolutionService', 'OpenDiagramStateService', 'NotificationService', aurelia_event_aggregator_1.EventAggregator),
            __metadata("design:paramtypes", [Object, solution_explorer_service_factory_1.SolutionExplorerServiceFactory, Object, open_diagram_state_service_1.OpenDiagramStateService,
                notification_service_1.NotificationService,
                aurelia_event_aggregator_1.EventAggregator])
        ], OpenDiagramsSolutionExplorerService);
        return OpenDiagramsSolutionExplorerService;
    }());
    exports.OpenDiagramsSolutionExplorerService = OpenDiagramsSolutionExplorerService;
});


;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define('services/solution-explorer-services/solution-explorer-service-factory',["require", "exports", "aurelia-framework", "@process-engine/solutionexplorer.repository.filesystem", "@process-engine/solutionexplorer.repository.management_api", "@process-engine/solutionexplorer.service", "./diagram-trash-folder.service"], function (require, exports, aurelia_framework_1, solutionexplorer_repository_filesystem_1, solutionexplorer_repository_management_api_1, solutionexplorer_service_1, diagram_trash_folder_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var SolutionExplorerServiceFactory = (function () {
        function SolutionExplorerServiceFactory(httpClient, diagramTrashFolderService) {
            this.httpClient = httpClient;
            this.diagramTrashFolderService = diagramTrashFolderService;
        }
        SolutionExplorerServiceFactory.prototype.newFileSystemSolutionExplorer = function () {
            return __awaiter(this, void 0, void 0, function () {
                var diagramTrashFolder, fileSystemRepository, createdService;
                return __generator(this, function (_a) {
                    diagramTrashFolder = this.diagramTrashFolderService.getDiagramTrashFolder();
                    fileSystemRepository = new solutionexplorer_repository_filesystem_1.SolutionExplorerFileSystemRepository(diagramTrashFolder);
                    createdService = new solutionexplorer_service_1.SolutionExplorerService(fileSystemRepository);
                    return [2, createdService];
                });
            });
        };
        SolutionExplorerServiceFactory.prototype.newManagementApiSolutionExplorer = function () {
            return __awaiter(this, void 0, void 0, function () {
                var managementApiRepository, createdService;
                return __generator(this, function (_a) {
                    managementApiRepository = new solutionexplorer_repository_management_api_1.SolutionExplorerManagementApiRepository(this.httpClient);
                    createdService = new solutionexplorer_service_1.SolutionExplorerService(managementApiRepository);
                    return [2, createdService];
                });
            });
        };
        SolutionExplorerServiceFactory = __decorate([
            aurelia_framework_1.inject('HttpFetchClient', 'DiagramTrashFolderService'),
            __metadata("design:paramtypes", [Object, diagram_trash_folder_service_1.DiagramTrashFolderService])
        ], SolutionExplorerServiceFactory);
        return SolutionExplorerServiceFactory;
    }());
    exports.SolutionExplorerServiceFactory = SolutionExplorerServiceFactory;
});


;
define('services/solution-is-remote-solution-module/solution-is-remote-solution.module',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var httpRegex = /^(http|https):\/\/.+/i;
    function solutionIsRemoteSolution(solutionUri) {
        return httpRegex.test(solutionUri);
    }
    exports.solutionIsRemoteSolution = solutionIsRemoteSolution;
});


;
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define('services/solution-service/index',["require", "exports", "./solution.service"], function (require, exports, solution_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function configure(config) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                config.container.registerSingleton('SolutionService', solution_service_1.SolutionService);
                return [2];
            });
        });
    }
    exports.configure = configure;
});


;
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define('services/solution-service/solution.service',["require", "exports", "aurelia-framework", "../solution-explorer-services/solution-explorer-service-factory", "../solution-is-remote-solution-module/solution-is-remote-solution.module"], function (require, exports, aurelia_framework_1, solution_explorer_service_factory_1, solution_is_remote_solution_module_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var SolutionService = (function () {
        function SolutionService(serviceFactory) {
            var _this = this;
            this.allSolutionEntries = [];
            this.persistedEntries = [];
            this.persistedOpenDiagrams = [];
            this.serviceFactory = serviceFactory;
            var openedSolutions = this.getSolutionFromLocalStorage();
            this.persistedOpenDiagrams = this.getOpenDiagramsFromLocalStorage();
            var openedSolutionsAreNotSet = openedSolutions === null;
            if (openedSolutionsAreNotSet) {
                return;
            }
            openedSolutions.forEach(function (solution) { return __awaiter(_this, void 0, void 0, function () {
                var solutionIsRemote, _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            solutionIsRemote = solution_is_remote_solution_module_1.solutionIsRemoteSolution(solution.uri);
                            _a = solution;
                            if (!solutionIsRemote) return [3, 2];
                            return [4, this.serviceFactory.newManagementApiSolutionExplorer()];
                        case 1:
                            _b = _c.sent();
                            return [3, 4];
                        case 2: return [4, this.serviceFactory.newFileSystemSolutionExplorer()];
                        case 3:
                            _b = _c.sent();
                            _c.label = 4;
                        case 4:
                            _a.service = _b;
                            return [2];
                    }
                });
            }); });
            this.persistedEntries = openedSolutions;
            this.allSolutionEntries = this.allSolutionEntries.concat(openedSolutions);
        }
        SolutionService.prototype.addSolutionEntry = function (solutionEntry) {
            var solutionWithSameUri = this.allSolutionEntries.find(function (entry) {
                var entryHasSameUri = entry.uri === solutionEntry.uri;
                return entryHasSameUri;
            });
            var solutionIsAlreadyOpenend = solutionWithSameUri !== undefined;
            if (solutionIsAlreadyOpenend) {
                this.removeSolutionEntryByUri(solutionWithSameUri.uri);
            }
            this.allSolutionEntries.push(solutionEntry);
            this.persistSolutionsInLocalStorage();
        };
        SolutionService.prototype.getPersistedEntries = function () {
            return this.persistedEntries;
        };
        SolutionService.prototype.getSolutionEntryForUri = function (uri) {
            var solutionEntry = this.allSolutionEntries.find(function (entry) {
                var entryUriIsSearchedUri = entry.uri === uri;
                return entryUriIsSearchedUri;
            });
            return solutionEntry;
        };
        SolutionService.prototype.getRemoteSolutionEntries = function () {
            var remoteEntries = this.allSolutionEntries.filter(function (entry) {
                return solution_is_remote_solution_module_1.solutionIsRemoteSolution(entry.uri);
            });
            return remoteEntries;
        };
        SolutionService.prototype.getAllSolutionEntries = function () {
            return this.allSolutionEntries;
        };
        SolutionService.prototype.removeSolutionEntryByUri = function (uri) {
            var solutionToRemove = this.allSolutionEntries.find(function (entry) {
                return entry.uri === uri;
            });
            var solutionNotFound = solutionToRemove === undefined;
            if (solutionNotFound) {
                return;
            }
            this.allSolutionEntries.splice(this.allSolutionEntries.indexOf(solutionToRemove), 1);
            this.persistSolutionsInLocalStorage();
        };
        SolutionService.prototype.addOpenDiagram = function (diagramToAdd) {
            var indexOfDiagram = this.persistedOpenDiagrams.findIndex(function (diagram) { return diagram.uri === diagramToAdd.uri; });
            var diagramIsPersisted = indexOfDiagram >= 0;
            if (diagramIsPersisted) {
                this.persistedOpenDiagrams[indexOfDiagram] = diagramToAdd;
            }
            else {
                this.persistedOpenDiagrams.push(diagramToAdd);
            }
            this.persistOpenDiagramsInLocalStorage();
        };
        SolutionService.prototype.removeOpenDiagramByUri = function (diagramUri) {
            var indexOfDiagramToRemove = this.persistedOpenDiagrams.findIndex(function (diagram) {
                return diagram.uri === diagramUri;
            });
            this.persistedOpenDiagrams.splice(indexOfDiagramToRemove, 1);
            this.persistOpenDiagramsInLocalStorage();
        };
        SolutionService.prototype.getOpenDiagrams = function () {
            return this.persistedOpenDiagrams;
        };
        SolutionService.prototype.persistSolutionsInLocalStorage = function () {
            var entriesToPersist = this.allSolutionEntries.filter(function (entry) {
                var entryIsNotOpenDiagramSolution = entry.uri !== 'about:open-diagrams';
                return entryIsNotOpenDiagramSolution;
            });
            var openDiagramSolution = this.allSolutionEntries.find(function (entry) {
                return entry.uri === 'about:open-diagrams';
            });
            if (openDiagramSolution) {
                window.localStorage.setItem('openDiagramSolutionCollapseState', JSON.stringify(openDiagramSolution.hidden));
            }
            window.localStorage.setItem('openedSolutions', JSON.stringify(entriesToPersist));
            this.persistedEntries = entriesToPersist;
        };
        SolutionService.prototype.getSolutionFromLocalStorage = function () {
            var openedSolutions = JSON.parse(window.localStorage.getItem('openedSolutions'));
            return openedSolutions;
        };
        SolutionService.prototype.getOpenDiagramsFromLocalStorage = function () {
            var openDiagrams = JSON.parse(window.localStorage.getItem('OpenDiagrams'));
            var openDiagramsWerePersisted = openDiagrams !== null;
            return openDiagramsWerePersisted ? openDiagrams : [];
        };
        SolutionService.prototype.persistOpenDiagramsInLocalStorage = function () {
            window.localStorage.setItem('OpenDiagrams', JSON.stringify(this.persistedOpenDiagrams));
        };
        SolutionService = __decorate([
            aurelia_framework_1.inject('SolutionExplorerServiceFactory'),
            __metadata("design:paramtypes", [solution_explorer_service_factory_1.SolutionExplorerServiceFactory])
        ], SolutionService);
        return SolutionService;
    }());
    exports.SolutionService = SolutionService;
});


;
define('services/user-config-service/index',["require", "exports", "./user-config.service"], function (require, exports, user_config_service_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function configure(config) {
        config.container.registerSingleton('UserConfigService', user_config_service_1.UserConfigService);
    }
    exports.configure = configure;
});


;
define('services/user-config-service/user-config.service',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var defaultConfig = {
        'design.activate_linter': true,
    };
    var UserConfigService = (function () {
        function UserConfigService() {
        }
        UserConfigService.prototype.getUserConfig = function (key) {
            var currentConfig = this.getCurrentConfig();
            return currentConfig[key];
        };
        UserConfigService.prototype.setUserConfig = function (key, value) {
            var customConfig = JSON.parse(window.localStorage.getItem('customUserConfig'));
            if (!customConfig) {
                customConfig = {};
            }
            customConfig[key] = value;
            window.localStorage.setItem('customUserConfig', JSON.stringify(customConfig));
        };
        UserConfigService.prototype.persistUserConfig = function (userConfig) {
            window.localStorage.setItem('customUserConfig', JSON.stringify(userConfig));
        };
        UserConfigService.prototype.getCurrentConfig = function () {
            var customConfig = JSON.parse(window.localStorage.getItem('customUserConfig'));
            return Object.assign({}, defaultConfig, customConfig);
        };
        UserConfigService.prototype.getDefaultConfig = function () {
            return defaultConfig;
        };
        return UserConfigService;
    }());
    exports.UserConfigService = UserConfigService;
});


;
define('modules/design/diagram-detail',['modules/design/diagram-detail/index'],function(m){return m;});
define('modules/fetch-http-client',['modules/fetch-http-client/index'],function(m){return m;});
define('modules/inspect/dashboard',['modules/inspect/dashboard/index'],function(m){return m;});
define('modules/inspect/heatmap',['modules/inspect/heatmap/index'],function(m){return m;});
define('modules/inspect/inspect-process-instance',['modules/inspect/inspect-process-instance/index'],function(m){return m;});
define('modules/inspect/token-viewer',['modules/inspect/token-viewer/index'],function(m){return m;});
define('modules/live-execution-tracker',['modules/live-execution-tracker/index'],function(m){return m;});
define('modules/management-api_client',['modules/management-api_client/index'],function(m){return m;});
define('services/authentication-service',['services/authentication-service/index'],function(m){return m;});
define('services/diagram-creation-service',['services/diagram-creation-service/index'],function(m){return m;});
define('services/diagram-validation-service',['services/diagram-validation-service/index'],function(m){return m;});
define('services/dynamic-ui-service',['services/dynamic-ui-service/index'],function(m){return m;});
define('services/notification-service',['services/notification-service/index'],function(m){return m;});
define('services/solution-explorer-services',['services/solution-explorer-services/index'],function(m){return m;});
define('services/solution-service',['services/solution-service/index'],function(m){return m;});
define('services/user-config-service',['services/user-config-service/index'],function(m){return m;});
//# sourceMappingURL=app-bundle.js.map